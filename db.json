{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/ooj-1.gif","path":"imgs/ooj-1.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/ooj-2.gif","path":"imgs/ooj-2.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/ooj-3.gif","path":"imgs/ooj-3.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/ooj-4.gif","path":"imgs/ooj-4.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/source-code-pro.css","path":"source-code-pro/source-code-pro.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/bg2014100801.jpg","path":"imgs/javascript/bg2014100801.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/bg2014100803.png","path":"imgs/javascript/bg2014100803.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/bg2014100802.png","path":"imgs/javascript/bg2014100802.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/macrotask-microtask.jpg","path":"imgs/javascript/macrotask-microtask.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/browser-lifecycle.jpeg","path":"imgs/javascript/browser-lifecycle.jpeg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/streaming.png","path":"imgs/javascript/streaming.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-app-config.png","path":"imgs/miniapp/miniapp-app-config.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug2.jpeg","path":"imgs/miniapp/miniapp-debug2.jpeg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-fileintro.png","path":"imgs/miniapp/miniapp-fileintro.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug3.jpeg","path":"imgs/miniapp/miniapp-debug3.jpeg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-mvvm1.png","path":"imgs/miniapp/miniapp-mvvm1.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-view-object.png","path":"imgs/miniapp/miniapp-view-object.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-route-demo.png","path":"imgs/miniapp/miniapp-route-demo.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-mvvm2.png","path":"imgs/miniapp/miniapp-mvvm2.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/zmlmf.jpeg","path":"imgs/zmlmf.jpeg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/css/css-box.png","path":"imgs/css/css-box.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/browser-lifecycle-en.png","path":"imgs/javascript/browser-lifecycle-en.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/react-lifecycle.jpg","path":"imgs/javascript/react-lifecycle.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug4.jpeg","path":"imgs/miniapp/miniapp-debug4.jpeg","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Black.eot","path":"source-code-pro/EOT/SourceCodePro-Black.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-BlackIt.eot","path":"source-code-pro/EOT/SourceCodePro-BlackIt.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Bold.eot","path":"source-code-pro/EOT/SourceCodePro-Bold.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-BoldIt.eot","path":"source-code-pro/EOT/SourceCodePro-BoldIt.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-ExtraLight.eot","path":"source-code-pro/EOT/SourceCodePro-ExtraLight.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-It.eot","path":"source-code-pro/EOT/SourceCodePro-It.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-ExtraLightIt.eot","path":"source-code-pro/EOT/SourceCodePro-ExtraLightIt.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Light.eot","path":"source-code-pro/EOT/SourceCodePro-Light.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-LightIt.eot","path":"source-code-pro/EOT/SourceCodePro-LightIt.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Medium.eot","path":"source-code-pro/EOT/SourceCodePro-Medium.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Regular.eot","path":"source-code-pro/EOT/SourceCodePro-Regular.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-MediumIt.eot","path":"source-code-pro/EOT/SourceCodePro-MediumIt.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Semibold.eot","path":"source-code-pro/EOT/SourceCodePro-Semibold.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-SemiboldIt.eot","path":"source-code-pro/EOT/SourceCodePro-SemiboldIt.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-BlackIt.otf","path":"source-code-pro/OTF/SourceCodePro-BlackIt.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-BoldIt.otf","path":"source-code-pro/OTF/SourceCodePro-BoldIt.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-ExtraLightIt.otf","path":"source-code-pro/OTF/SourceCodePro-ExtraLightIt.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-It.otf","path":"source-code-pro/OTF/SourceCodePro-It.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-LightIt.otf","path":"source-code-pro/OTF/SourceCodePro-LightIt.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-MediumIt.otf","path":"source-code-pro/OTF/SourceCodePro-MediumIt.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-SemiboldIt.otf","path":"source-code-pro/OTF/SourceCodePro-SemiboldIt.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/vue-lifecycle.png","path":"imgs/javascript/vue-lifecycle.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Black.otf","path":"source-code-pro/OTF/SourceCodePro-Black.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-ExtraLight.otf","path":"source-code-pro/OTF/SourceCodePro-ExtraLight.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Bold.otf","path":"source-code-pro/OTF/SourceCodePro-Bold.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Light.otf","path":"source-code-pro/OTF/SourceCodePro-Light.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Medium.otf","path":"source-code-pro/OTF/SourceCodePro-Medium.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Regular.otf","path":"source-code-pro/OTF/SourceCodePro-Regular.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Semibold.otf","path":"source-code-pro/OTF/SourceCodePro-Semibold.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-BlackIt.ttf","path":"source-code-pro/TTF/SourceCodePro-BlackIt.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-BoldIt.ttf","path":"source-code-pro/TTF/SourceCodePro-BoldIt.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-ExtraLightIt.ttf","path":"source-code-pro/TTF/SourceCodePro-ExtraLightIt.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-It.ttf","path":"source-code-pro/TTF/SourceCodePro-It.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-LightIt.ttf","path":"source-code-pro/TTF/SourceCodePro-LightIt.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-MediumIt.ttf","path":"source-code-pro/TTF/SourceCodePro-MediumIt.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-SemiboldIt.ttf","path":"source-code-pro/TTF/SourceCodePro-SemiboldIt.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-It.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-It.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/javascript/eventloop.png","path":"imgs/javascript/eventloop.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Black.ttf","path":"source-code-pro/TTF/SourceCodePro-Black.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Bold.ttf","path":"source-code-pro/TTF/SourceCodePro-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-ExtraLight.ttf","path":"source-code-pro/TTF/SourceCodePro-ExtraLight.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Light.ttf","path":"source-code-pro/TTF/SourceCodePro-Light.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Regular.ttf","path":"source-code-pro/TTF/SourceCodePro-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Semibold.ttf","path":"source-code-pro/TTF/SourceCodePro-Semibold.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Black.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-Black.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-It.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-It.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Light.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-Light.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","path":"source-code-pro/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Medium.ttf","path":"source-code-pro/TTF/SourceCodePro-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","path":"source-code-pro/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Black.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-Black.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Bold.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-Bold.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-It.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-It.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-LightIt.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-LightIt.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Medium.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-Medium.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Light.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-Light.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Regular.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-Regular.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Black.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-Black.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Semibold.otf.woff","path":"source-code-pro/WOFF/OTF/SourceCodePro-Semibold.otf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Bold.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-Bold.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-It.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-It.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Light.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-Light.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Medium.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-Medium.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Regular.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","path":"source-code-pro/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug1.png","path":"imgs/miniapp/miniapp-debug1.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1514377595000},{"_id":"themes/landscape/.DS_Store","hash":"592b98325c360ec8858d410ccc3dde1cd033a0e1","modified":1518055366000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1514280699000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1514280699000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1514280699000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1514280699000},{"_id":"themes/landscape/_config.yml","hash":"5a62c44c4156909a031d67ade1046736a5f8a17c","modified":1516181587000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1514280699000},{"_id":"source/_drafts/hello-page.md","hash":"69e2b3b9a445faefaa62e4a45415df044ef6e0a5","modified":1514280699000},{"_id":"source/about/index.md","hash":"0d103a15a17df27e2e4af49bfc94bb3e9fe1a25b","modified":1515494852000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1514280699000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1514280699000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1514280699000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1514280699000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1514280699000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1514280699000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1514280699000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1514280699000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1514280699000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1514280699000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1514280699000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1514280699000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1514280699000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1514280699000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1514280699000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1514280699000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1514280699000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1514280699000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1514280699000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1514280699000},{"_id":"themes/landscape/source/.DS_Store","hash":"76aa864fa4b54ee0e53a8b84a18a46e48008f67a","modified":1518139480000},{"_id":"source/_posts/csharp/hello-csharp.md","hash":"bab300b5dbd083d0bd41f892358e5ac65b032393","modified":1515124620000},{"_id":"source/_posts/css/hello-world.md","hash":"f004906ef3609aeb60fd4874390a8c9e3e06c5a1","modified":1515377787000},{"_id":"source/_posts/css/position-sticky.md","hash":"f727dc5528d67af9bdbcd4f23e427dca3e1d9b56","modified":1515382031000},{"_id":"source/_posts/h5/aria-role.md","hash":"4015f4db91c51b4831dcace6e6eb20fe7d4b9055","modified":1516176457000},{"_id":"source/_posts/h5/links-fe.md","hash":"ea54848d169d984d6041ca746cc71aad291eb5ed","modified":1516248668000},{"_id":"source/_posts/git/how-to-use-git.md","hash":"51c27d54d298a328ce51bb556cb5973e3f7c0697","modified":1515124617000},{"_id":"source/_posts/h5/pro-note-one.md","hash":"999ea0937f418f6c7011f962ef157cc398e17a6c","modified":1516155995000},{"_id":"source/_posts/h5/terminal-adapter.md","hash":"bf3d9e11f74ecaa1fcb02e00460258e8740d4b67","modified":1516678229000},{"_id":"source/_posts/itm/backup.md","hash":"5c5686663a7b957ec2a9f67823c18dcf163d0ec7","modified":1515593879000},{"_id":"source/_posts/itpmp/lesson1.md","hash":"760f74760d769233d1771c9ece18ac980b07f1d4","modified":1515124527000},{"_id":"source/_posts/javascript/Code-Snippet-ONE.md","hash":"6aa4e2f6474d9095d0e21b5bcd8c10e8e7c0658c","modified":1515316284000},{"_id":"source/_posts/javascript/cli-gulp-guide.md","hash":"d2ccb4c311dd47e305cda729c80e806fc02650cf","modified":1516675973000},{"_id":"source/_posts/javascript/OOJ-TWO.md","hash":"056f2275dcaf0fc2740003a2edb071b84be99203","modified":1515124608000},{"_id":"source/_posts/javascript/OOJ-ONE.md","hash":"13a18993dbaa81d8a838b3cbbd7a4cc96a2f5432","modified":1515124593000},{"_id":"source/_posts/javascript/OOJ-THREE.md","hash":"2a714fe46eb5fc393e12bbacbc4f8a2262220420","modified":1515124601000},{"_id":"source/_posts/javascript/code-snippet-dialog.md","hash":"fadf0081f586d53b2916b90e7113b66ac1f7cd5a","modified":1516181181000},{"_id":"source/_posts/javascript/code-snippet-queue.md","hash":"0cd1cdadea9b2452749b1d02c57ee35c90c8388f","modified":1516157153000},{"_id":"source/_posts/javascript/diff-async-defer.md","hash":"03e18c90d910b7e9020cbff7d6235690ca03c4fe","modified":1516171694000},{"_id":"source/_posts/javascript/diff-call-apply.md","hash":"c26f65307aee296560428b77bda8d1799da1ad12","modified":1516171564000},{"_id":"source/_posts/javascript/interview-four.md","hash":"ea57f159d4f6dedab0bf66bbb25c4f38cb95a0b5","modified":1515405263000},{"_id":"source/_posts/javascript/interview-one.md","hash":"f47063529f3138bdd8425476ca6d9b79b1b1af86","modified":1515983607000},{"_id":"source/_posts/javascript/interview-three.md","hash":"9076f27aaa70c44572628eb70a26d2058c5eeddc","modified":1515405278000},{"_id":"source/_posts/javascript/interview-two.md","hash":"145460fc1e51b08d9e27e22ae2561f6d7bc551d3","modified":1515405275000},{"_id":"source/_posts/javascript/javascript-concepts.md","hash":"0dd2cbc5b602fa2abe7bf1a8d1ae3e6813b73b22","modified":1517562419000},{"_id":"source/_posts/javascript/modules-one.md","hash":"0de2d69d03d45735e0ab5c6901e44b46a1d80e39","modified":1515124587000},{"_id":"source/_posts/javascript/modules-two.md","hash":"ad1ac847ef4bfc0c95a383e75c9f9cc737abe7ac","modified":1515134756000},{"_id":"source/_posts/javascript/news-2017.md","hash":"3528e8ca1b15811ff9279371e2e8864d604fabbe","modified":1516777646000},{"_id":"source/_posts/javascript/plugins-one.md","hash":"63a3c2ea39ed2dffe7154ee829227b872f688e34","modified":1516169965000},{"_id":"source/_posts/javascript/principle-eventloop.md","hash":"e771cc4537b90a9b7cb4f83caddeef7833ff18a3","modified":1517799493000},{"_id":"source/_posts/javascript/react-lifecycle.md","hash":"9fe8b15248ed8a31c649722c476084660d830fc9","modified":1516169970000},{"_id":"source/_posts/javascript/viewport-rem-one.md","hash":"7a0133b42fdaecf8bd1f8f50ee38c095fd748423","modified":1516169674000},{"_id":"source/_posts/javascript/vue-lifecycle.md","hash":"6c427232b952cda422b7398c5a0fe47be6c7418d","modified":1516169974000},{"_id":"source/_posts/lesson/fe-start.md","hash":"ddb7ccf68adc5b2a509cfe8f508dba70b9a5f972","modified":1517799739000},{"_id":"source/_posts/links/fe.md","hash":"432066bf4e54e58f14c4f6f6b299b5fddc2ba083","modified":1517799738000},{"_id":"source/_posts/macos/setting-path.md","hash":"a56c235564a662b74516a853072c03497dde5a9b","modified":1516674662000},{"_id":"source/_posts/sql/postgresql-one.md","hash":"0445ab3772d90e2ad679da14df3d9a7b22de7b6f","modified":1515644483000},{"_id":"source/_posts/miniapp/how-to-study.md","hash":"8f3f0e467e267e0d1316fbcc00cfb61cb6bb637b","modified":1518140513000},{"_id":"source/_posts/web/how-to-use-webworker.md","hash":"85206e956b1da989340179cb964a469d07a3a4e3","modified":1516173922000},{"_id":"source/_posts/web/performance-one.md","hash":"3d87ae4ff836b3f60ff47a82be85d6c652c0e26d","modified":1516173102000},{"_id":"source/_posts/web/performance-preload-images.md","hash":"647cad5ae72b71b933a7b6c010df25e49758c454","modified":1516174841000},{"_id":"source/_posts/web/security-one.md","hash":"662598831ccf438b11e059f4946d88b1971e753b","modified":1515593810000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1514280699000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1514280699000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1514280699000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1514280699000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"af08a6a4957ad88e8eea457b3f54812085bd4608","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"b83ea7365c1ef89ddf2dad40f492a9415485c7ee","modified":1515124569000},{"_id":"themes/landscape/layout/_partial/baidu-analytics.ejs","hash":"3ac40e649c5ea940f635db5d8ef00d1b571dfacc","modified":1514986406000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"345e8a75a3e0ef6b652967018c7396e429bca96b","modified":1516172191000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"3074fd732dc9ed69a95ecb97dd04a908e0faa18b","modified":1514374909000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1514280699000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"40ff19098521e556c55c66575e7cf16e20eb30a0","modified":1516002166000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"0a8de18e3749cb488f24ac50b68bb112f75032d6","modified":1514355828000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1514280699000},{"_id":"themes/landscape/source/imgs/.DS_Store","hash":"a0cb0de99a50207558cbcd4ea077de8318c83358","modified":1518139485000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1514280699000},{"_id":"themes/landscape/source/imgs/ooj-1.gif","hash":"ca81d82ec8823f7ffefaf37d71227482221643e4","modified":1514355296000},{"_id":"themes/landscape/source/imgs/ooj-2.gif","hash":"31a3530c12a79b718664e3c233b94478af760a56","modified":1514355292000},{"_id":"themes/landscape/source/imgs/ooj-3.gif","hash":"6e94fe132149b30f9c9dc372755a69152af1e7d4","modified":1514355292000},{"_id":"themes/landscape/source/imgs/ooj-4.gif","hash":"24cfb25c0f15bd26c3bf077bb10bd47a47fc3d3a","modified":1514355292000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1514280699000},{"_id":"themes/landscape/source/source-code-pro/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515136125000},{"_id":"themes/landscape/source/source-code-pro/source-code-pro.css","hash":"81b8d1d5700f3364906839fc114a09ed7fcd6e60","modified":1490196494000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1514280699000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1516171841000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"b8980492dda75654c033ad7b1e16fa8acc059a98","modified":1514382306000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1514280699000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1514280699000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1514280699000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1514280699000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1514280699000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1514280699000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514280699000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1514280699000},{"_id":"themes/landscape/source/imgs/javascript/bg2014100801.jpg","hash":"bf2dd24f10a4a2a1efd16c30d2ea4bdac508c64c","modified":1517563109000},{"_id":"themes/landscape/source/imgs/javascript/bg2014100803.png","hash":"3d70f3625caf91da22c6ab7dc294e9e7e1559b2a","modified":1517563431000},{"_id":"themes/landscape/source/imgs/javascript/bg2014100802.png","hash":"991109df2ef5ae00d95568a69200baa1775ed399","modified":1517563283000},{"_id":"themes/landscape/source/imgs/javascript/macrotask-microtask.jpg","hash":"811fdac93af77d0b1e18fc436609a9aecdd2fae7","modified":1517799428000},{"_id":"themes/landscape/source/imgs/javascript/browser-lifecycle.jpeg","hash":"e060143dc2247b5fcd7c427c43df3e8ae2b794a9","modified":1516170643000},{"_id":"themes/landscape/source/imgs/javascript/streaming.png","hash":"05dda9eeb47d957353700af6eef2a22344321734","modified":1516171479000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-app-config.png","hash":"67b0fb18f9def301413ab20bf2b7eca4d44b2af2","modified":1518055371000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug2.jpeg","hash":"08aa3decdd0caee6a179aceb36a1b863c47fb17c","modified":1518062410000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-fileintro.png","hash":"c83f27e4df014ddfeaf3c92b8d685b952de6d748","modified":1518054752000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug3.jpeg","hash":"0ea3919c6bf986cbe27f0ec1eaf90a94b37c4863","modified":1518062401000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-mvvm1.png","hash":"14934283aa119fd87349c2844ee317834cd426f1","modified":1518063319000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-view-object.png","hash":"31895b9f05eecf8f2bf241dd1928804959ee9d3c","modified":1518075074000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-route-demo.png","hash":"93b13ea3e3c8cf1259d0a6753a6cc37d402726a4","modified":1518061462000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-mvvm2.png","hash":"24c21b73c3beb27ee95e13cc452871632d8a3cfd","modified":1518068518000},{"_id":"themes/landscape/source/imgs/zmlmf.jpeg","hash":"6c2115b7e9d9f52dfca9e8b46c4e6ad4d9847456","modified":1514372206000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1514280699000},{"_id":"themes/landscape/source/imgs/css/css-box.png","hash":"aa499b615264f6158a453eb30364d75ed708ec68","modified":1518139439000},{"_id":"themes/landscape/source/imgs/javascript/browser-lifecycle-en.png","hash":"ad39975f3f0a782be4d890011802b94d6c18ad85","modified":1516170992000},{"_id":"themes/landscape/source/imgs/javascript/react-lifecycle.jpg","hash":"4da0e553905cc8533d322d3c8781e621bd278613","modified":1516168918000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug4.jpeg","hash":"5efbaeca8713d76e88f1a40696a18166b279ad01","modified":1518062392000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Black.eot","hash":"22bc2d0e61e77fbfa9112a4a6470e8f53f378758","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-BlackIt.eot","hash":"364d45a44e1177de684af1b2cb31d9bcd5d40325","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Bold.eot","hash":"bad71fb3f9e9c9a0fa181b3d986d4ea94cfce3a4","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-BoldIt.eot","hash":"4545e08d20fda6113d7afd047af22c88c296a8eb","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-ExtraLight.eot","hash":"0a2d23e8df97b3bb19d35f12ed411de9ff1e6623","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-It.eot","hash":"bed2acb993c6c344fa65f6f9750d327ff9bdeadf","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-ExtraLightIt.eot","hash":"7c5938c00cfe5f015151e550b33b9af6a48ad265","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Light.eot","hash":"786c24838c854345cc3b611397981f8a1d207abf","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-LightIt.eot","hash":"deafcc22fa661e1459707abe0c1100672d1b617d","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Medium.eot","hash":"6844cc1781b1d5d92b586cc15541ddb840938a51","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Regular.eot","hash":"7ee6f61641f7d02d86bf64ba9b71ad6104a9e585","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-MediumIt.eot","hash":"ad23433160dd9bd8485b6280edf9f41485f9ff38","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-Semibold.eot","hash":"7b63188da5c86a9f83d2f6da16d4dd069c099543","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/EOT/SourceCodePro-SemiboldIt.eot","hash":"bfe3f1a84d114cc3099d5176369d4c4223061ab8","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-BlackIt.otf","hash":"293ba8016eb9df02d0fc65c504a312be5c17e2ee","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-BoldIt.otf","hash":"7395962790b6ccbda4aabc59f5ce592e2a1257c5","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-ExtraLightIt.otf","hash":"0a82adb46381bcfa4d1c2067a86bbc1e5b955a97","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-It.otf","hash":"69c6948aaf743b1d6101529c37612d5fb9df69fa","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-LightIt.otf","hash":"363bfaa3b8a3a9aaf71abba7b1abc45a53d12a08","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-MediumIt.otf","hash":"39a8adeb94f50522d5e2b8f06ea4fe62d4b5323c","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-SemiboldIt.otf","hash":"32f1bfd3599121d6b6737a4c99c8a926fb86384f","modified":1490196494000},{"_id":"themes/landscape/source/imgs/javascript/vue-lifecycle.png","hash":"245ed3bc3f4a0e1698faf640863a1271a3e8ad35","modified":1516169313000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Black.otf","hash":"a4a6a55fb4c41c9d5b02ddaee7a5a9b45a718dad","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-ExtraLight.otf","hash":"d7ab81f15bfcf0950ef476c8fe90646deec58094","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Bold.otf","hash":"747748585daf56d44f0926a009a3e814f2085d85","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Light.otf","hash":"5fab14eef11fc505b85cb86d54d469a87db1192e","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Medium.otf","hash":"747eade2bb1e45a3f8f0bc8a521a21ce563b8b28","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Regular.otf","hash":"af5b0dec2fd6f43086eb39eb1823bacd96d7d20f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/OTF/SourceCodePro-Semibold.otf","hash":"80f5846b38c0ec34abd71f5a8de174d8bc64b333","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-BlackIt.ttf","hash":"c32e10e954ea99e0dac6722f50a16c5deea07294","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-BoldIt.ttf","hash":"ae7aca1daa0455bca08cde71ef84145562a6ae8f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-ExtraLightIt.ttf","hash":"99355ed9f1a997019130712b840f1d33e7faa77f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-It.ttf","hash":"2f654fbd6552e14f18f4966f6bd9c35daedecf49","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-LightIt.ttf","hash":"d6df8b639daa36ef1d5cd54c8b7802bf6b9a25e8","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-MediumIt.ttf","hash":"21eb74ec1c05a982a7b6681961e166aeb1363c47","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-SemiboldIt.ttf","hash":"9d573041d09643fe1e210cd58bc324fa084f5fd6","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","hash":"23734345f7d335aa6c84e89e8e96a7dcb7a91c19","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","hash":"507a5cd68c9ee7a2624a9d484f86b3182a2163d1","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","hash":"4387814ef91dc015ef49aa2ff539c69aaed3b067","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-It.ttf.woff2","hash":"73b691c4e89855261bdd7d2b2faa8e617931a1d1","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","hash":"6090be945e8bab83d62906d27c8cb2af2168fda2","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","hash":"d52397566303312821a065c7aff1b25986b0f971","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","hash":"30ada1d42379b59861c2d7c165df5fc294ec5262","modified":1490196494000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1514280699000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1514280699000},{"_id":"themes/landscape/source/imgs/javascript/eventloop.png","hash":"a7131bb8d600c119a2ff1978be310b48dc498a21","modified":1517797892000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Black.ttf","hash":"d70a516a98774a2c3494e8f39760521d52f25a2e","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Bold.ttf","hash":"723d835c16bdba402779659f6139579e9ce9390b","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-ExtraLight.ttf","hash":"7c3846b00d360be4e936ee274ce8a12ebcdad9e6","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Light.ttf","hash":"d7fc752715036400dbed10db9d9395850c1df6ab","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Regular.ttf","hash":"2333214c1aefb2da838c998a59218ae98a6464e9","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Semibold.ttf","hash":"2c2e72fccd697d7c02bccff1419d264ac47828f2","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Black.otf.woff2","hash":"ffc7afd4815508f1a53c331bc582b0e2a9323c77","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","hash":"4b621d37c4916e97ff9f7b74a6cbb52e9561b237","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","hash":"729c396e7d9a21bae402cbf85f82c31bc1f86ca1","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","hash":"3c835049f43f8cc650b8a0e4139c2fa27f5d5480","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","hash":"c4f4bb5beca01ffe81647f556be581011e39560e","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","hash":"0da5d3a564450da564a00aaa9394b2157735005a","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-It.otf.woff2","hash":"7ba3f1b332b6735e919e915b7a900cc582763112","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","hash":"29414e46ab9b2761c2eac5a9597324b582bff422","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","hash":"59d2024c62d03190a071e9299a77c5a5f9049450","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","hash":"ef7291f67098d0d3bbb3a3fd6826efa289eb6d79","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Light.otf.woff2","hash":"bc4cdf8f3f4dc8ac82af2ef155f73bf95bc03b13","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","hash":"c6d73b325b79cab7833efbfb26345d987ef060d8","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","hash":"2a30d4ced4b07bd33657ae7816817f085d71be4e","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","hash":"726d7462624789f3aed45a6a76de17f075f2f169","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","hash":"191888a6aa2ae5f4716c942e5ea17c587b46530c","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/TTF/SourceCodePro-Medium.ttf","hash":"22522e0cf7e78c42df8aa415e9453baf087bcf17","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","hash":"8fb27f8c0c29a1ae970c96deec8542231bbd2474","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","hash":"e13b9b75dfaade4767de21d0d6716acc61f5aad5","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","hash":"3bebb4aee7dafe55862a507a762c4e3712274d82","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","hash":"13bc2d0f634acbd0cf8aa55285b8177ef5e76e5b","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","hash":"f6ae31b471c0ce2c2173a1281d1fb571629f25fb","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Black.otf.woff","hash":"424dc2968d4ba545b3192854e48a9ff0c348300f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","hash":"03c3835c29f6d6806a90e59b4af24dbd71b2f1a1","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Bold.otf.woff","hash":"d74ef79234c13a66420b231ed7bc935ae04308a0","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","hash":"1afecf94c26464ce6e78918693e123fa64320268","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","hash":"24590f33dc9a76d3a03423e89b3e35ceacc8089b","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-It.otf.woff","hash":"3b8d76f54585952203b36805b4a80c20a354af5f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","hash":"afede453c68f48385f07ae0564bef2ea4b1708cc","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-LightIt.otf.woff","hash":"fc8ef553db83a2ee3667bf6c6cbaa85f9ad6bbaa","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Medium.otf.woff","hash":"3278246a706bece4c74a2dd4954977dbd303ec8f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Light.otf.woff","hash":"bd09fce5b57e0882412c62dc12b7751af2081a89","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","hash":"f7ec183b221493ea44c19b8f7cbe66741302bf9f","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Regular.otf.woff","hash":"9e25ee1144dd02a3f0124bd20696dfad6d6e081c","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","hash":"f47a9cbfab298ce96c438770721df599cafb814b","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Black.ttf.woff","hash":"a763e1de0f20ca359b697b349217cd2fbc000cb9","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","hash":"d8c1535a988da7c073b49bf0d3d222bfdcbd43a7","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/OTF/SourceCodePro-Semibold.otf.woff","hash":"d4d2a66f05606b8ba90e78ac2d19073a68eef863","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Bold.ttf.woff","hash":"7d339fb8fa643ef8ad0ef06d9b98e857e3ad302e","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","hash":"1d530716d5ade092ceaddc6c0d30813246531880","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","hash":"4014884e8019749cf63b088be2228900b9fff9d0","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","hash":"7eda4f381be0a2a93c90e73f77ca5a8b3b9ab147","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-It.ttf.woff","hash":"f95d201633c55838a670e9f48bc84d6019199036","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Light.ttf.woff","hash":"daa249d465c7c66bcc627753906d3372fc033d9c","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","hash":"02d5e5f9ab52823bfa7e74ef8bd777d747054ce2","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Medium.ttf.woff","hash":"63a8bb7eb997463ebc2a82a2899a741277857755","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","hash":"b25418936b4af7b167dec5d63431955b13813a03","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","hash":"93bd79c7cc66ade917c9943b4a6703732402ee20","modified":1490196494000},{"_id":"themes/landscape/source/source-code-pro/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","hash":"e68c2f4919b4a8bd5a73fa4af516295b5b6a9783","modified":1490196494000},{"_id":"themes/landscape/source/imgs/miniapp/miniapp-debug1.png","hash":"43629146bc0a3bced8f6f9936445dd9ec05c0ffa","modified":1518061965000},{"_id":"public/atom.xml","hash":"9df13cb05790fcdb511dc65af43cc4bb3eec4742","modified":1518141069906},{"_id":"public/sitemap.xml","hash":"d48390a9b5e64912f47a1038699dca9774df81fb","modified":1518141070544},{"_id":"public/about/index.html","hash":"9262e7a9a557a0c19fcaf42e6f1c904264c0d6fa","modified":1518141070605},{"_id":"public/2018/02/08/miniapp/how-to-study/index.html","hash":"60c9c19df12d3dbd3d1cd802880000d3b21e0acd","modified":1518141070605},{"_id":"public/2018/02/02/javascript/javascript-concepts/index.html","hash":"933ab68cf9de84b5befddae84696e8f0cd004ad6","modified":1518141070605},{"_id":"public/2018/01/18/h5/links-fe/index.html","hash":"2413d4bc6b85b6f3784a908e96b2017013d100e7","modified":1518141070605},{"_id":"public/2018/01/17/h5/aria-role/index.html","hash":"067833762e4929eb36e3f256932caaac479965d4","modified":1518141070605},{"_id":"public/2018/01/11/sql/postgresql-one/index.html","hash":"0d165c341258de2b44c620d964e97df709481d1e","modified":1518141070605},{"_id":"public/2018/01/10/macos/setting-path/index.html","hash":"803f3c2b1ca3b5edf246c5416aa785be2d25fa05","modified":1518141070605},{"_id":"public/2018/01/08/javascript/interview-four/index.html","hash":"e38cc338f03acaa0b306aa7916b17b8560633a25","modified":1518141070606},{"_id":"public/2018/01/07/css/hello-world/index.html","hash":"ee0fc6ebdb0837d6c305de374fa655c91ef44ca8","modified":1518141070606},{"_id":"public/2018/01/04/itpmp/lesson1/index.html","hash":"2a24ae091ba903ade769f7c0e8bd267988baff78","modified":1518141070606},{"_id":"public/2017/12/30/javascript/news-2017/index.html","hash":"c9cc010f43fc8536a9ac1291b5c9ac121a5ff6ac","modified":1518141070606},{"_id":"public/2017/03/08/javascript/interview-three/index.html","hash":"44a9cf6d992f024dc4e08d71c340402091d49aa0","modified":1518141070606},{"_id":"public/2017/02/05/lesson/fe-start/index.html","hash":"07ff1e65063ce2e02ade8c26864098ad3726f8b6","modified":1518141070606},{"_id":"public/2017/01/08/javascript/interview-two/index.html","hash":"c3937ae9c0d95ea0b3a375f52510c344b6bb579b","modified":1518141070606},{"_id":"public/2016/11/23/h5/terminal-adapter/index.html","hash":"d8ab3c5cf1a71623933ca7a1913f11359ebf9d0d","modified":1518141070606},{"_id":"public/2016/11/17/javascript/vue-lifecycle/index.html","hash":"12d126788f1b8fe574e47dbd7dbe3ec9a2e86ccb","modified":1518141070606},{"_id":"public/2017/12/27/git/how-to-use-git/index.html","hash":"531d2d945a9a049cecbe24eed61733a674bf17b4","modified":1518141070606},{"_id":"public/2016/11/15/h5/pro-note-one/index.html","hash":"f4aca5b190d10a0df5a6b363d3671b650fe7edfe","modified":1518141070606},{"_id":"public/2016/11/15/javascript/plugins-one/index.html","hash":"2e1321fce7220a9dc018360de0a40cd2390c87d9","modified":1518141070606},{"_id":"public/2016/11/10/itm/backup/index.html","hash":"dcdbf36fa33aea76403209c23817aec7bdd6b336","modified":1518141070606},{"_id":"public/2016/07/15/javascript/viewport-rem-one/index.html","hash":"c722335ba20819dd5766474b89348ac22f779ac0","modified":1518141070606},{"_id":"public/2016/04/27/javascript/diff-call-apply/index.html","hash":"d5de4a6e95b9d058377ecf4bd381d5d4ac673956","modified":1518141070606},{"_id":"public/2016/02/05/links/fe/index.html","hash":"8ab8839e333aa2b32baef6421fe68bc9cb8d7207","modified":1518141070606},{"_id":"public/2016/01/08/javascript/interview-one/index.html","hash":"255bfa5528ea8ca0dc6e4e90e52fab0018d044c2","modified":1518141070607},{"_id":"public/2016/01/05/javascript/Code-Snippet-ONE/index.html","hash":"4734b22e0d849c3ab2a2e5d7c38eea8fe17f5dbf","modified":1518141070607},{"_id":"public/2016/01/01/javascript/modules-two/index.html","hash":"2cbfee6420887d6dc44b3c9c778e51b08d4975d0","modified":1518141070607},{"_id":"public/2016/01/01/css/position-sticky/index.html","hash":"a06121e143bd71956ba3c2b01a33236bfadd6705","modified":1518141070607},{"_id":"public/2015/11/17/web/performance-preload-images/index.html","hash":"5129b75eeb1f050a21b07413939c4051321097ee","modified":1518141070607},{"_id":"public/2015/11/17/javascript/react-lifecycle/index.html","hash":"f46acfaf9e1064c52d5d694b7924c14a20e2f543","modified":1518141070607},{"_id":"public/2015/06/08/web/security-one/index.html","hash":"415ebc42da66b3e4c293ddc7ff8b8d879c74c6b0","modified":1518141070607},{"_id":"public/2015/03/17/javascript/code-snippet-queue/index.html","hash":"e1a9c87f31ca5f1d3e9e4ec42f36507c41adf29b","modified":1518141070607},{"_id":"public/2015/01/01/javascript/modules-one/index.html","hash":"92b3aa743c0931f6ba91de0a6c8b0c2a926ef59f","modified":1518141070607},{"_id":"public/2014/12/02/javascript/principle-eventloop/index.html","hash":"6bb380d18d431facb4bc49d7b87499bbc803dfc5","modified":1518141070607},{"_id":"public/2014/05/01/web/how-to-use-webworker/index.html","hash":"73da55f7abd3839921307c009213d84038807216","modified":1518141070607},{"_id":"public/2014/01/23/javascript/cli-gulp-guide/index.html","hash":"1a3f371cc07a43714cd3d69730af5d06b3ebde9d","modified":1518141070607},{"_id":"public/2014/01/09/web/performance-one/index.html","hash":"03f8e945b2d420f7d84f02b3a117ff51b318e41c","modified":1518141070607},{"_id":"public/2013/03/17/javascript/code-snippet-dialog/index.html","hash":"88bfcbaab6534e8dfa899a5f8c2a675889800362","modified":1518141070607},{"_id":"public/2014/01/07/javascript/diff-async-defer/index.html","hash":"7514919a77ccddef84eef9b5437ed98c0793517f","modified":1518141070607},{"_id":"public/2010/06/01/javascript/OOJ-THREE/index.html","hash":"f35e259f0b1724233cd206ac596836b0e6f8ed94","modified":1518141070607},{"_id":"public/2010/05/31/javascript/OOJ-TWO/index.html","hash":"073cc8c62f1a8bffd0ed787100d89b5147cff51b","modified":1518141070607},{"_id":"public/2010/05/15/javascript/OOJ-ONE/index.html","hash":"b60f228fb44eb1272ca08d5b286445ab8e31d54b","modified":1518141070607},{"_id":"public/2006/12/26/csharp/hello-csharp/index.html","hash":"767d1b3bc38cedc7e84a28f74e869a7723c3732f","modified":1518141070607},{"_id":"public/archives/index.html","hash":"c26a8663dd1c6ea829e9eb56d9b45e0f2b9cca73","modified":1518141070608},{"_id":"public/archives/page/2/index.html","hash":"5f122d9316982612e5e4a74c8cf78a4cda6b6971","modified":1518141070608},{"_id":"public/archives/page/3/index.html","hash":"1f24ef57b7cc0c09f7c174993702b44727f34c9f","modified":1518141070608},{"_id":"public/archives/page/4/index.html","hash":"c59dd52e9f78a055d96832ff97c33576974a83b8","modified":1518141070608},{"_id":"public/archives/page/5/index.html","hash":"5cd8dddf0252049141fe0de013fdc4f6f8a6c4d2","modified":1518141070608},{"_id":"public/archives/2006/index.html","hash":"3143a35c114c5fb48eb4d1fb4ba338a6b4bf0cfd","modified":1518141070608},{"_id":"public/archives/2006/12/index.html","hash":"a4d627161a6f746f942aa022b14a443e4631b848","modified":1518141070608},{"_id":"public/archives/2010/index.html","hash":"9a40d19a80cc6619700675cc514ebd7da5d94ed6","modified":1518141070608},{"_id":"public/archives/2010/05/index.html","hash":"f8a54c70df106204e0b937dc56d7b0599b67aec2","modified":1518141070608},{"_id":"public/archives/2010/06/index.html","hash":"f50cdf671909a4d7943c771d318303710bf304d1","modified":1518141070608},{"_id":"public/archives/2013/index.html","hash":"e829fe8d6489b0936c00fe10b39da91b5292966d","modified":1518141070608},{"_id":"public/archives/2013/03/index.html","hash":"ede9c60ec3ca72b1987c814bedd920011eea2b10","modified":1518141070609},{"_id":"public/archives/2014/index.html","hash":"5fc5243ef8c715e903f7632f2ad51a1f8323325d","modified":1518141070609},{"_id":"public/archives/2014/05/index.html","hash":"4b68ae946ed22ae655ccccdc8fb3dc6438f8d002","modified":1518141070609},{"_id":"public/archives/2014/12/index.html","hash":"e290024971d41739a343d6121c8e1fed8192c268","modified":1518141070609},{"_id":"public/archives/2015/index.html","hash":"957c40aeb3c8a880b33450f8c66916922598ad6c","modified":1518141070609},{"_id":"public/archives/2015/01/index.html","hash":"7cd2fc5429f8634ba31fa0fa9c2d732c6c5e10a0","modified":1518141070609},{"_id":"public/archives/2015/03/index.html","hash":"51d7d7395ac6544ac7293cc4d8691e503c51fc1f","modified":1518141070609},{"_id":"public/archives/2015/06/index.html","hash":"af5cb4863fd00029599a2b766084f90c518ef278","modified":1518141070609},{"_id":"public/archives/2015/11/index.html","hash":"b1318eb4136d51ea6b1f3ad1cf318619f5efa663","modified":1518141070609},{"_id":"public/archives/2016/index.html","hash":"1b434dee0329420ee48ae980c7174b7f87d6d5d4","modified":1518141070609},{"_id":"public/archives/2016/page/2/index.html","hash":"3371f8831283242a3fdb3c438e9c8373f0f8469b","modified":1518141070609},{"_id":"public/archives/2014/01/index.html","hash":"9b930d9d06054cc6a01c63c65824d59f37feef3b","modified":1518141070609},{"_id":"public/archives/2016/01/index.html","hash":"42abf1dd40b374fd52965efcf3b4cb43909138e2","modified":1518141070609},{"_id":"public/archives/2016/02/index.html","hash":"bad26f51a24daf740d014341b6b548571281c487","modified":1518141070609},{"_id":"public/archives/2016/04/index.html","hash":"f3b37f0e591702844de7fc1d5f1ca033fb0ecfe1","modified":1518141070609},{"_id":"public/archives/2016/11/index.html","hash":"772fe03d6f8fcc7a6ab7b3d5ea9ab0f2372fdcf5","modified":1518141070609},{"_id":"public/archives/2017/index.html","hash":"6f41079b07e6cd9f219b3d82274457fb2745df19","modified":1518141070610},{"_id":"public/archives/2017/01/index.html","hash":"a9e1587b9f683901623c17cc086f864eb9f5ea27","modified":1518141070610},{"_id":"public/archives/2017/02/index.html","hash":"6746937b1b33d0a8d3aef318e11134e84c0cf8a1","modified":1518141070610},{"_id":"public/archives/2017/03/index.html","hash":"380e2f20a002b3926573891e47176b93ba9b0477","modified":1518141070610},{"_id":"public/archives/2017/12/index.html","hash":"866beec36ee89177420764bf49f895ea16783499","modified":1518141070610},{"_id":"public/archives/2018/index.html","hash":"2a301d550de1f1862ce3dbead5c43cfdc0c772be","modified":1518141070610},{"_id":"public/archives/2018/01/index.html","hash":"80910fd5b08b4a4c8ba63fe935008c9a51e43409","modified":1518141070610},{"_id":"public/archives/2016/07/index.html","hash":"d614c3a57b6397248269fa4a1c2eb899e2355532","modified":1518141070610},{"_id":"public/archives/2018/02/index.html","hash":"f118544595d983c0265b7e21c00f003cde11a2da","modified":1518141070610},{"_id":"public/categories/CSS/index.html","hash":"f4494ed76ccc7343f3ce0b9a844e0f30b4f9181d","modified":1518141070610},{"_id":"public/categories/C/index.html","hash":"4092f21afd034b42917e716aa940c66b4e331740","modified":1518141070610},{"_id":"public/categories/H5/index.html","hash":"c05781e9e90621b928822cb6edacc78e982d168f","modified":1518141070610},{"_id":"public/categories/h5/index.html","hash":"d135f22617d1b04da8203e6464898721a5b5d561","modified":1518141070610},{"_id":"public/categories/Tools/index.html","hash":"86872847c44dcf937caf5916b0792c1745cc75b1","modified":1518141070610},{"_id":"public/categories/TechManage/index.html","hash":"209f4841d97679ead8deb5a5564e1841ae6a2a8a","modified":1518141070610},{"_id":"public/categories/ITPMP/index.html","hash":"130f92c4eacd2f42ccf9c4f3b5fd341b5b4178c7","modified":1518141070610},{"_id":"public/categories/Javascript/index.html","hash":"7e0b938e8d1f40096c5c0445e63a4fcac072d4cd","modified":1518141070610},{"_id":"public/categories/Javascript/page/2/index.html","hash":"c7c94d2e760688e2ceb3e24987cca785a6947010","modified":1518141070610},{"_id":"public/categories/Javascript/page/3/index.html","hash":"ba7e48a7e70ffcefa03be8499d1c5c5e065245e4","modified":1518141070610},{"_id":"public/categories/lesson/index.html","hash":"7e244e80fb002f50645a94b63102fe456dce3056","modified":1518141070610},{"_id":"public/categories/links/index.html","hash":"7f9a715d469666c440e403a3c03287c8ebd46320","modified":1518141070610},{"_id":"public/categories/macos/index.html","hash":"a5d77b1202ad7b37ec143f1f0a075c0b5ee1e0e6","modified":1518141070611},{"_id":"public/categories/SQL/index.html","hash":"e75729555ea70db35500d7c724a98054ea775105","modified":1518141070611},{"_id":"public/categories/小程序/index.html","hash":"c9ed6cfeec59e451cac2d6948bef37a828e5a214","modified":1518141070611},{"_id":"public/categories/WEB/index.html","hash":"cc9a6cbe7bb7dd8d2b036ab026cd8c85ca62e1d8","modified":1518141070611},{"_id":"public/index.html","hash":"08024bbe96fb51b563d35fa573c8f60aa5aec0eb","modified":1518141070611},{"_id":"public/page/2/index.html","hash":"3713f854ad80c9f2e9d09852ac226a409775dd81","modified":1518141070611},{"_id":"public/page/4/index.html","hash":"5f8223402124fae389f3a9118ed8c7b356d5b462","modified":1518141070611},{"_id":"public/page/5/index.html","hash":"aa3f17f93215669660e3dc7e05a25eab22ff0b4f","modified":1518141070611},{"_id":"public/tags/CSS/index.html","hash":"4b2ac5598d4a074be4806d50b372f53e8c1a9655","modified":1518141070611},{"_id":"public/tags/C/index.html","hash":"0edc761806f52564f805206f335a9981011e116e","modified":1518141070611},{"_id":"public/tags/position/index.html","hash":"d44f903a187dd4d6ae93a89f46d884f868e1ce31","modified":1518141070611},{"_id":"public/tags/sticky/index.html","hash":"cc46375205147721360ee78e13dc923fbe3fd3ec","modified":1518141070611},{"_id":"public/tags/ARIA/index.html","hash":"43cc2f988e3b40246e6e922799e6418ea4a30918","modified":1518141070611},{"_id":"public/tags/H5/index.html","hash":"25ae4f7ea583382126fd1744f3514c47d7a7d05d","modified":1518141070611},{"_id":"public/tags/HTML5/index.html","hash":"fcc85dac0beb8fdbeff01a2d3de31f704e5a8759","modified":1518141070611},{"_id":"public/page/3/index.html","hash":"0817c024f4f21d380b7ba7c823831f312918a5be","modified":1518141070611},{"_id":"public/tags/web/index.html","hash":"b2005d0630e7ba158d896416b89554bb0a7eae48","modified":1518141070611},{"_id":"public/tags/h5/index.html","hash":"bbde53d9efc64bca0d85c9e0bbefed64539c99fc","modified":1518141070611},{"_id":"public/tags/git/index.html","hash":"86e064b50dabdf72c0a5105dad98a6b894f1a765","modified":1518141070611},{"_id":"public/tags/project/index.html","hash":"80189a5c80df0c154db46b8b6e89864bed9716fe","modified":1518141070611},{"_id":"public/tags/note/index.html","hash":"27887115243e7205102aa3c390026105827044e1","modified":1518141070611},{"_id":"public/tags/css/index.html","hash":"85e1ee36aa3107bc652a593c73c16b67ad660cb7","modified":1518141070611},{"_id":"public/tags/javascript/index.html","hash":"71c3cc27de736f91ae12291faeb65dce44c588be","modified":1518141070611},{"_id":"public/tags/javascript/page/2/index.html","hash":"a471988c5ba3142b816727ffb962b3025ec061be","modified":1518141070611},{"_id":"public/tags/flex/index.html","hash":"92036bc47da6964898b9520f35c9ed7a8de8d299","modified":1518141070611},{"_id":"public/tags/media/index.html","hash":"7fae4a242c5948a2f99be8d450f8e0f6fadc0668","modified":1518141070611},{"_id":"public/tags/备份/index.html","hash":"ba6cccab01115d2705ec3cc075b025ec9dee6e99","modified":1518141070611},{"_id":"public/tags/策略/index.html","hash":"4b4140c8d66f87beedeff4360e0f20e211af532a","modified":1518141070611},{"_id":"public/tags/ITPMP/index.html","hash":"e81506826b0dccc72f74f354713a2d8fff1897fe","modified":1518141070612},{"_id":"public/tags/代码段/index.html","hash":"772035b90198ecf23025a3c25ecc792eef2d1245","modified":1518141070612},{"_id":"public/tags/package/index.html","hash":"e94035d8a67a2d4cbb91218d4cdfe382c97dd693","modified":1518141070612},{"_id":"public/tags/gulp/index.html","hash":"34bc876259d85874ea552979af8524e8f4d5e618","modified":1518141070612},{"_id":"public/tags/JS/index.html","hash":"f707e6c2441eb1792657dc15881a96979b713e47","modified":1518141070612},{"_id":"public/tags/Javascript/index.html","hash":"7d82f96d1c745ea469a81102bf4fdcf9b12414ae","modified":1518141070612},{"_id":"public/tags/OOP/index.html","hash":"6967d8287bddd3e788e570a5f41a74af40da95a9","modified":1518141070612},{"_id":"public/tags/OOJ/index.html","hash":"4c842995ea3805b67cf5a536b9335ae2bf11cd18","modified":1518141070612},{"_id":"public/tags/WEB/index.html","hash":"80d28cc7c8a87e2a94ef477523863fb7059e0300","modified":1518141070612},{"_id":"public/tags/dialog/index.html","hash":"6c9a573c1776d5ef5f0ae029535bc2512ea12510","modified":1518141070612},{"_id":"public/tags/queue/index.html","hash":"971751dbdadf6ef48c765c2de15bda2d0011019b","modified":1518141070612},{"_id":"public/tags/js/index.html","hash":"c8c6ea6dbb3b7096a057db03f21a54779359d12b","modified":1518141070612},{"_id":"public/tags/async/index.html","hash":"8e95c3a3d04f8a414b4a1c7e1682aefa51c489cf","modified":1518141070612},{"_id":"public/tags/defer/index.html","hash":"8d5e9ef24844de3cd2eb2d599d54a48eaf28fcf2","modified":1518141070613},{"_id":"public/tags/面试/index.html","hash":"13e6940473483e4c770b93a0672786c1b7bae8e4","modified":1518141070613},{"_id":"public/tags/理想/index.html","hash":"112b9d15d9558af80a5ff14f09dc1ca3c545993d","modified":1518141070613},{"_id":"public/tags/问题/index.html","hash":"04145373f5548b06f83e14220ad75d3e951c24cc","modified":1518141070613},{"_id":"public/tags/call/index.html","hash":"e582a3fd889668e1b9ea20c4994495ed88df2977","modified":1518141070613},{"_id":"public/tags/apply/index.html","hash":"0564d1765ef1e905b9d3b245de6546dc15b7d145","modified":1518141070613},{"_id":"public/tags/题目/index.html","hash":"784d3d4dcfd492e545848e68694950ba2767bc17","modified":1518141070613},{"_id":"public/tags/interview/index.html","hash":"b61461df888bcda800cffecf281e9ad3c77b05eb","modified":1518141070613},{"_id":"public/tags/concepts/index.html","hash":"2fcce60a10f272d6c30613a737d6fcf48a5793a8","modified":1518141070613},{"_id":"public/tags/commonjs/index.html","hash":"4258d2cb919a8cea0bdadc708cda6c8ebbbbc807","modified":1518141070613},{"_id":"public/tags/AMD/index.html","hash":"b7b5d65d9dc881bfe58883e41852fe07a841ddf8","modified":1518141070613},{"_id":"public/tags/CMD/index.html","hash":"09b1fce9a7f218b6fef159912b582e2ec5c92b2d","modified":1518141070613},{"_id":"public/tags/snippet/index.html","hash":"cf3202eeae6ff681041b7a3037a48623f343cefe","modified":1518141070613},{"_id":"public/tags/ES6/index.html","hash":"99c1ad073b7396d2298ee1de28aeb98ee69e4878","modified":1518141070613},{"_id":"public/tags/2017/index.html","hash":"b71863fbf7e29e9a4167196977417c955246cc01","modified":1518141070613},{"_id":"public/tags/news/index.html","hash":"74d8112a6a0debb40d44a1fa519903e2d8dacf98","modified":1518141070613},{"_id":"public/tags/plugins/index.html","hash":"bc1d859b68b02845a0f599145e537ff78b8b4a46","modified":1518141070613},{"_id":"public/tags/react/index.html","hash":"1bb3e6854a78c5328a865f735a7bfbc6f4496e21","modified":1518141070614},{"_id":"public/tags/lifecycle/index.html","hash":"1230689dec704673b7127a0b873fb1ee4b18e8af","modified":1518141070614},{"_id":"public/tags/viewport/index.html","hash":"aee37896379ace877429e8bcff3b7b6a36e1357b","modified":1518141070614},{"_id":"public/tags/rem/index.html","hash":"b874ab942d48acfaef7d5ed162660335d10d1525","modified":1518141070614},{"_id":"public/tags/vue/index.html","hash":"18bce0489a4cdc0aac1cff78b83bf74896e4ee2e","modified":1518141070614},{"_id":"public/tags/eventloop/index.html","hash":"c9c92bd20926748a8b3f052addecfa8273348260","modified":1518141070614},{"_id":"public/tags/lesson/index.html","hash":"03464abc7cd258074164fcda27413b11b074d5ed","modified":1518141070614},{"_id":"public/tags/frontend/index.html","hash":"f2a7366c6aeb9abc43757c8b2a568b018385e6e2","modified":1518141070614},{"_id":"public/tags/html/index.html","hash":"537a19ee07f85d24c00afefd60c49f050a9a213f","modified":1518141070614},{"_id":"public/tags/macos/index.html","hash":"ec3c9611ff85569dbef45727d16f8454ea15f53d","modified":1518141070614},{"_id":"public/tags/path/index.html","hash":"4906fd1f16230a7cce52ef40e20cb59d503ae85d","modified":1518141070614},{"_id":"public/tags/sql/index.html","hash":"a1e4becd62114b7639afa4a35699ad7c384d596d","modified":1518141070614},{"_id":"public/tags/postgresql/index.html","hash":"6553579994896b012ca766175aa54c3396dce4de","modified":1518141070614},{"_id":"public/tags/pg/index.html","hash":"0edf20367d6b58fda5277b1974b64e55e1b6722a","modified":1518141070614},{"_id":"public/tags/小程序/index.html","hash":"0109f16b43314228d897909c8c0f359ff4de0790","modified":1518141070614},{"_id":"public/tags/worker/index.html","hash":"bda2fb3cc7ac44dbeb742da85e894476f3997e2c","modified":1518141070614},{"_id":"public/tags/performance/index.html","hash":"32e28e83d0c8fb48a208e2153d90d532a9ccd9d1","modified":1518141070614},{"_id":"public/tags/性能/index.html","hash":"ab2563f16a15060022d0a0724fa8ba57da161dd5","modified":1518141070614},{"_id":"public/tags/优化/index.html","hash":"fbc9c41f9dfe7638576fc846301f63a87691d81d","modified":1518141070615},{"_id":"public/tags/preload/index.html","hash":"7f0a78716ebf4aa14026917fff982094473c0cea","modified":1518141070615},{"_id":"public/tags/security/index.html","hash":"4c8d72a1b41726fa4ecc6d22706642ae89d6561f","modified":1518141070615},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1518141070684},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1518141070684},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1518141070684},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1518141070684},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1518141070684},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1518141070684},{"_id":"public/imgs/ooj-2.gif","hash":"31a3530c12a79b718664e3c233b94478af760a56","modified":1518141070684},{"_id":"public/imgs/ooj-1.gif","hash":"ca81d82ec8823f7ffefaf37d71227482221643e4","modified":1518141070685},{"_id":"public/imgs/ooj-3.gif","hash":"6e94fe132149b30f9c9dc372755a69152af1e7d4","modified":1518141070685},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1518141070685},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1518141070685},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1518141070685},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1518141070685},{"_id":"public/imgs/javascript/bg2014100803.png","hash":"3d70f3625caf91da22c6ab7dc294e9e7e1559b2a","modified":1518141070685},{"_id":"public/imgs/javascript/bg2014100802.png","hash":"991109df2ef5ae00d95568a69200baa1775ed399","modified":1518141070685},{"_id":"public/imgs/javascript/macrotask-microtask.jpg","hash":"811fdac93af77d0b1e18fc436609a9aecdd2fae7","modified":1518141070685},{"_id":"public/imgs/javascript/browser-lifecycle.jpeg","hash":"e060143dc2247b5fcd7c427c43df3e8ae2b794a9","modified":1518141070685},{"_id":"public/imgs/javascript/bg2014100801.jpg","hash":"bf2dd24f10a4a2a1efd16c30d2ea4bdac508c64c","modified":1518141070685},{"_id":"public/imgs/javascript/streaming.png","hash":"05dda9eeb47d957353700af6eef2a22344321734","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-app-config.png","hash":"67b0fb18f9def301413ab20bf2b7eca4d44b2af2","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-debug2.jpeg","hash":"08aa3decdd0caee6a179aceb36a1b863c47fb17c","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-fileintro.png","hash":"c83f27e4df014ddfeaf3c92b8d685b952de6d748","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-view-object.png","hash":"31895b9f05eecf8f2bf241dd1928804959ee9d3c","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-mvvm1.png","hash":"14934283aa119fd87349c2844ee317834cd426f1","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-route-demo.png","hash":"93b13ea3e3c8cf1259d0a6753a6cc37d402726a4","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-debug3.jpeg","hash":"0ea3919c6bf986cbe27f0ec1eaf90a94b37c4863","modified":1518141070685},{"_id":"public/imgs/miniapp/miniapp-mvvm2.png","hash":"24c21b73c3beb27ee95e13cc452871632d8a3cfd","modified":1518141070685},{"_id":"public/imgs/ooj-4.gif","hash":"24cfb25c0f15bd26c3bf077bb10bd47a47fc3d3a","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","hash":"4387814ef91dc015ef49aa2ff539c69aaed3b067","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-It.ttf.woff2","hash":"73b691c4e89855261bdd7d2b2faa8e617931a1d1","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","hash":"23734345f7d335aa6c84e89e8e96a7dcb7a91c19","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","hash":"507a5cd68c9ee7a2624a9d484f86b3182a2163d1","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","hash":"6090be945e8bab83d62906d27c8cb2af2168fda2","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","hash":"30ada1d42379b59861c2d7c165df5fc294ec5262","modified":1518141070686},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","hash":"d52397566303312821a065c7aff1b25986b0f971","modified":1518141070686},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1518141071199},{"_id":"public/imgs/css/css-box.png","hash":"aa499b615264f6158a453eb30364d75ed708ec68","modified":1518141071205},{"_id":"public/imgs/javascript/browser-lifecycle-en.png","hash":"ad39975f3f0a782be4d890011802b94d6c18ad85","modified":1518141071205},{"_id":"public/imgs/javascript/react-lifecycle.jpg","hash":"4da0e553905cc8533d322d3c8781e621bd278613","modified":1518141071206},{"_id":"public/imgs/miniapp/miniapp-debug4.jpeg","hash":"5efbaeca8713d76e88f1a40696a18166b279ad01","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-Black.eot","hash":"22bc2d0e61e77fbfa9112a4a6470e8f53f378758","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-Bold.eot","hash":"bad71fb3f9e9c9a0fa181b3d986d4ea94cfce3a4","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-BlackIt.eot","hash":"364d45a44e1177de684af1b2cb31d9bcd5d40325","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-It.eot","hash":"bed2acb993c6c344fa65f6f9750d327ff9bdeadf","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-ExtraLight.eot","hash":"0a2d23e8df97b3bb19d35f12ed411de9ff1e6623","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-BoldIt.eot","hash":"4545e08d20fda6113d7afd047af22c88c296a8eb","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-Light.eot","hash":"786c24838c854345cc3b611397981f8a1d207abf","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-ExtraLightIt.eot","hash":"7c5938c00cfe5f015151e550b33b9af6a48ad265","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-LightIt.eot","hash":"deafcc22fa661e1459707abe0c1100672d1b617d","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-Medium.eot","hash":"6844cc1781b1d5d92b586cc15541ddb840938a51","modified":1518141071206},{"_id":"public/source-code-pro/EOT/SourceCodePro-Regular.eot","hash":"7ee6f61641f7d02d86bf64ba9b71ad6104a9e585","modified":1518141071207},{"_id":"public/source-code-pro/EOT/SourceCodePro-MediumIt.eot","hash":"ad23433160dd9bd8485b6280edf9f41485f9ff38","modified":1518141071207},{"_id":"public/source-code-pro/EOT/SourceCodePro-Semibold.eot","hash":"7b63188da5c86a9f83d2f6da16d4dd069c099543","modified":1518141071207},{"_id":"public/source-code-pro/EOT/SourceCodePro-SemiboldIt.eot","hash":"bfe3f1a84d114cc3099d5176369d4c4223061ab8","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-BlackIt.otf","hash":"293ba8016eb9df02d0fc65c504a312be5c17e2ee","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-ExtraLightIt.otf","hash":"0a82adb46381bcfa4d1c2067a86bbc1e5b955a97","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-BoldIt.otf","hash":"7395962790b6ccbda4aabc59f5ce592e2a1257c5","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-It.otf","hash":"69c6948aaf743b1d6101529c37612d5fb9df69fa","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-LightIt.otf","hash":"363bfaa3b8a3a9aaf71abba7b1abc45a53d12a08","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-SemiboldIt.otf","hash":"32f1bfd3599121d6b6737a4c99c8a926fb86384f","modified":1518141071207},{"_id":"public/source-code-pro/OTF/SourceCodePro-MediumIt.otf","hash":"39a8adeb94f50522d5e2b8f06ea4fe62d4b5323c","modified":1518141071207},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-Black.otf.woff2","hash":"ffc7afd4815508f1a53c331bc582b0e2a9323c77","modified":1518141071207},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","hash":"4b621d37c4916e97ff9f7b74a6cbb52e9561b237","modified":1518141071207},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","hash":"729c396e7d9a21bae402cbf85f82c31bc1f86ca1","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","hash":"c4f4bb5beca01ffe81647f556be581011e39560e","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","hash":"3c835049f43f8cc650b8a0e4139c2fa27f5d5480","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","hash":"0da5d3a564450da564a00aaa9394b2157735005a","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-It.otf.woff2","hash":"7ba3f1b332b6735e919e915b7a900cc582763112","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","hash":"29414e46ab9b2761c2eac5a9597324b582bff422","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","hash":"ef7291f67098d0d3bbb3a3fd6826efa289eb6d79","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","hash":"59d2024c62d03190a071e9299a77c5a5f9049450","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","hash":"c6d73b325b79cab7833efbfb26345d987ef060d8","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","hash":"726d7462624789f3aed45a6a76de17f075f2f169","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-Light.otf.woff2","hash":"bc4cdf8f3f4dc8ac82af2ef155f73bf95bc03b13","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","hash":"2a30d4ced4b07bd33657ae7816817f085d71be4e","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","hash":"191888a6aa2ae5f4716c942e5ea17c587b46530c","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","hash":"e13b9b75dfaade4767de21d0d6716acc61f5aad5","modified":1518141071208},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","hash":"8fb27f8c0c29a1ae970c96deec8542231bbd2474","modified":1518141071209},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","hash":"3bebb4aee7dafe55862a507a762c4e3712274d82","modified":1518141071209},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","hash":"f6ae31b471c0ce2c2173a1281d1fb571629f25fb","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-Black.otf.woff","hash":"424dc2968d4ba545b3192854e48a9ff0c348300f","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","hash":"03c3835c29f6d6806a90e59b4af24dbd71b2f1a1","modified":1518141071209},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","hash":"13bc2d0f634acbd0cf8aa55285b8177ef5e76e5b","modified":1518141071209},{"_id":"public/source-code-pro/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-Bold.otf.woff","hash":"d74ef79234c13a66420b231ed7bc935ae04308a0","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","hash":"24590f33dc9a76d3a03423e89b3e35ceacc8089b","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","hash":"1afecf94c26464ce6e78918693e123fa64320268","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-It.otf.woff","hash":"3b8d76f54585952203b36805b4a80c20a354af5f","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","hash":"afede453c68f48385f07ae0564bef2ea4b1708cc","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-LightIt.otf.woff","hash":"fc8ef553db83a2ee3667bf6c6cbaa85f9ad6bbaa","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-Medium.otf.woff","hash":"3278246a706bece4c74a2dd4954977dbd303ec8f","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","hash":"f7ec183b221493ea44c19b8f7cbe66741302bf9f","modified":1518141071209},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-Light.otf.woff","hash":"bd09fce5b57e0882412c62dc12b7751af2081a89","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-Bold.ttf.woff","hash":"7d339fb8fa643ef8ad0ef06d9b98e857e3ad302e","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","hash":"1d530716d5ade092ceaddc6c0d30813246531880","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-Regular.otf.woff","hash":"9e25ee1144dd02a3f0124bd20696dfad6d6e081c","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","hash":"d8c1535a988da7c073b49bf0d3d222bfdcbd43a7","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","hash":"4014884e8019749cf63b088be2228900b9fff9d0","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","hash":"7eda4f381be0a2a93c90e73f77ca5a8b3b9ab147","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-It.ttf.woff","hash":"f95d201633c55838a670e9f48bc84d6019199036","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-Light.ttf.woff","hash":"daa249d465c7c66bcc627753906d3372fc033d9c","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","hash":"02d5e5f9ab52823bfa7e74ef8bd777d747054ce2","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","hash":"b25418936b4af7b167dec5d63431955b13813a03","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-Medium.ttf.woff","hash":"63a8bb7eb997463ebc2a82a2899a741277857755","modified":1518141071210},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","hash":"f47a9cbfab298ce96c438770721df599cafb814b","modified":1518141071211},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","hash":"93bd79c7cc66ade917c9943b4a6703732402ee20","modified":1518141071211},{"_id":"public/source-code-pro/WOFF/OTF/SourceCodePro-Semibold.otf.woff","hash":"d4d2a66f05606b8ba90e78ac2d19073a68eef863","modified":1518141071211},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","hash":"e68c2f4919b4a8bd5a73fa4af516295b5b6a9783","modified":1518141071211},{"_id":"public/source-code-pro/WOFF/TTF/SourceCodePro-Black.ttf.woff","hash":"a763e1de0f20ca359b697b349217cd2fbc000cb9","modified":1518141071211},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1518141071219},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1518141071219},{"_id":"public/source-code-pro/source-code-pro.css","hash":"81b8d1d5700f3364906839fc114a09ed7fcd6e60","modified":1518141071219},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1518141071219},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1518141071219},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1518141071219},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1518141071219},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1518141071219},{"_id":"public/css/style.css","hash":"1f38466dcf12dab126dc356fce0a1189d0607200","modified":1518141071219},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1518141071219},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1518141071219},{"_id":"public/imgs/zmlmf.jpeg","hash":"6c2115b7e9d9f52dfca9e8b46c4e6ad4d9847456","modified":1518141071219},{"_id":"public/imgs/javascript/vue-lifecycle.png","hash":"245ed3bc3f4a0e1698faf640863a1271a3e8ad35","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-Black.otf","hash":"a4a6a55fb4c41c9d5b02ddaee7a5a9b45a718dad","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-ExtraLight.otf","hash":"d7ab81f15bfcf0950ef476c8fe90646deec58094","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-Bold.otf","hash":"747748585daf56d44f0926a009a3e814f2085d85","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-Light.otf","hash":"5fab14eef11fc505b85cb86d54d469a87db1192e","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-Medium.otf","hash":"747eade2bb1e45a3f8f0bc8a521a21ce563b8b28","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-Regular.otf","hash":"af5b0dec2fd6f43086eb39eb1823bacd96d7d20f","modified":1518141071220},{"_id":"public/source-code-pro/OTF/SourceCodePro-Semibold.otf","hash":"80f5846b38c0ec34abd71f5a8de174d8bc64b333","modified":1518141071220},{"_id":"public/source-code-pro/TTF/SourceCodePro-BlackIt.ttf","hash":"c32e10e954ea99e0dac6722f50a16c5deea07294","modified":1518141071220},{"_id":"public/source-code-pro/TTF/SourceCodePro-BoldIt.ttf","hash":"ae7aca1daa0455bca08cde71ef84145562a6ae8f","modified":1518141071220},{"_id":"public/source-code-pro/TTF/SourceCodePro-LightIt.ttf","hash":"d6df8b639daa36ef1d5cd54c8b7802bf6b9a25e8","modified":1518141071221},{"_id":"public/source-code-pro/TTF/SourceCodePro-ExtraLightIt.ttf","hash":"99355ed9f1a997019130712b840f1d33e7faa77f","modified":1518141071221},{"_id":"public/source-code-pro/TTF/SourceCodePro-It.ttf","hash":"2f654fbd6552e14f18f4966f6bd9c35daedecf49","modified":1518141071221},{"_id":"public/source-code-pro/TTF/SourceCodePro-MediumIt.ttf","hash":"21eb74ec1c05a982a7b6681961e166aeb1363c47","modified":1518141071221},{"_id":"public/source-code-pro/TTF/SourceCodePro-SemiboldIt.ttf","hash":"9d573041d09643fe1e210cd58bc324fa084f5fd6","modified":1518141071221},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1518141071225},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1518141071225},{"_id":"public/imgs/javascript/eventloop.png","hash":"a7131bb8d600c119a2ff1978be310b48dc498a21","modified":1518141071225},{"_id":"public/source-code-pro/TTF/SourceCodePro-Black.ttf","hash":"d70a516a98774a2c3494e8f39760521d52f25a2e","modified":1518141071226},{"_id":"public/source-code-pro/TTF/SourceCodePro-Bold.ttf","hash":"723d835c16bdba402779659f6139579e9ce9390b","modified":1518141071226},{"_id":"public/source-code-pro/TTF/SourceCodePro-ExtraLight.ttf","hash":"7c3846b00d360be4e936ee274ce8a12ebcdad9e6","modified":1518141071226},{"_id":"public/source-code-pro/TTF/SourceCodePro-Light.ttf","hash":"d7fc752715036400dbed10db9d9395850c1df6ab","modified":1518141071226},{"_id":"public/source-code-pro/TTF/SourceCodePro-Regular.ttf","hash":"2333214c1aefb2da838c998a59218ae98a6464e9","modified":1518141071226},{"_id":"public/source-code-pro/TTF/SourceCodePro-Semibold.ttf","hash":"2c2e72fccd697d7c02bccff1419d264ac47828f2","modified":1518141071226},{"_id":"public/source-code-pro/TTF/SourceCodePro-Medium.ttf","hash":"22522e0cf7e78c42df8aa415e9453baf087bcf17","modified":1518141071227},{"_id":"public/imgs/miniapp/miniapp-debug1.png","hash":"43629146bc0a3bced8f6f9936445dd9ec05c0ffa","modified":1518141071238}],"Category":[{"name":"CSS","_id":"cjdf9zt1m0004fme3oye9lfuc"},{"name":"C#","_id":"cjdf9zt1w0009fme3r28u7381"},{"name":"H5","_id":"cjdf9zt2c000kfme33idws1yq"},{"name":"h5","_id":"cjdf9zt2i000qfme3r6wlv3iz"},{"name":"Tools","_id":"cjdf9zt2n000vfme3e3zudg98"},{"name":"TechManage","_id":"cjdf9zt35001dfme36mv04c6q"},{"name":"ITPMP","_id":"cjdf9zt38001kfme3ge8ct7zm"},{"name":"Javascript","_id":"cjdf9zt3c001rfme3sy2cjccw"},{"name":"lesson","_id":"cjdf9zt4s003yfme3higa9849"},{"name":"links","_id":"cjdf9zt4t0043fme3q955vku7"},{"name":"macos","_id":"cjdf9zt4t0046fme3y372kq85"},{"name":"SQL","_id":"cjdf9zt4t0049fme3z0h97ja9"},{"name":"小程序","_id":"cjdf9zt4u004dfme3nyxe322f"},{"name":"WEB","_id":"cjdf9zt4v004ifme32cujoj88"}],"Data":[],"Page":[{"title":"我的介绍","date":"2017-12-27T10:42:41.000Z","_content":"\n![珠穆朗玛峰](/imgs/zmlmf.jpeg)\n\n#### 本人\n\nIT农民工一名。\n曾就职在万达网络、恒昌集团、辉立集团，曾做过后端、前端、数据分析BI、移动端负责人、做过首席架构师、技术经理，全栈技术实践者。\n\n目前主要关注技术架构和团队梯队建设方向。\n\n#### 领域\n\n- H5 / JavaScript / Node.js\n- ASP.NET / C#\n- 以及其他 Web domain相关，无论前端还是后端\n- 架构\n\n#### 联系方式\n\n- GitHub：[taoqianbao](https://github.com/taoqianbao)\n- 邮箱：taoqianbao#gmail.com\n","source":"about/index.md","raw":"---\ntitle: 我的介绍\ndate: 2017-12-27 18:42:41\n---\n\n![珠穆朗玛峰](/imgs/zmlmf.jpeg)\n\n#### 本人\n\nIT农民工一名。\n曾就职在万达网络、恒昌集团、辉立集团，曾做过后端、前端、数据分析BI、移动端负责人、做过首席架构师、技术经理，全栈技术实践者。\n\n目前主要关注技术架构和团队梯队建设方向。\n\n#### 领域\n\n- H5 / JavaScript / Node.js\n- ASP.NET / C#\n- 以及其他 Web domain相关，无论前端还是后端\n- 架构\n\n#### 联系方式\n\n- GitHub：[taoqianbao](https://github.com/taoqianbao)\n- 邮箱：taoqianbao#gmail.com\n","updated":"2018-01-09T10:47:32.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjdf9zt080001fme35nfy30et","content":"<p><img src=\"/imgs/zmlmf.jpeg\" alt=\"珠穆朗玛峰\"></p>\n<h4 id=\"本人\"><a href=\"#本人\" class=\"headerlink\" title=\"本人\"></a>本人</h4><p>IT农民工一名。<br>曾就职在万达网络、恒昌集团、辉立集团，曾做过后端、前端、数据分析BI、移动端负责人、做过首席架构师、技术经理，全栈技术实践者。</p>\n<p>目前主要关注技术架构和团队梯队建设方向。</p>\n<h4 id=\"领域\"><a href=\"#领域\" class=\"headerlink\" title=\"领域\"></a>领域</h4><ul>\n<li>H5 / JavaScript / Node.js</li>\n<li>ASP.NET / C#</li>\n<li>以及其他 Web domain相关，无论前端还是后端</li>\n<li>架构</li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>GitHub：<a href=\"https://github.com/taoqianbao\" target=\"_blank\" rel=\"noopener\">taoqianbao</a></li>\n<li>邮箱：taoqianbao#gmail.com</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/imgs/zmlmf.jpeg\" alt=\"珠穆朗玛峰\"></p>\n<h4 id=\"本人\"><a href=\"#本人\" class=\"headerlink\" title=\"本人\"></a>本人</h4><p>IT农民工一名。<br>曾就职在万达网络、恒昌集团、辉立集团，曾做过后端、前端、数据分析BI、移动端负责人、做过首席架构师、技术经理，全栈技术实践者。</p>\n<p>目前主要关注技术架构和团队梯队建设方向。</p>\n<h4 id=\"领域\"><a href=\"#领域\" class=\"headerlink\" title=\"领域\"></a>领域</h4><ul>\n<li>H5 / JavaScript / Node.js</li>\n<li>ASP.NET / C#</li>\n<li>以及其他 Web domain相关，无论前端还是后端</li>\n<li>架构</li>\n</ul>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>GitHub：<a href=\"https://github.com/taoqianbao\" target=\"_blank\" rel=\"noopener\">taoqianbao</a></li>\n<li>邮箱：taoqianbao#gmail.com</li>\n</ul>\n"}],"Post":[{"title":"hello-page","_content":"","source":"_drafts/hello-page.md","raw":"---\ntitle: hello-page\ntags:\n---\n","slug":"hello-page","published":0,"date":"2017-12-26T09:31:39.000Z","updated":"2017-12-26T09:31:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt030000fme3n31rr08a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于CSS的一些知识点总结","p":"css/hello-world","date":"2018-01-07T09:14:11.000Z","_content":"\n## 背景\n\n\n## 关于作者\n","source":"_posts/css/hello-world.md","raw":"---\ntitle: 关于CSS的一些知识点总结\np: css/hello-world\ndate: 2018-01-07 17:14:11\ntags: [CSS]\ncategories: CSS\n---\n\n## 背景\n\n\n## 关于作者\n","slug":"css/hello-world","published":1,"updated":"2018-01-08T02:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt1h0002fme3iqhg9750","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2>"},{"title":"Hello C#","p":"csharp/hello-csharp","date":"2006-12-26T08:49:10.000Z","_content":"\n\n<!--more-->","source":"_posts/csharp/hello-csharp.md","raw":"---\ntitle: Hello C#\np: csharp/hello-csharp\ndate: 2006-12-26 16:49:10\ntags: C#\ncategories: C#\n---\n\n\n<!--more-->","slug":"csharp/hello-csharp","published":1,"updated":"2018-01-05T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt1j0003fme3ekig31xs","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"CSS语法中position:sticky的介绍","p":"css/position-sticky","date":"2016-01-01T02:15:41.000Z","_content":"\n## 背景\n\n用户的屏幕越来越大，而页面太宽的话会不宜阅读，所以绝大部分网站的主体宽度和之前相比没有太大的变化，于是浏览器中就有越来越多的空白区域，所以你可能注意到很多网站开始在滚动的时候让一部分内容保持可见，比如，侧边栏的部分区域。position:sticky为此而生。\n\n<!--more-->\n\n## position:sticky用法\n\nposition:sticky是一个新的css3属性，它的表现类似position:relative和position:fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative; 而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置。\n\n使用起来也非常简单：\n\n``` CSS\n//目前来说还需要用私有前缀～～\n.sticky { \n    position: -webkit-sticky; position:sticky; top: 15px;\n}\n```\n\n## 浏览器兼容性\n由于这是一个全新的属性，以至于到现在都没有一个规范，W3C也刚刚开始讨论它，而现在只有webkit nightly版本和chrome 开发版(Chrome 23.0.1247.0+ Canary)才开始支持它。\n\n另外需要注意的是，如果同时定义了left和right值，那么left生效，right会无效，同样，同时定义了top和bottom，top赢～～\n\n## polyfill \n虽然其它浏览器尚不支持，但是实现起来其实不难，我们可以用js简单实现：\n\n[点击这里查看DEMO](https://output.jsbin.com/tuxuyuj/1)\n\n##### HTML\n``` HTML\n<div class=\"header\"></div>  \n```\n#####  CSS\n\n``` CSS\n.sticky { position: fixed; top: 0; } \n.header { width: 100%; background: #F6D565; padding: 25px 0; }\n```\n##### JS\n``` JS\nvar header = document.querySelector('.header'); \nvar origOffsetY = header.offsetTop; \nfunction onScroll(e) { \n    window.scrollY >= origOffsetY ? header.classList.add('sticky') : header.classList.remove('sticky'); \n} \ndocument.addEventListener('scroll', onScroll);\n```\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/css/position-sticky.md","raw":"---\ntitle: CSS语法中position:sticky的介绍\np: css/position-sticky\ndate: 2016-01-01 10:15:41\ntags: [CSS,position,sticky]\ncategories: CSS\n---\n\n## 背景\n\n用户的屏幕越来越大，而页面太宽的话会不宜阅读，所以绝大部分网站的主体宽度和之前相比没有太大的变化，于是浏览器中就有越来越多的空白区域，所以你可能注意到很多网站开始在滚动的时候让一部分内容保持可见，比如，侧边栏的部分区域。position:sticky为此而生。\n\n<!--more-->\n\n## position:sticky用法\n\nposition:sticky是一个新的css3属性，它的表现类似position:relative和position:fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative; 而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置。\n\n使用起来也非常简单：\n\n``` CSS\n//目前来说还需要用私有前缀～～\n.sticky { \n    position: -webkit-sticky; position:sticky; top: 15px;\n}\n```\n\n## 浏览器兼容性\n由于这是一个全新的属性，以至于到现在都没有一个规范，W3C也刚刚开始讨论它，而现在只有webkit nightly版本和chrome 开发版(Chrome 23.0.1247.0+ Canary)才开始支持它。\n\n另外需要注意的是，如果同时定义了left和right值，那么left生效，right会无效，同样，同时定义了top和bottom，top赢～～\n\n## polyfill \n虽然其它浏览器尚不支持，但是实现起来其实不难，我们可以用js简单实现：\n\n[点击这里查看DEMO](https://output.jsbin.com/tuxuyuj/1)\n\n##### HTML\n``` HTML\n<div class=\"header\"></div>  \n```\n#####  CSS\n\n``` CSS\n.sticky { position: fixed; top: 0; } \n.header { width: 100%; background: #F6D565; padding: 25px 0; }\n```\n##### JS\n``` JS\nvar header = document.querySelector('.header'); \nvar origOffsetY = header.offsetTop; \nfunction onScroll(e) { \n    window.scrollY >= origOffsetY ? header.classList.add('sticky') : header.classList.remove('sticky'); \n} \ndocument.addEventListener('scroll', onScroll);\n```\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"css/position-sticky","published":1,"updated":"2018-01-08T03:27:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt1q0006fme3ge4hxobi","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>用户的屏幕越来越大，而页面太宽的话会不宜阅读，所以绝大部分网站的主体宽度和之前相比没有太大的变化，于是浏览器中就有越来越多的空白区域，所以你可能注意到很多网站开始在滚动的时候让一部分内容保持可见，比如，侧边栏的部分区域。position:sticky为此而生。</p>\n<a id=\"more\"></a>\n<h2 id=\"position-sticky用法\"><a href=\"#position-sticky用法\" class=\"headerlink\" title=\"position:sticky用法\"></a>position:sticky用法</h2><p>position:sticky是一个新的css3属性，它的表现类似position:relative和position:fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative; 而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置。</p>\n<p>使用起来也非常简单：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//目前来说还需要用私有前缀～～</span><br><span class=\"line\"><span class=\"selector-class\">.sticky</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: -webkit-sticky; <span class=\"attribute\">position</span>:sticky; <span class=\"attribute\">top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h2><p>由于这是一个全新的属性，以至于到现在都没有一个规范，W3C也刚刚开始讨论它，而现在只有webkit nightly版本和chrome 开发版(Chrome 23.0.1247.0+ Canary)才开始支持它。</p>\n<p>另外需要注意的是，如果同时定义了left和right值，那么left生效，right会无效，同样，同时定义了top和bottom，top赢～～</p>\n<h2 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h2><p>虽然其它浏览器尚不支持，但是实现起来其实不难，我们可以用js简单实现：</p>\n<p><a href=\"https://output.jsbin.com/tuxuyuj/1\" target=\"_blank\" rel=\"noopener\">点击这里查看DEMO</a></p>\n<h5 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sticky</span> &#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">background</span>: <span class=\"number\">#F6D565</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">25px</span> <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.header'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> origOffsetY = header.offsetTop; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onScroll</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollY &gt;= origOffsetY ? header.classList.add(<span class=\"string\">'sticky'</span>) : header.classList.remove(<span class=\"string\">'sticky'</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>, onScroll);</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>用户的屏幕越来越大，而页面太宽的话会不宜阅读，所以绝大部分网站的主体宽度和之前相比没有太大的变化，于是浏览器中就有越来越多的空白区域，所以你可能注意到很多网站开始在滚动的时候让一部分内容保持可见，比如，侧边栏的部分区域。position:sticky为此而生。</p>","more":"<h2 id=\"position-sticky用法\"><a href=\"#position-sticky用法\" class=\"headerlink\" title=\"position:sticky用法\"></a>position:sticky用法</h2><p>position:sticky是一个新的css3属性，它的表现类似position:relative和position:fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative; 而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置。</p>\n<p>使用起来也非常简单：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//目前来说还需要用私有前缀～～</span><br><span class=\"line\"><span class=\"selector-class\">.sticky</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: -webkit-sticky; <span class=\"attribute\">position</span>:sticky; <span class=\"attribute\">top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h2><p>由于这是一个全新的属性，以至于到现在都没有一个规范，W3C也刚刚开始讨论它，而现在只有webkit nightly版本和chrome 开发版(Chrome 23.0.1247.0+ Canary)才开始支持它。</p>\n<p>另外需要注意的是，如果同时定义了left和right值，那么left生效，right会无效，同样，同时定义了top和bottom，top赢～～</p>\n<h2 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h2><p>虽然其它浏览器尚不支持，但是实现起来其实不难，我们可以用js简单实现：</p>\n<p><a href=\"https://output.jsbin.com/tuxuyuj/1\" target=\"_blank\" rel=\"noopener\">点击这里查看DEMO</a></p>\n<h5 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sticky</span> &#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">background</span>: <span class=\"number\">#F6D565</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">25px</span> <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.header'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> origOffsetY = header.offsetTop; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onScroll</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollY &gt;= origOffsetY ? header.classList.add(<span class=\"string\">'sticky'</span>) : header.classList.remove(<span class=\"string\">'sticky'</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>, onScroll);</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"HTML5 ARIA role","p":"h5/aria-role","date":"2018-01-17T07:55:17.000Z","_content":"\n\n## 前言\nARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！\n\n<!--more-->\n\n## 正文\n\nHTML5 aria-* and role\n\n　　在video-js的demo中看到了很多aria-*，不知道干嘛的。google一下，发现aria的意思是*** Accessible Rich Internet Application ***。 Accessible一般是为不方便的人士提供的功能，比如windows的放大镜，语音朗读，高对比度主题等。\n\n　　主要内容是说明并演示了HTML5针对html tag增加的属性：role 和 aria-*。\n\n　　role的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role=“button”，辅助工具就可以认出这实际上是个button。\n\n　　ARIA Roles\n\n　　Use the ARIA role attribute to indicate that a generic tag is playing the role of a standard widget like a button.\n\n　　而aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如，\n\n``` JS\n　　<div role=\"checkbox\" aria-checked=\"checked\"$amp;>amp;$lt;/div>\n```\n\n　　辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。\n\n　　Add ARIA for screen readers\n\n　　ARIA attributes provides semantic information to screen readers that is normally conveyed visually.\n\n　　Note that using ARIA does not automatically implement the standard widget behavior, you'll still need to add focus management and keyboard navigation yourself.\n\n## 小结\n[https://www.w3.org/TR/aria-in-html/](https://www.w3.org/TR/aria-in-html/)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/h5/aria-role.md","raw":"---\ntitle: HTML5 ARIA role\np: h5/aria-role\ndate: 2018-01-17 15:55:17\ntags: [ARIA,H5,HTML5]\ncategories: H5\n---\n\n\n## 前言\nARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！\n\n<!--more-->\n\n## 正文\n\nHTML5 aria-* and role\n\n　　在video-js的demo中看到了很多aria-*，不知道干嘛的。google一下，发现aria的意思是*** Accessible Rich Internet Application ***。 Accessible一般是为不方便的人士提供的功能，比如windows的放大镜，语音朗读，高对比度主题等。\n\n　　主要内容是说明并演示了HTML5针对html tag增加的属性：role 和 aria-*。\n\n　　role的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role=“button”，辅助工具就可以认出这实际上是个button。\n\n　　ARIA Roles\n\n　　Use the ARIA role attribute to indicate that a generic tag is playing the role of a standard widget like a button.\n\n　　而aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如，\n\n``` JS\n　　<div role=\"checkbox\" aria-checked=\"checked\"$amp;>amp;$lt;/div>\n```\n\n　　辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。\n\n　　Add ARIA for screen readers\n\n　　ARIA attributes provides semantic information to screen readers that is normally conveyed visually.\n\n　　Note that using ARIA does not automatically implement the standard widget behavior, you'll still need to add focus management and keyboard navigation yourself.\n\n## 小结\n[https://www.w3.org/TR/aria-in-html/](https://www.w3.org/TR/aria-in-html/)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"h5/aria-role","published":1,"updated":"2018-01-17T08:07:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt1t0007fme3eglkzst0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>HTML5 aria-* and role</p>\n<p>　　在video-js的demo中看到了很多aria-<em>，不知道干嘛的。google一下，发现aria的意思是**</em> Accessible Rich Internet Application <em>*</em>。 Accessible一般是为不方便的人士提供的功能，比如windows的放大镜，语音朗读，高对比度主题等。</p>\n<p>　　主要内容是说明并演示了HTML5针对html tag增加的属性：role 和 aria-*。</p>\n<p>　　role的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role=“button”，辅助工具就可以认出这实际上是个button。</p>\n<p>　　ARIA Roles</p>\n<p>　　Use the ARIA role attribute to indicate that a generic tag is playing the role of a standard widget like a button.</p>\n<p>　　而aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　&lt;div role=<span class=\"string\">\"checkbox\"</span> aria-checked=<span class=\"string\">\"checked\"</span>$amp;&gt;amp;$lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。</p>\n<p>　　Add ARIA for screen readers</p>\n<p>　　ARIA attributes provides semantic information to screen readers that is normally conveyed visually.</p>\n<p>　　Note that using ARIA does not automatically implement the standard widget behavior, you’ll still need to add focus management and keyboard navigation yourself.</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://www.w3.org/TR/aria-in-html/\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/TR/aria-in-html/</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>HTML5 aria-* and role</p>\n<p>　　在video-js的demo中看到了很多aria-<em>，不知道干嘛的。google一下，发现aria的意思是**</em> Accessible Rich Internet Application <em>*</em>。 Accessible一般是为不方便的人士提供的功能，比如windows的放大镜，语音朗读，高对比度主题等。</p>\n<p>　　主要内容是说明并演示了HTML5针对html tag增加的属性：role 和 aria-*。</p>\n<p>　　role的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role=“button”，辅助工具就可以认出这实际上是个button。</p>\n<p>　　ARIA Roles</p>\n<p>　　Use the ARIA role attribute to indicate that a generic tag is playing the role of a standard widget like a button.</p>\n<p>　　而aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　&lt;div role=<span class=\"string\">\"checkbox\"</span> aria-checked=<span class=\"string\">\"checked\"</span>$amp;&gt;amp;$lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。</p>\n<p>　　Add ARIA for screen readers</p>\n<p>　　ARIA attributes provides semantic information to screen readers that is normally conveyed visually.</p>\n<p>　　Note that using ARIA does not automatically implement the standard widget behavior, you’ll still need to add focus management and keyboard navigation yourself.</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://www.w3.org/TR/aria-in-html/\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/TR/aria-in-html/</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"前端技术文章导航整理","p":"h5/links-fe","date":"2018-01-18T04:09:54.000Z","_content":"\n## 前言\n\n<!--more-->\n\n- [npm 发布 2017 JavaScript 框架报告：React 占主导地位](http://www.oschina.net/news/92218/npm-state-of-javascript-frameworks-2017-part-1)\n\n\n## 正文\n\n## 小结\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/h5/links-fe.md","raw":"---\ntitle: 前端技术文章导航整理\ntags: [web, h5]\np: h5/links-fe\ndate: 2018-01-18 12:09:54\ncategories: h5\n---\n\n## 前言\n\n<!--more-->\n\n- [npm 发布 2017 JavaScript 框架报告：React 占主导地位](http://www.oschina.net/news/92218/npm-state-of-javascript-frameworks-2017-part-1)\n\n\n## 正文\n\n## 小结\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"h5/links-fe","published":1,"updated":"2018-01-18T04:11:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt1v0008fme3poxwpo9m","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><a id=\"more\"></a>\n<ul>\n<li><a href=\"http://www.oschina.net/news/92218/npm-state-of-javascript-frameworks-2017-part-1\" target=\"_blank\" rel=\"noopener\">npm 发布 2017 JavaScript 框架报告：React 占主导地位</a></li>\n</ul>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>","more":"<ul>\n<li><a href=\"http://www.oschina.net/news/92218/npm-state-of-javascript-frameworks-2017-part-1\" target=\"_blank\" rel=\"noopener\">npm 发布 2017 JavaScript 框架报告：React 占主导地位</a></li>\n</ul>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"Git使用基础教程","p":"git/how-to-use-git","date":"2017-12-27T12:45:44.000Z","_content":"\n## 目录\n\n一：Git是什么?\n二：SVN与Git的最主要的区别?\n三：在windows上如何安装Git?\n四：如何操作？\n五：远程仓库\n六：创建与合并分支\n七：bug分支\n八：多人协作\n\n<!--more-->\n\n### 一：Git是什么？\nGit是目前世界上最先进的分布式版本控制系统。\n工作原理 / 流程：\n\n![](http://img.mukewang.com/59c31e4400013bc911720340.png)\n\nWorkspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n\n### 二：SVN与Git的最主要的区别？\n\nSVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。\n\nGit是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。\n\n### 三、在windows上如何安装Git？\n\nmsysgit是 windows版的Git,如下：\n\n![](http://img.mukewang.com/59c1cfa400019aee02460029.jpg)\n\n需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 \"Git --> Git Bash\",如下：\n\n![](http://img.mukewang.com/59c1cfd20001c2d602530073.jpg)\n\n会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：\n\n![](http://img.mukewang.com/59c1cfe70001462e06680380.jpg)\n\n安装完成后，还需要最后一步设置，在命令行输入如下：\n\n![](http://img.mukewang.com/59c1d041000110d906460213.jpg)\n\n因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。\n\n注意：git config --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。\n\n### 四：如何操作？\n\n#### 一：创建版本库。\n\n什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。\n\n所以创建一个版本库也非常简单，如下我是D盘 –> www下 目录下新建一个testgit版本库。\n\n![](http://img.mukewang.com/59c1d1060001909005780268.png)\n\npwd 命令是用于显示当前的目录。\n\n通过命令 git init 把这个目录变成git可以管理的仓库，如下：\n\n![](http://img.mukewang.com/59c1d12b0001b08305270077.png)\n\n这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：\n\n![](http://img.mukewang.com/59c1d143000112df06120173.png)\n\n把文件添加到版本库中。\n\n首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。\n\n下面先看下demo如下演示：\n---\n我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111\n\n第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：\n\n![](http://img.mukewang.com/59c1d2080001e4bb04490080.png)\n\n如果和上面一样，没有任何提示，说明已经添加成功了。\n\n第二步：用命令 git commit告诉Git，把文件提交到仓库。\n\n![](http://img.mukewang.com/59c1d2200001f05b04930121.png)\n\n现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：\n\n![](http://img.mukewang.com/59c1d2340001a87904690107.png)\n\n说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：\n\n![](http://img.mukewang.com/59c1d2500001634606170171.png)\n\n上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。\n接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：\ngit diff readme.txt 如下：\n\n![](http://img.mukewang.com/59c1d2cb00010a0304960202.png)\n\n如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。\n\n知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。\n\n如下：\n![](http://img.mukewang.com/59c1d2ff00015a9606180342.png)\n\n### 二：版本回退：\n\n如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行\n\n内容为33333333333333.继续执行命令如下：\n\n![](http://img.mukewang.com/59c1d32b00012ba604570139.png)\n\n现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：\n\n![](http://img.mukewang.com/59c1d34e0001a1ac06050304.png)\n\ngit log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：\n\n![](http://img.mukewang.com/59c1d3fc00013ad206040097.png)\n\n现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset --hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset --hard HEAD~100 即可。未回退之前的readme.txt内容如下：\n\n![](http://img.mukewang.com/59c1d4140001a0c404490165.png)\n\n如果想回退到上一个版本的命令如下操作：\n\n![](http://img.mukewang.com/59c1d429000199fc04610105.png)\n\n再来查看下 readme.txt内容如下：通过命令cat readme.txt查看\n\n![](http://img.mukewang.com/59c1d4470001fcdc04360085.png)\n\n可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：\n\n![](http://img.mukewang.com/59c1d45300012d9604800219.png)\n\n我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：\ngit reset --hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：\n\n![](http://img.mukewang.com/59c1d51a0001d5fc05100122.png)\n\n通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令\ngit reset --hard 6fcfc89来恢复了。演示如下：\n\n![](http://img.mukewang.com/59c1d53a0001b8b305050153.png)\n\n可以看到 目前已经是最新的版本了。\n\n### 三：理解工作区与暂存区的区别？\n\n工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。\n\n版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。\n\n我们前面说过使用Git提交文件到版本库有两步：\n\n第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。\n\n第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。\n\n我们继续使用demo来演示下：\n\n我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：\n\n![](http://img.mukewang.com/59c1d55a0001a3c306430241.png)\n\n现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：\n\n![](http://img.mukewang.com/59c1d56a0001a28704700241.png)\n\n接着我们可以使用git commit一次性提交到分支上，如下：\n\n![](http://img.mukewang.com/59c1d57b0001b4fe06190166.png)\n\n### 四：Git撤销修改和删除文件操作。\n\n#### 一：撤销修改：\n\n比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：\n\n![](http://img.mukewang.com/59c1d5e40001806803930139.png)\n\n在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：\n\n第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。\n\n第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset --hard HEAD^\n\n但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：\n\n![](http://img.mukewang.com/59c1d5fa0001b07806400168.png)\n\n可以发现，Git会告诉你，git checkout -- file 可以丢弃工作区的修改，如下命令：\ngit checkout -- readme.txt,如下所示：\n\n![](http://img.mukewang.com/59c1d6390001419705210140.png)\n\n命令 git checkout --readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：\n\n1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。\n\n2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。\n\n对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：\n\n![](http://img.mukewang.com/59c1d6ca0001782f06160482.png)\n\n注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。\n\n#### 二：删除文件。\n\n假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：\n\n![](http://img.mukewang.com/59c1d6de0001a31606390392.png)\n\n如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，\n\n![](http://img.mukewang.com/59c1d78200017e8f07030192.png)\n\n只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？\n可以使用如下命令 git checkout -- b.txt，如下所示：\n\n![](http://img.mukewang.com/59c1d7980001368e05570244.png)\n\n再来看看我们testgit目录，添加了3个文件了。如下所示：\n\n![](http://img.mukewang.com/59c1d7b70001308907550258.png)\n\n### 五：远程仓库。\n\n在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：\n\n第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：\n\nssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：\n\n![](http://img.mukewang.com/59c1d7d7000120d107530169.png)\n\nid_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。\n\n![](http://img.mukewang.com/59c1d7ef0001c75411330860.png)\n\n点击 Add Key，你就应该可以看到已经添加的key。\n\n![](http://img.mukewang.com/59c1d8540001eb3707620373.png)\n\n如何添加远程库？\n\n现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。\n\n首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：\n\n![](http://img.mukewang.com/59c1d86a0001044b10840605.png)\n\n在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：\n\n![](http://img.mukewang.com/59c1d8850001b5ea10260661.png)\n\n目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n\n现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：\n``` \ngit remote add origin https://github.com/tugenhua0707/testgit.git\n```\n\n所有的如下：\n\n![](http://img.mukewang.com/59c1d8a70001c86206320252.png)\n\n把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：\n\n![](http://img.mukewang.com/59c1d8bb00019ff310480655.png)\n\n从现在起，只要本地作了提交，就可以通过如下命令：\n\n    git push origin master\n\n把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。\n\n\n#### 如何从远程库克隆？\n上面我们了解了先有本地库，后有远程库时候，如何关联远程库。\n现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？\n首先，登录github，创建一个新的仓库，名字叫testgit2.如下：\n\n![](http://img.mukewang.com/59c1d95e0001f0fc10450604.png)\n\n如下，我们看到：\n\n![](http://img.mukewang.com/59c1d97400014d4e10360484.png)\n\n现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：\n\n![](http://img.mukewang.com/59c1d9860001e0d806370127.png)\n\n接着在我本地目录下 生成testgit2目录了，如下所示：\n\n![](http://img.mukewang.com/59c1d99500016a2e07130197.png)\n\n### 六：创建与合并分支。\n在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。\n\n首先，我们来创建dev分支，然后切换到dev分支上。如下操作：\n\n![](http://img.mukewang.com/59c1d9aa0001c15604080167.png)\n\ngit checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令\ngit branch dev\ngit checkout dev\ngit branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777\n首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：\n\n![](http://img.mukewang.com/59c1da3f0001b5b703890392.png)\n\n现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：\n\n![](http://img.mukewang.com/59c1da520001d44c06340206.png)\n\n现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：\n\n![](http://img.mukewang.com/59c1da69000145ca05320255.png)\n\ngit merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n合并完成后，我们可以接着删除dev分支了，操作如下：\n\n![](http://img.mukewang.com/59c1da91000120cd06430139.png)\n\n总结创建与合并分支命令如下：\n查看分支：git branch\n创建分支：git branch name\n切换分支：git checkout name\n创建+切换分支：git checkout –b name\n合并某分支到当前分支：git merge name\n删除分支：git branch –d name\n如何解决冲突？\n下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：\n\n![](http://img.mukewang.com/59c1db410001036105690462.png)\n\n同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：\n\n![](http://img.mukewang.com/59c1daaf0001133205840500.png)\n\n现在我们需要在master分支上来合并fenzhi1，如下操作：\n\n![](http://img.mukewang.com/59c1daff000106eb06340589.png)\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，其中<<<HEAD是指主分支修改的内容，>>>>>fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：\n\n![](http://img.mukewang.com/59c1dbaf00015f2205770266.png)\n\n如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：\n\n![](http://img.mukewang.com/59c1dbc50001076c04970869.png)\n\n## 3.分支管理策略。 \n\n通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：\n\n创建一个dev分支。\n修改readme.txt内容。\n添加到暂存区。\n切换回主分支(master)。\n合并dev分支，使用命令 git merge –no-ff -m “注释” dev\n查看历史记录\n截图如下：\n\n![](http://img.mukewang.com/59c1dbdc0001836d06030780.png)\n\n分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。\n\n#### 七：bug分支：\n\n在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。\n\n比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：\n\n![](http://img.mukewang.com/59c1dc4e000141b306260166.png)\n\n并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：\n\n![](http://img.mukewang.com/59c1dc63000121ff06510188.png)\n\n所以现在我可以通过创建issue-404分支来修复bug了。\n首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：\n\n![](http://img.mukewang.com/59c1dc7000010f8506010533.png)\n\n修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：\n\n![](http://img.mukewang.com/59c1dce00001c1ed06120441.png)\n\n现在，我们回到dev分支上干活了。\n\n![](http://img.mukewang.com/59c1dcfa00019c8104220136.png)\n\n工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：\n\n![](http://img.mukewang.com/59c1dd07000152b404340093.png)\n\n工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：\n\n1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。\n\n2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。\n\n演示如下\n![](http://img.mukewang.com/59c1dd1f000174d406380466.png)\n\n### 八：多人协作。\n当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。\n要查看远程库的信息 使用 git remote\n要查看远程库的详细信息 使用 git remote –v\n\n如下演示：\n\n![](http://img.mukewang.com/59c1dd7d000136fd06190169.png)\n\n### 一：推送分支：\n\n推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n使用命令 git push origin master\n\n比如我现在的github上的readme.txt代码如下：\n\n![](http://img.mukewang.com/59c1dd90000164a508280459.png)\n\n本地的readme.txt代码如下：\n\n![](http://img.mukewang.com/59c1dda60001771804210205.png)\n\n现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：\n\n![](http://img.mukewang.com/59c1ddbf0001271e05410203.png)\n\n我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：\n\n![](http://img.mukewang.com/59c1ddcf0001771f08100484.png)\n\n可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev\n那么一般情况下，那些分支要推送呢？\nmaster分支是主分支，因此要时刻与远程同步。\n一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。\n\n二：抓取分支：\n多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2\n但是我首先要把dev分支也要推送到远程去，如下\n\n![](http://img.mukewang.com/59c1ded800014adf05030151.jpg)\n\n接着进入testgit2目录，进行克隆远程的库到本地来，如下：\n\n![](http://img.mukewang.com/59c1deb70001ec7605080170.png)\n\n现在目录下生成有如下所示：\n\n![](http://img.mukewang.com/59c1defe0001942707180256.png)\n\n现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev\n\n现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。\n\n如下：\n\n![](http://img.mukewang.com/59c1df160001ef1e06020730.png)\n\n小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：\n\n![](http://img.mukewang.com/59c1df340001209306470759.png)\n\n由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。\n\n![](http://img.mukewang.com/59c1dfa60001473e05940282.png)\n\ngit pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：\n\n![](http://img.mukewang.com/59c1dfc8000159c106460199.png)\n\n这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：\n我们可以先来看看readme.txt内容了。\n\n![](http://img.mukewang.com/59c1dff70001a87605190277.png)\n\n现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：\n\n![](http://img.mukewang.com/59c1e0130001843906050480.png)\n\n因此：多人协作工作模式一般是这样的：\n首先，可以试图用git push origin branch-name推送自己的修改.\n如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。\n如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。\n","source":"_posts/git/how-to-use-git.md","raw":"---\ntitle: Git使用基础教程\np: git/how-to-use-git\ndate: 2017-12-27 20:45:44\ntags: [git]\ncategories: Tools\n---\n\n## 目录\n\n一：Git是什么?\n二：SVN与Git的最主要的区别?\n三：在windows上如何安装Git?\n四：如何操作？\n五：远程仓库\n六：创建与合并分支\n七：bug分支\n八：多人协作\n\n<!--more-->\n\n### 一：Git是什么？\nGit是目前世界上最先进的分布式版本控制系统。\n工作原理 / 流程：\n\n![](http://img.mukewang.com/59c31e4400013bc911720340.png)\n\nWorkspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n\n### 二：SVN与Git的最主要的区别？\n\nSVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。\n\nGit是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。\n\n### 三、在windows上如何安装Git？\n\nmsysgit是 windows版的Git,如下：\n\n![](http://img.mukewang.com/59c1cfa400019aee02460029.jpg)\n\n需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 \"Git --> Git Bash\",如下：\n\n![](http://img.mukewang.com/59c1cfd20001c2d602530073.jpg)\n\n会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：\n\n![](http://img.mukewang.com/59c1cfe70001462e06680380.jpg)\n\n安装完成后，还需要最后一步设置，在命令行输入如下：\n\n![](http://img.mukewang.com/59c1d041000110d906460213.jpg)\n\n因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。\n\n注意：git config --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。\n\n### 四：如何操作？\n\n#### 一：创建版本库。\n\n什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。\n\n所以创建一个版本库也非常简单，如下我是D盘 –> www下 目录下新建一个testgit版本库。\n\n![](http://img.mukewang.com/59c1d1060001909005780268.png)\n\npwd 命令是用于显示当前的目录。\n\n通过命令 git init 把这个目录变成git可以管理的仓库，如下：\n\n![](http://img.mukewang.com/59c1d12b0001b08305270077.png)\n\n这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：\n\n![](http://img.mukewang.com/59c1d143000112df06120173.png)\n\n把文件添加到版本库中。\n\n首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。\n\n下面先看下demo如下演示：\n---\n我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111\n\n第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：\n\n![](http://img.mukewang.com/59c1d2080001e4bb04490080.png)\n\n如果和上面一样，没有任何提示，说明已经添加成功了。\n\n第二步：用命令 git commit告诉Git，把文件提交到仓库。\n\n![](http://img.mukewang.com/59c1d2200001f05b04930121.png)\n\n现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：\n\n![](http://img.mukewang.com/59c1d2340001a87904690107.png)\n\n说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：\n\n![](http://img.mukewang.com/59c1d2500001634606170171.png)\n\n上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。\n接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：\ngit diff readme.txt 如下：\n\n![](http://img.mukewang.com/59c1d2cb00010a0304960202.png)\n\n如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。\n\n知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。\n\n如下：\n![](http://img.mukewang.com/59c1d2ff00015a9606180342.png)\n\n### 二：版本回退：\n\n如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行\n\n内容为33333333333333.继续执行命令如下：\n\n![](http://img.mukewang.com/59c1d32b00012ba604570139.png)\n\n现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：\n\n![](http://img.mukewang.com/59c1d34e0001a1ac06050304.png)\n\ngit log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：\n\n![](http://img.mukewang.com/59c1d3fc00013ad206040097.png)\n\n现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset --hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset --hard HEAD~100 即可。未回退之前的readme.txt内容如下：\n\n![](http://img.mukewang.com/59c1d4140001a0c404490165.png)\n\n如果想回退到上一个版本的命令如下操作：\n\n![](http://img.mukewang.com/59c1d429000199fc04610105.png)\n\n再来查看下 readme.txt内容如下：通过命令cat readme.txt查看\n\n![](http://img.mukewang.com/59c1d4470001fcdc04360085.png)\n\n可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：\n\n![](http://img.mukewang.com/59c1d45300012d9604800219.png)\n\n我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：\ngit reset --hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：\n\n![](http://img.mukewang.com/59c1d51a0001d5fc05100122.png)\n\n通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令\ngit reset --hard 6fcfc89来恢复了。演示如下：\n\n![](http://img.mukewang.com/59c1d53a0001b8b305050153.png)\n\n可以看到 目前已经是最新的版本了。\n\n### 三：理解工作区与暂存区的区别？\n\n工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。\n\n版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。\n\n我们前面说过使用Git提交文件到版本库有两步：\n\n第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。\n\n第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。\n\n我们继续使用demo来演示下：\n\n我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：\n\n![](http://img.mukewang.com/59c1d55a0001a3c306430241.png)\n\n现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：\n\n![](http://img.mukewang.com/59c1d56a0001a28704700241.png)\n\n接着我们可以使用git commit一次性提交到分支上，如下：\n\n![](http://img.mukewang.com/59c1d57b0001b4fe06190166.png)\n\n### 四：Git撤销修改和删除文件操作。\n\n#### 一：撤销修改：\n\n比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：\n\n![](http://img.mukewang.com/59c1d5e40001806803930139.png)\n\n在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：\n\n第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。\n\n第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset --hard HEAD^\n\n但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：\n\n![](http://img.mukewang.com/59c1d5fa0001b07806400168.png)\n\n可以发现，Git会告诉你，git checkout -- file 可以丢弃工作区的修改，如下命令：\ngit checkout -- readme.txt,如下所示：\n\n![](http://img.mukewang.com/59c1d6390001419705210140.png)\n\n命令 git checkout --readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：\n\n1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。\n\n2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。\n\n对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：\n\n![](http://img.mukewang.com/59c1d6ca0001782f06160482.png)\n\n注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。\n\n#### 二：删除文件。\n\n假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：\n\n![](http://img.mukewang.com/59c1d6de0001a31606390392.png)\n\n如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，\n\n![](http://img.mukewang.com/59c1d78200017e8f07030192.png)\n\n只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？\n可以使用如下命令 git checkout -- b.txt，如下所示：\n\n![](http://img.mukewang.com/59c1d7980001368e05570244.png)\n\n再来看看我们testgit目录，添加了3个文件了。如下所示：\n\n![](http://img.mukewang.com/59c1d7b70001308907550258.png)\n\n### 五：远程仓库。\n\n在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：\n\n第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：\n\nssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：\n\n![](http://img.mukewang.com/59c1d7d7000120d107530169.png)\n\nid_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。\n\n![](http://img.mukewang.com/59c1d7ef0001c75411330860.png)\n\n点击 Add Key，你就应该可以看到已经添加的key。\n\n![](http://img.mukewang.com/59c1d8540001eb3707620373.png)\n\n如何添加远程库？\n\n现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。\n\n首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：\n\n![](http://img.mukewang.com/59c1d86a0001044b10840605.png)\n\n在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：\n\n![](http://img.mukewang.com/59c1d8850001b5ea10260661.png)\n\n目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n\n现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：\n``` \ngit remote add origin https://github.com/tugenhua0707/testgit.git\n```\n\n所有的如下：\n\n![](http://img.mukewang.com/59c1d8a70001c86206320252.png)\n\n把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：\n\n![](http://img.mukewang.com/59c1d8bb00019ff310480655.png)\n\n从现在起，只要本地作了提交，就可以通过如下命令：\n\n    git push origin master\n\n把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。\n\n\n#### 如何从远程库克隆？\n上面我们了解了先有本地库，后有远程库时候，如何关联远程库。\n现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？\n首先，登录github，创建一个新的仓库，名字叫testgit2.如下：\n\n![](http://img.mukewang.com/59c1d95e0001f0fc10450604.png)\n\n如下，我们看到：\n\n![](http://img.mukewang.com/59c1d97400014d4e10360484.png)\n\n现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：\n\n![](http://img.mukewang.com/59c1d9860001e0d806370127.png)\n\n接着在我本地目录下 生成testgit2目录了，如下所示：\n\n![](http://img.mukewang.com/59c1d99500016a2e07130197.png)\n\n### 六：创建与合并分支。\n在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。\n\n首先，我们来创建dev分支，然后切换到dev分支上。如下操作：\n\n![](http://img.mukewang.com/59c1d9aa0001c15604080167.png)\n\ngit checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令\ngit branch dev\ngit checkout dev\ngit branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777\n首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：\n\n![](http://img.mukewang.com/59c1da3f0001b5b703890392.png)\n\n现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：\n\n![](http://img.mukewang.com/59c1da520001d44c06340206.png)\n\n现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：\n\n![](http://img.mukewang.com/59c1da69000145ca05320255.png)\n\ngit merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n合并完成后，我们可以接着删除dev分支了，操作如下：\n\n![](http://img.mukewang.com/59c1da91000120cd06430139.png)\n\n总结创建与合并分支命令如下：\n查看分支：git branch\n创建分支：git branch name\n切换分支：git checkout name\n创建+切换分支：git checkout –b name\n合并某分支到当前分支：git merge name\n删除分支：git branch –d name\n如何解决冲突？\n下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：\n\n![](http://img.mukewang.com/59c1db410001036105690462.png)\n\n同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：\n\n![](http://img.mukewang.com/59c1daaf0001133205840500.png)\n\n现在我们需要在master分支上来合并fenzhi1，如下操作：\n\n![](http://img.mukewang.com/59c1daff000106eb06340589.png)\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，其中<<<HEAD是指主分支修改的内容，>>>>>fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：\n\n![](http://img.mukewang.com/59c1dbaf00015f2205770266.png)\n\n如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：\n\n![](http://img.mukewang.com/59c1dbc50001076c04970869.png)\n\n## 3.分支管理策略。 \n\n通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：\n\n创建一个dev分支。\n修改readme.txt内容。\n添加到暂存区。\n切换回主分支(master)。\n合并dev分支，使用命令 git merge –no-ff -m “注释” dev\n查看历史记录\n截图如下：\n\n![](http://img.mukewang.com/59c1dbdc0001836d06030780.png)\n\n分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。\n\n#### 七：bug分支：\n\n在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。\n\n比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：\n\n![](http://img.mukewang.com/59c1dc4e000141b306260166.png)\n\n并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：\n\n![](http://img.mukewang.com/59c1dc63000121ff06510188.png)\n\n所以现在我可以通过创建issue-404分支来修复bug了。\n首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：\n\n![](http://img.mukewang.com/59c1dc7000010f8506010533.png)\n\n修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：\n\n![](http://img.mukewang.com/59c1dce00001c1ed06120441.png)\n\n现在，我们回到dev分支上干活了。\n\n![](http://img.mukewang.com/59c1dcfa00019c8104220136.png)\n\n工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：\n\n![](http://img.mukewang.com/59c1dd07000152b404340093.png)\n\n工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：\n\n1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。\n\n2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。\n\n演示如下\n![](http://img.mukewang.com/59c1dd1f000174d406380466.png)\n\n### 八：多人协作。\n当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。\n要查看远程库的信息 使用 git remote\n要查看远程库的详细信息 使用 git remote –v\n\n如下演示：\n\n![](http://img.mukewang.com/59c1dd7d000136fd06190169.png)\n\n### 一：推送分支：\n\n推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n使用命令 git push origin master\n\n比如我现在的github上的readme.txt代码如下：\n\n![](http://img.mukewang.com/59c1dd90000164a508280459.png)\n\n本地的readme.txt代码如下：\n\n![](http://img.mukewang.com/59c1dda60001771804210205.png)\n\n现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：\n\n![](http://img.mukewang.com/59c1ddbf0001271e05410203.png)\n\n我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：\n\n![](http://img.mukewang.com/59c1ddcf0001771f08100484.png)\n\n可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev\n那么一般情况下，那些分支要推送呢？\nmaster分支是主分支，因此要时刻与远程同步。\n一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。\n\n二：抓取分支：\n多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2\n但是我首先要把dev分支也要推送到远程去，如下\n\n![](http://img.mukewang.com/59c1ded800014adf05030151.jpg)\n\n接着进入testgit2目录，进行克隆远程的库到本地来，如下：\n\n![](http://img.mukewang.com/59c1deb70001ec7605080170.png)\n\n现在目录下生成有如下所示：\n\n![](http://img.mukewang.com/59c1defe0001942707180256.png)\n\n现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev\n\n现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。\n\n如下：\n\n![](http://img.mukewang.com/59c1df160001ef1e06020730.png)\n\n小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：\n\n![](http://img.mukewang.com/59c1df340001209306470759.png)\n\n由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。\n\n![](http://img.mukewang.com/59c1dfa60001473e05940282.png)\n\ngit pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：\n\n![](http://img.mukewang.com/59c1dfc8000159c106460199.png)\n\n这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：\n我们可以先来看看readme.txt内容了。\n\n![](http://img.mukewang.com/59c1dff70001a87605190277.png)\n\n现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：\n\n![](http://img.mukewang.com/59c1e0130001843906050480.png)\n\n因此：多人协作工作模式一般是这样的：\n首先，可以试图用git push origin branch-name推送自己的修改.\n如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。\n如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。\n","slug":"git/how-to-use-git","published":1,"updated":"2018-01-05T03:56:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt1z000cfme3zf3i2uzz","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>一：Git是什么?<br>二：SVN与Git的最主要的区别?<br>三：在windows上如何安装Git?<br>四：如何操作？<br>五：远程仓库<br>六：创建与合并分支<br>七：bug分支<br>八：多人协作</p>\n<a id=\"more\"></a>\n<h3 id=\"一：Git是什么？\"><a href=\"#一：Git是什么？\" class=\"headerlink\" title=\"一：Git是什么？\"></a>一：Git是什么？</h3><p>Git是目前世界上最先进的分布式版本控制系统。<br>工作原理 / 流程：</p>\n<p><img src=\"http://img.mukewang.com/59c31e4400013bc911720340.png\" alt=\"\"></p>\n<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>\n<h3 id=\"二：SVN与Git的最主要的区别？\"><a href=\"#二：SVN与Git的最主要的区别？\" class=\"headerlink\" title=\"二：SVN与Git的最主要的区别？\"></a>二：SVN与Git的最主要的区别？</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>\n<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>\n<h3 id=\"三、在windows上如何安装Git？\"><a href=\"#三、在windows上如何安装Git？\" class=\"headerlink\" title=\"三、在windows上如何安装Git？\"></a>三、在windows上如何安装Git？</h3><p>msysgit是 windows版的Git,如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1cfa400019aee02460029.jpg\" alt=\"\"></p>\n<p>需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”,如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1cfd20001c2d602530073.jpg\" alt=\"\"></p>\n<p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1cfe70001462e06680380.jpg\" alt=\"\"></p>\n<p>安装完成后，还需要最后一步设置，在命令行输入如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d041000110d906460213.jpg\" alt=\"\"></p>\n<p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p>\n<p>注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p>\n<h3 id=\"四：如何操作？\"><a href=\"#四：如何操作？\" class=\"headerlink\" title=\"四：如何操作？\"></a>四：如何操作？</h3><h4 id=\"一：创建版本库。\"><a href=\"#一：创建版本库。\" class=\"headerlink\" title=\"一：创建版本库。\"></a>一：创建版本库。</h4><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p>\n<p>所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p>\n<p><img src=\"http://img.mukewang.com/59c1d1060001909005780268.png\" alt=\"\"></p>\n<p>pwd 命令是用于显示当前的目录。</p>\n<p>通过命令 git init 把这个目录变成git可以管理的仓库，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d12b0001b08305270077.png\" alt=\"\"></p>\n<p>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d143000112df06120173.png\" alt=\"\"></p>\n<p>把文件添加到版本库中。</p>\n<p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p>\n<h2 id=\"下面先看下demo如下演示：\"><a href=\"#下面先看下demo如下演示：\" class=\"headerlink\" title=\"下面先看下demo如下演示：\"></a>下面先看下demo如下演示：</h2><p>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p>\n<p>第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2080001e4bb04490080.png\" alt=\"\"></p>\n<p>如果和上面一样，没有任何提示，说明已经添加成功了。</p>\n<p>第二步：用命令 git commit告诉Git，把文件提交到仓库。</p>\n<p><img src=\"http://img.mukewang.com/59c1d2200001f05b04930121.png\" alt=\"\"></p>\n<p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2340001a87904690107.png\" alt=\"\"></p>\n<p>说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2500001634606170171.png\" alt=\"\"></p>\n<p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。<br>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：<br>git diff readme.txt 如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2cb00010a0304960202.png\" alt=\"\"></p>\n<p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p>\n<p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。</p>\n<p>如下：<br><img src=\"http://img.mukewang.com/59c1d2ff00015a9606180342.png\" alt=\"\"></p>\n<h3 id=\"二：版本回退：\"><a href=\"#二：版本回退：\" class=\"headerlink\" title=\"二：版本回退：\"></a>二：版本回退：</h3><p>如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p>\n<p>内容为33333333333333.继续执行命令如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d32b00012ba604570139.png\" alt=\"\"></p>\n<p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d34e0001a1ac06050304.png\" alt=\"\"></p>\n<p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d3fc00013ad206040097.png\" alt=\"\"></p>\n<p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d4140001a0c404490165.png\" alt=\"\"></p>\n<p>如果想回退到上一个版本的命令如下操作：</p>\n<p><img src=\"http://img.mukewang.com/59c1d429000199fc04610105.png\" alt=\"\"></p>\n<p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p>\n<p><img src=\"http://img.mukewang.com/59c1d4470001fcdc04360085.png\" alt=\"\"></p>\n<p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d45300012d9604800219.png\" alt=\"\"></p>\n<p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：<br>git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d51a0001d5fc05100122.png\" alt=\"\"></p>\n<p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令<br>git reset –hard 6fcfc89来恢复了。演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d53a0001b8b305050153.png\" alt=\"\"></p>\n<p>可以看到 目前已经是最新的版本了。</p>\n<h3 id=\"三：理解工作区与暂存区的区别？\"><a href=\"#三：理解工作区与暂存区的区别？\" class=\"headerlink\" title=\"三：理解工作区与暂存区的区别？\"></a>三：理解工作区与暂存区的区别？</h3><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p>\n<p>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p>\n<p>我们前面说过使用Git提交文件到版本库有两步：</p>\n<p>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p>\n<p>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p>\n<p>我们继续使用demo来演示下：</p>\n<p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d55a0001a3c306430241.png\" alt=\"\"></p>\n<p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d56a0001a28704700241.png\" alt=\"\"></p>\n<p>接着我们可以使用git commit一次性提交到分支上，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d57b0001b4fe06190166.png\" alt=\"\"></p>\n<h3 id=\"四：Git撤销修改和删除文件操作。\"><a href=\"#四：Git撤销修改和删除文件操作。\" class=\"headerlink\" title=\"四：Git撤销修改和删除文件操作。\"></a>四：Git撤销修改和删除文件操作。</h3><h4 id=\"一：撤销修改：\"><a href=\"#一：撤销修改：\" class=\"headerlink\" title=\"一：撤销修改：\"></a>一：撤销修改：</h4><p>比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d5e40001806803930139.png\" alt=\"\"></p>\n<p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p>\n<p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p>\n<p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^</p>\n<p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d5fa0001b07806400168.png\" alt=\"\"></p>\n<p>可以发现，Git会告诉你，git checkout – file 可以丢弃工作区的修改，如下命令：<br>git checkout – readme.txt,如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d6390001419705210140.png\" alt=\"\"></p>\n<p>命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p>\n<p>1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</p>\n<p>2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p>\n<p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d6ca0001782f06160482.png\" alt=\"\"></p>\n<p>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</p>\n<h4 id=\"二：删除文件。\"><a href=\"#二：删除文件。\" class=\"headerlink\" title=\"二：删除文件。\"></a>二：删除文件。</h4><p>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d6de0001a31606390392.png\" alt=\"\"></p>\n<p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p>\n<p><img src=\"http://img.mukewang.com/59c1d78200017e8f07030192.png\" alt=\"\"></p>\n<p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？<br>可以使用如下命令 git checkout – b.txt，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d7980001368e05570244.png\" alt=\"\"></p>\n<p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d7b70001308907550258.png\" alt=\"\"></p>\n<h3 id=\"五：远程仓库。\"><a href=\"#五：远程仓库。\" class=\"headerlink\" title=\"五：远程仓库。\"></a>五：远程仓库。</h3><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p>\n<p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p>\n<p>ssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d7d7000120d107530169.png\" alt=\"\"></p>\n<p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n<p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p>\n<p><img src=\"http://img.mukewang.com/59c1d7ef0001c75411330860.png\" alt=\"\"></p>\n<p>点击 Add Key，你就应该可以看到已经添加的key。</p>\n<p><img src=\"http://img.mukewang.com/59c1d8540001eb3707620373.png\" alt=\"\"></p>\n<p>如何添加远程库？</p>\n<p>现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p>\n<p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d86a0001044b10840605.png\" alt=\"\"></p>\n<p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>\n<p><img src=\"http://img.mukewang.com/59c1d8850001b5ea10260661.png\" alt=\"\"></p>\n<p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>\n<p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/tugenhua0707/testgit.git</span><br></pre></td></tr></table></figure></p>\n<p>所有的如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d8a70001c86206320252.png\" alt=\"\"></p>\n<p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d8bb00019ff310480655.png\" alt=\"\"></p>\n<p>从现在起，只要本地作了提交，就可以通过如下命令：</p>\n<pre><code>git push origin master\n</code></pre><p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p>\n<h4 id=\"如何从远程库克隆？\"><a href=\"#如何从远程库克隆？\" class=\"headerlink\" title=\"如何从远程库克隆？\"></a>如何从远程库克隆？</h4><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。<br>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？<br>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d95e0001f0fc10450604.png\" alt=\"\"></p>\n<p>如下，我们看到：</p>\n<p><img src=\"http://img.mukewang.com/59c1d97400014d4e10360484.png\" alt=\"\"></p>\n<p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d9860001e0d806370127.png\" alt=\"\"></p>\n<p>接着在我本地目录下 生成testgit2目录了，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d99500016a2e07130197.png\" alt=\"\"></p>\n<h3 id=\"六：创建与合并分支。\"><a href=\"#六：创建与合并分支。\" class=\"headerlink\" title=\"六：创建与合并分支。\"></a>六：创建与合并分支。</h3><p>在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>\n<p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p>\n<p><img src=\"http://img.mukewang.com/59c1d9aa0001c15604080167.png\" alt=\"\"></p>\n<p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令<br>git branch dev<br>git checkout dev<br>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777<br>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1da3f0001b5b703890392.png\" alt=\"\"></p>\n<p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1da520001d44c06340206.png\" alt=\"\"></p>\n<p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1da69000145ca05320255.png\" alt=\"\"></p>\n<p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。<br>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>合并完成后，我们可以接着删除dev分支了，操作如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1da91000120cd06430139.png\" alt=\"\"></p>\n<p>总结创建与合并分支命令如下：<br>查看分支：git branch<br>创建分支：git branch name<br>切换分支：git checkout name<br>创建+切换分支：git checkout –b name<br>合并某分支到当前分支：git merge name<br>删除分支：git branch –d name<br>如何解决冲突？<br>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1db410001036105690462.png\" alt=\"\"></p>\n<p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1daaf0001133205840500.png\" alt=\"\"></p>\n<p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p>\n<p><img src=\"http://img.mukewang.com/59c1daff000106eb06340589.png\" alt=\"\"></p>\n<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;<head是指主分支修改的内容，>&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：</head是指主分支修改的内容，></p>\n<p><img src=\"http://img.mukewang.com/59c1dbaf00015f2205770266.png\" alt=\"\"></p>\n<p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dbc50001076c04970869.png\" alt=\"\"></p>\n<h2 id=\"3-分支管理策略。\"><a href=\"#3-分支管理策略。\" class=\"headerlink\" title=\"3.分支管理策略。\"></a>3.分支管理策略。</h2><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p>\n<p>创建一个dev分支。<br>修改readme.txt内容。<br>添加到暂存区。<br>切换回主分支(master)。<br>合并dev分支，使用命令 git merge –no-ff -m “注释” dev<br>查看历史记录<br>截图如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dbdc0001836d06030780.png\" alt=\"\"></p>\n<p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>\n<h4 id=\"七：bug分支：\"><a href=\"#七：bug分支：\" class=\"headerlink\" title=\"七：bug分支：\"></a>七：bug分支：</h4><p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p>\n<p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dc4e000141b306260166.png\" alt=\"\"></p>\n<p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dc63000121ff06510188.png\" alt=\"\"></p>\n<p>所以现在我可以通过创建issue-404分支来修复bug了。<br>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dc7000010f8506010533.png\" alt=\"\"></p>\n<p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dce00001c1ed06120441.png\" alt=\"\"></p>\n<p>现在，我们回到dev分支上干活了。</p>\n<p><img src=\"http://img.mukewang.com/59c1dcfa00019c8104220136.png\" alt=\"\"></p>\n<p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dd07000152b404340093.png\" alt=\"\"></p>\n<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p>\n<p>1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。</p>\n<p>2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</p>\n<p>演示如下<br><img src=\"http://img.mukewang.com/59c1dd1f000174d406380466.png\" alt=\"\"></p>\n<h3 id=\"八：多人协作。\"><a href=\"#八：多人协作。\" class=\"headerlink\" title=\"八：多人协作。\"></a>八：多人协作。</h3><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。<br>要查看远程库的信息 使用 git remote<br>要查看远程库的详细信息 使用 git remote –v</p>\n<p>如下演示：</p>\n<p><img src=\"http://img.mukewang.com/59c1dd7d000136fd06190169.png\" alt=\"\"></p>\n<h3 id=\"一：推送分支：\"><a href=\"#一：推送分支：\" class=\"headerlink\" title=\"一：推送分支：\"></a>一：推送分支：</h3><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：<br>使用命令 git push origin master</p>\n<p>比如我现在的github上的readme.txt代码如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dd90000164a508280459.png\" alt=\"\"></p>\n<p>本地的readme.txt代码如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dda60001771804210205.png\" alt=\"\"></p>\n<p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1ddbf0001271e05410203.png\" alt=\"\"></p>\n<p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1ddcf0001771f08100484.png\" alt=\"\"></p>\n<p>可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev<br>那么一般情况下，那些分支要推送呢？<br>master分支是主分支，因此要时刻与远程同步。<br>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p>\n<p>二：抓取分支：<br>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2<br>但是我首先要把dev分支也要推送到远程去，如下</p>\n<p><img src=\"http://img.mukewang.com/59c1ded800014adf05030151.jpg\" alt=\"\"></p>\n<p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1deb70001ec7605080170.png\" alt=\"\"></p>\n<p>现在目录下生成有如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1defe0001942707180256.png\" alt=\"\"></p>\n<p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev</p>\n<p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p>\n<p>如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1df160001ef1e06020730.png\" alt=\"\"></p>\n<p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1df340001209306470759.png\" alt=\"\"></p>\n<p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p>\n<p><img src=\"http://img.mukewang.com/59c1dfa60001473e05940282.png\" alt=\"\"></p>\n<p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dfc8000159c106460199.png\" alt=\"\"></p>\n<p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：<br>我们可以先来看看readme.txt内容了。</p>\n<p><img src=\"http://img.mukewang.com/59c1dff70001a87605190277.png\" alt=\"\"></p>\n<p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1e0130001843906050480.png\" alt=\"\"></p>\n<p>因此：多人协作工作模式一般是这样的：<br>首先，可以试图用git push origin branch-name推送自己的修改.<br>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。<br>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>一：Git是什么?<br>二：SVN与Git的最主要的区别?<br>三：在windows上如何安装Git?<br>四：如何操作？<br>五：远程仓库<br>六：创建与合并分支<br>七：bug分支<br>八：多人协作</p>","more":"<h3 id=\"一：Git是什么？\"><a href=\"#一：Git是什么？\" class=\"headerlink\" title=\"一：Git是什么？\"></a>一：Git是什么？</h3><p>Git是目前世界上最先进的分布式版本控制系统。<br>工作原理 / 流程：</p>\n<p><img src=\"http://img.mukewang.com/59c31e4400013bc911720340.png\" alt=\"\"></p>\n<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>\n<h3 id=\"二：SVN与Git的最主要的区别？\"><a href=\"#二：SVN与Git的最主要的区别？\" class=\"headerlink\" title=\"二：SVN与Git的最主要的区别？\"></a>二：SVN与Git的最主要的区别？</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>\n<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>\n<h3 id=\"三、在windows上如何安装Git？\"><a href=\"#三、在windows上如何安装Git？\" class=\"headerlink\" title=\"三、在windows上如何安装Git？\"></a>三、在windows上如何安装Git？</h3><p>msysgit是 windows版的Git,如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1cfa400019aee02460029.jpg\" alt=\"\"></p>\n<p>需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”,如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1cfd20001c2d602530073.jpg\" alt=\"\"></p>\n<p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1cfe70001462e06680380.jpg\" alt=\"\"></p>\n<p>安装完成后，还需要最后一步设置，在命令行输入如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d041000110d906460213.jpg\" alt=\"\"></p>\n<p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p>\n<p>注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p>\n<h3 id=\"四：如何操作？\"><a href=\"#四：如何操作？\" class=\"headerlink\" title=\"四：如何操作？\"></a>四：如何操作？</h3><h4 id=\"一：创建版本库。\"><a href=\"#一：创建版本库。\" class=\"headerlink\" title=\"一：创建版本库。\"></a>一：创建版本库。</h4><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p>\n<p>所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p>\n<p><img src=\"http://img.mukewang.com/59c1d1060001909005780268.png\" alt=\"\"></p>\n<p>pwd 命令是用于显示当前的目录。</p>\n<p>通过命令 git init 把这个目录变成git可以管理的仓库，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d12b0001b08305270077.png\" alt=\"\"></p>\n<p>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d143000112df06120173.png\" alt=\"\"></p>\n<p>把文件添加到版本库中。</p>\n<p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p>\n<h2 id=\"下面先看下demo如下演示：\"><a href=\"#下面先看下demo如下演示：\" class=\"headerlink\" title=\"下面先看下demo如下演示：\"></a>下面先看下demo如下演示：</h2><p>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p>\n<p>第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2080001e4bb04490080.png\" alt=\"\"></p>\n<p>如果和上面一样，没有任何提示，说明已经添加成功了。</p>\n<p>第二步：用命令 git commit告诉Git，把文件提交到仓库。</p>\n<p><img src=\"http://img.mukewang.com/59c1d2200001f05b04930121.png\" alt=\"\"></p>\n<p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2340001a87904690107.png\" alt=\"\"></p>\n<p>说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2500001634606170171.png\" alt=\"\"></p>\n<p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。<br>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：<br>git diff readme.txt 如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d2cb00010a0304960202.png\" alt=\"\"></p>\n<p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p>\n<p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。</p>\n<p>如下：<br><img src=\"http://img.mukewang.com/59c1d2ff00015a9606180342.png\" alt=\"\"></p>\n<h3 id=\"二：版本回退：\"><a href=\"#二：版本回退：\" class=\"headerlink\" title=\"二：版本回退：\"></a>二：版本回退：</h3><p>如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p>\n<p>内容为33333333333333.继续执行命令如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d32b00012ba604570139.png\" alt=\"\"></p>\n<p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d34e0001a1ac06050304.png\" alt=\"\"></p>\n<p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d3fc00013ad206040097.png\" alt=\"\"></p>\n<p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d4140001a0c404490165.png\" alt=\"\"></p>\n<p>如果想回退到上一个版本的命令如下操作：</p>\n<p><img src=\"http://img.mukewang.com/59c1d429000199fc04610105.png\" alt=\"\"></p>\n<p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p>\n<p><img src=\"http://img.mukewang.com/59c1d4470001fcdc04360085.png\" alt=\"\"></p>\n<p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d45300012d9604800219.png\" alt=\"\"></p>\n<p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：<br>git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d51a0001d5fc05100122.png\" alt=\"\"></p>\n<p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令<br>git reset –hard 6fcfc89来恢复了。演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d53a0001b8b305050153.png\" alt=\"\"></p>\n<p>可以看到 目前已经是最新的版本了。</p>\n<h3 id=\"三：理解工作区与暂存区的区别？\"><a href=\"#三：理解工作区与暂存区的区别？\" class=\"headerlink\" title=\"三：理解工作区与暂存区的区别？\"></a>三：理解工作区与暂存区的区别？</h3><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p>\n<p>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p>\n<p>我们前面说过使用Git提交文件到版本库有两步：</p>\n<p>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p>\n<p>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p>\n<p>我们继续使用demo来演示下：</p>\n<p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d55a0001a3c306430241.png\" alt=\"\"></p>\n<p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d56a0001a28704700241.png\" alt=\"\"></p>\n<p>接着我们可以使用git commit一次性提交到分支上，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d57b0001b4fe06190166.png\" alt=\"\"></p>\n<h3 id=\"四：Git撤销修改和删除文件操作。\"><a href=\"#四：Git撤销修改和删除文件操作。\" class=\"headerlink\" title=\"四：Git撤销修改和删除文件操作。\"></a>四：Git撤销修改和删除文件操作。</h3><h4 id=\"一：撤销修改：\"><a href=\"#一：撤销修改：\" class=\"headerlink\" title=\"一：撤销修改：\"></a>一：撤销修改：</h4><p>比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d5e40001806803930139.png\" alt=\"\"></p>\n<p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p>\n<p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p>\n<p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^</p>\n<p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d5fa0001b07806400168.png\" alt=\"\"></p>\n<p>可以发现，Git会告诉你，git checkout – file 可以丢弃工作区的修改，如下命令：<br>git checkout – readme.txt,如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d6390001419705210140.png\" alt=\"\"></p>\n<p>命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p>\n<p>1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</p>\n<p>2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p>\n<p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d6ca0001782f06160482.png\" alt=\"\"></p>\n<p>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</p>\n<h4 id=\"二：删除文件。\"><a href=\"#二：删除文件。\" class=\"headerlink\" title=\"二：删除文件。\"></a>二：删除文件。</h4><p>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d6de0001a31606390392.png\" alt=\"\"></p>\n<p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p>\n<p><img src=\"http://img.mukewang.com/59c1d78200017e8f07030192.png\" alt=\"\"></p>\n<p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？<br>可以使用如下命令 git checkout – b.txt，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d7980001368e05570244.png\" alt=\"\"></p>\n<p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d7b70001308907550258.png\" alt=\"\"></p>\n<h3 id=\"五：远程仓库。\"><a href=\"#五：远程仓库。\" class=\"headerlink\" title=\"五：远程仓库。\"></a>五：远程仓库。</h3><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p>\n<p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p>\n<p>ssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d7d7000120d107530169.png\" alt=\"\"></p>\n<p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n<p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p>\n<p><img src=\"http://img.mukewang.com/59c1d7ef0001c75411330860.png\" alt=\"\"></p>\n<p>点击 Add Key，你就应该可以看到已经添加的key。</p>\n<p><img src=\"http://img.mukewang.com/59c1d8540001eb3707620373.png\" alt=\"\"></p>\n<p>如何添加远程库？</p>\n<p>现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p>\n<p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d86a0001044b10840605.png\" alt=\"\"></p>\n<p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>\n<p><img src=\"http://img.mukewang.com/59c1d8850001b5ea10260661.png\" alt=\"\"></p>\n<p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>\n<p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/tugenhua0707/testgit.git</span><br></pre></td></tr></table></figure></p>\n<p>所有的如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d8a70001c86206320252.png\" alt=\"\"></p>\n<p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d8bb00019ff310480655.png\" alt=\"\"></p>\n<p>从现在起，只要本地作了提交，就可以通过如下命令：</p>\n<pre><code>git push origin master\n</code></pre><p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p>\n<h4 id=\"如何从远程库克隆？\"><a href=\"#如何从远程库克隆？\" class=\"headerlink\" title=\"如何从远程库克隆？\"></a>如何从远程库克隆？</h4><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。<br>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？<br>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1d95e0001f0fc10450604.png\" alt=\"\"></p>\n<p>如下，我们看到：</p>\n<p><img src=\"http://img.mukewang.com/59c1d97400014d4e10360484.png\" alt=\"\"></p>\n<p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d9860001e0d806370127.png\" alt=\"\"></p>\n<p>接着在我本地目录下 生成testgit2目录了，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1d99500016a2e07130197.png\" alt=\"\"></p>\n<h3 id=\"六：创建与合并分支。\"><a href=\"#六：创建与合并分支。\" class=\"headerlink\" title=\"六：创建与合并分支。\"></a>六：创建与合并分支。</h3><p>在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>\n<p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p>\n<p><img src=\"http://img.mukewang.com/59c1d9aa0001c15604080167.png\" alt=\"\"></p>\n<p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令<br>git branch dev<br>git checkout dev<br>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777<br>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1da3f0001b5b703890392.png\" alt=\"\"></p>\n<p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1da520001d44c06340206.png\" alt=\"\"></p>\n<p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1da69000145ca05320255.png\" alt=\"\"></p>\n<p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。<br>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>合并完成后，我们可以接着删除dev分支了，操作如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1da91000120cd06430139.png\" alt=\"\"></p>\n<p>总结创建与合并分支命令如下：<br>查看分支：git branch<br>创建分支：git branch name<br>切换分支：git checkout name<br>创建+切换分支：git checkout –b name<br>合并某分支到当前分支：git merge name<br>删除分支：git branch –d name<br>如何解决冲突？<br>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1db410001036105690462.png\" alt=\"\"></p>\n<p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1daaf0001133205840500.png\" alt=\"\"></p>\n<p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p>\n<p><img src=\"http://img.mukewang.com/59c1daff000106eb06340589.png\" alt=\"\"></p>\n<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;<head是指主分支修改的内容，>&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：</head是指主分支修改的内容，></p>\n<p><img src=\"http://img.mukewang.com/59c1dbaf00015f2205770266.png\" alt=\"\"></p>\n<p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dbc50001076c04970869.png\" alt=\"\"></p>\n<h2 id=\"3-分支管理策略。\"><a href=\"#3-分支管理策略。\" class=\"headerlink\" title=\"3.分支管理策略。\"></a>3.分支管理策略。</h2><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p>\n<p>创建一个dev分支。<br>修改readme.txt内容。<br>添加到暂存区。<br>切换回主分支(master)。<br>合并dev分支，使用命令 git merge –no-ff -m “注释” dev<br>查看历史记录<br>截图如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dbdc0001836d06030780.png\" alt=\"\"></p>\n<p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>\n<h4 id=\"七：bug分支：\"><a href=\"#七：bug分支：\" class=\"headerlink\" title=\"七：bug分支：\"></a>七：bug分支：</h4><p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p>\n<p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dc4e000141b306260166.png\" alt=\"\"></p>\n<p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dc63000121ff06510188.png\" alt=\"\"></p>\n<p>所以现在我可以通过创建issue-404分支来修复bug了。<br>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dc7000010f8506010533.png\" alt=\"\"></p>\n<p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dce00001c1ed06120441.png\" alt=\"\"></p>\n<p>现在，我们回到dev分支上干活了。</p>\n<p><img src=\"http://img.mukewang.com/59c1dcfa00019c8104220136.png\" alt=\"\"></p>\n<p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dd07000152b404340093.png\" alt=\"\"></p>\n<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p>\n<p>1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。</p>\n<p>2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</p>\n<p>演示如下<br><img src=\"http://img.mukewang.com/59c1dd1f000174d406380466.png\" alt=\"\"></p>\n<h3 id=\"八：多人协作。\"><a href=\"#八：多人协作。\" class=\"headerlink\" title=\"八：多人协作。\"></a>八：多人协作。</h3><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。<br>要查看远程库的信息 使用 git remote<br>要查看远程库的详细信息 使用 git remote –v</p>\n<p>如下演示：</p>\n<p><img src=\"http://img.mukewang.com/59c1dd7d000136fd06190169.png\" alt=\"\"></p>\n<h3 id=\"一：推送分支：\"><a href=\"#一：推送分支：\" class=\"headerlink\" title=\"一：推送分支：\"></a>一：推送分支：</h3><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：<br>使用命令 git push origin master</p>\n<p>比如我现在的github上的readme.txt代码如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dd90000164a508280459.png\" alt=\"\"></p>\n<p>本地的readme.txt代码如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dda60001771804210205.png\" alt=\"\"></p>\n<p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1ddbf0001271e05410203.png\" alt=\"\"></p>\n<p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1ddcf0001771f08100484.png\" alt=\"\"></p>\n<p>可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev<br>那么一般情况下，那些分支要推送呢？<br>master分支是主分支，因此要时刻与远程同步。<br>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p>\n<p>二：抓取分支：<br>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2<br>但是我首先要把dev分支也要推送到远程去，如下</p>\n<p><img src=\"http://img.mukewang.com/59c1ded800014adf05030151.jpg\" alt=\"\"></p>\n<p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1deb70001ec7605080170.png\" alt=\"\"></p>\n<p>现在目录下生成有如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1defe0001942707180256.png\" alt=\"\"></p>\n<p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev</p>\n<p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p>\n<p>如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1df160001ef1e06020730.png\" alt=\"\"></p>\n<p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1df340001209306470759.png\" alt=\"\"></p>\n<p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p>\n<p><img src=\"http://img.mukewang.com/59c1dfa60001473e05940282.png\" alt=\"\"></p>\n<p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p>\n<p><img src=\"http://img.mukewang.com/59c1dfc8000159c106460199.png\" alt=\"\"></p>\n<p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：<br>我们可以先来看看readme.txt内容了。</p>\n<p><img src=\"http://img.mukewang.com/59c1dff70001a87605190277.png\" alt=\"\"></p>\n<p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：</p>\n<p><img src=\"http://img.mukewang.com/59c1e0130001843906050480.png\" alt=\"\"></p>\n<p>因此：多人协作工作模式一般是这样的：<br>首先，可以试图用git push origin branch-name推送自己的修改.<br>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。<br>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p>"},{"title":"实战H5项目笔记之双11活动页","p":"h5/pro-note-one","date":"2016-11-15T02:28:21.000Z","description":"实战H5项目笔记","_content":"\n## 1. 背景\n\n加入实体电商，开始第一个项目，双11活动。 每年参加双11活动，今年第一次自己参与，有点兴奋。\n\n这种活动页面虽然用不上太复杂的逻辑，但也有很多后台项目涉及不到的细节，让我们踩了不少的坑。这里针对项目开发过程中涉及的一些主要技术点作一下总结回顾。\n\n<!-- TOC -->\n\n- [1. 背景](#1-背景)\n    - [1.1. 项目特点](#11-项目特点)\n    - [1.2. Slider 实现](#12-slider-实现)\n    - [1.3. 移动屏幕适配](#13-移动屏幕适配)\n        - [1.3.1. 高度优先、viewport 等比缩放适配方案](#131-高度优先viewport-等比缩放适配方案)\n        - [1.3.2. 绝对定位元素的微调方法](#132-绝对定位元素的微调方法)\n        - [1.3.3. 设计稿图片等比缩放方法](#133-设计稿图片等比缩放方法)\n        - [1.3.4. 快速布局方法](#134-快速布局方法)\n    - [1.4. HTML5 动画实现](#14-html5-动画实现)\n        - [1.4.1. CSS3 动画](#141-css3-动画)\n        - [1.4.2. 引入游戏引擎方案](#142-引入游戏引擎方案)\n        - [1.4.3. 使用 svg/canvas 操作库](#143-使用-svgcanvas-操作库)\n    - [1.5. 微信分享](#15-微信分享)\n        - [1.5.1. 微信 jssdk 分享 API](#151-微信-jssdk-分享-api)\n        - [1.5.2. 不走微信 jssdk 的取巧方法](#152-不走微信-jssdk-的取巧方法)\n    - [1.6. 性能优化相关](#16-性能优化相关)\n        - [1.6.1. 页面资源异步加载](#161-页面资源异步加载)\n        - [1.6.2. webp 支持](#162-webp-支持)\n    - [1.7. 应用内登陆/分享](#17-应用内登陆分享)\n    - [1.8. 工程化问题](#18-工程化问题)\n    - [1.9. 运维发布问题](#19-运维发布问题)\n    - [1.10. 其他](#110-其他)\n    - [1.11. 小结](#111-小结)\n- [2. 关于作者](#2-关于作者)\n\n<!-- /TOC -->\n\n\n\n<!--more-->\n\n### 1.1. 项目特点\n- 多页滑动效果，页面多，动画元素细节多，动画效果简单\n- 个人页(主页面)需 Flyme 账号登录，自有应用内要尽量实现免登录\n- 将会在魅族主流应用和社区里推广\n- 可分享到微信、微博等主流社交媒体\n\n### 1.2. Slider 实现\n多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：\n\n- swiper http://www.swiper.com.cn\n- iscroll https://github.com/cubiq/iscroll\n- fullpage.js https://github.com/alvarotrigo/fullPage.js/\n- Scrollify https://github.com/lukehaas/Scrollify\n- onepage-scroll https://github.com/peachananr/onepage-scroll\n\n### 1.3. 移动屏幕适配\n移动端屏幕适配常用的方案有如下三种：\n- 固定高度，宽度自适应\n- 固定宽度/高度，viewport 缩放\n- rem 做宽度，viewport 缩放\n\n#### 1.3.1. 高度优先、viewport 等比缩放适配方案\n因为涉及多页大量的动画元素，只能是绝对定位来快速布局，我们采取了第二种方案：页面以 320x640 作为基础大小布局，在移动端根据实际的页面大小等比缩放。主要适配代码参考：\n``` JS\n+function () {\n    function isMobile() {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);\n    }\n\n    function setScale() {\n        var pageScale = 1;\n\n        if (window.top !== window) {\n            return pageScale;\n        }\n\n        var width = document.documentElement.clientWidth || 360;\n        var height = document.documentElement.clientHeight || 640;\n        if (width / height >= 360 / 640) {\n            // 高度优先\n            pageScale = height / 640;\n        } else {\n            pageScale = width / 360;\n        }\n\n        var content = 'width=' + 360 + ', initial-scale=' + pageScale \n          + ', maximum-scale=' + pageScale + ', user-scalable=no';\n        document.getElementById('viewport').setAttribute('content', content);\n\n        return pageScale;\n    }\n\n    if (isMobile()) {\n        setScale();\n    } else {\n        try {\n            document.getElementsByTagName('html')[0].classList.add('pc');\n        } catch (e) {}\n    }\n}\n```\n这种方案以高度优先，以使得全部内容都能够出现在可视区域。但有一个问题是，在 webview 内宽高比大于 9/16，于是实际采用了高度的比例缩放，基础宽度缩放后会小于屏幕宽度，由于涉及动画的元素采用了绝对定位，这导致这些元素显示上偏左，右边出现较多的空白。\n\n#### 1.3.2. 绝对定位元素的微调方法\n对于这种问题，一种简单快速的解决方案：取得基础宽度与真实宽度的缩放比，将所有绝对定位的元素按照该缩放比重新计算 left 位移。主要代码参考：\n``` JS\nimport $ from './libs/zepto';\n\nconst width = document.documentElement.clientWidth || 360;\nconst height = document.documentElement.clientHeight || 640;\nlet pageScale = 1;\n\nif (width / height >= 360 / 640) {\n    pageScale = height / 640;\n}\n\nconst offset = (width - pageScale * 360) / 2;\n// 每当页面切换后调用\nexport function positionFix(dom) {\n    if (pageScale === 1 || !offset) {\n        return;\n    }\n\n    // 为一个页面\n    const $dom = $(dom);\n\n    if ($dom.hasClass('position-fixed')) {\n        return;\n    }\n\n    $dom.find('.text-box i, img').forEach((dom, i) => {\n        let $this = $(dom),\n            left;\n\n        // 只修改绝对定位的元素\n        if ($this.css('position') !== 'absolute') {\n            return;\n        }\n\n        left = +($this.css('left').replace('px', ''));\n\n        $this.css('left', (left + offset) + 'px');\n        // console.log($(dom).css('left'));\n    });\n\n    $dom.addClass('position-fixed');\n}\n```\n\n#### 1.3.3. 设计稿图片等比缩放方法\n页面缩放解决了不同屏幕大小的布局一致性。另外涉及的一个问题是，设计稿图片大小如何进行等比缩放？\n这个问题也很简单，图片引用直接设置 width 以缩放到合适大小；雪碧图上的图片则按照 360×640 的页面大小进行缩放：\n- 对于绝对定位的元素，使用 <font color=\"red\">transform: scale(0.333)</font> 进行变换缩放\n- 对于流式布局的元素，使用 <font color=\"red\">zomm(0.333)</font> 进行缩放\n\n#### 1.3.4. 快速布局方法\n还有一个值得一提的问题是，如何做到布局元素与设计稿完全一致？\n\n这个问题的解决方法是：使用静态的设计稿图片作为全屏背景，通过调整各元素到对应位置，从而实现快速定位。我们的一位同学给出了这个方法，并且给出了一个让页面元素可拖动并设置最终位置(left/right值)的 jQuery 插件，这使得我们的页面布局变得简单而高效。\n\n### 1.4. HTML5 动画实现\n动画实现方案一般来说可以选择CSS3 动画、引入游戏引擎或使用 svg/canvas。\n#### 1.4.1. CSS3 动画\n该方案技术成本简单，任何前端开发者都能快速上手，但细节实现上工作量大。\n\n从简单快速开始的角度来说，CSS3 动画是我们的唯一选择。使用 CSS3 动画需要特别注意一点：修改 DOM 会导致页面重绘，在移动端容易出现卡顿现象。所以应尽可能避免使用会修改 DOM 的 css 属性，只使用 <font color=\"red\">transform</font> 实现动画变换效果。\n\n我们的页面动画都是循环运动的，全部需要对照动效设计逐一还原实现，花费了大量的人力和时间成本。实现上主要使用了 <font color=\"red\">animation</font>、<font color=\"red\">keyframe</font>、<font color=\"red\">transform</font> 属性。\n\n此外，对于常见的入场显示/滑入等动画效果，只需要使用 <font color=\"red\">transformc</font> 和 <font color=\"red\">transition</font> 即可实现需求。对于 css 动画也有很多优秀而成熟的动画库可用，一些参考：\n\n- animate.css https://github.com/daneden/animate.css\n- magic.css https://github.com/miniMAC/magic\n- Hover.css http://ianlunn.github.io/Hover/\n- velocity.js https://github.com/julianshapiro/velocity\n- anime.js https://github.com/juliangarnier/anime\n\n下面简单介绍一下另外的两种动画实现方案。\n#### 1.4.2. 引入游戏引擎方案\n使用 h5 游戏引擎可大幅度降低工作量，能够相对容易地实现复杂动画效果，但需要经验避免入深坑，有较高学习成本，并且需要设计师深度配合。一些参考：\n\n- Hilo https://github.com/hiloteam/Hilo\n- Phaser https://github.com/photonstorm/phaser\n- pixi.js https://github.com/pixijs/pixi.js\n- melonjs https://github.com/melonjs/melonjs\n- playcanvas https://github.com/playcanvas/engine\n- LayaAir http://www.layabox.com\n- 白鹭引擎 https://www.egret.com\n\n#### 1.4.3. 使用 svg/canvas 操作库\n使用 svg/canvas/webGL 实现的动画效果会比较好，但实现工作量较大，对实践经验也有较高的要求。成熟的相关库参考：\n\n- createJs https://github.com/CreateJS\n- snap.svg https://github.com/adobe-webplatform/Snap.svg\n- svg.js https://github.com/svgdotjs/svg.js\n- d3.js https://d3js.org\n- threes.js https://threejs.org\n\n### 1.5. 微信分享\n由于第一次做这种活动页，没有特别注意到微信内分享的问题，直到上线时才发现，分享出去的效果实在太难看，这导致几位留守到最后的同事紧急探讨协调方案，几乎整晚没睡觉。\n\n#### 1.5.1. 微信 jssdk 分享 API\n微信内开发应注意这几点：\n\n- 下载微信开发者工具（或 TBS Studio），以调试微信内页面\n- 需要通过认证的公众号或订阅号，取得微信 jssdk 分享接口所需的 appId 和 signature\n- 需要后端 API 管理 signature 签名的生成与缓存\n- window.history.pushState/replaceState 修改了 URL 时需要重新生成 signature 签名。由于没有仔细阅读文档并意识到这一点，在这个问题上坑了比较多的时间。\n\n我们最终协调到一个部门的订阅号，并使用他们已实现了的后端 token 签名生成 API 来实现 jssdk 的分享 API，在 nginx 层对该 API 代理转发解决跨域安全性相关问题。微信分享主要代码参考：\n\n``` JS\nconst isWeixinBrowser = /micromessenger/.test(navigator.userAgent.toLowerCase());\nconst wxJsdk = '//res.wx.qq.com/open/js/jweixin-1.1.0.js';\nconst jsApiList = ['checkJsApi', 'onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareQQ', 'onMenuShareWeibo'];\nlet opts = {\n    title: 'My Flyme 独家记忆',\n    desc: '当时光凝固，当回忆定格。回首2016 ，我与 Flyme 的点点滴滴都在这里。这是属于我和 Flyme 的独家记忆。',\n    link: '',\n    imgUrl: ''\n}, loadedwx = false;\n\nfunction initShareEvent(wx) {\n    const option = {\n        ...opts,\n        trigger: function (res) {console.log('trigger', res)},\n        success: function (res) { console.log('已分享', res) },\n        cancel: function (res) { console.log('已取消', res) },\n        fail: function (res) { console.log(JSON.stringify(res)) } \n    };\n\n    wx.onMenuShareAppMessage(option); // 分享给朋友\n    wx.onMenuShareTimeline(option);   // 分享到朋友圈\n    wx.onMenuShareQQ(option);         // 分享到QQ\n    wx.onMenuShareWeibo(option);      // 分享到微博\n    wx.onMenuShareQZone(option);      // 分享到QZone\n}\nfunction checkJsApi(wx) {\n    wx.checkJsApi({\n        jsApiList,\n        success: () => initShareEvent(wx),\n        error: err => console.log('checkJsApi error: ', err)\n    });\n}\nfunction initConfig(wx) {\n    // 特别注意，这里 link 必须使用当前页面的 URL 地址，否则会失败！\n    opts.link = encodeURIComponent(document.location.href.split('#')[0]);\n    return $.ajax({\n        url: '/wechat_api/get_js_ticket?&url=' + opts.link,\n        dataType:'jsonp', //指定为jsonp类型\n        jsonp:'callback'\n    }).done((res) => {\n        wx.config({\n            debug: process.env.NODE_ENV === 'development',\n            appId: 'wx0000000000000000',\n            nonceStr: res.data.nonceStr,\n            timestamp: res.data.timestamp,\n            signature: res.data.signature,\n            jsApiList\n        });\n    });\n}\nexport default options => {\n    if (loadedwx || !isWeixinBrowser) { return }\n\n    require([wxJsdk], (wx) => {\n        loadedwx = true;\n        $.extend(true, opts, options);\n        initConfig(wx);\n        wx.ready(() => checkJsApi(wx));\n        wx.error((res) => console.error('出错了：', res.errMsg));\n    });\n}\n```\n\n#### 1.5.2. 不走微信 jssdk 的取巧方法\n微信分享 API 需要公众号或订阅号，临时的活动开发可能来不及折腾，那么一个折中的办法是这样的：在页面头部 img 标签设置分享显示的图片，设置高度和宽度为 0。示例：\n``` JS\n<img src=\"assets/webp/share.webp\" style=\"width:0;height:0;overflow:hidden\"/>\n```\n微信会提取页面标题和第一张图片，作为朋友圈分享的标题和缩略图。使用 jssdk 方式分享到朋友圈的效果也是只有标题和缩略图，所以效果上没有区别。比较大的区别是，“发送给好友”时没有描述，描述位置变成了页面 URL 地址。\n\n### 1.6. 性能优化相关\n由于时间紧而且设计稿是逐步给到的，很多细节的优化都没法去做。最终上线的版本首屏大小约 1.3M，在弱网下的加载时间会比较久一些，可优化空间还比较大。这里探讨一下我们主要考虑到的几个点。\n\n#### 1.6.1. 页面资源异步加载\n一共二十多个页面，我们按每页一个 html 模板和一个 less 文件的方式，按页面分工开发，在 index.html 页面以 script 模板方式引入，由 fis3 实现模板嵌入。通过 ajax 拿到数据后，根据数据替换模板中的数据占位符，并进行页面切割，然后生成 iSlider 需要的数据配置项。这样做的好处是 html 内容未写入到 DOM 时，涉及的静态资源图片不会被加载。\n\niSlider 默认至少加载 3 个页面，每一时刻也最多保存三个页面实例。于是首屏加载了三个页面，这正好符合我们的目的。\n\n另外要提到的一点是，弱网下不同图片下载的时差较大，会使得不同位置的图片动画断断续续地出现。为了避免这种不好的效果，我们使用了一个简单的图片预加载机制，在预加载完首屏涉及的图片资源后才隐藏 loading 显示页面。\n\n#### 1.6.2. webp 支持\n\n该项目涉及图片资源 500 多张，只有手绘文字图片做了雪碧图处理。现在的移动端基本都支持 webp，使用 webp 是必须的。实际上使用 webp 后，图片目录的大小减小了 60%。\n\n以前大家都是用智图这种在线工具处理少量的图片，搜索了一下，居然没有找到现成的批量生成 webp 的工具库，于是写了一个批量生成方法。这两天整理完善了一下，算是造了一个小轮子，需要的同学可以关注下，地址在这里：\n\nwebp 批量转换：https://github.com/lzwme/webp-batch-convert\n\n更新：有同学提到了，imagemin 提供的插件 imagemin-webp 也可以实现类似的需求。看了项目源码，实现的原理是一样的，其仓库地址为： https://github.com/imagemin/imagemin-webp\n\n### 1.7. 应用内登陆/分享\n\n由于要在 Flyme 自带的近十个主要应用内作推广入口，涉及到两个问题：应用内分享和应用内免登录。\n\n在协调这一块时发现，各应用都是独自制定的各不相同的 webview 内相关 js 接口和规范，同一应用不同版本的实现也可能有差异，或者根本没有相关实现；有规范的文档也不够齐全，并且都没有示例参考；没有各应用的开发测试版本来做调试。于是花了不少时间各种咨询，踩了不少的坑，效果也还是不尽人意，最终只在魅族浏览器上做到了期望的效果。\n\n没有统一规范，各自造轮子，于是这种跨部门跨应用的功能需求变得如此艰难。导致这种现象的存在因素很多，可知的一点是也和公司内前端人员处于边缘化地位的现实有关。过去的一年里，基础技术支撑部门技术平台做了一套 hybridApp 解决方案，@chemdemo 同学还将 JSBridge 部分抽离开源了出来：https://github.com/chemdemo/hybrid-js 。可能是缺少高层足够的相关意识和支持力度，并没有在各业务软件内得到广泛应用，反而主要靠内部前端圈间沟通传播。不过这套方案为了简洁只实现了很少的通用 API 和可扩展方法，并没有继续实现各种业务适用的通用性扩展功能，自然也没有我们想要的应用内分享和 Flyme 免登录这两个功能。\n\n对于这个问题有两点总结： \n- 统一的公共 SDK 的重要性：避免重复造轮子，健壮且具有一致性的 API、完善的文档。\n- 再好的文档不如一个 demo\n\n### 1.8. 工程化问题\n项目初期使用 webpack 进行构建，但由于我们平时的经验以 fis3 为主，webpack 过于灵活的配置特性使得一些工程化需求需要花时间探索。在我们接手项目后一起讨论了一下，果断转为熟悉的 fis3 构建体系。使用 fis3 主要解决的问题有：\n\n- less 编译\n- es6 编译\n- js/css 压缩合并\n- 页面模板嵌入\n- 发布时 CDN 单独域名的适配\n- 发布时符合内部运维体系线上发布规范的目录路径修正\n\n相比较为灵活的 webpack，fis3 更注重流程化整体解决方案，简单的数十行配置即可实现各种工程化需求。不过 fis3 的发展现在似乎进入了一个瓶颈期/稳定期，社区中对于在 rollup 和 webpack 中大热的 tree-shaking 等技术几乎都没有什么反应。希望它不要没落了，能有更多的创新吧。有两点期望：走国际化路线，出英文文档与社区支持，向国际顶级项目看进；跟进参考业界最新的工程化理念，如有必要出个 fis4 也未尝不可。\n\n### 1.9. 运维发布问题\n由于涉及到跨部门合作，也没有太多的时间，项目起初放在了内部的 *** gitlab *** 平台，没有走 git+gerrit+jenkins+运维发布平台 这一内部完整的体系。这样做在前期省去了项目创建、各种权限申请等一堆需要协调沟通的事情，开发协作效率也比较高，但到了发布的阶段就突显出了问题：每次发布都需要由运维人员手动操作，协调发布很花费时间。\n\n另外静态页面也没有独立出来，想当然地简单的扔到后端目录中，结果导致前端的修改需要后端也必须作修改发布，增加了前后端协调的时间成本。\n\n于是，在首次发布后又进行的几次小迭代中，每次迭代发布都涉及到多人手动协调，十分的浪费时间。\n\n总结一句话：项目构建尽量与已有的成熟的规范一致，以少走弯路。\n\n### 1.10. 其他\n\n最后列举一些移动端 H5 开发可参考的内容：\n\n- 真机调试 https://github.com/jieyou/remote_inspect_web_on_real_device\n- vConsole: 客户端内 H5 调试 https://github.com/WechatFE/vConsole\n- 移动端布局终极解决方案 https://github.com/imochen/hotcss\n- mobileHack https://github.com/RubyLouvre/mobileHack\n- H5项目常见问题汇总及解决方案 https://github.com/FrontEndRoad/HTML5-FAQ\n\n### 1.11. 小结\n这是我们第一次尝试这种活动页，在如此紧凑的时间节点下，没有什么高大上的东西，更多的是各种采坑尝试的实践过程。以上列举的内容算是对本次开发实践做一个总结记录，采用的相关实现方案也可作后续参考。欢迎探讨分享你们的经验。\n\n## 2. 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/h5/pro-note-one.md","raw":"---\ntitle: 实战H5项目笔记之双11活动页\np: h5/pro-note-one\ndate: 2016-11-15 10:28:21\ntags: [h5,project,note,css,javascript]\ncategories: h5\ndescription: 实战H5项目笔记\n---\n\n## 1. 背景\n\n加入实体电商，开始第一个项目，双11活动。 每年参加双11活动，今年第一次自己参与，有点兴奋。\n\n这种活动页面虽然用不上太复杂的逻辑，但也有很多后台项目涉及不到的细节，让我们踩了不少的坑。这里针对项目开发过程中涉及的一些主要技术点作一下总结回顾。\n\n<!-- TOC -->\n\n- [1. 背景](#1-背景)\n    - [1.1. 项目特点](#11-项目特点)\n    - [1.2. Slider 实现](#12-slider-实现)\n    - [1.3. 移动屏幕适配](#13-移动屏幕适配)\n        - [1.3.1. 高度优先、viewport 等比缩放适配方案](#131-高度优先viewport-等比缩放适配方案)\n        - [1.3.2. 绝对定位元素的微调方法](#132-绝对定位元素的微调方法)\n        - [1.3.3. 设计稿图片等比缩放方法](#133-设计稿图片等比缩放方法)\n        - [1.3.4. 快速布局方法](#134-快速布局方法)\n    - [1.4. HTML5 动画实现](#14-html5-动画实现)\n        - [1.4.1. CSS3 动画](#141-css3-动画)\n        - [1.4.2. 引入游戏引擎方案](#142-引入游戏引擎方案)\n        - [1.4.3. 使用 svg/canvas 操作库](#143-使用-svgcanvas-操作库)\n    - [1.5. 微信分享](#15-微信分享)\n        - [1.5.1. 微信 jssdk 分享 API](#151-微信-jssdk-分享-api)\n        - [1.5.2. 不走微信 jssdk 的取巧方法](#152-不走微信-jssdk-的取巧方法)\n    - [1.6. 性能优化相关](#16-性能优化相关)\n        - [1.6.1. 页面资源异步加载](#161-页面资源异步加载)\n        - [1.6.2. webp 支持](#162-webp-支持)\n    - [1.7. 应用内登陆/分享](#17-应用内登陆分享)\n    - [1.8. 工程化问题](#18-工程化问题)\n    - [1.9. 运维发布问题](#19-运维发布问题)\n    - [1.10. 其他](#110-其他)\n    - [1.11. 小结](#111-小结)\n- [2. 关于作者](#2-关于作者)\n\n<!-- /TOC -->\n\n\n\n<!--more-->\n\n### 1.1. 项目特点\n- 多页滑动效果，页面多，动画元素细节多，动画效果简单\n- 个人页(主页面)需 Flyme 账号登录，自有应用内要尽量实现免登录\n- 将会在魅族主流应用和社区里推广\n- 可分享到微信、微博等主流社交媒体\n\n### 1.2. Slider 实现\n多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：\n\n- swiper http://www.swiper.com.cn\n- iscroll https://github.com/cubiq/iscroll\n- fullpage.js https://github.com/alvarotrigo/fullPage.js/\n- Scrollify https://github.com/lukehaas/Scrollify\n- onepage-scroll https://github.com/peachananr/onepage-scroll\n\n### 1.3. 移动屏幕适配\n移动端屏幕适配常用的方案有如下三种：\n- 固定高度，宽度自适应\n- 固定宽度/高度，viewport 缩放\n- rem 做宽度，viewport 缩放\n\n#### 1.3.1. 高度优先、viewport 等比缩放适配方案\n因为涉及多页大量的动画元素，只能是绝对定位来快速布局，我们采取了第二种方案：页面以 320x640 作为基础大小布局，在移动端根据实际的页面大小等比缩放。主要适配代码参考：\n``` JS\n+function () {\n    function isMobile() {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);\n    }\n\n    function setScale() {\n        var pageScale = 1;\n\n        if (window.top !== window) {\n            return pageScale;\n        }\n\n        var width = document.documentElement.clientWidth || 360;\n        var height = document.documentElement.clientHeight || 640;\n        if (width / height >= 360 / 640) {\n            // 高度优先\n            pageScale = height / 640;\n        } else {\n            pageScale = width / 360;\n        }\n\n        var content = 'width=' + 360 + ', initial-scale=' + pageScale \n          + ', maximum-scale=' + pageScale + ', user-scalable=no';\n        document.getElementById('viewport').setAttribute('content', content);\n\n        return pageScale;\n    }\n\n    if (isMobile()) {\n        setScale();\n    } else {\n        try {\n            document.getElementsByTagName('html')[0].classList.add('pc');\n        } catch (e) {}\n    }\n}\n```\n这种方案以高度优先，以使得全部内容都能够出现在可视区域。但有一个问题是，在 webview 内宽高比大于 9/16，于是实际采用了高度的比例缩放，基础宽度缩放后会小于屏幕宽度，由于涉及动画的元素采用了绝对定位，这导致这些元素显示上偏左，右边出现较多的空白。\n\n#### 1.3.2. 绝对定位元素的微调方法\n对于这种问题，一种简单快速的解决方案：取得基础宽度与真实宽度的缩放比，将所有绝对定位的元素按照该缩放比重新计算 left 位移。主要代码参考：\n``` JS\nimport $ from './libs/zepto';\n\nconst width = document.documentElement.clientWidth || 360;\nconst height = document.documentElement.clientHeight || 640;\nlet pageScale = 1;\n\nif (width / height >= 360 / 640) {\n    pageScale = height / 640;\n}\n\nconst offset = (width - pageScale * 360) / 2;\n// 每当页面切换后调用\nexport function positionFix(dom) {\n    if (pageScale === 1 || !offset) {\n        return;\n    }\n\n    // 为一个页面\n    const $dom = $(dom);\n\n    if ($dom.hasClass('position-fixed')) {\n        return;\n    }\n\n    $dom.find('.text-box i, img').forEach((dom, i) => {\n        let $this = $(dom),\n            left;\n\n        // 只修改绝对定位的元素\n        if ($this.css('position') !== 'absolute') {\n            return;\n        }\n\n        left = +($this.css('left').replace('px', ''));\n\n        $this.css('left', (left + offset) + 'px');\n        // console.log($(dom).css('left'));\n    });\n\n    $dom.addClass('position-fixed');\n}\n```\n\n#### 1.3.3. 设计稿图片等比缩放方法\n页面缩放解决了不同屏幕大小的布局一致性。另外涉及的一个问题是，设计稿图片大小如何进行等比缩放？\n这个问题也很简单，图片引用直接设置 width 以缩放到合适大小；雪碧图上的图片则按照 360×640 的页面大小进行缩放：\n- 对于绝对定位的元素，使用 <font color=\"red\">transform: scale(0.333)</font> 进行变换缩放\n- 对于流式布局的元素，使用 <font color=\"red\">zomm(0.333)</font> 进行缩放\n\n#### 1.3.4. 快速布局方法\n还有一个值得一提的问题是，如何做到布局元素与设计稿完全一致？\n\n这个问题的解决方法是：使用静态的设计稿图片作为全屏背景，通过调整各元素到对应位置，从而实现快速定位。我们的一位同学给出了这个方法，并且给出了一个让页面元素可拖动并设置最终位置(left/right值)的 jQuery 插件，这使得我们的页面布局变得简单而高效。\n\n### 1.4. HTML5 动画实现\n动画实现方案一般来说可以选择CSS3 动画、引入游戏引擎或使用 svg/canvas。\n#### 1.4.1. CSS3 动画\n该方案技术成本简单，任何前端开发者都能快速上手，但细节实现上工作量大。\n\n从简单快速开始的角度来说，CSS3 动画是我们的唯一选择。使用 CSS3 动画需要特别注意一点：修改 DOM 会导致页面重绘，在移动端容易出现卡顿现象。所以应尽可能避免使用会修改 DOM 的 css 属性，只使用 <font color=\"red\">transform</font> 实现动画变换效果。\n\n我们的页面动画都是循环运动的，全部需要对照动效设计逐一还原实现，花费了大量的人力和时间成本。实现上主要使用了 <font color=\"red\">animation</font>、<font color=\"red\">keyframe</font>、<font color=\"red\">transform</font> 属性。\n\n此外，对于常见的入场显示/滑入等动画效果，只需要使用 <font color=\"red\">transformc</font> 和 <font color=\"red\">transition</font> 即可实现需求。对于 css 动画也有很多优秀而成熟的动画库可用，一些参考：\n\n- animate.css https://github.com/daneden/animate.css\n- magic.css https://github.com/miniMAC/magic\n- Hover.css http://ianlunn.github.io/Hover/\n- velocity.js https://github.com/julianshapiro/velocity\n- anime.js https://github.com/juliangarnier/anime\n\n下面简单介绍一下另外的两种动画实现方案。\n#### 1.4.2. 引入游戏引擎方案\n使用 h5 游戏引擎可大幅度降低工作量，能够相对容易地实现复杂动画效果，但需要经验避免入深坑，有较高学习成本，并且需要设计师深度配合。一些参考：\n\n- Hilo https://github.com/hiloteam/Hilo\n- Phaser https://github.com/photonstorm/phaser\n- pixi.js https://github.com/pixijs/pixi.js\n- melonjs https://github.com/melonjs/melonjs\n- playcanvas https://github.com/playcanvas/engine\n- LayaAir http://www.layabox.com\n- 白鹭引擎 https://www.egret.com\n\n#### 1.4.3. 使用 svg/canvas 操作库\n使用 svg/canvas/webGL 实现的动画效果会比较好，但实现工作量较大，对实践经验也有较高的要求。成熟的相关库参考：\n\n- createJs https://github.com/CreateJS\n- snap.svg https://github.com/adobe-webplatform/Snap.svg\n- svg.js https://github.com/svgdotjs/svg.js\n- d3.js https://d3js.org\n- threes.js https://threejs.org\n\n### 1.5. 微信分享\n由于第一次做这种活动页，没有特别注意到微信内分享的问题，直到上线时才发现，分享出去的效果实在太难看，这导致几位留守到最后的同事紧急探讨协调方案，几乎整晚没睡觉。\n\n#### 1.5.1. 微信 jssdk 分享 API\n微信内开发应注意这几点：\n\n- 下载微信开发者工具（或 TBS Studio），以调试微信内页面\n- 需要通过认证的公众号或订阅号，取得微信 jssdk 分享接口所需的 appId 和 signature\n- 需要后端 API 管理 signature 签名的生成与缓存\n- window.history.pushState/replaceState 修改了 URL 时需要重新生成 signature 签名。由于没有仔细阅读文档并意识到这一点，在这个问题上坑了比较多的时间。\n\n我们最终协调到一个部门的订阅号，并使用他们已实现了的后端 token 签名生成 API 来实现 jssdk 的分享 API，在 nginx 层对该 API 代理转发解决跨域安全性相关问题。微信分享主要代码参考：\n\n``` JS\nconst isWeixinBrowser = /micromessenger/.test(navigator.userAgent.toLowerCase());\nconst wxJsdk = '//res.wx.qq.com/open/js/jweixin-1.1.0.js';\nconst jsApiList = ['checkJsApi', 'onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareQQ', 'onMenuShareWeibo'];\nlet opts = {\n    title: 'My Flyme 独家记忆',\n    desc: '当时光凝固，当回忆定格。回首2016 ，我与 Flyme 的点点滴滴都在这里。这是属于我和 Flyme 的独家记忆。',\n    link: '',\n    imgUrl: ''\n}, loadedwx = false;\n\nfunction initShareEvent(wx) {\n    const option = {\n        ...opts,\n        trigger: function (res) {console.log('trigger', res)},\n        success: function (res) { console.log('已分享', res) },\n        cancel: function (res) { console.log('已取消', res) },\n        fail: function (res) { console.log(JSON.stringify(res)) } \n    };\n\n    wx.onMenuShareAppMessage(option); // 分享给朋友\n    wx.onMenuShareTimeline(option);   // 分享到朋友圈\n    wx.onMenuShareQQ(option);         // 分享到QQ\n    wx.onMenuShareWeibo(option);      // 分享到微博\n    wx.onMenuShareQZone(option);      // 分享到QZone\n}\nfunction checkJsApi(wx) {\n    wx.checkJsApi({\n        jsApiList,\n        success: () => initShareEvent(wx),\n        error: err => console.log('checkJsApi error: ', err)\n    });\n}\nfunction initConfig(wx) {\n    // 特别注意，这里 link 必须使用当前页面的 URL 地址，否则会失败！\n    opts.link = encodeURIComponent(document.location.href.split('#')[0]);\n    return $.ajax({\n        url: '/wechat_api/get_js_ticket?&url=' + opts.link,\n        dataType:'jsonp', //指定为jsonp类型\n        jsonp:'callback'\n    }).done((res) => {\n        wx.config({\n            debug: process.env.NODE_ENV === 'development',\n            appId: 'wx0000000000000000',\n            nonceStr: res.data.nonceStr,\n            timestamp: res.data.timestamp,\n            signature: res.data.signature,\n            jsApiList\n        });\n    });\n}\nexport default options => {\n    if (loadedwx || !isWeixinBrowser) { return }\n\n    require([wxJsdk], (wx) => {\n        loadedwx = true;\n        $.extend(true, opts, options);\n        initConfig(wx);\n        wx.ready(() => checkJsApi(wx));\n        wx.error((res) => console.error('出错了：', res.errMsg));\n    });\n}\n```\n\n#### 1.5.2. 不走微信 jssdk 的取巧方法\n微信分享 API 需要公众号或订阅号，临时的活动开发可能来不及折腾，那么一个折中的办法是这样的：在页面头部 img 标签设置分享显示的图片，设置高度和宽度为 0。示例：\n``` JS\n<img src=\"assets/webp/share.webp\" style=\"width:0;height:0;overflow:hidden\"/>\n```\n微信会提取页面标题和第一张图片，作为朋友圈分享的标题和缩略图。使用 jssdk 方式分享到朋友圈的效果也是只有标题和缩略图，所以效果上没有区别。比较大的区别是，“发送给好友”时没有描述，描述位置变成了页面 URL 地址。\n\n### 1.6. 性能优化相关\n由于时间紧而且设计稿是逐步给到的，很多细节的优化都没法去做。最终上线的版本首屏大小约 1.3M，在弱网下的加载时间会比较久一些，可优化空间还比较大。这里探讨一下我们主要考虑到的几个点。\n\n#### 1.6.1. 页面资源异步加载\n一共二十多个页面，我们按每页一个 html 模板和一个 less 文件的方式，按页面分工开发，在 index.html 页面以 script 模板方式引入，由 fis3 实现模板嵌入。通过 ajax 拿到数据后，根据数据替换模板中的数据占位符，并进行页面切割，然后生成 iSlider 需要的数据配置项。这样做的好处是 html 内容未写入到 DOM 时，涉及的静态资源图片不会被加载。\n\niSlider 默认至少加载 3 个页面，每一时刻也最多保存三个页面实例。于是首屏加载了三个页面，这正好符合我们的目的。\n\n另外要提到的一点是，弱网下不同图片下载的时差较大，会使得不同位置的图片动画断断续续地出现。为了避免这种不好的效果，我们使用了一个简单的图片预加载机制，在预加载完首屏涉及的图片资源后才隐藏 loading 显示页面。\n\n#### 1.6.2. webp 支持\n\n该项目涉及图片资源 500 多张，只有手绘文字图片做了雪碧图处理。现在的移动端基本都支持 webp，使用 webp 是必须的。实际上使用 webp 后，图片目录的大小减小了 60%。\n\n以前大家都是用智图这种在线工具处理少量的图片，搜索了一下，居然没有找到现成的批量生成 webp 的工具库，于是写了一个批量生成方法。这两天整理完善了一下，算是造了一个小轮子，需要的同学可以关注下，地址在这里：\n\nwebp 批量转换：https://github.com/lzwme/webp-batch-convert\n\n更新：有同学提到了，imagemin 提供的插件 imagemin-webp 也可以实现类似的需求。看了项目源码，实现的原理是一样的，其仓库地址为： https://github.com/imagemin/imagemin-webp\n\n### 1.7. 应用内登陆/分享\n\n由于要在 Flyme 自带的近十个主要应用内作推广入口，涉及到两个问题：应用内分享和应用内免登录。\n\n在协调这一块时发现，各应用都是独自制定的各不相同的 webview 内相关 js 接口和规范，同一应用不同版本的实现也可能有差异，或者根本没有相关实现；有规范的文档也不够齐全，并且都没有示例参考；没有各应用的开发测试版本来做调试。于是花了不少时间各种咨询，踩了不少的坑，效果也还是不尽人意，最终只在魅族浏览器上做到了期望的效果。\n\n没有统一规范，各自造轮子，于是这种跨部门跨应用的功能需求变得如此艰难。导致这种现象的存在因素很多，可知的一点是也和公司内前端人员处于边缘化地位的现实有关。过去的一年里，基础技术支撑部门技术平台做了一套 hybridApp 解决方案，@chemdemo 同学还将 JSBridge 部分抽离开源了出来：https://github.com/chemdemo/hybrid-js 。可能是缺少高层足够的相关意识和支持力度，并没有在各业务软件内得到广泛应用，反而主要靠内部前端圈间沟通传播。不过这套方案为了简洁只实现了很少的通用 API 和可扩展方法，并没有继续实现各种业务适用的通用性扩展功能，自然也没有我们想要的应用内分享和 Flyme 免登录这两个功能。\n\n对于这个问题有两点总结： \n- 统一的公共 SDK 的重要性：避免重复造轮子，健壮且具有一致性的 API、完善的文档。\n- 再好的文档不如一个 demo\n\n### 1.8. 工程化问题\n项目初期使用 webpack 进行构建，但由于我们平时的经验以 fis3 为主，webpack 过于灵活的配置特性使得一些工程化需求需要花时间探索。在我们接手项目后一起讨论了一下，果断转为熟悉的 fis3 构建体系。使用 fis3 主要解决的问题有：\n\n- less 编译\n- es6 编译\n- js/css 压缩合并\n- 页面模板嵌入\n- 发布时 CDN 单独域名的适配\n- 发布时符合内部运维体系线上发布规范的目录路径修正\n\n相比较为灵活的 webpack，fis3 更注重流程化整体解决方案，简单的数十行配置即可实现各种工程化需求。不过 fis3 的发展现在似乎进入了一个瓶颈期/稳定期，社区中对于在 rollup 和 webpack 中大热的 tree-shaking 等技术几乎都没有什么反应。希望它不要没落了，能有更多的创新吧。有两点期望：走国际化路线，出英文文档与社区支持，向国际顶级项目看进；跟进参考业界最新的工程化理念，如有必要出个 fis4 也未尝不可。\n\n### 1.9. 运维发布问题\n由于涉及到跨部门合作，也没有太多的时间，项目起初放在了内部的 *** gitlab *** 平台，没有走 git+gerrit+jenkins+运维发布平台 这一内部完整的体系。这样做在前期省去了项目创建、各种权限申请等一堆需要协调沟通的事情，开发协作效率也比较高，但到了发布的阶段就突显出了问题：每次发布都需要由运维人员手动操作，协调发布很花费时间。\n\n另外静态页面也没有独立出来，想当然地简单的扔到后端目录中，结果导致前端的修改需要后端也必须作修改发布，增加了前后端协调的时间成本。\n\n于是，在首次发布后又进行的几次小迭代中，每次迭代发布都涉及到多人手动协调，十分的浪费时间。\n\n总结一句话：项目构建尽量与已有的成熟的规范一致，以少走弯路。\n\n### 1.10. 其他\n\n最后列举一些移动端 H5 开发可参考的内容：\n\n- 真机调试 https://github.com/jieyou/remote_inspect_web_on_real_device\n- vConsole: 客户端内 H5 调试 https://github.com/WechatFE/vConsole\n- 移动端布局终极解决方案 https://github.com/imochen/hotcss\n- mobileHack https://github.com/RubyLouvre/mobileHack\n- H5项目常见问题汇总及解决方案 https://github.com/FrontEndRoad/HTML5-FAQ\n\n### 1.11. 小结\n这是我们第一次尝试这种活动页，在如此紧凑的时间节点下，没有什么高大上的东西，更多的是各种采坑尝试的实践过程。以上列举的内容算是对本次开发实践做一个总结记录，采用的相关实现方案也可作后续参考。欢迎探讨分享你们的经验。\n\n## 2. 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"h5/pro-note-one","published":1,"updated":"2018-01-17T02:26:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt22000dfme3pe11yb58","content":"<h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h2><p>加入实体电商，开始第一个项目，双11活动。 每年参加双11活动，今年第一次自己参与，有点兴奋。</p>\n<p>这种活动页面虽然用不上太复杂的逻辑，但也有很多后台项目涉及不到的细节，让我们踩了不少的坑。这里针对项目开发过程中涉及的一些主要技术点作一下总结回顾。</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#1-背景\">1. 背景</a><ul>\n<li><a href=\"#11-项目特点\">1.1. 项目特点</a></li>\n<li><a href=\"#12-slider-实现\">1.2. Slider 实现</a></li>\n<li><a href=\"#13-移动屏幕适配\">1.3. 移动屏幕适配</a><ul>\n<li><a href=\"#131-高度优先viewport-等比缩放适配方案\">1.3.1. 高度优先、viewport 等比缩放适配方案</a></li>\n<li><a href=\"#132-绝对定位元素的微调方法\">1.3.2. 绝对定位元素的微调方法</a></li>\n<li><a href=\"#133-设计稿图片等比缩放方法\">1.3.3. 设计稿图片等比缩放方法</a></li>\n<li><a href=\"#134-快速布局方法\">1.3.4. 快速布局方法</a></li>\n</ul>\n</li>\n<li><a href=\"#14-html5-动画实现\">1.4. HTML5 动画实现</a><ul>\n<li><a href=\"#141-css3-动画\">1.4.1. CSS3 动画</a></li>\n<li><a href=\"#142-引入游戏引擎方案\">1.4.2. 引入游戏引擎方案</a></li>\n<li><a href=\"#143-使用-svgcanvas-操作库\">1.4.3. 使用 svg/canvas 操作库</a></li>\n</ul>\n</li>\n<li><a href=\"#15-微信分享\">1.5. 微信分享</a><ul>\n<li><a href=\"#151-微信-jssdk-分享-api\">1.5.1. 微信 jssdk 分享 API</a></li>\n<li><a href=\"#152-不走微信-jssdk-的取巧方法\">1.5.2. 不走微信 jssdk 的取巧方法</a></li>\n</ul>\n</li>\n<li><a href=\"#16-性能优化相关\">1.6. 性能优化相关</a><ul>\n<li><a href=\"#161-页面资源异步加载\">1.6.1. 页面资源异步加载</a></li>\n<li><a href=\"#162-webp-支持\">1.6.2. webp 支持</a></li>\n</ul>\n</li>\n<li><a href=\"#17-应用内登陆分享\">1.7. 应用内登陆/分享</a></li>\n<li><a href=\"#18-工程化问题\">1.8. 工程化问题</a></li>\n<li><a href=\"#19-运维发布问题\">1.9. 运维发布问题</a></li>\n<li><a href=\"#110-其他\">1.10. 其他</a></li>\n<li><a href=\"#111-小结\">1.11. 小结</a></li>\n</ul>\n</li>\n<li><a href=\"#2-关于作者\">2. 关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h3 id=\"1-1-项目特点\"><a href=\"#1-1-项目特点\" class=\"headerlink\" title=\"1.1. 项目特点\"></a>1.1. 项目特点</h3><ul>\n<li>多页滑动效果，页面多，动画元素细节多，动画效果简单</li>\n<li>个人页(主页面)需 Flyme 账号登录，自有应用内要尽量实现免登录</li>\n<li>将会在魅族主流应用和社区里推广</li>\n<li>可分享到微信、微博等主流社交媒体</li>\n</ul>\n<h3 id=\"1-2-Slider-实现\"><a href=\"#1-2-Slider-实现\" class=\"headerlink\" title=\"1.2. Slider 实现\"></a>1.2. Slider 实现</h3><p>多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：</p>\n<ul>\n<li>swiper <a href=\"http://www.swiper.com.cn\" target=\"_blank\" rel=\"noopener\">http://www.swiper.com.cn</a></li>\n<li>iscroll <a href=\"https://github.com/cubiq/iscroll\" target=\"_blank\" rel=\"noopener\">https://github.com/cubiq/iscroll</a></li>\n<li>fullpage.js <a href=\"https://github.com/alvarotrigo/fullPage.js/\" target=\"_blank\" rel=\"noopener\">https://github.com/alvarotrigo/fullPage.js/</a></li>\n<li>Scrollify <a href=\"https://github.com/lukehaas/Scrollify\" target=\"_blank\" rel=\"noopener\">https://github.com/lukehaas/Scrollify</a></li>\n<li>onepage-scroll <a href=\"https://github.com/peachananr/onepage-scroll\" target=\"_blank\" rel=\"noopener\">https://github.com/peachananr/onepage-scroll</a></li>\n</ul>\n<h3 id=\"1-3-移动屏幕适配\"><a href=\"#1-3-移动屏幕适配\" class=\"headerlink\" title=\"1.3. 移动屏幕适配\"></a>1.3. 移动屏幕适配</h3><p>移动端屏幕适配常用的方案有如下三种：</p>\n<ul>\n<li>固定高度，宽度自适应</li>\n<li>固定宽度/高度，viewport 缩放</li>\n<li>rem 做宽度，viewport 缩放</li>\n</ul>\n<h4 id=\"1-3-1-高度优先、viewport-等比缩放适配方案\"><a href=\"#1-3-1-高度优先、viewport-等比缩放适配方案\" class=\"headerlink\" title=\"1.3.1. 高度优先、viewport 等比缩放适配方案\"></a>1.3.1. 高度优先、viewport 等比缩放适配方案</h4><p>因为涉及多页大量的动画元素，只能是绝对定位来快速布局，我们采取了第二种方案：页面以 320x640 作为基础大小布局，在移动端根据实际的页面大小等比缩放。主要适配代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMobile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i</span>.test(navigator.userAgent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setScale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = <span class=\"built_in\">document</span>.documentElement.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 高度优先</span></span><br><span class=\"line\">            pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pageScale = width / <span class=\"number\">360</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> content = <span class=\"string\">'width='</span> + <span class=\"number\">360</span> + <span class=\"string\">', initial-scale='</span> + pageScale </span><br><span class=\"line\">          + <span class=\"string\">', maximum-scale='</span> + pageScale + <span class=\"string\">', user-scalable=no'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'viewport'</span>).setAttribute(<span class=\"string\">'content'</span>, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMobile()) &#123;</span><br><span class=\"line\">        setScale();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'html'</span>)[<span class=\"number\">0</span>].classList.add(<span class=\"string\">'pc'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方案以高度优先，以使得全部内容都能够出现在可视区域。但有一个问题是，在 webview 内宽高比大于 9/16，于是实际采用了高度的比例缩放，基础宽度缩放后会小于屏幕宽度，由于涉及动画的元素采用了绝对定位，这导致这些元素显示上偏左，右边出现较多的空白。</p>\n<h4 id=\"1-3-2-绝对定位元素的微调方法\"><a href=\"#1-3-2-绝对定位元素的微调方法\" class=\"headerlink\" title=\"1.3.2. 绝对定位元素的微调方法\"></a>1.3.2. 绝对定位元素的微调方法</h4><p>对于这种问题，一种简单快速的解决方案：取得基础宽度与真实宽度的缩放比，将所有绝对定位的元素按照该缩放比重新计算 left 位移。主要代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'./libs/zepto'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> width = <span class=\"built_in\">document</span>.documentElement.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> height = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">    pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> offset = (width - pageScale * <span class=\"number\">360</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 每当页面切换后调用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">positionFix</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pageScale === <span class=\"number\">1</span> || !offset) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为一个页面</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $dom = $(dom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($dom.hasClass(<span class=\"string\">'position-fixed'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $dom.find(<span class=\"string\">'.text-box i, img'</span>).forEach(<span class=\"function\">(<span class=\"params\">dom, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> $<span class=\"keyword\">this</span> = $(dom),</span><br><span class=\"line\">            left;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 只修改绝对定位的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($<span class=\"keyword\">this</span>.css(<span class=\"string\">'position'</span>) !== <span class=\"string\">'absolute'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        left = +($<span class=\"keyword\">this</span>.css(<span class=\"string\">'left'</span>).replace(<span class=\"string\">'px'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        $<span class=\"keyword\">this</span>.css(<span class=\"string\">'left'</span>, (left + offset) + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// console.log($(dom).css('left'));</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $dom.addClass(<span class=\"string\">'position-fixed'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-3-设计稿图片等比缩放方法\"><a href=\"#1-3-3-设计稿图片等比缩放方法\" class=\"headerlink\" title=\"1.3.3. 设计稿图片等比缩放方法\"></a>1.3.3. 设计稿图片等比缩放方法</h4><p>页面缩放解决了不同屏幕大小的布局一致性。另外涉及的一个问题是，设计稿图片大小如何进行等比缩放？<br>这个问题也很简单，图片引用直接设置 width 以缩放到合适大小；雪碧图上的图片则按照 360×640 的页面大小进行缩放：</p>\n<ul>\n<li>对于绝对定位的元素，使用 <font color=\"red\">transform: scale(0.333)</font> 进行变换缩放</li>\n<li>对于流式布局的元素，使用 <font color=\"red\">zomm(0.333)</font> 进行缩放</li>\n</ul>\n<h4 id=\"1-3-4-快速布局方法\"><a href=\"#1-3-4-快速布局方法\" class=\"headerlink\" title=\"1.3.4. 快速布局方法\"></a>1.3.4. 快速布局方法</h4><p>还有一个值得一提的问题是，如何做到布局元素与设计稿完全一致？</p>\n<p>这个问题的解决方法是：使用静态的设计稿图片作为全屏背景，通过调整各元素到对应位置，从而实现快速定位。我们的一位同学给出了这个方法，并且给出了一个让页面元素可拖动并设置最终位置(left/right值)的 jQuery 插件，这使得我们的页面布局变得简单而高效。</p>\n<h3 id=\"1-4-HTML5-动画实现\"><a href=\"#1-4-HTML5-动画实现\" class=\"headerlink\" title=\"1.4. HTML5 动画实现\"></a>1.4. HTML5 动画实现</h3><p>动画实现方案一般来说可以选择CSS3 动画、引入游戏引擎或使用 svg/canvas。</p>\n<h4 id=\"1-4-1-CSS3-动画\"><a href=\"#1-4-1-CSS3-动画\" class=\"headerlink\" title=\"1.4.1. CSS3 动画\"></a>1.4.1. CSS3 动画</h4><p>该方案技术成本简单，任何前端开发者都能快速上手，但细节实现上工作量大。</p>\n<p>从简单快速开始的角度来说，CSS3 动画是我们的唯一选择。使用 CSS3 动画需要特别注意一点：修改 DOM 会导致页面重绘，在移动端容易出现卡顿现象。所以应尽可能避免使用会修改 DOM 的 css 属性，只使用 <font color=\"red\">transform</font> 实现动画变换效果。</p>\n<p>我们的页面动画都是循环运动的，全部需要对照动效设计逐一还原实现，花费了大量的人力和时间成本。实现上主要使用了 <font color=\"red\">animation</font>、<font color=\"red\">keyframe</font>、<font color=\"red\">transform</font> 属性。</p>\n<p>此外，对于常见的入场显示/滑入等动画效果，只需要使用 <font color=\"red\">transformc</font> 和 <font color=\"red\">transition</font> 即可实现需求。对于 css 动画也有很多优秀而成熟的动画库可用，一些参考：</p>\n<ul>\n<li>animate.css <a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"noopener\">https://github.com/daneden/animate.css</a></li>\n<li>magic.css <a href=\"https://github.com/miniMAC/magic\" target=\"_blank\" rel=\"noopener\">https://github.com/miniMAC/magic</a></li>\n<li>Hover.css <a href=\"http://ianlunn.github.io/Hover/\" target=\"_blank\" rel=\"noopener\">http://ianlunn.github.io/Hover/</a></li>\n<li>velocity.js <a href=\"https://github.com/julianshapiro/velocity\" target=\"_blank\" rel=\"noopener\">https://github.com/julianshapiro/velocity</a></li>\n<li>anime.js <a href=\"https://github.com/juliangarnier/anime\" target=\"_blank\" rel=\"noopener\">https://github.com/juliangarnier/anime</a></li>\n</ul>\n<p>下面简单介绍一下另外的两种动画实现方案。</p>\n<h4 id=\"1-4-2-引入游戏引擎方案\"><a href=\"#1-4-2-引入游戏引擎方案\" class=\"headerlink\" title=\"1.4.2. 引入游戏引擎方案\"></a>1.4.2. 引入游戏引擎方案</h4><p>使用 h5 游戏引擎可大幅度降低工作量，能够相对容易地实现复杂动画效果，但需要经验避免入深坑，有较高学习成本，并且需要设计师深度配合。一些参考：</p>\n<ul>\n<li>Hilo <a href=\"https://github.com/hiloteam/Hilo\" target=\"_blank\" rel=\"noopener\">https://github.com/hiloteam/Hilo</a></li>\n<li>Phaser <a href=\"https://github.com/photonstorm/phaser\" target=\"_blank\" rel=\"noopener\">https://github.com/photonstorm/phaser</a></li>\n<li>pixi.js <a href=\"https://github.com/pixijs/pixi.js\" target=\"_blank\" rel=\"noopener\">https://github.com/pixijs/pixi.js</a></li>\n<li>melonjs <a href=\"https://github.com/melonjs/melonjs\" target=\"_blank\" rel=\"noopener\">https://github.com/melonjs/melonjs</a></li>\n<li>playcanvas <a href=\"https://github.com/playcanvas/engine\" target=\"_blank\" rel=\"noopener\">https://github.com/playcanvas/engine</a></li>\n<li>LayaAir <a href=\"http://www.layabox.com\" target=\"_blank\" rel=\"noopener\">http://www.layabox.com</a></li>\n<li>白鹭引擎 <a href=\"https://www.egret.com\" target=\"_blank\" rel=\"noopener\">https://www.egret.com</a></li>\n</ul>\n<h4 id=\"1-4-3-使用-svg-canvas-操作库\"><a href=\"#1-4-3-使用-svg-canvas-操作库\" class=\"headerlink\" title=\"1.4.3. 使用 svg/canvas 操作库\"></a>1.4.3. 使用 svg/canvas 操作库</h4><p>使用 svg/canvas/webGL 实现的动画效果会比较好，但实现工作量较大，对实践经验也有较高的要求。成熟的相关库参考：</p>\n<ul>\n<li>createJs <a href=\"https://github.com/CreateJS\" target=\"_blank\" rel=\"noopener\">https://github.com/CreateJS</a></li>\n<li>snap.svg <a href=\"https://github.com/adobe-webplatform/Snap.svg\" target=\"_blank\" rel=\"noopener\">https://github.com/adobe-webplatform/Snap.svg</a></li>\n<li>svg.js <a href=\"https://github.com/svgdotjs/svg.js\" target=\"_blank\" rel=\"noopener\">https://github.com/svgdotjs/svg.js</a></li>\n<li>d3.js <a href=\"https://d3js.org\" target=\"_blank\" rel=\"noopener\">https://d3js.org</a></li>\n<li>threes.js <a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">https://threejs.org</a></li>\n</ul>\n<h3 id=\"1-5-微信分享\"><a href=\"#1-5-微信分享\" class=\"headerlink\" title=\"1.5. 微信分享\"></a>1.5. 微信分享</h3><p>由于第一次做这种活动页，没有特别注意到微信内分享的问题，直到上线时才发现，分享出去的效果实在太难看，这导致几位留守到最后的同事紧急探讨协调方案，几乎整晚没睡觉。</p>\n<h4 id=\"1-5-1-微信-jssdk-分享-API\"><a href=\"#1-5-1-微信-jssdk-分享-API\" class=\"headerlink\" title=\"1.5.1. 微信 jssdk 分享 API\"></a>1.5.1. 微信 jssdk 分享 API</h4><p>微信内开发应注意这几点：</p>\n<ul>\n<li>下载微信开发者工具（或 TBS Studio），以调试微信内页面</li>\n<li>需要通过认证的公众号或订阅号，取得微信 jssdk 分享接口所需的 appId 和 signature</li>\n<li>需要后端 API 管理 signature 签名的生成与缓存</li>\n<li>window.history.pushState/replaceState 修改了 URL 时需要重新生成 signature 签名。由于没有仔细阅读文档并意识到这一点，在这个问题上坑了比较多的时间。</li>\n</ul>\n<p>我们最终协调到一个部门的订阅号，并使用他们已实现了的后端 token 签名生成 API 来实现 jssdk 的分享 API，在 nginx 层对该 API 代理转发解决跨域安全性相关问题。微信分享主要代码参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isWeixinBrowser = <span class=\"regexp\">/micromessenger/</span>.test(navigator.userAgent.toLowerCase());</span><br><span class=\"line\"><span class=\"keyword\">const</span> wxJsdk = <span class=\"string\">'//res.wx.qq.com/open/js/jweixin-1.1.0.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jsApiList = [<span class=\"string\">'checkJsApi'</span>, <span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>, <span class=\"string\">'onMenuShareQQ'</span>, <span class=\"string\">'onMenuShareWeibo'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> opts = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'My Flyme 独家记忆'</span>,</span><br><span class=\"line\">    desc: <span class=\"string\">'当时光凝固，当回忆定格。回首2016 ，我与 Flyme 的点点滴滴都在这里。这是属于我和 Flyme 的独家记忆。'</span>,</span><br><span class=\"line\">    link: <span class=\"string\">''</span>,</span><br><span class=\"line\">    imgUrl: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;, loadedwx = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initShareEvent</span>(<span class=\"params\">wx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> option = &#123;</span><br><span class=\"line\">        ...opts,</span><br><span class=\"line\">        trigger: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'trigger'</span>, res)&#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'已分享'</span>, res) &#125;,</span><br><span class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'已取消'</span>, res) &#125;,</span><br><span class=\"line\">        fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(res)) &#125; </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    wx.onMenuShareAppMessage(option); <span class=\"comment\">// 分享给朋友</span></span><br><span class=\"line\">    wx.onMenuShareTimeline(option);   <span class=\"comment\">// 分享到朋友圈</span></span><br><span class=\"line\">    wx.onMenuShareQQ(option);         <span class=\"comment\">// 分享到QQ</span></span><br><span class=\"line\">    wx.onMenuShareWeibo(option);      <span class=\"comment\">// 分享到微博</span></span><br><span class=\"line\">    wx.onMenuShareQZone(option);      <span class=\"comment\">// 分享到QZone</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkJsApi</span>(<span class=\"params\">wx</span>) </span>&#123;</span><br><span class=\"line\">    wx.checkJsApi(&#123;</span><br><span class=\"line\">        jsApiList,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> initShareEvent(wx),</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'checkJsApi error: '</span>, err)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initConfig</span>(<span class=\"params\">wx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 特别注意，这里 link 必须使用当前页面的 URL 地址，否则会失败！</span></span><br><span class=\"line\">    opts.link = <span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">document</span>.location.href.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'/wechat_api/get_js_ticket?&amp;url='</span> + opts.link,</span><br><span class=\"line\">        dataType:<span class=\"string\">'jsonp'</span>, <span class=\"comment\">//指定为jsonp类型</span></span><br><span class=\"line\">        jsonp:<span class=\"string\">'callback'</span></span><br><span class=\"line\">    &#125;).done(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        wx.config(&#123;</span><br><span class=\"line\">            debug: process.env.NODE_ENV === <span class=\"string\">'development'</span>,</span><br><span class=\"line\">            appId: <span class=\"string\">'wx0000000000000000'</span>,</span><br><span class=\"line\">            nonceStr: res.data.nonceStr,</span><br><span class=\"line\">            timestamp: res.data.timestamp,</span><br><span class=\"line\">            signature: res.data.signature,</span><br><span class=\"line\">            jsApiList</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> options =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadedwx || !isWeixinBrowser) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>([wxJsdk], (wx) =&gt; &#123;</span><br><span class=\"line\">        loadedwx = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        $.extend(<span class=\"literal\">true</span>, opts, options);</span><br><span class=\"line\">        initConfig(wx);</span><br><span class=\"line\">        wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> checkJsApi(wx));</span><br><span class=\"line\">        wx.error(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">'出错了：'</span>, res.errMsg));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-5-2-不走微信-jssdk-的取巧方法\"><a href=\"#1-5-2-不走微信-jssdk-的取巧方法\" class=\"headerlink\" title=\"1.5.2. 不走微信 jssdk 的取巧方法\"></a>1.5.2. 不走微信 jssdk 的取巧方法</h4><p>微信分享 API 需要公众号或订阅号，临时的活动开发可能来不及折腾，那么一个折中的办法是这样的：在页面头部 img 标签设置分享显示的图片，设置高度和宽度为 0。示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"assets/webp/share.webp\"</span> style=<span class=\"string\">\"width:0;height:0;overflow:hidden\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>微信会提取页面标题和第一张图片，作为朋友圈分享的标题和缩略图。使用 jssdk 方式分享到朋友圈的效果也是只有标题和缩略图，所以效果上没有区别。比较大的区别是，“发送给好友”时没有描述，描述位置变成了页面 URL 地址。</p>\n<h3 id=\"1-6-性能优化相关\"><a href=\"#1-6-性能优化相关\" class=\"headerlink\" title=\"1.6. 性能优化相关\"></a>1.6. 性能优化相关</h3><p>由于时间紧而且设计稿是逐步给到的，很多细节的优化都没法去做。最终上线的版本首屏大小约 1.3M，在弱网下的加载时间会比较久一些，可优化空间还比较大。这里探讨一下我们主要考虑到的几个点。</p>\n<h4 id=\"1-6-1-页面资源异步加载\"><a href=\"#1-6-1-页面资源异步加载\" class=\"headerlink\" title=\"1.6.1. 页面资源异步加载\"></a>1.6.1. 页面资源异步加载</h4><p>一共二十多个页面，我们按每页一个 html 模板和一个 less 文件的方式，按页面分工开发，在 index.html 页面以 script 模板方式引入，由 fis3 实现模板嵌入。通过 ajax 拿到数据后，根据数据替换模板中的数据占位符，并进行页面切割，然后生成 iSlider 需要的数据配置项。这样做的好处是 html 内容未写入到 DOM 时，涉及的静态资源图片不会被加载。</p>\n<p>iSlider 默认至少加载 3 个页面，每一时刻也最多保存三个页面实例。于是首屏加载了三个页面，这正好符合我们的目的。</p>\n<p>另外要提到的一点是，弱网下不同图片下载的时差较大，会使得不同位置的图片动画断断续续地出现。为了避免这种不好的效果，我们使用了一个简单的图片预加载机制，在预加载完首屏涉及的图片资源后才隐藏 loading 显示页面。</p>\n<h4 id=\"1-6-2-webp-支持\"><a href=\"#1-6-2-webp-支持\" class=\"headerlink\" title=\"1.6.2. webp 支持\"></a>1.6.2. webp 支持</h4><p>该项目涉及图片资源 500 多张，只有手绘文字图片做了雪碧图处理。现在的移动端基本都支持 webp，使用 webp 是必须的。实际上使用 webp 后，图片目录的大小减小了 60%。</p>\n<p>以前大家都是用智图这种在线工具处理少量的图片，搜索了一下，居然没有找到现成的批量生成 webp 的工具库，于是写了一个批量生成方法。这两天整理完善了一下，算是造了一个小轮子，需要的同学可以关注下，地址在这里：</p>\n<p>webp 批量转换：<a href=\"https://github.com/lzwme/webp-batch-convert\" target=\"_blank\" rel=\"noopener\">https://github.com/lzwme/webp-batch-convert</a></p>\n<p>更新：有同学提到了，imagemin 提供的插件 imagemin-webp 也可以实现类似的需求。看了项目源码，实现的原理是一样的，其仓库地址为： <a href=\"https://github.com/imagemin/imagemin-webp\" target=\"_blank\" rel=\"noopener\">https://github.com/imagemin/imagemin-webp</a></p>\n<h3 id=\"1-7-应用内登陆-分享\"><a href=\"#1-7-应用内登陆-分享\" class=\"headerlink\" title=\"1.7. 应用内登陆/分享\"></a>1.7. 应用内登陆/分享</h3><p>由于要在 Flyme 自带的近十个主要应用内作推广入口，涉及到两个问题：应用内分享和应用内免登录。</p>\n<p>在协调这一块时发现，各应用都是独自制定的各不相同的 webview 内相关 js 接口和规范，同一应用不同版本的实现也可能有差异，或者根本没有相关实现；有规范的文档也不够齐全，并且都没有示例参考；没有各应用的开发测试版本来做调试。于是花了不少时间各种咨询，踩了不少的坑，效果也还是不尽人意，最终只在魅族浏览器上做到了期望的效果。</p>\n<p>没有统一规范，各自造轮子，于是这种跨部门跨应用的功能需求变得如此艰难。导致这种现象的存在因素很多，可知的一点是也和公司内前端人员处于边缘化地位的现实有关。过去的一年里，基础技术支撑部门技术平台做了一套 hybridApp 解决方案，@chemdemo 同学还将 JSBridge 部分抽离开源了出来：<a href=\"https://github.com/chemdemo/hybrid-js\" target=\"_blank\" rel=\"noopener\">https://github.com/chemdemo/hybrid-js</a> 。可能是缺少高层足够的相关意识和支持力度，并没有在各业务软件内得到广泛应用，反而主要靠内部前端圈间沟通传播。不过这套方案为了简洁只实现了很少的通用 API 和可扩展方法，并没有继续实现各种业务适用的通用性扩展功能，自然也没有我们想要的应用内分享和 Flyme 免登录这两个功能。</p>\n<p>对于这个问题有两点总结： </p>\n<ul>\n<li>统一的公共 SDK 的重要性：避免重复造轮子，健壮且具有一致性的 API、完善的文档。</li>\n<li>再好的文档不如一个 demo</li>\n</ul>\n<h3 id=\"1-8-工程化问题\"><a href=\"#1-8-工程化问题\" class=\"headerlink\" title=\"1.8. 工程化问题\"></a>1.8. 工程化问题</h3><p>项目初期使用 webpack 进行构建，但由于我们平时的经验以 fis3 为主，webpack 过于灵活的配置特性使得一些工程化需求需要花时间探索。在我们接手项目后一起讨论了一下，果断转为熟悉的 fis3 构建体系。使用 fis3 主要解决的问题有：</p>\n<ul>\n<li>less 编译</li>\n<li>es6 编译</li>\n<li>js/css 压缩合并</li>\n<li>页面模板嵌入</li>\n<li>发布时 CDN 单独域名的适配</li>\n<li>发布时符合内部运维体系线上发布规范的目录路径修正</li>\n</ul>\n<p>相比较为灵活的 webpack，fis3 更注重流程化整体解决方案，简单的数十行配置即可实现各种工程化需求。不过 fis3 的发展现在似乎进入了一个瓶颈期/稳定期，社区中对于在 rollup 和 webpack 中大热的 tree-shaking 等技术几乎都没有什么反应。希望它不要没落了，能有更多的创新吧。有两点期望：走国际化路线，出英文文档与社区支持，向国际顶级项目看进；跟进参考业界最新的工程化理念，如有必要出个 fis4 也未尝不可。</p>\n<h3 id=\"1-9-运维发布问题\"><a href=\"#1-9-运维发布问题\" class=\"headerlink\" title=\"1.9. 运维发布问题\"></a>1.9. 运维发布问题</h3><p>由于涉及到跨部门合作，也没有太多的时间，项目起初放在了内部的 <strong><em> gitlab </em></strong> 平台，没有走 git+gerrit+jenkins+运维发布平台 这一内部完整的体系。这样做在前期省去了项目创建、各种权限申请等一堆需要协调沟通的事情，开发协作效率也比较高，但到了发布的阶段就突显出了问题：每次发布都需要由运维人员手动操作，协调发布很花费时间。</p>\n<p>另外静态页面也没有独立出来，想当然地简单的扔到后端目录中，结果导致前端的修改需要后端也必须作修改发布，增加了前后端协调的时间成本。</p>\n<p>于是，在首次发布后又进行的几次小迭代中，每次迭代发布都涉及到多人手动协调，十分的浪费时间。</p>\n<p>总结一句话：项目构建尽量与已有的成熟的规范一致，以少走弯路。</p>\n<h3 id=\"1-10-其他\"><a href=\"#1-10-其他\" class=\"headerlink\" title=\"1.10. 其他\"></a>1.10. 其他</h3><p>最后列举一些移动端 H5 开发可参考的内容：</p>\n<ul>\n<li>真机调试 <a href=\"https://github.com/jieyou/remote_inspect_web_on_real_device\" target=\"_blank\" rel=\"noopener\">https://github.com/jieyou/remote_inspect_web_on_real_device</a></li>\n<li>vConsole: 客户端内 H5 调试 <a href=\"https://github.com/WechatFE/vConsole\" target=\"_blank\" rel=\"noopener\">https://github.com/WechatFE/vConsole</a></li>\n<li>移动端布局终极解决方案 <a href=\"https://github.com/imochen/hotcss\" target=\"_blank\" rel=\"noopener\">https://github.com/imochen/hotcss</a></li>\n<li>mobileHack <a href=\"https://github.com/RubyLouvre/mobileHack\" target=\"_blank\" rel=\"noopener\">https://github.com/RubyLouvre/mobileHack</a></li>\n<li>H5项目常见问题汇总及解决方案 <a href=\"https://github.com/FrontEndRoad/HTML5-FAQ\" target=\"_blank\" rel=\"noopener\">https://github.com/FrontEndRoad/HTML5-FAQ</a></li>\n</ul>\n<h3 id=\"1-11-小结\"><a href=\"#1-11-小结\" class=\"headerlink\" title=\"1.11. 小结\"></a>1.11. 小结</h3><p>这是我们第一次尝试这种活动页，在如此紧凑的时间节点下，没有什么高大上的东西，更多的是各种采坑尝试的实践过程。以上列举的内容算是对本次开发实践做一个总结记录，采用的相关实现方案也可作后续参考。欢迎探讨分享你们的经验。</p>\n<h2 id=\"2-关于作者\"><a href=\"#2-关于作者\" class=\"headerlink\" title=\"2. 关于作者\"></a>2. 关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h2><p>加入实体电商，开始第一个项目，双11活动。 每年参加双11活动，今年第一次自己参与，有点兴奋。</p>\n<p>这种活动页面虽然用不上太复杂的逻辑，但也有很多后台项目涉及不到的细节，让我们踩了不少的坑。这里针对项目开发过程中涉及的一些主要技术点作一下总结回顾。</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#1-背景\">1. 背景</a><ul>\n<li><a href=\"#11-项目特点\">1.1. 项目特点</a></li>\n<li><a href=\"#12-slider-实现\">1.2. Slider 实现</a></li>\n<li><a href=\"#13-移动屏幕适配\">1.3. 移动屏幕适配</a><ul>\n<li><a href=\"#131-高度优先viewport-等比缩放适配方案\">1.3.1. 高度优先、viewport 等比缩放适配方案</a></li>\n<li><a href=\"#132-绝对定位元素的微调方法\">1.3.2. 绝对定位元素的微调方法</a></li>\n<li><a href=\"#133-设计稿图片等比缩放方法\">1.3.3. 设计稿图片等比缩放方法</a></li>\n<li><a href=\"#134-快速布局方法\">1.3.4. 快速布局方法</a></li>\n</ul>\n</li>\n<li><a href=\"#14-html5-动画实现\">1.4. HTML5 动画实现</a><ul>\n<li><a href=\"#141-css3-动画\">1.4.1. CSS3 动画</a></li>\n<li><a href=\"#142-引入游戏引擎方案\">1.4.2. 引入游戏引擎方案</a></li>\n<li><a href=\"#143-使用-svgcanvas-操作库\">1.4.3. 使用 svg/canvas 操作库</a></li>\n</ul>\n</li>\n<li><a href=\"#15-微信分享\">1.5. 微信分享</a><ul>\n<li><a href=\"#151-微信-jssdk-分享-api\">1.5.1. 微信 jssdk 分享 API</a></li>\n<li><a href=\"#152-不走微信-jssdk-的取巧方法\">1.5.2. 不走微信 jssdk 的取巧方法</a></li>\n</ul>\n</li>\n<li><a href=\"#16-性能优化相关\">1.6. 性能优化相关</a><ul>\n<li><a href=\"#161-页面资源异步加载\">1.6.1. 页面资源异步加载</a></li>\n<li><a href=\"#162-webp-支持\">1.6.2. webp 支持</a></li>\n</ul>\n</li>\n<li><a href=\"#17-应用内登陆分享\">1.7. 应用内登陆/分享</a></li>\n<li><a href=\"#18-工程化问题\">1.8. 工程化问题</a></li>\n<li><a href=\"#19-运维发布问题\">1.9. 运维发布问题</a></li>\n<li><a href=\"#110-其他\">1.10. 其他</a></li>\n<li><a href=\"#111-小结\">1.11. 小结</a></li>\n</ul>\n</li>\n<li><a href=\"#2-关于作者\">2. 关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h3 id=\"1-1-项目特点\"><a href=\"#1-1-项目特点\" class=\"headerlink\" title=\"1.1. 项目特点\"></a>1.1. 项目特点</h3><ul>\n<li>多页滑动效果，页面多，动画元素细节多，动画效果简单</li>\n<li>个人页(主页面)需 Flyme 账号登录，自有应用内要尽量实现免登录</li>\n<li>将会在魅族主流应用和社区里推广</li>\n<li>可分享到微信、微博等主流社交媒体</li>\n</ul>\n<h3 id=\"1-2-Slider-实现\"><a href=\"#1-2-Slider-实现\" class=\"headerlink\" title=\"1.2. Slider 实现\"></a>1.2. Slider 实现</h3><p>多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：</p>\n<ul>\n<li>swiper <a href=\"http://www.swiper.com.cn\" target=\"_blank\" rel=\"noopener\">http://www.swiper.com.cn</a></li>\n<li>iscroll <a href=\"https://github.com/cubiq/iscroll\" target=\"_blank\" rel=\"noopener\">https://github.com/cubiq/iscroll</a></li>\n<li>fullpage.js <a href=\"https://github.com/alvarotrigo/fullPage.js/\" target=\"_blank\" rel=\"noopener\">https://github.com/alvarotrigo/fullPage.js/</a></li>\n<li>Scrollify <a href=\"https://github.com/lukehaas/Scrollify\" target=\"_blank\" rel=\"noopener\">https://github.com/lukehaas/Scrollify</a></li>\n<li>onepage-scroll <a href=\"https://github.com/peachananr/onepage-scroll\" target=\"_blank\" rel=\"noopener\">https://github.com/peachananr/onepage-scroll</a></li>\n</ul>\n<h3 id=\"1-3-移动屏幕适配\"><a href=\"#1-3-移动屏幕适配\" class=\"headerlink\" title=\"1.3. 移动屏幕适配\"></a>1.3. 移动屏幕适配</h3><p>移动端屏幕适配常用的方案有如下三种：</p>\n<ul>\n<li>固定高度，宽度自适应</li>\n<li>固定宽度/高度，viewport 缩放</li>\n<li>rem 做宽度，viewport 缩放</li>\n</ul>\n<h4 id=\"1-3-1-高度优先、viewport-等比缩放适配方案\"><a href=\"#1-3-1-高度优先、viewport-等比缩放适配方案\" class=\"headerlink\" title=\"1.3.1. 高度优先、viewport 等比缩放适配方案\"></a>1.3.1. 高度优先、viewport 等比缩放适配方案</h4><p>因为涉及多页大量的动画元素，只能是绝对定位来快速布局，我们采取了第二种方案：页面以 320x640 作为基础大小布局，在移动端根据实际的页面大小等比缩放。主要适配代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMobile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"regexp\">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i</span>.test(navigator.userAgent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setScale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = <span class=\"built_in\">document</span>.documentElement.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 高度优先</span></span><br><span class=\"line\">            pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pageScale = width / <span class=\"number\">360</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> content = <span class=\"string\">'width='</span> + <span class=\"number\">360</span> + <span class=\"string\">', initial-scale='</span> + pageScale </span><br><span class=\"line\">          + <span class=\"string\">', maximum-scale='</span> + pageScale + <span class=\"string\">', user-scalable=no'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'viewport'</span>).setAttribute(<span class=\"string\">'content'</span>, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMobile()) &#123;</span><br><span class=\"line\">        setScale();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'html'</span>)[<span class=\"number\">0</span>].classList.add(<span class=\"string\">'pc'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方案以高度优先，以使得全部内容都能够出现在可视区域。但有一个问题是，在 webview 内宽高比大于 9/16，于是实际采用了高度的比例缩放，基础宽度缩放后会小于屏幕宽度，由于涉及动画的元素采用了绝对定位，这导致这些元素显示上偏左，右边出现较多的空白。</p>\n<h4 id=\"1-3-2-绝对定位元素的微调方法\"><a href=\"#1-3-2-绝对定位元素的微调方法\" class=\"headerlink\" title=\"1.3.2. 绝对定位元素的微调方法\"></a>1.3.2. 绝对定位元素的微调方法</h4><p>对于这种问题，一种简单快速的解决方案：取得基础宽度与真实宽度的缩放比，将所有绝对定位的元素按照该缩放比重新计算 left 位移。主要代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'./libs/zepto'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> width = <span class=\"built_in\">document</span>.documentElement.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> height = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">    pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> offset = (width - pageScale * <span class=\"number\">360</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 每当页面切换后调用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">positionFix</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pageScale === <span class=\"number\">1</span> || !offset) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为一个页面</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $dom = $(dom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($dom.hasClass(<span class=\"string\">'position-fixed'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $dom.find(<span class=\"string\">'.text-box i, img'</span>).forEach(<span class=\"function\">(<span class=\"params\">dom, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> $<span class=\"keyword\">this</span> = $(dom),</span><br><span class=\"line\">            left;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 只修改绝对定位的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($<span class=\"keyword\">this</span>.css(<span class=\"string\">'position'</span>) !== <span class=\"string\">'absolute'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        left = +($<span class=\"keyword\">this</span>.css(<span class=\"string\">'left'</span>).replace(<span class=\"string\">'px'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        $<span class=\"keyword\">this</span>.css(<span class=\"string\">'left'</span>, (left + offset) + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// console.log($(dom).css('left'));</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $dom.addClass(<span class=\"string\">'position-fixed'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-3-设计稿图片等比缩放方法\"><a href=\"#1-3-3-设计稿图片等比缩放方法\" class=\"headerlink\" title=\"1.3.3. 设计稿图片等比缩放方法\"></a>1.3.3. 设计稿图片等比缩放方法</h4><p>页面缩放解决了不同屏幕大小的布局一致性。另外涉及的一个问题是，设计稿图片大小如何进行等比缩放？<br>这个问题也很简单，图片引用直接设置 width 以缩放到合适大小；雪碧图上的图片则按照 360×640 的页面大小进行缩放：</p>\n<ul>\n<li>对于绝对定位的元素，使用 <font color=\"red\">transform: scale(0.333)</font> 进行变换缩放</li>\n<li>对于流式布局的元素，使用 <font color=\"red\">zomm(0.333)</font> 进行缩放</li>\n</ul>\n<h4 id=\"1-3-4-快速布局方法\"><a href=\"#1-3-4-快速布局方法\" class=\"headerlink\" title=\"1.3.4. 快速布局方法\"></a>1.3.4. 快速布局方法</h4><p>还有一个值得一提的问题是，如何做到布局元素与设计稿完全一致？</p>\n<p>这个问题的解决方法是：使用静态的设计稿图片作为全屏背景，通过调整各元素到对应位置，从而实现快速定位。我们的一位同学给出了这个方法，并且给出了一个让页面元素可拖动并设置最终位置(left/right值)的 jQuery 插件，这使得我们的页面布局变得简单而高效。</p>\n<h3 id=\"1-4-HTML5-动画实现\"><a href=\"#1-4-HTML5-动画实现\" class=\"headerlink\" title=\"1.4. HTML5 动画实现\"></a>1.4. HTML5 动画实现</h3><p>动画实现方案一般来说可以选择CSS3 动画、引入游戏引擎或使用 svg/canvas。</p>\n<h4 id=\"1-4-1-CSS3-动画\"><a href=\"#1-4-1-CSS3-动画\" class=\"headerlink\" title=\"1.4.1. CSS3 动画\"></a>1.4.1. CSS3 动画</h4><p>该方案技术成本简单，任何前端开发者都能快速上手，但细节实现上工作量大。</p>\n<p>从简单快速开始的角度来说，CSS3 动画是我们的唯一选择。使用 CSS3 动画需要特别注意一点：修改 DOM 会导致页面重绘，在移动端容易出现卡顿现象。所以应尽可能避免使用会修改 DOM 的 css 属性，只使用 <font color=\"red\">transform</font> 实现动画变换效果。</p>\n<p>我们的页面动画都是循环运动的，全部需要对照动效设计逐一还原实现，花费了大量的人力和时间成本。实现上主要使用了 <font color=\"red\">animation</font>、<font color=\"red\">keyframe</font>、<font color=\"red\">transform</font> 属性。</p>\n<p>此外，对于常见的入场显示/滑入等动画效果，只需要使用 <font color=\"red\">transformc</font> 和 <font color=\"red\">transition</font> 即可实现需求。对于 css 动画也有很多优秀而成熟的动画库可用，一些参考：</p>\n<ul>\n<li>animate.css <a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"noopener\">https://github.com/daneden/animate.css</a></li>\n<li>magic.css <a href=\"https://github.com/miniMAC/magic\" target=\"_blank\" rel=\"noopener\">https://github.com/miniMAC/magic</a></li>\n<li>Hover.css <a href=\"http://ianlunn.github.io/Hover/\" target=\"_blank\" rel=\"noopener\">http://ianlunn.github.io/Hover/</a></li>\n<li>velocity.js <a href=\"https://github.com/julianshapiro/velocity\" target=\"_blank\" rel=\"noopener\">https://github.com/julianshapiro/velocity</a></li>\n<li>anime.js <a href=\"https://github.com/juliangarnier/anime\" target=\"_blank\" rel=\"noopener\">https://github.com/juliangarnier/anime</a></li>\n</ul>\n<p>下面简单介绍一下另外的两种动画实现方案。</p>\n<h4 id=\"1-4-2-引入游戏引擎方案\"><a href=\"#1-4-2-引入游戏引擎方案\" class=\"headerlink\" title=\"1.4.2. 引入游戏引擎方案\"></a>1.4.2. 引入游戏引擎方案</h4><p>使用 h5 游戏引擎可大幅度降低工作量，能够相对容易地实现复杂动画效果，但需要经验避免入深坑，有较高学习成本，并且需要设计师深度配合。一些参考：</p>\n<ul>\n<li>Hilo <a href=\"https://github.com/hiloteam/Hilo\" target=\"_blank\" rel=\"noopener\">https://github.com/hiloteam/Hilo</a></li>\n<li>Phaser <a href=\"https://github.com/photonstorm/phaser\" target=\"_blank\" rel=\"noopener\">https://github.com/photonstorm/phaser</a></li>\n<li>pixi.js <a href=\"https://github.com/pixijs/pixi.js\" target=\"_blank\" rel=\"noopener\">https://github.com/pixijs/pixi.js</a></li>\n<li>melonjs <a href=\"https://github.com/melonjs/melonjs\" target=\"_blank\" rel=\"noopener\">https://github.com/melonjs/melonjs</a></li>\n<li>playcanvas <a href=\"https://github.com/playcanvas/engine\" target=\"_blank\" rel=\"noopener\">https://github.com/playcanvas/engine</a></li>\n<li>LayaAir <a href=\"http://www.layabox.com\" target=\"_blank\" rel=\"noopener\">http://www.layabox.com</a></li>\n<li>白鹭引擎 <a href=\"https://www.egret.com\" target=\"_blank\" rel=\"noopener\">https://www.egret.com</a></li>\n</ul>\n<h4 id=\"1-4-3-使用-svg-canvas-操作库\"><a href=\"#1-4-3-使用-svg-canvas-操作库\" class=\"headerlink\" title=\"1.4.3. 使用 svg/canvas 操作库\"></a>1.4.3. 使用 svg/canvas 操作库</h4><p>使用 svg/canvas/webGL 实现的动画效果会比较好，但实现工作量较大，对实践经验也有较高的要求。成熟的相关库参考：</p>\n<ul>\n<li>createJs <a href=\"https://github.com/CreateJS\" target=\"_blank\" rel=\"noopener\">https://github.com/CreateJS</a></li>\n<li>snap.svg <a href=\"https://github.com/adobe-webplatform/Snap.svg\" target=\"_blank\" rel=\"noopener\">https://github.com/adobe-webplatform/Snap.svg</a></li>\n<li>svg.js <a href=\"https://github.com/svgdotjs/svg.js\" target=\"_blank\" rel=\"noopener\">https://github.com/svgdotjs/svg.js</a></li>\n<li>d3.js <a href=\"https://d3js.org\" target=\"_blank\" rel=\"noopener\">https://d3js.org</a></li>\n<li>threes.js <a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">https://threejs.org</a></li>\n</ul>\n<h3 id=\"1-5-微信分享\"><a href=\"#1-5-微信分享\" class=\"headerlink\" title=\"1.5. 微信分享\"></a>1.5. 微信分享</h3><p>由于第一次做这种活动页，没有特别注意到微信内分享的问题，直到上线时才发现，分享出去的效果实在太难看，这导致几位留守到最后的同事紧急探讨协调方案，几乎整晚没睡觉。</p>\n<h4 id=\"1-5-1-微信-jssdk-分享-API\"><a href=\"#1-5-1-微信-jssdk-分享-API\" class=\"headerlink\" title=\"1.5.1. 微信 jssdk 分享 API\"></a>1.5.1. 微信 jssdk 分享 API</h4><p>微信内开发应注意这几点：</p>\n<ul>\n<li>下载微信开发者工具（或 TBS Studio），以调试微信内页面</li>\n<li>需要通过认证的公众号或订阅号，取得微信 jssdk 分享接口所需的 appId 和 signature</li>\n<li>需要后端 API 管理 signature 签名的生成与缓存</li>\n<li>window.history.pushState/replaceState 修改了 URL 时需要重新生成 signature 签名。由于没有仔细阅读文档并意识到这一点，在这个问题上坑了比较多的时间。</li>\n</ul>\n<p>我们最终协调到一个部门的订阅号，并使用他们已实现了的后端 token 签名生成 API 来实现 jssdk 的分享 API，在 nginx 层对该 API 代理转发解决跨域安全性相关问题。微信分享主要代码参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isWeixinBrowser = <span class=\"regexp\">/micromessenger/</span>.test(navigator.userAgent.toLowerCase());</span><br><span class=\"line\"><span class=\"keyword\">const</span> wxJsdk = <span class=\"string\">'//res.wx.qq.com/open/js/jweixin-1.1.0.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jsApiList = [<span class=\"string\">'checkJsApi'</span>, <span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>, <span class=\"string\">'onMenuShareQQ'</span>, <span class=\"string\">'onMenuShareWeibo'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> opts = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'My Flyme 独家记忆'</span>,</span><br><span class=\"line\">    desc: <span class=\"string\">'当时光凝固，当回忆定格。回首2016 ，我与 Flyme 的点点滴滴都在这里。这是属于我和 Flyme 的独家记忆。'</span>,</span><br><span class=\"line\">    link: <span class=\"string\">''</span>,</span><br><span class=\"line\">    imgUrl: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;, loadedwx = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initShareEvent</span>(<span class=\"params\">wx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> option = &#123;</span><br><span class=\"line\">        ...opts,</span><br><span class=\"line\">        trigger: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'trigger'</span>, res)&#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'已分享'</span>, res) &#125;,</span><br><span class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'已取消'</span>, res) &#125;,</span><br><span class=\"line\">        fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(res)) &#125; </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    wx.onMenuShareAppMessage(option); <span class=\"comment\">// 分享给朋友</span></span><br><span class=\"line\">    wx.onMenuShareTimeline(option);   <span class=\"comment\">// 分享到朋友圈</span></span><br><span class=\"line\">    wx.onMenuShareQQ(option);         <span class=\"comment\">// 分享到QQ</span></span><br><span class=\"line\">    wx.onMenuShareWeibo(option);      <span class=\"comment\">// 分享到微博</span></span><br><span class=\"line\">    wx.onMenuShareQZone(option);      <span class=\"comment\">// 分享到QZone</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkJsApi</span>(<span class=\"params\">wx</span>) </span>&#123;</span><br><span class=\"line\">    wx.checkJsApi(&#123;</span><br><span class=\"line\">        jsApiList,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> initShareEvent(wx),</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'checkJsApi error: '</span>, err)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initConfig</span>(<span class=\"params\">wx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 特别注意，这里 link 必须使用当前页面的 URL 地址，否则会失败！</span></span><br><span class=\"line\">    opts.link = <span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">document</span>.location.href.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'/wechat_api/get_js_ticket?&amp;url='</span> + opts.link,</span><br><span class=\"line\">        dataType:<span class=\"string\">'jsonp'</span>, <span class=\"comment\">//指定为jsonp类型</span></span><br><span class=\"line\">        jsonp:<span class=\"string\">'callback'</span></span><br><span class=\"line\">    &#125;).done(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        wx.config(&#123;</span><br><span class=\"line\">            debug: process.env.NODE_ENV === <span class=\"string\">'development'</span>,</span><br><span class=\"line\">            appId: <span class=\"string\">'wx0000000000000000'</span>,</span><br><span class=\"line\">            nonceStr: res.data.nonceStr,</span><br><span class=\"line\">            timestamp: res.data.timestamp,</span><br><span class=\"line\">            signature: res.data.signature,</span><br><span class=\"line\">            jsApiList</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> options =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadedwx || !isWeixinBrowser) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>([wxJsdk], (wx) =&gt; &#123;</span><br><span class=\"line\">        loadedwx = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        $.extend(<span class=\"literal\">true</span>, opts, options);</span><br><span class=\"line\">        initConfig(wx);</span><br><span class=\"line\">        wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> checkJsApi(wx));</span><br><span class=\"line\">        wx.error(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">'出错了：'</span>, res.errMsg));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-5-2-不走微信-jssdk-的取巧方法\"><a href=\"#1-5-2-不走微信-jssdk-的取巧方法\" class=\"headerlink\" title=\"1.5.2. 不走微信 jssdk 的取巧方法\"></a>1.5.2. 不走微信 jssdk 的取巧方法</h4><p>微信分享 API 需要公众号或订阅号，临时的活动开发可能来不及折腾，那么一个折中的办法是这样的：在页面头部 img 标签设置分享显示的图片，设置高度和宽度为 0。示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"assets/webp/share.webp\"</span> style=<span class=\"string\">\"width:0;height:0;overflow:hidden\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>微信会提取页面标题和第一张图片，作为朋友圈分享的标题和缩略图。使用 jssdk 方式分享到朋友圈的效果也是只有标题和缩略图，所以效果上没有区别。比较大的区别是，“发送给好友”时没有描述，描述位置变成了页面 URL 地址。</p>\n<h3 id=\"1-6-性能优化相关\"><a href=\"#1-6-性能优化相关\" class=\"headerlink\" title=\"1.6. 性能优化相关\"></a>1.6. 性能优化相关</h3><p>由于时间紧而且设计稿是逐步给到的，很多细节的优化都没法去做。最终上线的版本首屏大小约 1.3M，在弱网下的加载时间会比较久一些，可优化空间还比较大。这里探讨一下我们主要考虑到的几个点。</p>\n<h4 id=\"1-6-1-页面资源异步加载\"><a href=\"#1-6-1-页面资源异步加载\" class=\"headerlink\" title=\"1.6.1. 页面资源异步加载\"></a>1.6.1. 页面资源异步加载</h4><p>一共二十多个页面，我们按每页一个 html 模板和一个 less 文件的方式，按页面分工开发，在 index.html 页面以 script 模板方式引入，由 fis3 实现模板嵌入。通过 ajax 拿到数据后，根据数据替换模板中的数据占位符，并进行页面切割，然后生成 iSlider 需要的数据配置项。这样做的好处是 html 内容未写入到 DOM 时，涉及的静态资源图片不会被加载。</p>\n<p>iSlider 默认至少加载 3 个页面，每一时刻也最多保存三个页面实例。于是首屏加载了三个页面，这正好符合我们的目的。</p>\n<p>另外要提到的一点是，弱网下不同图片下载的时差较大，会使得不同位置的图片动画断断续续地出现。为了避免这种不好的效果，我们使用了一个简单的图片预加载机制，在预加载完首屏涉及的图片资源后才隐藏 loading 显示页面。</p>\n<h4 id=\"1-6-2-webp-支持\"><a href=\"#1-6-2-webp-支持\" class=\"headerlink\" title=\"1.6.2. webp 支持\"></a>1.6.2. webp 支持</h4><p>该项目涉及图片资源 500 多张，只有手绘文字图片做了雪碧图处理。现在的移动端基本都支持 webp，使用 webp 是必须的。实际上使用 webp 后，图片目录的大小减小了 60%。</p>\n<p>以前大家都是用智图这种在线工具处理少量的图片，搜索了一下，居然没有找到现成的批量生成 webp 的工具库，于是写了一个批量生成方法。这两天整理完善了一下，算是造了一个小轮子，需要的同学可以关注下，地址在这里：</p>\n<p>webp 批量转换：<a href=\"https://github.com/lzwme/webp-batch-convert\" target=\"_blank\" rel=\"noopener\">https://github.com/lzwme/webp-batch-convert</a></p>\n<p>更新：有同学提到了，imagemin 提供的插件 imagemin-webp 也可以实现类似的需求。看了项目源码，实现的原理是一样的，其仓库地址为： <a href=\"https://github.com/imagemin/imagemin-webp\" target=\"_blank\" rel=\"noopener\">https://github.com/imagemin/imagemin-webp</a></p>\n<h3 id=\"1-7-应用内登陆-分享\"><a href=\"#1-7-应用内登陆-分享\" class=\"headerlink\" title=\"1.7. 应用内登陆/分享\"></a>1.7. 应用内登陆/分享</h3><p>由于要在 Flyme 自带的近十个主要应用内作推广入口，涉及到两个问题：应用内分享和应用内免登录。</p>\n<p>在协调这一块时发现，各应用都是独自制定的各不相同的 webview 内相关 js 接口和规范，同一应用不同版本的实现也可能有差异，或者根本没有相关实现；有规范的文档也不够齐全，并且都没有示例参考；没有各应用的开发测试版本来做调试。于是花了不少时间各种咨询，踩了不少的坑，效果也还是不尽人意，最终只在魅族浏览器上做到了期望的效果。</p>\n<p>没有统一规范，各自造轮子，于是这种跨部门跨应用的功能需求变得如此艰难。导致这种现象的存在因素很多，可知的一点是也和公司内前端人员处于边缘化地位的现实有关。过去的一年里，基础技术支撑部门技术平台做了一套 hybridApp 解决方案，@chemdemo 同学还将 JSBridge 部分抽离开源了出来：<a href=\"https://github.com/chemdemo/hybrid-js\" target=\"_blank\" rel=\"noopener\">https://github.com/chemdemo/hybrid-js</a> 。可能是缺少高层足够的相关意识和支持力度，并没有在各业务软件内得到广泛应用，反而主要靠内部前端圈间沟通传播。不过这套方案为了简洁只实现了很少的通用 API 和可扩展方法，并没有继续实现各种业务适用的通用性扩展功能，自然也没有我们想要的应用内分享和 Flyme 免登录这两个功能。</p>\n<p>对于这个问题有两点总结： </p>\n<ul>\n<li>统一的公共 SDK 的重要性：避免重复造轮子，健壮且具有一致性的 API、完善的文档。</li>\n<li>再好的文档不如一个 demo</li>\n</ul>\n<h3 id=\"1-8-工程化问题\"><a href=\"#1-8-工程化问题\" class=\"headerlink\" title=\"1.8. 工程化问题\"></a>1.8. 工程化问题</h3><p>项目初期使用 webpack 进行构建，但由于我们平时的经验以 fis3 为主，webpack 过于灵活的配置特性使得一些工程化需求需要花时间探索。在我们接手项目后一起讨论了一下，果断转为熟悉的 fis3 构建体系。使用 fis3 主要解决的问题有：</p>\n<ul>\n<li>less 编译</li>\n<li>es6 编译</li>\n<li>js/css 压缩合并</li>\n<li>页面模板嵌入</li>\n<li>发布时 CDN 单独域名的适配</li>\n<li>发布时符合内部运维体系线上发布规范的目录路径修正</li>\n</ul>\n<p>相比较为灵活的 webpack，fis3 更注重流程化整体解决方案，简单的数十行配置即可实现各种工程化需求。不过 fis3 的发展现在似乎进入了一个瓶颈期/稳定期，社区中对于在 rollup 和 webpack 中大热的 tree-shaking 等技术几乎都没有什么反应。希望它不要没落了，能有更多的创新吧。有两点期望：走国际化路线，出英文文档与社区支持，向国际顶级项目看进；跟进参考业界最新的工程化理念，如有必要出个 fis4 也未尝不可。</p>\n<h3 id=\"1-9-运维发布问题\"><a href=\"#1-9-运维发布问题\" class=\"headerlink\" title=\"1.9. 运维发布问题\"></a>1.9. 运维发布问题</h3><p>由于涉及到跨部门合作，也没有太多的时间，项目起初放在了内部的 <strong><em> gitlab </em></strong> 平台，没有走 git+gerrit+jenkins+运维发布平台 这一内部完整的体系。这样做在前期省去了项目创建、各种权限申请等一堆需要协调沟通的事情，开发协作效率也比较高，但到了发布的阶段就突显出了问题：每次发布都需要由运维人员手动操作，协调发布很花费时间。</p>\n<p>另外静态页面也没有独立出来，想当然地简单的扔到后端目录中，结果导致前端的修改需要后端也必须作修改发布，增加了前后端协调的时间成本。</p>\n<p>于是，在首次发布后又进行的几次小迭代中，每次迭代发布都涉及到多人手动协调，十分的浪费时间。</p>\n<p>总结一句话：项目构建尽量与已有的成熟的规范一致，以少走弯路。</p>\n<h3 id=\"1-10-其他\"><a href=\"#1-10-其他\" class=\"headerlink\" title=\"1.10. 其他\"></a>1.10. 其他</h3><p>最后列举一些移动端 H5 开发可参考的内容：</p>\n<ul>\n<li>真机调试 <a href=\"https://github.com/jieyou/remote_inspect_web_on_real_device\" target=\"_blank\" rel=\"noopener\">https://github.com/jieyou/remote_inspect_web_on_real_device</a></li>\n<li>vConsole: 客户端内 H5 调试 <a href=\"https://github.com/WechatFE/vConsole\" target=\"_blank\" rel=\"noopener\">https://github.com/WechatFE/vConsole</a></li>\n<li>移动端布局终极解决方案 <a href=\"https://github.com/imochen/hotcss\" target=\"_blank\" rel=\"noopener\">https://github.com/imochen/hotcss</a></li>\n<li>mobileHack <a href=\"https://github.com/RubyLouvre/mobileHack\" target=\"_blank\" rel=\"noopener\">https://github.com/RubyLouvre/mobileHack</a></li>\n<li>H5项目常见问题汇总及解决方案 <a href=\"https://github.com/FrontEndRoad/HTML5-FAQ\" target=\"_blank\" rel=\"noopener\">https://github.com/FrontEndRoad/HTML5-FAQ</a></li>\n</ul>\n<h3 id=\"1-11-小结\"><a href=\"#1-11-小结\" class=\"headerlink\" title=\"1.11. 小结\"></a>1.11. 小结</h3><p>这是我们第一次尝试这种活动页，在如此紧凑的时间节点下，没有什么高大上的东西，更多的是各种采坑尝试的实践过程。以上列举的内容算是对本次开发实践做一个总结记录，采用的相关实现方案也可作后续参考。欢迎探讨分享你们的经验。</p>\n<h2 id=\"2-关于作者\"><a href=\"#2-关于作者\" class=\"headerlink\" title=\"2. 关于作者\"></a>2. 关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"H5页面终端适配解决方案","p":"h5/terminal-adapter","date":"2016-11-23T01:43:44.000Z","_content":"\n## 前言\n\n无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？    \n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [基本概念解读](#基本概念解读)\n        - [CSS尺寸单位](#css尺寸单位)\n        - [屏幕（screen）](#屏幕screen)\n        - [视口（viewport）](#视口viewport)\n        - [缩放（scale）](#缩放scale)\n    - [解决方案-viewport](#解决方案-viewport)\n    - [解决方案-rem](#解决方案-rem)\n        - [动态设置 html 标签 font-size 大小](#动态设置-html-标签-font-size-大小)\n        - [元素大小取值方法](#元素大小取值方法)\n        - [rem 布局方案的开发方式](#rem-布局方案的开发方式)\n        - [字体使用 px 为单位](#字体使用-px-为单位)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n<!--more-->\n\n## 正文\n\n### 基本概念解读\n像素（pixels）、屏幕（screen）、视口（viewport）、缩放（scale）\n设备像素、CSS像素、设备像素比（window.devicePixelRatio）、\n\n#### CSS尺寸单位\n\n1.px：绝对单位，页面按精确像素展示，英文（pixels）\n2.em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。\n3.rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。\n4.vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。\n5.vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。\n6.vmin：vw和vh中较小的那个。\n7.vmax：vw和vh中较大的那个。\n8.%:百分比\n9.in:寸\n10.cm:厘米\n11.mm:毫米\n12.pt:point，大约1/72寸\n13.pc:pica，大约6pt，1/6寸\n14.ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)\n15.ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)\n\n\n#### 屏幕（screen）\n\n#### 视口（viewport）\n\n#### 缩放（scale）\n\n\n\n\n### 解决方案-viewport\n在移动端，可以通过 viewport 缩放页面大小比率达到目的。\n\n简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：\n``` JS\n(function () {\n    var docEl = document.documentElement;\n    var isMobile = window.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);\n\n    function setScale() {\n        var pageScale = 1;\n\n        if (window.top !== window) {\n            return pageScale;\n        }\n\n        var width = docEl.clientWidth || 360;\n        var height = docEl.clientHeight || 640;\n        if (width / height >= 360 / 640) {\n            // 高度优先\n            pageScale = height / 640;\n        } else {\n            pageScale = width / 360;\n        }\n\n        var content = 'width=' + 360 + ', initial-scale=' + pageScale \n          + ', maximum-scale=' + pageScale + ', user-scalable=no';\n        document.getElementById('viewport').setAttribute('content', content);\n\n        window.pageScale = pageScale;\n    }\n\n    if (isMobile) {\n        setScale();\n    } else {\n        docEl.className += ' pc';\n    }\n})()\n```\n但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。\n\n\n\n\n### 解决方案-rem\nrem 布局适配方案被提到的比较多，在各大互联网企业产品中都有较为广泛的应用。\n\n简单来说其方法为：\n\n按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；\ncss 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；\n设计稿中的字体使用 px 为单位，通过媒体查询稍作调整。\n下面我们举个例子来说明。\n\n#### 动态设置 html 标签 font-size 大小\n第一个问题是 html 标签的 font-size 动态计算。这取决于如何约定换算比例，以页面宽度十等份为例，核心代码参考：\n``` JS\n(function(WIN) {\n    var  setFontSize = WIN.setFontSize = function (_width) {\n        var  docEl = document.documentElement; \n        // 获取当前窗口的宽度\n        var  width = _width || docEl.clientWidth; // docEl.getBoundingClientRect().width;\n\n        // 大于 1080px 按 1080\n        if (width > 1080) { \n            width = 1080;\n        }\n\n        var  rem = width / 10;\n        console.log(rem);\n\n        docEl.style.fontSize = rem + 'px';\n\n        // 部分机型上的误差、兼容性处理\n        var  actualSize = win.getComputedStyle && parseFloat(win.getComputedStyle(docEl)[\"font-size\"]);\n        if (actualSize !== rem && actualSize > 0 && Math.abs(actualSize - rem) > 1) {\n            var remScaled = rem * rem / actualSize;\n            docEl.style.fontSize = remScaled + 'px';\n        }\n    }\n\n    var timer;\n    //函数节流\n    function dbcRefresh() {\n        clearTimeout(timer);\n        timer = setTimeout(setFontSize, 100);\n    }\n\n    //窗口更新动态改变 font-size\n    WIN.addEventListener('resize', dbcRefresh, false);\n    //页面显示时计算一次\n    WIN.addEventListener('pageshow', function(e) {\n        if (e.persisted) { \n            dbcRefresh() \n        }\n    }, false);\n    setFontSize();\n})(window)\n```\n另外，对于全屏显示的 H5 活动页，对宽高比例有所要求，此时应当做的调整。可以这么来做：\n``` JS\nfunction adjustWarp(warpId = '#warp') {\n    // if (window.isMobile) return;\n    const $win = $(window);\n    const height = $win.height();\n    let width = $win.width();\n\n    // 考虑导航栏情况\n    if (width / height < 360 / 600) {\n        return;\n    }\n\n    width = Math.ceil(height * 360 / 640);\n\n    $(warpId).css({\n        height,\n        width,\n        postion: 'relative',\n        top: 0,\n        left: 'auto',\n        margin: '0 auto'\n    });\n\n    // 重新计算 rem\n    window.setFontSize(width);\n}\n```\n按照这种缩放方法，几乎在任何设备上都可以实现等比缩放的精确布局。\n\n#### 元素大小取值方法\n第二个问题是元素大小的取值。\n\n以设计稿宽度 1080px 为例，我们将宽度分为 10 等份以便于换算，那么 1rem = 1080 / 10 = 108px。\n\n设计稿中，有一个图片大小为 460x210，相对页面位置 top: 321px; left: 70;。其换算方法：\n``` JS\nconst px2rem = function(px, rem = 108) {\n    let remVal = parseFloat(px) / rem;\n\n    if (typeof px === \"string\" && px.match(/px$/)) { \n        remVal += 'rem';\n    }\n\n    return remVal;\n}\n```\n由此得到该元素最终的 css 样式应为：\n``` JS\n.img_demo {\n    position: absolute;\n    background-size: cover;\n    background-image: url('demo.png');\n    top: 2.97222rem;\n    left: 0.64814rem;\n    width: 4.25926rem;\n    height: 1.94444rem;\n}\n```\n#### rem 布局方案的开发方式\n通过以上方法，rem 布局方案就得到了实现。但是手动计算 rem 的取值显然不现实。\n通过 less/sass 预处理工具，我们只需要设置 mixins 方法，然后按照设计稿的实际大小来取值即可。以 less 为例，mixins 参考如下：\n\n\n``` JS\n// px 转 rem\n.px2rem(@px, @attr: 'width', @rem: 108rem) {\n    @{attr}: (@px / @rem);\n}\n\n.px2remTLWH(@top, @left, @width, @height, @rem: 108rem) {\n    .px2rem(@top, top, @rem);\n    .px2rem(@left, left, @rem);\n    .px2rem(@width, width, @rem);\n    .px2rem(@height, height, @rem);\n}\n```\n针对前文的示例元素，css 样式可以这样来写：\n\n``` JS\n.img_demo {\n    position: absolute;\n    background-size: cover;\n    background-image: url('demo.png');\n\n    .px2remTLWH(321, 70, 460, 210);\n}\n\n```\n这里，宽和高可以直接通过设计稿输出的图片元素大小读取到；top/left 的取值，可以通过在 Photoshop 中移动参考线定位元素快速得到。\n\n\n#### 字体使用 px 为单位\n字体使用 rem 等比缩放会出现显示上的问题，只需要针对性使用媒体查询设置几种大小即可。\n\n示例参考：\n``` JS\n\n// 字体响应式\n@media screen and (max-width: 321px) {\n    body {\n        font-size: 13px;\n    }\n}\n\n@media screen and (min-width: 321px) and (max-width: 400px) {\n    body {\n        font-size: 14px;\n    }\n}\n\n@media screen and (min-width: 400px) {\n    body {\n        font-size: 16px;\n    }\n}\n```\n\n\n## 小结\n\n[H5移动多终端适配全解 - 从原理到方案](https://zhuanlan.zhihu.com/p/25422063)\n[CSS单位详解](https://www.w3.org/Style/Examples/007/units.en.html)\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/h5/terminal-adapter.md","raw":"---\ntitle: H5页面终端适配解决方案\ntags: [h5,flex,media]\np: h5/terminal-adapter\ndate: 2016-11-23 09:43:44\ncategories: H5\n---\n\n## 前言\n\n无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？    \n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [基本概念解读](#基本概念解读)\n        - [CSS尺寸单位](#css尺寸单位)\n        - [屏幕（screen）](#屏幕screen)\n        - [视口（viewport）](#视口viewport)\n        - [缩放（scale）](#缩放scale)\n    - [解决方案-viewport](#解决方案-viewport)\n    - [解决方案-rem](#解决方案-rem)\n        - [动态设置 html 标签 font-size 大小](#动态设置-html-标签-font-size-大小)\n        - [元素大小取值方法](#元素大小取值方法)\n        - [rem 布局方案的开发方式](#rem-布局方案的开发方式)\n        - [字体使用 px 为单位](#字体使用-px-为单位)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n<!--more-->\n\n## 正文\n\n### 基本概念解读\n像素（pixels）、屏幕（screen）、视口（viewport）、缩放（scale）\n设备像素、CSS像素、设备像素比（window.devicePixelRatio）、\n\n#### CSS尺寸单位\n\n1.px：绝对单位，页面按精确像素展示，英文（pixels）\n2.em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。\n3.rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。\n4.vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。\n5.vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。\n6.vmin：vw和vh中较小的那个。\n7.vmax：vw和vh中较大的那个。\n8.%:百分比\n9.in:寸\n10.cm:厘米\n11.mm:毫米\n12.pt:point，大约1/72寸\n13.pc:pica，大约6pt，1/6寸\n14.ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)\n15.ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)\n\n\n#### 屏幕（screen）\n\n#### 视口（viewport）\n\n#### 缩放（scale）\n\n\n\n\n### 解决方案-viewport\n在移动端，可以通过 viewport 缩放页面大小比率达到目的。\n\n简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：\n``` JS\n(function () {\n    var docEl = document.documentElement;\n    var isMobile = window.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);\n\n    function setScale() {\n        var pageScale = 1;\n\n        if (window.top !== window) {\n            return pageScale;\n        }\n\n        var width = docEl.clientWidth || 360;\n        var height = docEl.clientHeight || 640;\n        if (width / height >= 360 / 640) {\n            // 高度优先\n            pageScale = height / 640;\n        } else {\n            pageScale = width / 360;\n        }\n\n        var content = 'width=' + 360 + ', initial-scale=' + pageScale \n          + ', maximum-scale=' + pageScale + ', user-scalable=no';\n        document.getElementById('viewport').setAttribute('content', content);\n\n        window.pageScale = pageScale;\n    }\n\n    if (isMobile) {\n        setScale();\n    } else {\n        docEl.className += ' pc';\n    }\n})()\n```\n但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。\n\n\n\n\n### 解决方案-rem\nrem 布局适配方案被提到的比较多，在各大互联网企业产品中都有较为广泛的应用。\n\n简单来说其方法为：\n\n按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；\ncss 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；\n设计稿中的字体使用 px 为单位，通过媒体查询稍作调整。\n下面我们举个例子来说明。\n\n#### 动态设置 html 标签 font-size 大小\n第一个问题是 html 标签的 font-size 动态计算。这取决于如何约定换算比例，以页面宽度十等份为例，核心代码参考：\n``` JS\n(function(WIN) {\n    var  setFontSize = WIN.setFontSize = function (_width) {\n        var  docEl = document.documentElement; \n        // 获取当前窗口的宽度\n        var  width = _width || docEl.clientWidth; // docEl.getBoundingClientRect().width;\n\n        // 大于 1080px 按 1080\n        if (width > 1080) { \n            width = 1080;\n        }\n\n        var  rem = width / 10;\n        console.log(rem);\n\n        docEl.style.fontSize = rem + 'px';\n\n        // 部分机型上的误差、兼容性处理\n        var  actualSize = win.getComputedStyle && parseFloat(win.getComputedStyle(docEl)[\"font-size\"]);\n        if (actualSize !== rem && actualSize > 0 && Math.abs(actualSize - rem) > 1) {\n            var remScaled = rem * rem / actualSize;\n            docEl.style.fontSize = remScaled + 'px';\n        }\n    }\n\n    var timer;\n    //函数节流\n    function dbcRefresh() {\n        clearTimeout(timer);\n        timer = setTimeout(setFontSize, 100);\n    }\n\n    //窗口更新动态改变 font-size\n    WIN.addEventListener('resize', dbcRefresh, false);\n    //页面显示时计算一次\n    WIN.addEventListener('pageshow', function(e) {\n        if (e.persisted) { \n            dbcRefresh() \n        }\n    }, false);\n    setFontSize();\n})(window)\n```\n另外，对于全屏显示的 H5 活动页，对宽高比例有所要求，此时应当做的调整。可以这么来做：\n``` JS\nfunction adjustWarp(warpId = '#warp') {\n    // if (window.isMobile) return;\n    const $win = $(window);\n    const height = $win.height();\n    let width = $win.width();\n\n    // 考虑导航栏情况\n    if (width / height < 360 / 600) {\n        return;\n    }\n\n    width = Math.ceil(height * 360 / 640);\n\n    $(warpId).css({\n        height,\n        width,\n        postion: 'relative',\n        top: 0,\n        left: 'auto',\n        margin: '0 auto'\n    });\n\n    // 重新计算 rem\n    window.setFontSize(width);\n}\n```\n按照这种缩放方法，几乎在任何设备上都可以实现等比缩放的精确布局。\n\n#### 元素大小取值方法\n第二个问题是元素大小的取值。\n\n以设计稿宽度 1080px 为例，我们将宽度分为 10 等份以便于换算，那么 1rem = 1080 / 10 = 108px。\n\n设计稿中，有一个图片大小为 460x210，相对页面位置 top: 321px; left: 70;。其换算方法：\n``` JS\nconst px2rem = function(px, rem = 108) {\n    let remVal = parseFloat(px) / rem;\n\n    if (typeof px === \"string\" && px.match(/px$/)) { \n        remVal += 'rem';\n    }\n\n    return remVal;\n}\n```\n由此得到该元素最终的 css 样式应为：\n``` JS\n.img_demo {\n    position: absolute;\n    background-size: cover;\n    background-image: url('demo.png');\n    top: 2.97222rem;\n    left: 0.64814rem;\n    width: 4.25926rem;\n    height: 1.94444rem;\n}\n```\n#### rem 布局方案的开发方式\n通过以上方法，rem 布局方案就得到了实现。但是手动计算 rem 的取值显然不现实。\n通过 less/sass 预处理工具，我们只需要设置 mixins 方法，然后按照设计稿的实际大小来取值即可。以 less 为例，mixins 参考如下：\n\n\n``` JS\n// px 转 rem\n.px2rem(@px, @attr: 'width', @rem: 108rem) {\n    @{attr}: (@px / @rem);\n}\n\n.px2remTLWH(@top, @left, @width, @height, @rem: 108rem) {\n    .px2rem(@top, top, @rem);\n    .px2rem(@left, left, @rem);\n    .px2rem(@width, width, @rem);\n    .px2rem(@height, height, @rem);\n}\n```\n针对前文的示例元素，css 样式可以这样来写：\n\n``` JS\n.img_demo {\n    position: absolute;\n    background-size: cover;\n    background-image: url('demo.png');\n\n    .px2remTLWH(321, 70, 460, 210);\n}\n\n```\n这里，宽和高可以直接通过设计稿输出的图片元素大小读取到；top/left 的取值，可以通过在 Photoshop 中移动参考线定位元素快速得到。\n\n\n#### 字体使用 px 为单位\n字体使用 rem 等比缩放会出现显示上的问题，只需要针对性使用媒体查询设置几种大小即可。\n\n示例参考：\n``` JS\n\n// 字体响应式\n@media screen and (max-width: 321px) {\n    body {\n        font-size: 13px;\n    }\n}\n\n@media screen and (min-width: 321px) and (max-width: 400px) {\n    body {\n        font-size: 14px;\n    }\n}\n\n@media screen and (min-width: 400px) {\n    body {\n        font-size: 16px;\n    }\n}\n```\n\n\n## 小结\n\n[H5移动多终端适配全解 - 从原理到方案](https://zhuanlan.zhihu.com/p/25422063)\n[CSS单位详解](https://www.w3.org/Style/Examples/007/units.en.html)\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"h5/terminal-adapter","published":1,"updated":"2018-01-23T03:30:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt28000hfme3xshbc74l","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？<br><!-- TOC --></p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#基本概念解读\">基本概念解读</a><ul>\n<li><a href=\"#css尺寸单位\">CSS尺寸单位</a></li>\n<li><a href=\"#屏幕screen\">屏幕（screen）</a></li>\n<li><a href=\"#视口viewport\">视口（viewport）</a></li>\n<li><a href=\"#缩放scale\">缩放（scale）</a></li>\n</ul>\n</li>\n<li><a href=\"#解决方案-viewport\">解决方案-viewport</a></li>\n<li><a href=\"#解决方案-rem\">解决方案-rem</a><ul>\n<li><a href=\"#动态设置-html-标签-font-size-大小\">动态设置 html 标签 font-size 大小</a></li>\n<li><a href=\"#元素大小取值方法\">元素大小取值方法</a></li>\n<li><a href=\"#rem-布局方案的开发方式\">rem 布局方案的开发方式</a></li>\n<li><a href=\"#字体使用-px-为单位\">字体使用 px 为单位</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"基本概念解读\"><a href=\"#基本概念解读\" class=\"headerlink\" title=\"基本概念解读\"></a>基本概念解读</h3><p>像素（pixels）、屏幕（screen）、视口（viewport）、缩放（scale）<br>设备像素、CSS像素、设备像素比（window.devicePixelRatio）、</p>\n<h4 id=\"CSS尺寸单位\"><a href=\"#CSS尺寸单位\" class=\"headerlink\" title=\"CSS尺寸单位\"></a>CSS尺寸单位</h4><p>1.px：绝对单位，页面按精确像素展示，英文（pixels）<br>2.em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。<br>3.rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。<br>4.vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。<br>5.vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。<br>6.vmin：vw和vh中较小的那个。<br>7.vmax：vw和vh中较大的那个。<br>8.%:百分比<br>9.in:寸<br>10.cm:厘米<br>11.mm:毫米<br>12.pt:point，大约1/72寸<br>13.pc:pica，大约6pt，1/6寸<br>14.ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)<br>15.ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)</p>\n<h4 id=\"屏幕（screen）\"><a href=\"#屏幕（screen）\" class=\"headerlink\" title=\"屏幕（screen）\"></a>屏幕（screen）</h4><h4 id=\"视口（viewport）\"><a href=\"#视口（viewport）\" class=\"headerlink\" title=\"视口（viewport）\"></a>视口（viewport）</h4><h4 id=\"缩放（scale）\"><a href=\"#缩放（scale）\" class=\"headerlink\" title=\"缩放（scale）\"></a>缩放（scale）</h4><h3 id=\"解决方案-viewport\"><a href=\"#解决方案-viewport\" class=\"headerlink\" title=\"解决方案-viewport\"></a>解决方案-viewport</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p>\n<p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isMobile = <span class=\"built_in\">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setScale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = docEl.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = docEl.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 高度优先</span></span><br><span class=\"line\">            pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pageScale = width / <span class=\"number\">360</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> content = <span class=\"string\">'width='</span> + <span class=\"number\">360</span> + <span class=\"string\">', initial-scale='</span> + pageScale </span><br><span class=\"line\">          + <span class=\"string\">', maximum-scale='</span> + pageScale + <span class=\"string\">', user-scalable=no'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'viewport'</span>).setAttribute(<span class=\"string\">'content'</span>, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageScale = pageScale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMobile) &#123;</span><br><span class=\"line\">        setScale();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        docEl.className += <span class=\"string\">' pc'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p>\n<h3 id=\"解决方案-rem\"><a href=\"#解决方案-rem\" class=\"headerlink\" title=\"解决方案-rem\"></a>解决方案-rem</h3><p>rem 布局适配方案被提到的比较多，在各大互联网企业产品中都有较为广泛的应用。</p>\n<p>简单来说其方法为：</p>\n<p>按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；<br>css 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；<br>设计稿中的字体使用 px 为单位，通过媒体查询稍作调整。<br>下面我们举个例子来说明。</p>\n<h4 id=\"动态设置-html-标签-font-size-大小\"><a href=\"#动态设置-html-标签-font-size-大小\" class=\"headerlink\" title=\"动态设置 html 标签 font-size 大小\"></a>动态设置 html 标签 font-size 大小</h4><p>第一个问题是 html 标签的 font-size 动态计算。这取决于如何约定换算比例，以页面宽度十等份为例，核心代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">WIN</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span>  setFontSize = WIN.setFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_width</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span>  docEl = <span class=\"built_in\">document</span>.documentElement; </span><br><span class=\"line\">        <span class=\"comment\">// 获取当前窗口的宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  width = _width || docEl.clientWidth; <span class=\"comment\">// docEl.getBoundingClientRect().width;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 大于 1080px 按 1080</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width &gt; <span class=\"number\">1080</span>) &#123; </span><br><span class=\"line\">            width = <span class=\"number\">1080</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  rem = width / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(rem);</span><br><span class=\"line\"></span><br><span class=\"line\">        docEl.style.fontSize = rem + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 部分机型上的误差、兼容性处理</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  actualSize = win.getComputedStyle &amp;&amp; <span class=\"built_in\">parseFloat</span>(win.getComputedStyle(docEl)[<span class=\"string\">\"font-size\"</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actualSize !== rem &amp;&amp; actualSize &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(actualSize - rem) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> remScaled = rem * rem / actualSize;</span><br><span class=\"line\">            docEl.style.fontSize = remScaled + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"comment\">//函数节流</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dbcRefresh</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(setFontSize, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//窗口更新动态改变 font-size</span></span><br><span class=\"line\">    WIN.addEventListener(<span class=\"string\">'resize'</span>, dbcRefresh, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//页面显示时计算一次</span></span><br><span class=\"line\">    WIN.addEventListener(<span class=\"string\">'pageshow'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.persisted) &#123; </span><br><span class=\"line\">            dbcRefresh() </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    setFontSize();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure></p>\n<p>另外，对于全屏显示的 H5 活动页，对宽高比例有所要求，此时应当做的调整。可以这么来做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adjustWarp</span>(<span class=\"params\">warpId = <span class=\"string\">'#warp'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (window.isMobile) return;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $win = $(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> height = $win.height();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = $win.width();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 考虑导航栏情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (width / height &lt; <span class=\"number\">360</span> / <span class=\"number\">600</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    width = <span class=\"built_in\">Math</span>.ceil(height * <span class=\"number\">360</span> / <span class=\"number\">640</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(warpId).css(&#123;</span><br><span class=\"line\">        height,</span><br><span class=\"line\">        width,</span><br><span class=\"line\">        postion: <span class=\"string\">'relative'</span>,</span><br><span class=\"line\">        top: <span class=\"number\">0</span>,</span><br><span class=\"line\">        left: <span class=\"string\">'auto'</span>,</span><br><span class=\"line\">        margin: <span class=\"string\">'0 auto'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新计算 rem</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setFontSize(width);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>按照这种缩放方法，几乎在任何设备上都可以实现等比缩放的精确布局。</p>\n<h4 id=\"元素大小取值方法\"><a href=\"#元素大小取值方法\" class=\"headerlink\" title=\"元素大小取值方法\"></a>元素大小取值方法</h4><p>第二个问题是元素大小的取值。</p>\n<p>以设计稿宽度 1080px 为例，我们将宽度分为 10 等份以便于换算，那么 1rem = 1080 / 10 = 108px。</p>\n<p>设计稿中，有一个图片大小为 460x210，相对页面位置 top: 321px; left: 70;。其换算方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> px2rem = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">px, rem = <span class=\"number\">108</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remVal = <span class=\"built_in\">parseFloat</span>(px) / rem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> px === <span class=\"string\">\"string\"</span> &amp;&amp; px.match(<span class=\"regexp\">/px$/</span>)) &#123; </span><br><span class=\"line\">        remVal += <span class=\"string\">'rem'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> remVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由此得到该元素最终的 css 样式应为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.img_demo &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    background-size: cover;</span><br><span class=\"line\">    background-image: url(<span class=\"string\">'demo.png'</span>);</span><br><span class=\"line\">    top: <span class=\"number\">2.97222</span>rem;</span><br><span class=\"line\">    left: <span class=\"number\">0.64814</span>rem;</span><br><span class=\"line\">    width: <span class=\"number\">4.25926</span>rem;</span><br><span class=\"line\">    height: <span class=\"number\">1.94444</span>rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"rem-布局方案的开发方式\"><a href=\"#rem-布局方案的开发方式\" class=\"headerlink\" title=\"rem 布局方案的开发方式\"></a>rem 布局方案的开发方式</h4><p>通过以上方法，rem 布局方案就得到了实现。但是手动计算 rem 的取值显然不现实。<br>通过 less/sass 预处理工具，我们只需要设置 mixins 方法，然后按照设计稿的实际大小来取值即可。以 less 为例，mixins 参考如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// px 转 rem</span></span><br><span class=\"line\">.px2rem(@px, @attr: <span class=\"string\">'width'</span>, @rem: <span class=\"number\">108</span>rem) &#123;</span><br><span class=\"line\">    @&#123;attr&#125;: (@px / @rem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.px2remTLWH(@top, @left, @width, @height, @rem: <span class=\"number\">108</span>rem) &#123;</span><br><span class=\"line\">    .px2rem(@top, top, @rem);</span><br><span class=\"line\">    .px2rem(@left, left, @rem);</span><br><span class=\"line\">    .px2rem(@width, width, @rem);</span><br><span class=\"line\">    .px2rem(@height, height, @rem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对前文的示例元素，css 样式可以这样来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.img_demo &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    background-size: cover;</span><br><span class=\"line\">    background-image: url(<span class=\"string\">'demo.png'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    .px2remTLWH(<span class=\"number\">321</span>, <span class=\"number\">70</span>, <span class=\"number\">460</span>, <span class=\"number\">210</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，宽和高可以直接通过设计稿输出的图片元素大小读取到；top/left 的取值，可以通过在 Photoshop 中移动参考线定位元素快速得到。</p>\n<h4 id=\"字体使用-px-为单位\"><a href=\"#字体使用-px-为单位\" class=\"headerlink\" title=\"字体使用 px 为单位\"></a>字体使用 px 为单位</h4><p>字体使用 rem 等比缩放会出现显示上的问题，只需要针对性使用媒体查询设置几种大小即可。</p>\n<p>示例参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字体响应式</span></span><br><span class=\"line\">@media screen and (max-width: <span class=\"number\">321</span>px) &#123;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">13</span>px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (min-width: <span class=\"number\">321</span>px) and (max-width: <span class=\"number\">400</span>px) &#123;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">14</span>px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (min-width: <span class=\"number\">400</span>px) &#123;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">16</span>px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25422063\" target=\"_blank\" rel=\"noopener\">H5移动多终端适配全解 - 从原理到方案</a><br><a href=\"https://www.w3.org/Style/Examples/007/units.en.html\" target=\"_blank\" rel=\"noopener\">CSS单位详解</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？<br><!-- TOC --></p>\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#基本概念解读\">基本概念解读</a><ul>\n<li><a href=\"#css尺寸单位\">CSS尺寸单位</a></li>\n<li><a href=\"#屏幕screen\">屏幕（screen）</a></li>\n<li><a href=\"#视口viewport\">视口（viewport）</a></li>\n<li><a href=\"#缩放scale\">缩放（scale）</a></li>\n</ul>\n</li>\n<li><a href=\"#解决方案-viewport\">解决方案-viewport</a></li>\n<li><a href=\"#解决方案-rem\">解决方案-rem</a><ul>\n<li><a href=\"#动态设置-html-标签-font-size-大小\">动态设置 html 标签 font-size 大小</a></li>\n<li><a href=\"#元素大小取值方法\">元素大小取值方法</a></li>\n<li><a href=\"#rem-布局方案的开发方式\">rem 布局方案的开发方式</a></li>\n<li><a href=\"#字体使用-px-为单位\">字体使用 px 为单位</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"基本概念解读\"><a href=\"#基本概念解读\" class=\"headerlink\" title=\"基本概念解读\"></a>基本概念解读</h3><p>像素（pixels）、屏幕（screen）、视口（viewport）、缩放（scale）<br>设备像素、CSS像素、设备像素比（window.devicePixelRatio）、</p>\n<h4 id=\"CSS尺寸单位\"><a href=\"#CSS尺寸单位\" class=\"headerlink\" title=\"CSS尺寸单位\"></a>CSS尺寸单位</h4><p>1.px：绝对单位，页面按精确像素展示，英文（pixels）<br>2.em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。<br>3.rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。<br>4.vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。<br>5.vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。<br>6.vmin：vw和vh中较小的那个。<br>7.vmax：vw和vh中较大的那个。<br>8.%:百分比<br>9.in:寸<br>10.cm:厘米<br>11.mm:毫米<br>12.pt:point，大约1/72寸<br>13.pc:pica，大约6pt，1/6寸<br>14.ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)<br>15.ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)</p>\n<h4 id=\"屏幕（screen）\"><a href=\"#屏幕（screen）\" class=\"headerlink\" title=\"屏幕（screen）\"></a>屏幕（screen）</h4><h4 id=\"视口（viewport）\"><a href=\"#视口（viewport）\" class=\"headerlink\" title=\"视口（viewport）\"></a>视口（viewport）</h4><h4 id=\"缩放（scale）\"><a href=\"#缩放（scale）\" class=\"headerlink\" title=\"缩放（scale）\"></a>缩放（scale）</h4><h3 id=\"解决方案-viewport\"><a href=\"#解决方案-viewport\" class=\"headerlink\" title=\"解决方案-viewport\"></a>解决方案-viewport</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p>\n<p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isMobile = <span class=\"built_in\">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setScale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = docEl.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = docEl.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 高度优先</span></span><br><span class=\"line\">            pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pageScale = width / <span class=\"number\">360</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> content = <span class=\"string\">'width='</span> + <span class=\"number\">360</span> + <span class=\"string\">', initial-scale='</span> + pageScale </span><br><span class=\"line\">          + <span class=\"string\">', maximum-scale='</span> + pageScale + <span class=\"string\">', user-scalable=no'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'viewport'</span>).setAttribute(<span class=\"string\">'content'</span>, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageScale = pageScale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMobile) &#123;</span><br><span class=\"line\">        setScale();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        docEl.className += <span class=\"string\">' pc'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p>\n<h3 id=\"解决方案-rem\"><a href=\"#解决方案-rem\" class=\"headerlink\" title=\"解决方案-rem\"></a>解决方案-rem</h3><p>rem 布局适配方案被提到的比较多，在各大互联网企业产品中都有较为广泛的应用。</p>\n<p>简单来说其方法为：</p>\n<p>按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；<br>css 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；<br>设计稿中的字体使用 px 为单位，通过媒体查询稍作调整。<br>下面我们举个例子来说明。</p>\n<h4 id=\"动态设置-html-标签-font-size-大小\"><a href=\"#动态设置-html-标签-font-size-大小\" class=\"headerlink\" title=\"动态设置 html 标签 font-size 大小\"></a>动态设置 html 标签 font-size 大小</h4><p>第一个问题是 html 标签的 font-size 动态计算。这取决于如何约定换算比例，以页面宽度十等份为例，核心代码参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">WIN</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span>  setFontSize = WIN.setFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_width</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span>  docEl = <span class=\"built_in\">document</span>.documentElement; </span><br><span class=\"line\">        <span class=\"comment\">// 获取当前窗口的宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  width = _width || docEl.clientWidth; <span class=\"comment\">// docEl.getBoundingClientRect().width;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 大于 1080px 按 1080</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width &gt; <span class=\"number\">1080</span>) &#123; </span><br><span class=\"line\">            width = <span class=\"number\">1080</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  rem = width / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(rem);</span><br><span class=\"line\"></span><br><span class=\"line\">        docEl.style.fontSize = rem + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 部分机型上的误差、兼容性处理</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  actualSize = win.getComputedStyle &amp;&amp; <span class=\"built_in\">parseFloat</span>(win.getComputedStyle(docEl)[<span class=\"string\">\"font-size\"</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actualSize !== rem &amp;&amp; actualSize &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(actualSize - rem) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> remScaled = rem * rem / actualSize;</span><br><span class=\"line\">            docEl.style.fontSize = remScaled + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"comment\">//函数节流</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dbcRefresh</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(setFontSize, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//窗口更新动态改变 font-size</span></span><br><span class=\"line\">    WIN.addEventListener(<span class=\"string\">'resize'</span>, dbcRefresh, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//页面显示时计算一次</span></span><br><span class=\"line\">    WIN.addEventListener(<span class=\"string\">'pageshow'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.persisted) &#123; </span><br><span class=\"line\">            dbcRefresh() </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    setFontSize();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure></p>\n<p>另外，对于全屏显示的 H5 活动页，对宽高比例有所要求，此时应当做的调整。可以这么来做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adjustWarp</span>(<span class=\"params\">warpId = <span class=\"string\">'#warp'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (window.isMobile) return;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $win = $(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> height = $win.height();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = $win.width();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 考虑导航栏情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (width / height &lt; <span class=\"number\">360</span> / <span class=\"number\">600</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    width = <span class=\"built_in\">Math</span>.ceil(height * <span class=\"number\">360</span> / <span class=\"number\">640</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(warpId).css(&#123;</span><br><span class=\"line\">        height,</span><br><span class=\"line\">        width,</span><br><span class=\"line\">        postion: <span class=\"string\">'relative'</span>,</span><br><span class=\"line\">        top: <span class=\"number\">0</span>,</span><br><span class=\"line\">        left: <span class=\"string\">'auto'</span>,</span><br><span class=\"line\">        margin: <span class=\"string\">'0 auto'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重新计算 rem</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setFontSize(width);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>按照这种缩放方法，几乎在任何设备上都可以实现等比缩放的精确布局。</p>\n<h4 id=\"元素大小取值方法\"><a href=\"#元素大小取值方法\" class=\"headerlink\" title=\"元素大小取值方法\"></a>元素大小取值方法</h4><p>第二个问题是元素大小的取值。</p>\n<p>以设计稿宽度 1080px 为例，我们将宽度分为 10 等份以便于换算，那么 1rem = 1080 / 10 = 108px。</p>\n<p>设计稿中，有一个图片大小为 460x210，相对页面位置 top: 321px; left: 70;。其换算方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> px2rem = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">px, rem = <span class=\"number\">108</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remVal = <span class=\"built_in\">parseFloat</span>(px) / rem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> px === <span class=\"string\">\"string\"</span> &amp;&amp; px.match(<span class=\"regexp\">/px$/</span>)) &#123; </span><br><span class=\"line\">        remVal += <span class=\"string\">'rem'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> remVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由此得到该元素最终的 css 样式应为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.img_demo &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    background-size: cover;</span><br><span class=\"line\">    background-image: url(<span class=\"string\">'demo.png'</span>);</span><br><span class=\"line\">    top: <span class=\"number\">2.97222</span>rem;</span><br><span class=\"line\">    left: <span class=\"number\">0.64814</span>rem;</span><br><span class=\"line\">    width: <span class=\"number\">4.25926</span>rem;</span><br><span class=\"line\">    height: <span class=\"number\">1.94444</span>rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"rem-布局方案的开发方式\"><a href=\"#rem-布局方案的开发方式\" class=\"headerlink\" title=\"rem 布局方案的开发方式\"></a>rem 布局方案的开发方式</h4><p>通过以上方法，rem 布局方案就得到了实现。但是手动计算 rem 的取值显然不现实。<br>通过 less/sass 预处理工具，我们只需要设置 mixins 方法，然后按照设计稿的实际大小来取值即可。以 less 为例，mixins 参考如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// px 转 rem</span></span><br><span class=\"line\">.px2rem(@px, @attr: <span class=\"string\">'width'</span>, @rem: <span class=\"number\">108</span>rem) &#123;</span><br><span class=\"line\">    @&#123;attr&#125;: (@px / @rem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.px2remTLWH(@top, @left, @width, @height, @rem: <span class=\"number\">108</span>rem) &#123;</span><br><span class=\"line\">    .px2rem(@top, top, @rem);</span><br><span class=\"line\">    .px2rem(@left, left, @rem);</span><br><span class=\"line\">    .px2rem(@width, width, @rem);</span><br><span class=\"line\">    .px2rem(@height, height, @rem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对前文的示例元素，css 样式可以这样来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.img_demo &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    background-size: cover;</span><br><span class=\"line\">    background-image: url(<span class=\"string\">'demo.png'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    .px2remTLWH(<span class=\"number\">321</span>, <span class=\"number\">70</span>, <span class=\"number\">460</span>, <span class=\"number\">210</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，宽和高可以直接通过设计稿输出的图片元素大小读取到；top/left 的取值，可以通过在 Photoshop 中移动参考线定位元素快速得到。</p>\n<h4 id=\"字体使用-px-为单位\"><a href=\"#字体使用-px-为单位\" class=\"headerlink\" title=\"字体使用 px 为单位\"></a>字体使用 px 为单位</h4><p>字体使用 rem 等比缩放会出现显示上的问题，只需要针对性使用媒体查询设置几种大小即可。</p>\n<p>示例参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字体响应式</span></span><br><span class=\"line\">@media screen and (max-width: <span class=\"number\">321</span>px) &#123;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">13</span>px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (min-width: <span class=\"number\">321</span>px) and (max-width: <span class=\"number\">400</span>px) &#123;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">14</span>px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (min-width: <span class=\"number\">400</span>px) &#123;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">16</span>px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25422063\" target=\"_blank\" rel=\"noopener\">H5移动多终端适配全解 - 从原理到方案</a><br><a href=\"https://www.w3.org/Style/Examples/007/units.en.html\" target=\"_blank\" rel=\"noopener\">CSS单位详解</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"技术管理之备份策略","p":"itm/backup","date":"2016-11-10T14:11:20.000Z","_content":"\n## 背景\n\n备份策略指确定需备份的内容、备份时间及备份方式。\n\n<!--more-->\n\n### 一、缺乏统一的备份策略\n#### 一是备份日程表。\nIT管理人员应该分析各个信息化方案(如数据库、文件服务器等等)的数据量、数据增量、备份窗口等因素，制定可行的备份日程表。在制定备份日程表的时候，需要注意两点。首先备份日程表必须以书面的形式确认下来，特别是企业信息化应用比较多的情况下。这方便后续的追踪。其次备份日程表可能需要根据实际的情况进行调整。如可能在某天对数据库中的数据进行来大规模的更新，此时就需要做一个临时的完全备份。相关的信息需要在日程表中反映出来，以利于后续的维护。最后是日程表中要反映一些特定的日期。如对于一般企业来说，会有十一、年假等长假。这些假期中由于长期没有人员，容易出现断电等问题。在这种情况下，最好能够在放假之前对数据进行一次完全备份，以备不时之需。这些因素都应该在备份日程表中反映出来，以免到时候漏掉。\n\n#### 二是规划系统备份的时间。\n由于备份时会耗用比较多的资源，如服务器的内存、CPU资源。进行远程备份时，还会占用带宽等等。为此对于数据备份的时候也要进行合理的规划。特别是有多个系统的数据都要进行远程备份时，最好在时间上能够错开，以提高备份的效率。如可以先估计一下某个应用备份的时间，然后可以在空闲时段内进行分段备份。建议最好能够将备份的时间设置在企业下班后。此时访问系统的人员会少的多，甚至一个用户也没有。此时进行数据备份，即使耗时比较长，也不会对用户造成很大的影响。\n\n\n\n### 二、缺乏有效的培训\n在灾难恢复方案的实施过程中，有些企业缺乏对项目管理人员的培训。笔者在跟企业一些的IT人员沟通的过程中，发现不少项目管理员人对于数据备份与恢复的措施一知半解。有的甚至不清楚在数据还原之前测试的重要性。由于缺乏有效的培训，会给后续的数据恢复带来很大的安全隐患。\n\n\n### 三、没有对备份的数据不定时的进行恢复测试\n备份的数据是否可用呢?很多系统管理员太过于相信自己的能力，认为备份文件不会出现问题。结果呢，等到真的需要用到备份文件时，才发现备份文件损坏了，无法使用。此时以前的一些工作就都会竹篮子打水一场空了。\n\n### 四、忽略了硬件设备的检查\n有些项目管理员会犯顾此失彼的毛病。如可能非常重视数据备份文件的安全性，但是却忽略了硬件设备的问题。虽然说通常情况下，只要系统正常运行，硬件一般不会出现问题。但是当某些意外情况发生时，就可能对硬件出现损害。此时就需要着重检查一下硬件是否出现故障。\n为了保障硬件设备工作正常，最好能够在数据备份设备上设置一些报警系统。如当备份设备如硬盘上出现坏扇区时能够自动报告给管理员，或者当存储空间快耗竭时自动报告。这些报警措施可以简化硬件设备的监督工作。\n总之对于数据灾难恢复策略来说，备份文件、软件、硬件一样重要，缺一不可。其中任何一项出现故障时，就可能导致在遇到意外情况时无法正常恢复数据。为此这四个环节在实际工作中，项目管理员必须一一的落实下去，切不可马虎了事。\n\n\n### 常见的备份策略类型\n常见的备份策略有完全备份、增量备份、差异备份三种类型。作以简单介绍：\n\n#### 1、完全备份(Full Backup)：\n　　每次对数据进行完整的备份。当发生数据丢失的灾难情况时，完全备份无需依赖其他信息，即可实现100%数据恢复，其恢复时间最短且操作最方便；\n\n#### 2、增量备份(Incremental Backup)：\n　　只有那些在上次完全备份或者增量备份后被修改了的文件才会被备份。优点是备份数据量小，需要的时间短，缺点是恢复的时候需要依赖之前的备份记录，出问题的风险较大；\n\n#### 3、差异备份(Differential Backup)：\n　　备份那些自从上次完全备份之后被修改过的文件。因此从差异备份中恢复数据的时间较短，因为只需要两份数据——最后一次完全备份和最后一次差异备份，缺点是每次备份需要的时间较长。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/itm/backup.md","raw":"---\ntitle: 技术管理之备份策略\np: itm/backup\ndate: 2016-11-10 22:11:20\ntags: [备份,策略]\ncategories: TechManage\n---\n\n## 背景\n\n备份策略指确定需备份的内容、备份时间及备份方式。\n\n<!--more-->\n\n### 一、缺乏统一的备份策略\n#### 一是备份日程表。\nIT管理人员应该分析各个信息化方案(如数据库、文件服务器等等)的数据量、数据增量、备份窗口等因素，制定可行的备份日程表。在制定备份日程表的时候，需要注意两点。首先备份日程表必须以书面的形式确认下来，特别是企业信息化应用比较多的情况下。这方便后续的追踪。其次备份日程表可能需要根据实际的情况进行调整。如可能在某天对数据库中的数据进行来大规模的更新，此时就需要做一个临时的完全备份。相关的信息需要在日程表中反映出来，以利于后续的维护。最后是日程表中要反映一些特定的日期。如对于一般企业来说，会有十一、年假等长假。这些假期中由于长期没有人员，容易出现断电等问题。在这种情况下，最好能够在放假之前对数据进行一次完全备份，以备不时之需。这些因素都应该在备份日程表中反映出来，以免到时候漏掉。\n\n#### 二是规划系统备份的时间。\n由于备份时会耗用比较多的资源，如服务器的内存、CPU资源。进行远程备份时，还会占用带宽等等。为此对于数据备份的时候也要进行合理的规划。特别是有多个系统的数据都要进行远程备份时，最好在时间上能够错开，以提高备份的效率。如可以先估计一下某个应用备份的时间，然后可以在空闲时段内进行分段备份。建议最好能够将备份的时间设置在企业下班后。此时访问系统的人员会少的多，甚至一个用户也没有。此时进行数据备份，即使耗时比较长，也不会对用户造成很大的影响。\n\n\n\n### 二、缺乏有效的培训\n在灾难恢复方案的实施过程中，有些企业缺乏对项目管理人员的培训。笔者在跟企业一些的IT人员沟通的过程中，发现不少项目管理员人对于数据备份与恢复的措施一知半解。有的甚至不清楚在数据还原之前测试的重要性。由于缺乏有效的培训，会给后续的数据恢复带来很大的安全隐患。\n\n\n### 三、没有对备份的数据不定时的进行恢复测试\n备份的数据是否可用呢?很多系统管理员太过于相信自己的能力，认为备份文件不会出现问题。结果呢，等到真的需要用到备份文件时，才发现备份文件损坏了，无法使用。此时以前的一些工作就都会竹篮子打水一场空了。\n\n### 四、忽略了硬件设备的检查\n有些项目管理员会犯顾此失彼的毛病。如可能非常重视数据备份文件的安全性，但是却忽略了硬件设备的问题。虽然说通常情况下，只要系统正常运行，硬件一般不会出现问题。但是当某些意外情况发生时，就可能对硬件出现损害。此时就需要着重检查一下硬件是否出现故障。\n为了保障硬件设备工作正常，最好能够在数据备份设备上设置一些报警系统。如当备份设备如硬盘上出现坏扇区时能够自动报告给管理员，或者当存储空间快耗竭时自动报告。这些报警措施可以简化硬件设备的监督工作。\n总之对于数据灾难恢复策略来说，备份文件、软件、硬件一样重要，缺一不可。其中任何一项出现故障时，就可能导致在遇到意外情况时无法正常恢复数据。为此这四个环节在实际工作中，项目管理员必须一一的落实下去，切不可马虎了事。\n\n\n### 常见的备份策略类型\n常见的备份策略有完全备份、增量备份、差异备份三种类型。作以简单介绍：\n\n#### 1、完全备份(Full Backup)：\n　　每次对数据进行完整的备份。当发生数据丢失的灾难情况时，完全备份无需依赖其他信息，即可实现100%数据恢复，其恢复时间最短且操作最方便；\n\n#### 2、增量备份(Incremental Backup)：\n　　只有那些在上次完全备份或者增量备份后被修改了的文件才会被备份。优点是备份数据量小，需要的时间短，缺点是恢复的时候需要依赖之前的备份记录，出问题的风险较大；\n\n#### 3、差异备份(Differential Backup)：\n　　备份那些自从上次完全备份之后被修改过的文件。因此从差异备份中恢复数据的时间较短，因为只需要两份数据——最后一次完全备份和最后一次差异备份，缺点是每次备份需要的时间较长。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"itm/backup","published":1,"updated":"2018-01-10T14:17:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2a000jfme33d27opu1","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>备份策略指确定需备份的内容、备份时间及备份方式。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、缺乏统一的备份策略\"><a href=\"#一、缺乏统一的备份策略\" class=\"headerlink\" title=\"一、缺乏统一的备份策略\"></a>一、缺乏统一的备份策略</h3><h4 id=\"一是备份日程表。\"><a href=\"#一是备份日程表。\" class=\"headerlink\" title=\"一是备份日程表。\"></a>一是备份日程表。</h4><p>IT管理人员应该分析各个信息化方案(如数据库、文件服务器等等)的数据量、数据增量、备份窗口等因素，制定可行的备份日程表。在制定备份日程表的时候，需要注意两点。首先备份日程表必须以书面的形式确认下来，特别是企业信息化应用比较多的情况下。这方便后续的追踪。其次备份日程表可能需要根据实际的情况进行调整。如可能在某天对数据库中的数据进行来大规模的更新，此时就需要做一个临时的完全备份。相关的信息需要在日程表中反映出来，以利于后续的维护。最后是日程表中要反映一些特定的日期。如对于一般企业来说，会有十一、年假等长假。这些假期中由于长期没有人员，容易出现断电等问题。在这种情况下，最好能够在放假之前对数据进行一次完全备份，以备不时之需。这些因素都应该在备份日程表中反映出来，以免到时候漏掉。</p>\n<h4 id=\"二是规划系统备份的时间。\"><a href=\"#二是规划系统备份的时间。\" class=\"headerlink\" title=\"二是规划系统备份的时间。\"></a>二是规划系统备份的时间。</h4><p>由于备份时会耗用比较多的资源，如服务器的内存、CPU资源。进行远程备份时，还会占用带宽等等。为此对于数据备份的时候也要进行合理的规划。特别是有多个系统的数据都要进行远程备份时，最好在时间上能够错开，以提高备份的效率。如可以先估计一下某个应用备份的时间，然后可以在空闲时段内进行分段备份。建议最好能够将备份的时间设置在企业下班后。此时访问系统的人员会少的多，甚至一个用户也没有。此时进行数据备份，即使耗时比较长，也不会对用户造成很大的影响。</p>\n<h3 id=\"二、缺乏有效的培训\"><a href=\"#二、缺乏有效的培训\" class=\"headerlink\" title=\"二、缺乏有效的培训\"></a>二、缺乏有效的培训</h3><p>在灾难恢复方案的实施过程中，有些企业缺乏对项目管理人员的培训。笔者在跟企业一些的IT人员沟通的过程中，发现不少项目管理员人对于数据备份与恢复的措施一知半解。有的甚至不清楚在数据还原之前测试的重要性。由于缺乏有效的培训，会给后续的数据恢复带来很大的安全隐患。</p>\n<h3 id=\"三、没有对备份的数据不定时的进行恢复测试\"><a href=\"#三、没有对备份的数据不定时的进行恢复测试\" class=\"headerlink\" title=\"三、没有对备份的数据不定时的进行恢复测试\"></a>三、没有对备份的数据不定时的进行恢复测试</h3><p>备份的数据是否可用呢?很多系统管理员太过于相信自己的能力，认为备份文件不会出现问题。结果呢，等到真的需要用到备份文件时，才发现备份文件损坏了，无法使用。此时以前的一些工作就都会竹篮子打水一场空了。</p>\n<h3 id=\"四、忽略了硬件设备的检查\"><a href=\"#四、忽略了硬件设备的检查\" class=\"headerlink\" title=\"四、忽略了硬件设备的检查\"></a>四、忽略了硬件设备的检查</h3><p>有些项目管理员会犯顾此失彼的毛病。如可能非常重视数据备份文件的安全性，但是却忽略了硬件设备的问题。虽然说通常情况下，只要系统正常运行，硬件一般不会出现问题。但是当某些意外情况发生时，就可能对硬件出现损害。此时就需要着重检查一下硬件是否出现故障。<br>为了保障硬件设备工作正常，最好能够在数据备份设备上设置一些报警系统。如当备份设备如硬盘上出现坏扇区时能够自动报告给管理员，或者当存储空间快耗竭时自动报告。这些报警措施可以简化硬件设备的监督工作。<br>总之对于数据灾难恢复策略来说，备份文件、软件、硬件一样重要，缺一不可。其中任何一项出现故障时，就可能导致在遇到意外情况时无法正常恢复数据。为此这四个环节在实际工作中，项目管理员必须一一的落实下去，切不可马虎了事。</p>\n<h3 id=\"常见的备份策略类型\"><a href=\"#常见的备份策略类型\" class=\"headerlink\" title=\"常见的备份策略类型\"></a>常见的备份策略类型</h3><p>常见的备份策略有完全备份、增量备份、差异备份三种类型。作以简单介绍：</p>\n<h4 id=\"1、完全备份-Full-Backup-：\"><a href=\"#1、完全备份-Full-Backup-：\" class=\"headerlink\" title=\"1、完全备份(Full Backup)：\"></a>1、完全备份(Full Backup)：</h4><p>　　每次对数据进行完整的备份。当发生数据丢失的灾难情况时，完全备份无需依赖其他信息，即可实现100%数据恢复，其恢复时间最短且操作最方便；</p>\n<h4 id=\"2、增量备份-Incremental-Backup-：\"><a href=\"#2、增量备份-Incremental-Backup-：\" class=\"headerlink\" title=\"2、增量备份(Incremental Backup)：\"></a>2、增量备份(Incremental Backup)：</h4><p>　　只有那些在上次完全备份或者增量备份后被修改了的文件才会被备份。优点是备份数据量小，需要的时间短，缺点是恢复的时候需要依赖之前的备份记录，出问题的风险较大；</p>\n<h4 id=\"3、差异备份-Differential-Backup-：\"><a href=\"#3、差异备份-Differential-Backup-：\" class=\"headerlink\" title=\"3、差异备份(Differential Backup)：\"></a>3、差异备份(Differential Backup)：</h4><p>　　备份那些自从上次完全备份之后被修改过的文件。因此从差异备份中恢复数据的时间较短，因为只需要两份数据——最后一次完全备份和最后一次差异备份，缺点是每次备份需要的时间较长。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>备份策略指确定需备份的内容、备份时间及备份方式。</p>","more":"<h3 id=\"一、缺乏统一的备份策略\"><a href=\"#一、缺乏统一的备份策略\" class=\"headerlink\" title=\"一、缺乏统一的备份策略\"></a>一、缺乏统一的备份策略</h3><h4 id=\"一是备份日程表。\"><a href=\"#一是备份日程表。\" class=\"headerlink\" title=\"一是备份日程表。\"></a>一是备份日程表。</h4><p>IT管理人员应该分析各个信息化方案(如数据库、文件服务器等等)的数据量、数据增量、备份窗口等因素，制定可行的备份日程表。在制定备份日程表的时候，需要注意两点。首先备份日程表必须以书面的形式确认下来，特别是企业信息化应用比较多的情况下。这方便后续的追踪。其次备份日程表可能需要根据实际的情况进行调整。如可能在某天对数据库中的数据进行来大规模的更新，此时就需要做一个临时的完全备份。相关的信息需要在日程表中反映出来，以利于后续的维护。最后是日程表中要反映一些特定的日期。如对于一般企业来说，会有十一、年假等长假。这些假期中由于长期没有人员，容易出现断电等问题。在这种情况下，最好能够在放假之前对数据进行一次完全备份，以备不时之需。这些因素都应该在备份日程表中反映出来，以免到时候漏掉。</p>\n<h4 id=\"二是规划系统备份的时间。\"><a href=\"#二是规划系统备份的时间。\" class=\"headerlink\" title=\"二是规划系统备份的时间。\"></a>二是规划系统备份的时间。</h4><p>由于备份时会耗用比较多的资源，如服务器的内存、CPU资源。进行远程备份时，还会占用带宽等等。为此对于数据备份的时候也要进行合理的规划。特别是有多个系统的数据都要进行远程备份时，最好在时间上能够错开，以提高备份的效率。如可以先估计一下某个应用备份的时间，然后可以在空闲时段内进行分段备份。建议最好能够将备份的时间设置在企业下班后。此时访问系统的人员会少的多，甚至一个用户也没有。此时进行数据备份，即使耗时比较长，也不会对用户造成很大的影响。</p>\n<h3 id=\"二、缺乏有效的培训\"><a href=\"#二、缺乏有效的培训\" class=\"headerlink\" title=\"二、缺乏有效的培训\"></a>二、缺乏有效的培训</h3><p>在灾难恢复方案的实施过程中，有些企业缺乏对项目管理人员的培训。笔者在跟企业一些的IT人员沟通的过程中，发现不少项目管理员人对于数据备份与恢复的措施一知半解。有的甚至不清楚在数据还原之前测试的重要性。由于缺乏有效的培训，会给后续的数据恢复带来很大的安全隐患。</p>\n<h3 id=\"三、没有对备份的数据不定时的进行恢复测试\"><a href=\"#三、没有对备份的数据不定时的进行恢复测试\" class=\"headerlink\" title=\"三、没有对备份的数据不定时的进行恢复测试\"></a>三、没有对备份的数据不定时的进行恢复测试</h3><p>备份的数据是否可用呢?很多系统管理员太过于相信自己的能力，认为备份文件不会出现问题。结果呢，等到真的需要用到备份文件时，才发现备份文件损坏了，无法使用。此时以前的一些工作就都会竹篮子打水一场空了。</p>\n<h3 id=\"四、忽略了硬件设备的检查\"><a href=\"#四、忽略了硬件设备的检查\" class=\"headerlink\" title=\"四、忽略了硬件设备的检查\"></a>四、忽略了硬件设备的检查</h3><p>有些项目管理员会犯顾此失彼的毛病。如可能非常重视数据备份文件的安全性，但是却忽略了硬件设备的问题。虽然说通常情况下，只要系统正常运行，硬件一般不会出现问题。但是当某些意外情况发生时，就可能对硬件出现损害。此时就需要着重检查一下硬件是否出现故障。<br>为了保障硬件设备工作正常，最好能够在数据备份设备上设置一些报警系统。如当备份设备如硬盘上出现坏扇区时能够自动报告给管理员，或者当存储空间快耗竭时自动报告。这些报警措施可以简化硬件设备的监督工作。<br>总之对于数据灾难恢复策略来说，备份文件、软件、硬件一样重要，缺一不可。其中任何一项出现故障时，就可能导致在遇到意外情况时无法正常恢复数据。为此这四个环节在实际工作中，项目管理员必须一一的落实下去，切不可马虎了事。</p>\n<h3 id=\"常见的备份策略类型\"><a href=\"#常见的备份策略类型\" class=\"headerlink\" title=\"常见的备份策略类型\"></a>常见的备份策略类型</h3><p>常见的备份策略有完全备份、增量备份、差异备份三种类型。作以简单介绍：</p>\n<h4 id=\"1、完全备份-Full-Backup-：\"><a href=\"#1、完全备份-Full-Backup-：\" class=\"headerlink\" title=\"1、完全备份(Full Backup)：\"></a>1、完全备份(Full Backup)：</h4><p>　　每次对数据进行完整的备份。当发生数据丢失的灾难情况时，完全备份无需依赖其他信息，即可实现100%数据恢复，其恢复时间最短且操作最方便；</p>\n<h4 id=\"2、增量备份-Incremental-Backup-：\"><a href=\"#2、增量备份-Incremental-Backup-：\" class=\"headerlink\" title=\"2、增量备份(Incremental Backup)：\"></a>2、增量备份(Incremental Backup)：</h4><p>　　只有那些在上次完全备份或者增量备份后被修改了的文件才会被备份。优点是备份数据量小，需要的时间短，缺点是恢复的时候需要依赖之前的备份记录，出问题的风险较大；</p>\n<h4 id=\"3、差异备份-Differential-Backup-：\"><a href=\"#3、差异备份-Differential-Backup-：\" class=\"headerlink\" title=\"3、差异备份(Differential Backup)：\"></a>3、差异备份(Differential Backup)：</h4><p>　　备份那些自从上次完全备份之后被修改过的文件。因此从差异备份中恢复数据的时间较短，因为只需要两份数据——最后一次完全备份和最后一次差异备份，缺点是每次备份需要的时间较长。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"软考笔记之系统集成项目管理工程师-Lesson1","p":"itpmp/lesson1","date":"2018-01-04T09:35:09.000Z","description":"系统集成项目管理工程师","_content":"## 目的\n本章节目的是自学考取 系统集成项目管理工程师 - System integrated project management engineer 为目的，读书笔记\n\n## 背景\n\n很多朋友需要两个月时间拿下软考中“系统集成项目管理工程师”的考试，笔者通过两个月每天五小时的复习，顺利通过了考试，相信你也可以。这两个月需要对自己狠一点，丝毫不要放松。\n\n<!--more-->\n\n以下内容转载自2016年\n\n## 一、弄清重点\n\n计算题\n------\n计算题是下午的必考试题，分值约在15-20分，保证计算题不丢分，下午过关不会有问题。计算题主要集中在进度和成本2个方面，详细的介绍请看本公众号文章“一起复习系统集成项目管理工程师考试——计算题1”，另发送“中项”可获取笔者准备的相关复习资料。\n\n必考题\n------\n必考知识点主要包括：软件集成的特点、监理的职责、资质管理、楼宇布线工程、软件开发技术、计算机及网络基础知识、机房工程知识、计算机术语的英文等。\n\n重要知识点\n------\n变更管理的基本过程、典型的信息系统项目的生命周期模型（瀑布、V、原型化、螺旋、迭代）、项目进度管理关键路径（前导图法PDM、箭线图法ADM、活动时间期望值=(乐观+4个正常+悲观/6)）、项目成本管理（CV,SV,CPI,SPI,EAC,ETC,成本超支时采取什么措施？进度落后时采取什么措施？）\n\n## 二、心法\n时间紧，所以大部头的教程无法逐页细看了。我在做题时，遇到无法理解的地方，就去教程相应章节找找答案，看看定义和公式，仅此而已。更详细的心法请看本公众号文章“通过系统集成项目管理工程师考试——我是这样做到的 ”，以下为建议的复习计划，供大家参考：\n\n建立解题思路\n--------------\n有清晰解题思路的朋友可以跳过此小点。如果对解题思路没有把握的，建议看看“真题解析”相关教程，主要是学习正规的解题思路。我当时看了2套真题解析就建立了解题思路，并对考点有了基本的了解，做到了“分清主次”“见题不慌”。此阶段估计会耗时半个月时间。\n\n练习历年真题\n--------------\n\n找出2009年以来的10套真题，扎扎实实做一遍，重点部分一定要理解，不懂就主动翻看教程。对于易错的题目，作好标记，用于第二遍复习，一看就会做的题目下次不必再看。对于自己不熟悉易忘的知识点，可以总结成文档，打印出来，没事就拿出来看。此阶段估计耗时一个月，最难熬，笔者有时会做题到凌晨2点。\n\n查漏补缺\n---------\n通过前2个阶段的扎实准备，此时相信你对这个考试的框架比较熟悉，更重要的是你对自己的弱项在哪里做到了然于胸了。剩下的半个月着重看自己做错的题目，看自己记录的重要知识点，将经典计算题再做一遍，看看那些公式。笔者当时连公交车、WC时间、吃饭时间都用来看打印的小抄。\n\n轻装上阵\n----------\n靠前一两天就放松一下，认认考场路线，准备考试用具，备好身份证、准考证。考前一晚早些休息，次日轻装上阵迎接考试。考试过程中把握“先易后难”，遇难莫慌，慌了就深呼吸，英语差的朋友对于最后五道英语题可以采取“4A1B”这样的答案……\n\n## 三、分数分布\n1. 专业英语5分\n2. 项目管理知识37分\n3. 法律法规及相关标准11分\n4. 信息系统工程监理5分\n5. 软件工程知识5分\n6. 计算机技术知识与网络知识7分\n7. 信息系统建设5分\n\n## 四、关于中项考试\n考试时间软考考试分为上半年和下半年,每年5月份和11月份。科目单次时间为2小时。\n考试题型考试分为上午和下午,上午75道选择题,下午5个问答题,各75分,同时通过45分者为合格。\n考试时,考前一周打印准考证,注意,该准考证只能在规定的时间内打印,防止当天丢掉,最好将准考证电子档存在邮箱里,以防丢失时,及时打印。特别注意,考试通过后,去领取证书的时候,需携带准考证、身份证领取方可领取。","source":"_posts/itpmp/lesson1.md","raw":"---\ntitle: 软考笔记之系统集成项目管理工程师-Lesson1\np: itpmp/lesson1\ndate: 2018-01-04 17:35:09\ntags: [ITPMP]\ncategories: ITPMP\ndescription: 系统集成项目管理工程师\n---\n## 目的\n本章节目的是自学考取 系统集成项目管理工程师 - System integrated project management engineer 为目的，读书笔记\n\n## 背景\n\n很多朋友需要两个月时间拿下软考中“系统集成项目管理工程师”的考试，笔者通过两个月每天五小时的复习，顺利通过了考试，相信你也可以。这两个月需要对自己狠一点，丝毫不要放松。\n\n<!--more-->\n\n以下内容转载自2016年\n\n## 一、弄清重点\n\n计算题\n------\n计算题是下午的必考试题，分值约在15-20分，保证计算题不丢分，下午过关不会有问题。计算题主要集中在进度和成本2个方面，详细的介绍请看本公众号文章“一起复习系统集成项目管理工程师考试——计算题1”，另发送“中项”可获取笔者准备的相关复习资料。\n\n必考题\n------\n必考知识点主要包括：软件集成的特点、监理的职责、资质管理、楼宇布线工程、软件开发技术、计算机及网络基础知识、机房工程知识、计算机术语的英文等。\n\n重要知识点\n------\n变更管理的基本过程、典型的信息系统项目的生命周期模型（瀑布、V、原型化、螺旋、迭代）、项目进度管理关键路径（前导图法PDM、箭线图法ADM、活动时间期望值=(乐观+4个正常+悲观/6)）、项目成本管理（CV,SV,CPI,SPI,EAC,ETC,成本超支时采取什么措施？进度落后时采取什么措施？）\n\n## 二、心法\n时间紧，所以大部头的教程无法逐页细看了。我在做题时，遇到无法理解的地方，就去教程相应章节找找答案，看看定义和公式，仅此而已。更详细的心法请看本公众号文章“通过系统集成项目管理工程师考试——我是这样做到的 ”，以下为建议的复习计划，供大家参考：\n\n建立解题思路\n--------------\n有清晰解题思路的朋友可以跳过此小点。如果对解题思路没有把握的，建议看看“真题解析”相关教程，主要是学习正规的解题思路。我当时看了2套真题解析就建立了解题思路，并对考点有了基本的了解，做到了“分清主次”“见题不慌”。此阶段估计会耗时半个月时间。\n\n练习历年真题\n--------------\n\n找出2009年以来的10套真题，扎扎实实做一遍，重点部分一定要理解，不懂就主动翻看教程。对于易错的题目，作好标记，用于第二遍复习，一看就会做的题目下次不必再看。对于自己不熟悉易忘的知识点，可以总结成文档，打印出来，没事就拿出来看。此阶段估计耗时一个月，最难熬，笔者有时会做题到凌晨2点。\n\n查漏补缺\n---------\n通过前2个阶段的扎实准备，此时相信你对这个考试的框架比较熟悉，更重要的是你对自己的弱项在哪里做到了然于胸了。剩下的半个月着重看自己做错的题目，看自己记录的重要知识点，将经典计算题再做一遍，看看那些公式。笔者当时连公交车、WC时间、吃饭时间都用来看打印的小抄。\n\n轻装上阵\n----------\n靠前一两天就放松一下，认认考场路线，准备考试用具，备好身份证、准考证。考前一晚早些休息，次日轻装上阵迎接考试。考试过程中把握“先易后难”，遇难莫慌，慌了就深呼吸，英语差的朋友对于最后五道英语题可以采取“4A1B”这样的答案……\n\n## 三、分数分布\n1. 专业英语5分\n2. 项目管理知识37分\n3. 法律法规及相关标准11分\n4. 信息系统工程监理5分\n5. 软件工程知识5分\n6. 计算机技术知识与网络知识7分\n7. 信息系统建设5分\n\n## 四、关于中项考试\n考试时间软考考试分为上半年和下半年,每年5月份和11月份。科目单次时间为2小时。\n考试题型考试分为上午和下午,上午75道选择题,下午5个问答题,各75分,同时通过45分者为合格。\n考试时,考前一周打印准考证,注意,该准考证只能在规定的时间内打印,防止当天丢掉,最好将准考证电子档存在邮箱里,以防丢失时,及时打印。特别注意,考试通过后,去领取证书的时候,需携带准考证、身份证领取方可领取。","slug":"itpmp/lesson1","published":1,"updated":"2018-01-05T03:55:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2d000nfme3em6kqj9t","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本章节目的是自学考取 系统集成项目管理工程师 - System integrated project management engineer 为目的，读书笔记</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>很多朋友需要两个月时间拿下软考中“系统集成项目管理工程师”的考试，笔者通过两个月每天五小时的复习，顺利通过了考试，相信你也可以。这两个月需要对自己狠一点，丝毫不要放松。</p>\n<a id=\"more\"></a>\n<p>以下内容转载自2016年</p>\n<h2 id=\"一、弄清重点\"><a href=\"#一、弄清重点\" class=\"headerlink\" title=\"一、弄清重点\"></a>一、弄清重点</h2><h2 id=\"计算题\"><a href=\"#计算题\" class=\"headerlink\" title=\"计算题\"></a>计算题</h2><p>计算题是下午的必考试题，分值约在15-20分，保证计算题不丢分，下午过关不会有问题。计算题主要集中在进度和成本2个方面，详细的介绍请看本公众号文章“一起复习系统集成项目管理工程师考试——计算题1”，另发送“中项”可获取笔者准备的相关复习资料。</p>\n<h2 id=\"必考题\"><a href=\"#必考题\" class=\"headerlink\" title=\"必考题\"></a>必考题</h2><p>必考知识点主要包括：软件集成的特点、监理的职责、资质管理、楼宇布线工程、软件开发技术、计算机及网络基础知识、机房工程知识、计算机术语的英文等。</p>\n<h2 id=\"重要知识点\"><a href=\"#重要知识点\" class=\"headerlink\" title=\"重要知识点\"></a>重要知识点</h2><p>变更管理的基本过程、典型的信息系统项目的生命周期模型（瀑布、V、原型化、螺旋、迭代）、项目进度管理关键路径（前导图法PDM、箭线图法ADM、活动时间期望值=(乐观+4个正常+悲观/6)）、项目成本管理（CV,SV,CPI,SPI,EAC,ETC,成本超支时采取什么措施？进度落后时采取什么措施？）</p>\n<h2 id=\"二、心法\"><a href=\"#二、心法\" class=\"headerlink\" title=\"二、心法\"></a>二、心法</h2><p>时间紧，所以大部头的教程无法逐页细看了。我在做题时，遇到无法理解的地方，就去教程相应章节找找答案，看看定义和公式，仅此而已。更详细的心法请看本公众号文章“通过系统集成项目管理工程师考试——我是这样做到的 ”，以下为建议的复习计划，供大家参考：</p>\n<h2 id=\"建立解题思路\"><a href=\"#建立解题思路\" class=\"headerlink\" title=\"建立解题思路\"></a>建立解题思路</h2><p>有清晰解题思路的朋友可以跳过此小点。如果对解题思路没有把握的，建议看看“真题解析”相关教程，主要是学习正规的解题思路。我当时看了2套真题解析就建立了解题思路，并对考点有了基本的了解，做到了“分清主次”“见题不慌”。此阶段估计会耗时半个月时间。</p>\n<h2 id=\"练习历年真题\"><a href=\"#练习历年真题\" class=\"headerlink\" title=\"练习历年真题\"></a>练习历年真题</h2><p>找出2009年以来的10套真题，扎扎实实做一遍，重点部分一定要理解，不懂就主动翻看教程。对于易错的题目，作好标记，用于第二遍复习，一看就会做的题目下次不必再看。对于自己不熟悉易忘的知识点，可以总结成文档，打印出来，没事就拿出来看。此阶段估计耗时一个月，最难熬，笔者有时会做题到凌晨2点。</p>\n<h2 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h2><p>通过前2个阶段的扎实准备，此时相信你对这个考试的框架比较熟悉，更重要的是你对自己的弱项在哪里做到了然于胸了。剩下的半个月着重看自己做错的题目，看自己记录的重要知识点，将经典计算题再做一遍，看看那些公式。笔者当时连公交车、WC时间、吃饭时间都用来看打印的小抄。</p>\n<h2 id=\"轻装上阵\"><a href=\"#轻装上阵\" class=\"headerlink\" title=\"轻装上阵\"></a>轻装上阵</h2><p>靠前一两天就放松一下，认认考场路线，准备考试用具，备好身份证、准考证。考前一晚早些休息，次日轻装上阵迎接考试。考试过程中把握“先易后难”，遇难莫慌，慌了就深呼吸，英语差的朋友对于最后五道英语题可以采取“4A1B”这样的答案……</p>\n<h2 id=\"三、分数分布\"><a href=\"#三、分数分布\" class=\"headerlink\" title=\"三、分数分布\"></a>三、分数分布</h2><ol>\n<li>专业英语5分</li>\n<li>项目管理知识37分</li>\n<li>法律法规及相关标准11分</li>\n<li>信息系统工程监理5分</li>\n<li>软件工程知识5分</li>\n<li>计算机技术知识与网络知识7分</li>\n<li>信息系统建设5分</li>\n</ol>\n<h2 id=\"四、关于中项考试\"><a href=\"#四、关于中项考试\" class=\"headerlink\" title=\"四、关于中项考试\"></a>四、关于中项考试</h2><p>考试时间软考考试分为上半年和下半年,每年5月份和11月份。科目单次时间为2小时。<br>考试题型考试分为上午和下午,上午75道选择题,下午5个问答题,各75分,同时通过45分者为合格。<br>考试时,考前一周打印准考证,注意,该准考证只能在规定的时间内打印,防止当天丢掉,最好将准考证电子档存在邮箱里,以防丢失时,及时打印。特别注意,考试通过后,去领取证书的时候,需携带准考证、身份证领取方可领取。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本章节目的是自学考取 系统集成项目管理工程师 - System integrated project management engineer 为目的，读书笔记</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>很多朋友需要两个月时间拿下软考中“系统集成项目管理工程师”的考试，笔者通过两个月每天五小时的复习，顺利通过了考试，相信你也可以。这两个月需要对自己狠一点，丝毫不要放松。</p>","more":"<p>以下内容转载自2016年</p>\n<h2 id=\"一、弄清重点\"><a href=\"#一、弄清重点\" class=\"headerlink\" title=\"一、弄清重点\"></a>一、弄清重点</h2><h2 id=\"计算题\"><a href=\"#计算题\" class=\"headerlink\" title=\"计算题\"></a>计算题</h2><p>计算题是下午的必考试题，分值约在15-20分，保证计算题不丢分，下午过关不会有问题。计算题主要集中在进度和成本2个方面，详细的介绍请看本公众号文章“一起复习系统集成项目管理工程师考试——计算题1”，另发送“中项”可获取笔者准备的相关复习资料。</p>\n<h2 id=\"必考题\"><a href=\"#必考题\" class=\"headerlink\" title=\"必考题\"></a>必考题</h2><p>必考知识点主要包括：软件集成的特点、监理的职责、资质管理、楼宇布线工程、软件开发技术、计算机及网络基础知识、机房工程知识、计算机术语的英文等。</p>\n<h2 id=\"重要知识点\"><a href=\"#重要知识点\" class=\"headerlink\" title=\"重要知识点\"></a>重要知识点</h2><p>变更管理的基本过程、典型的信息系统项目的生命周期模型（瀑布、V、原型化、螺旋、迭代）、项目进度管理关键路径（前导图法PDM、箭线图法ADM、活动时间期望值=(乐观+4个正常+悲观/6)）、项目成本管理（CV,SV,CPI,SPI,EAC,ETC,成本超支时采取什么措施？进度落后时采取什么措施？）</p>\n<h2 id=\"二、心法\"><a href=\"#二、心法\" class=\"headerlink\" title=\"二、心法\"></a>二、心法</h2><p>时间紧，所以大部头的教程无法逐页细看了。我在做题时，遇到无法理解的地方，就去教程相应章节找找答案，看看定义和公式，仅此而已。更详细的心法请看本公众号文章“通过系统集成项目管理工程师考试——我是这样做到的 ”，以下为建议的复习计划，供大家参考：</p>\n<h2 id=\"建立解题思路\"><a href=\"#建立解题思路\" class=\"headerlink\" title=\"建立解题思路\"></a>建立解题思路</h2><p>有清晰解题思路的朋友可以跳过此小点。如果对解题思路没有把握的，建议看看“真题解析”相关教程，主要是学习正规的解题思路。我当时看了2套真题解析就建立了解题思路，并对考点有了基本的了解，做到了“分清主次”“见题不慌”。此阶段估计会耗时半个月时间。</p>\n<h2 id=\"练习历年真题\"><a href=\"#练习历年真题\" class=\"headerlink\" title=\"练习历年真题\"></a>练习历年真题</h2><p>找出2009年以来的10套真题，扎扎实实做一遍，重点部分一定要理解，不懂就主动翻看教程。对于易错的题目，作好标记，用于第二遍复习，一看就会做的题目下次不必再看。对于自己不熟悉易忘的知识点，可以总结成文档，打印出来，没事就拿出来看。此阶段估计耗时一个月，最难熬，笔者有时会做题到凌晨2点。</p>\n<h2 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h2><p>通过前2个阶段的扎实准备，此时相信你对这个考试的框架比较熟悉，更重要的是你对自己的弱项在哪里做到了然于胸了。剩下的半个月着重看自己做错的题目，看自己记录的重要知识点，将经典计算题再做一遍，看看那些公式。笔者当时连公交车、WC时间、吃饭时间都用来看打印的小抄。</p>\n<h2 id=\"轻装上阵\"><a href=\"#轻装上阵\" class=\"headerlink\" title=\"轻装上阵\"></a>轻装上阵</h2><p>靠前一两天就放松一下，认认考场路线，准备考试用具，备好身份证、准考证。考前一晚早些休息，次日轻装上阵迎接考试。考试过程中把握“先易后难”，遇难莫慌，慌了就深呼吸，英语差的朋友对于最后五道英语题可以采取“4A1B”这样的答案……</p>\n<h2 id=\"三、分数分布\"><a href=\"#三、分数分布\" class=\"headerlink\" title=\"三、分数分布\"></a>三、分数分布</h2><ol>\n<li>专业英语5分</li>\n<li>项目管理知识37分</li>\n<li>法律法规及相关标准11分</li>\n<li>信息系统工程监理5分</li>\n<li>软件工程知识5分</li>\n<li>计算机技术知识与网络知识7分</li>\n<li>信息系统建设5分</li>\n</ol>\n<h2 id=\"四、关于中项考试\"><a href=\"#四、关于中项考试\" class=\"headerlink\" title=\"四、关于中项考试\"></a>四、关于中项考试</h2><p>考试时间软考考试分为上半年和下半年,每年5月份和11月份。科目单次时间为2小时。<br>考试题型考试分为上午和下午,上午75道选择题,下午5个问答题,各75分,同时通过45分者为合格。<br>考试时,考前一周打印准考证,注意,该准考证只能在规定的时间内打印,防止当天丢掉,最好将准考证电子档存在邮箱里,以防丢失时,及时打印。特别注意,考试通过后,去领取证书的时候,需携带准考证、身份证领取方可领取。</p>"},{"title":"Code Snippet 经典代码段收藏之一","p":"javascript/POC-ONE","date":"2016-01-05T01:06:30.000Z","_content":"\n## 背景\n\n常用代码片段，DOM操作类、字符串操作类、常用正则表达式等\n\n<!--more-->\n\n## 代码片段 \n\n### DOM操作类\n\n1. 原生JavaScript元素显示的通用方法\n``` JS\n\nfunction $(id) {\n    return !id ? null : document.getElementById(id);\n}\n\nfunction display(id) {\n    var obj = $(id);\n    if (obj.style.visibility) {\n        obj.style.visibility = obj.style.visibility == 'visible' ? 'hidden' : 'visible';\n    } else {\n        obj.style.display = obj.style.display == '' ? 'none' : '';\n    }\n}\n\n```\n\n2. 原生JavaScript实现checkbox全选与全不选\n``` JS\nfunction checkAll() {\n    var selectall = document.getElementById(\"selectall\");\n    var allbox = document.getElementsByName(\"allbox\");\n    if (selectall.checked) {\n        for (var i = 0; i < allbox.length; i++) {\n            allbox[i].checked = true;\n        }\n    }\n    else {\n        for (var i = 0; i < allbox.length; i++) {\n            allbox[i].checked = false;\n        }\n    }\n}\n```\n\n3. 原生JavaScript跨浏览器添加事件\n``` JS\nfunction addEvt(oTarget, sEvtType, fnHandle) {\n    if (!oTarget) {\n        return;\n    }\n    if (oTarget.addEventListener) {\n        oTarget.addEventListener(sEvtType, fnHandle, false);\n    } else if (oTarget.attachEvent) {\n        oTarget.attachEvent(\"on\" + sEvtType, fnHandle);\n    } else {\n        oTarget[\"on\" + sEvtType] = fnHandle;\n    }\n}\n```\n\n4. 原生JavaScript实现全选通用方法\n``` JS\n//原生JavaScript实现全选通用方法\nfunction checkall(form, prefix, checkall) {\n    var checkall = checkall ? checkall : 'chkall';\n    for (var i = 0; i < form.elements.length; i++) {\n        var e = form.elements[i];\n        if (e.type == \"checkbox\") {\n            e.checked = form.elements[checkall].checked;\n        }\n    }\n}\n```\n\n5. 原生JavaScript实现全部取消选择通用方法\n``` JS\n//原生JavaScript实现全部取消选择通用方法\nfunction uncheckAll(form) {\n    for (var i = 0; i < form.elements.length; i++) {\n        var e = form.elements[i];\n        if (e.name != 'chkall')\n            e.checked = !e.checked;\n    }\n}\n```\n\n6. 原生JavaScript获取单选按钮的值\n``` JS\n//原生JavaScript获取单选按钮的值\nfunction get_radio_value(field) {\n    if (field && field.length) {\n        for (var i = 0; i < field.length; i++) {\n            if (field[i].checked) {\n                return field[i].value;\n            }\n        }\n    } else {\n        return;\n    }\n}\n\n```\n\n7. 原生JavaScript获取复选框的值\n``` JS\n//原生JavaScript获取复选框的值\nfunction get_checkbox_value(field) {\n    if (field && field.length) {\n        for (var i = 0; i < field.length; i++) {\n            if (field[i].checked && !field[i].disabled) {\n                return field[i].value;\n            }\n        }\n    } else {\n        return;\n    }\n}\n```\n\n8. 原生JavaScript实现返回顶部的通用方法\n``` JS\n//原生JavaScript实现返回顶部的通用方法\nfunction backTop(btnId) {\n    var btn = document.getElementById(btnId);\n    var d = document.documentElement;\n    var b = document.body;\n    window.onscroll = set;\n    btn.style.display = \"none\";\n    btn.onclick = function () {\n        btn.style.display = \"none\";\n        window.onscroll = null;\n        this.timer = setInterval(function () {\n            d.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1);\n            b.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1);\n            if ((d.scrollTop + b.scrollTop) == 0) clearInterval(btn.timer, window.onscroll = set);\n        },\n            10);\n    };\n\n    function set() {\n        btn.style.display = (d.scrollTop + b.scrollTop > 100) ? 'block' : \"none\"\n    }\n};\nbackTop('goTop');\n\n```\n\n\n\n### 字符串类\n\n1. 原生JavaScript实现字符串长度截取\n``` JS\nfunction cutstr(str, len) {\n    var temp;\n    var icount = 0;\n    var patrn = /[^\\x00-\\xff]/;\n    var strre = \"\";\n    for (var i = 0; i < str.length; i++) {\n        if (icount < len - 1) {\n            temp = str.substr(i, 1);\n            if (patrn.exec(temp) == null) {\n                icount = icount + 1;\n            }\n            else {\n                icount = icount + 2;\n            }\n            strre += temp;\n        }\n        else {\n            break;\n        }\n    }\n    return strre + \"...\";\n}\n```\n\n2. 原生JavaScript获取域名主机\n``` JS\nfunction getHost(url) {\n    var host = \"null\";\n    if (typeof url == \"undefined\" || null == url) {\n        url = window.location.href;\n    }\n    var regex = /^\\w+\\:\\/\\/([^\\/]*).*/;\n    var match = url.match(regex);\n    if (typeof match != \"undefined\" && null != match) {\n        host = match[1];\n    }\n    return host;\n}\n```        \n\n3. 原生JavaScript完美判断是否为网址\n``` JS\nfunction IsURL(strUrl) {\n    var regular = /^\\b(((https?|ftp):\\/\\/)?[-a-z0-9]+(\\.[-a-z0-9]+)*\\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d))\\b(\\/[-a-z0-9_:\\@&?=+,.!\\/~%\\$]*)?)$/i\n    if (regular.test(strUrl)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n```\n\n4. 原生JavaScript获得URL中GET参数值\n``` JS\n// 用法：如果地址是 test.htm?t1=1&t2=2&t3=3, 那么能取得：GET[\"t1\"], GET[\"t2\"], GET[\"t3\"]\nfunction get_get() {\n    querystr = window.location.href.split(\"?\");\n    if (querystr[1]) {\n        GETs = querystr[1].split(\"&\");\n        GET = new Array();\n        for (i = 0; i < GETs.length; i++) {\n            tmp_arr = GETs[i].split(\"=\");\n            key = tmp_arr[0];\n            GET[key] = tmp_arr[1];\n        }\n    }\n    return querystr[1];\n}\n```\n\n5. 原生JavaScript判断变量是否空值\n``` JS\n//原生JavaScript判断变量是否空值\n/**\n * 判断变量是否空值\n * undefined, null, '', false, 0, [], {} 均返回true，否则返回false\n */\nfunction empty(v) {\n    switch (typeof v) {\n        case 'undefined':\n            return true;\n        case 'string':\n            if (trim(v).length == 0) return true;\n            break;\n        case 'boolean':\n            if (!v) return true;\n            break;\n        case 'number':\n            if (0 === v) return true;\n            break;\n        case 'object':\n            if (null === v) return true;\n            if (undefined !== v.length && v.length == 0) return true;\n            for (var k in v) {\n                return false;\n            }\n            return true;\n            break;\n    }\n    return false;\n}\n```\n\n## 常用正则表达式\n``` JS\n//正整数\n/^[0-9]*[1-9][0-9]*$/;\n//负整数\n/^-[0-9]*[1-9][0-9]*$/;\n//正浮点数\n/^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$/;\n//负浮点数\n/^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;\n//浮点数\n/^(-?\\d+)(\\.\\d+)?$/;\n//email地址\n/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;\n//url地址\n/^[a-zA-z]+:/ / (\\w + (-\\w + ) * )(\\.(\\w + (-\\w + ) * )) * (\\ ? \\S * ) ? $ / ;\n//年/月/日（年-月-日、年.月.日）\n/^(19|20)\\d\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/;\n//匹配中文字符\n/[\\u4e00-\\u9fa5]/;\n//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)\n/^[a-zA-Z][a-zA-Z0-9_]{4,9}$/;\n//匹配空白行的正则表达式\n/\\n\\s*\\r/;\n//匹配中国邮政编码\n/[1-9]\\d{5}(?!\\d)/;\n//匹配身份证\n/\\d{15}|\\d{18}/;\n//匹配国内电话号码\n/(\\d{3}-|\\d{4}-)?(\\d{8}|\\d{7})?/;\n//匹配IP地址\n/((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/;\n//匹配首尾空白字符的正则表达式\n/^\\s*|\\s*$/;\n//匹配HTML标记的正则表达式\n<(\\S * ? )[ ^ > ] * > .* ? | < .* ? />;\n\n```","source":"_posts/javascript/Code-Snippet-ONE.md","raw":"---\ntitle: Code Snippet 经典代码段收藏之一\np: javascript/POC-ONE\ndate: 2016-01-05 09:06:30\ntags: [代码段]\ncategories: Javascript\n---\n\n## 背景\n\n常用代码片段，DOM操作类、字符串操作类、常用正则表达式等\n\n<!--more-->\n\n## 代码片段 \n\n### DOM操作类\n\n1. 原生JavaScript元素显示的通用方法\n``` JS\n\nfunction $(id) {\n    return !id ? null : document.getElementById(id);\n}\n\nfunction display(id) {\n    var obj = $(id);\n    if (obj.style.visibility) {\n        obj.style.visibility = obj.style.visibility == 'visible' ? 'hidden' : 'visible';\n    } else {\n        obj.style.display = obj.style.display == '' ? 'none' : '';\n    }\n}\n\n```\n\n2. 原生JavaScript实现checkbox全选与全不选\n``` JS\nfunction checkAll() {\n    var selectall = document.getElementById(\"selectall\");\n    var allbox = document.getElementsByName(\"allbox\");\n    if (selectall.checked) {\n        for (var i = 0; i < allbox.length; i++) {\n            allbox[i].checked = true;\n        }\n    }\n    else {\n        for (var i = 0; i < allbox.length; i++) {\n            allbox[i].checked = false;\n        }\n    }\n}\n```\n\n3. 原生JavaScript跨浏览器添加事件\n``` JS\nfunction addEvt(oTarget, sEvtType, fnHandle) {\n    if (!oTarget) {\n        return;\n    }\n    if (oTarget.addEventListener) {\n        oTarget.addEventListener(sEvtType, fnHandle, false);\n    } else if (oTarget.attachEvent) {\n        oTarget.attachEvent(\"on\" + sEvtType, fnHandle);\n    } else {\n        oTarget[\"on\" + sEvtType] = fnHandle;\n    }\n}\n```\n\n4. 原生JavaScript实现全选通用方法\n``` JS\n//原生JavaScript实现全选通用方法\nfunction checkall(form, prefix, checkall) {\n    var checkall = checkall ? checkall : 'chkall';\n    for (var i = 0; i < form.elements.length; i++) {\n        var e = form.elements[i];\n        if (e.type == \"checkbox\") {\n            e.checked = form.elements[checkall].checked;\n        }\n    }\n}\n```\n\n5. 原生JavaScript实现全部取消选择通用方法\n``` JS\n//原生JavaScript实现全部取消选择通用方法\nfunction uncheckAll(form) {\n    for (var i = 0; i < form.elements.length; i++) {\n        var e = form.elements[i];\n        if (e.name != 'chkall')\n            e.checked = !e.checked;\n    }\n}\n```\n\n6. 原生JavaScript获取单选按钮的值\n``` JS\n//原生JavaScript获取单选按钮的值\nfunction get_radio_value(field) {\n    if (field && field.length) {\n        for (var i = 0; i < field.length; i++) {\n            if (field[i].checked) {\n                return field[i].value;\n            }\n        }\n    } else {\n        return;\n    }\n}\n\n```\n\n7. 原生JavaScript获取复选框的值\n``` JS\n//原生JavaScript获取复选框的值\nfunction get_checkbox_value(field) {\n    if (field && field.length) {\n        for (var i = 0; i < field.length; i++) {\n            if (field[i].checked && !field[i].disabled) {\n                return field[i].value;\n            }\n        }\n    } else {\n        return;\n    }\n}\n```\n\n8. 原生JavaScript实现返回顶部的通用方法\n``` JS\n//原生JavaScript实现返回顶部的通用方法\nfunction backTop(btnId) {\n    var btn = document.getElementById(btnId);\n    var d = document.documentElement;\n    var b = document.body;\n    window.onscroll = set;\n    btn.style.display = \"none\";\n    btn.onclick = function () {\n        btn.style.display = \"none\";\n        window.onscroll = null;\n        this.timer = setInterval(function () {\n            d.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1);\n            b.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1);\n            if ((d.scrollTop + b.scrollTop) == 0) clearInterval(btn.timer, window.onscroll = set);\n        },\n            10);\n    };\n\n    function set() {\n        btn.style.display = (d.scrollTop + b.scrollTop > 100) ? 'block' : \"none\"\n    }\n};\nbackTop('goTop');\n\n```\n\n\n\n### 字符串类\n\n1. 原生JavaScript实现字符串长度截取\n``` JS\nfunction cutstr(str, len) {\n    var temp;\n    var icount = 0;\n    var patrn = /[^\\x00-\\xff]/;\n    var strre = \"\";\n    for (var i = 0; i < str.length; i++) {\n        if (icount < len - 1) {\n            temp = str.substr(i, 1);\n            if (patrn.exec(temp) == null) {\n                icount = icount + 1;\n            }\n            else {\n                icount = icount + 2;\n            }\n            strre += temp;\n        }\n        else {\n            break;\n        }\n    }\n    return strre + \"...\";\n}\n```\n\n2. 原生JavaScript获取域名主机\n``` JS\nfunction getHost(url) {\n    var host = \"null\";\n    if (typeof url == \"undefined\" || null == url) {\n        url = window.location.href;\n    }\n    var regex = /^\\w+\\:\\/\\/([^\\/]*).*/;\n    var match = url.match(regex);\n    if (typeof match != \"undefined\" && null != match) {\n        host = match[1];\n    }\n    return host;\n}\n```        \n\n3. 原生JavaScript完美判断是否为网址\n``` JS\nfunction IsURL(strUrl) {\n    var regular = /^\\b(((https?|ftp):\\/\\/)?[-a-z0-9]+(\\.[-a-z0-9]+)*\\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d))\\b(\\/[-a-z0-9_:\\@&?=+,.!\\/~%\\$]*)?)$/i\n    if (regular.test(strUrl)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n```\n\n4. 原生JavaScript获得URL中GET参数值\n``` JS\n// 用法：如果地址是 test.htm?t1=1&t2=2&t3=3, 那么能取得：GET[\"t1\"], GET[\"t2\"], GET[\"t3\"]\nfunction get_get() {\n    querystr = window.location.href.split(\"?\");\n    if (querystr[1]) {\n        GETs = querystr[1].split(\"&\");\n        GET = new Array();\n        for (i = 0; i < GETs.length; i++) {\n            tmp_arr = GETs[i].split(\"=\");\n            key = tmp_arr[0];\n            GET[key] = tmp_arr[1];\n        }\n    }\n    return querystr[1];\n}\n```\n\n5. 原生JavaScript判断变量是否空值\n``` JS\n//原生JavaScript判断变量是否空值\n/**\n * 判断变量是否空值\n * undefined, null, '', false, 0, [], {} 均返回true，否则返回false\n */\nfunction empty(v) {\n    switch (typeof v) {\n        case 'undefined':\n            return true;\n        case 'string':\n            if (trim(v).length == 0) return true;\n            break;\n        case 'boolean':\n            if (!v) return true;\n            break;\n        case 'number':\n            if (0 === v) return true;\n            break;\n        case 'object':\n            if (null === v) return true;\n            if (undefined !== v.length && v.length == 0) return true;\n            for (var k in v) {\n                return false;\n            }\n            return true;\n            break;\n    }\n    return false;\n}\n```\n\n## 常用正则表达式\n``` JS\n//正整数\n/^[0-9]*[1-9][0-9]*$/;\n//负整数\n/^-[0-9]*[1-9][0-9]*$/;\n//正浮点数\n/^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$/;\n//负浮点数\n/^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;\n//浮点数\n/^(-?\\d+)(\\.\\d+)?$/;\n//email地址\n/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;\n//url地址\n/^[a-zA-z]+:/ / (\\w + (-\\w + ) * )(\\.(\\w + (-\\w + ) * )) * (\\ ? \\S * ) ? $ / ;\n//年/月/日（年-月-日、年.月.日）\n/^(19|20)\\d\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/;\n//匹配中文字符\n/[\\u4e00-\\u9fa5]/;\n//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)\n/^[a-zA-Z][a-zA-Z0-9_]{4,9}$/;\n//匹配空白行的正则表达式\n/\\n\\s*\\r/;\n//匹配中国邮政编码\n/[1-9]\\d{5}(?!\\d)/;\n//匹配身份证\n/\\d{15}|\\d{18}/;\n//匹配国内电话号码\n/(\\d{3}-|\\d{4}-)?(\\d{8}|\\d{7})?/;\n//匹配IP地址\n/((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/;\n//匹配首尾空白字符的正则表达式\n/^\\s*|\\s*$/;\n//匹配HTML标记的正则表达式\n<(\\S * ? )[ ^ > ] * > .* ? | < .* ? />;\n\n```","slug":"javascript/Code-Snippet-ONE","published":1,"updated":"2018-01-07T09:11:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2f000ofme3q5ugkq58","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>常用代码片段，DOM操作类、字符串操作类、常用正则表达式等</p>\n<a id=\"more\"></a>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><h3 id=\"DOM操作类\"><a href=\"#DOM操作类\" class=\"headerlink\" title=\"DOM操作类\"></a>DOM操作类</h3><ol>\n<li><p>原生JavaScript元素显示的通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !id ? <span class=\"literal\">null</span> : <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = $(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.style.visibility) &#123;</span><br><span class=\"line\">        obj.style.visibility = obj.style.visibility == <span class=\"string\">'visible'</span> ? <span class=\"string\">'hidden'</span> : <span class=\"string\">'visible'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        obj.style.display = obj.style.display == <span class=\"string\">''</span> ? <span class=\"string\">'none'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现checkbox全选与全不选</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> selectall = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"selectall\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allbox = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">\"allbox\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selectall.checked) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class=\"line\">            allbox[i].checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class=\"line\">            allbox[i].checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript跨浏览器添加事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvt</span>(<span class=\"params\">oTarget, sEvtType, fnHandle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oTarget) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oTarget.addEventListener) &#123;</span><br><span class=\"line\">        oTarget.addEventListener(sEvtType, fnHandle, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oTarget.attachEvent) &#123;</span><br><span class=\"line\">        oTarget.attachEvent(<span class=\"string\">\"on\"</span> + sEvtType, fnHandle);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        oTarget[<span class=\"string\">\"on\"</span> + sEvtType] = fnHandle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现全选通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript实现全选通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkall</span>(<span class=\"params\">form, prefix, checkall</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> checkall = checkall ? checkall : <span class=\"string\">'chkall'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; form.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = form.elements[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.type == <span class=\"string\">\"checkbox\"</span>) &#123;</span><br><span class=\"line\">            e.checked = form.elements[checkall].checked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现全部取消选择通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript实现全部取消选择通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uncheckAll</span>(<span class=\"params\">form</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; form.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = form.elements[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.name != <span class=\"string\">'chkall'</span>)</span><br><span class=\"line\">            e.checked = !e.checked;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获取单选按钮的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript获取单选按钮的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_radio_value</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (field &amp;&amp; field.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; field.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field[i].checked) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field[i].value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获取复选框的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript获取复选框的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_checkbox_value</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (field &amp;&amp; field.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; field.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field[i].checked &amp;&amp; !field[i].disabled) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field[i].value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现返回顶部的通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript实现返回顶部的通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backTop</span>(<span class=\"params\">btnId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(btnId);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.onscroll = set;</span><br><span class=\"line\">    btn.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">    btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        btn.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.onscroll = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            d.scrollTop -= <span class=\"built_in\">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class=\"number\">0.1</span>);</span><br><span class=\"line\">            b.scrollTop -= <span class=\"built_in\">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class=\"number\">0.1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((d.scrollTop + b.scrollTop) == <span class=\"number\">0</span>) clearInterval(btn.timer, <span class=\"built_in\">window</span>.onscroll = set);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">            <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        btn.style.display = (d.scrollTop + b.scrollTop &gt; <span class=\"number\">100</span>) ? <span class=\"string\">'block'</span> : <span class=\"string\">\"none\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">backTop(<span class=\"string\">'goTop'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"字符串类\"><a href=\"#字符串类\" class=\"headerlink\" title=\"字符串类\"></a>字符串类</h3><ol>\n<li><p>原生JavaScript实现字符串长度截取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cutstr</span>(<span class=\"params\">str, len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> icount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> patrn = <span class=\"regexp\">/[^\\x00-\\xff]/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strre = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (icount &lt; len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp = str.substr(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (patrn.exec(temp) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                icount = icount + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                icount = icount + <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            strre += temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strre + <span class=\"string\">\"...\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获取域名主机</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHost</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> host = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> url == <span class=\"string\">\"undefined\"</span> || <span class=\"literal\">null</span> == url) &#123;</span><br><span class=\"line\">        url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^\\w+\\:\\/\\/([^\\/]*).*/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> match = url.match(regex);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> match != <span class=\"string\">\"undefined\"</span> &amp;&amp; <span class=\"literal\">null</span> != match) &#123;</span><br><span class=\"line\">        host = match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> host;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`        </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. 原生JavaScript完美判断是否为网址</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsURL</span>(<span class=\"params\">strUrl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> regular = <span class=\"regexp\">/^\\b(((https?|ftp):\\/\\/)?[-a-z0-9]+(\\.[-a-z0-9]+)*\\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d))\\b(\\/[-a-z0-9_:\\@&amp;?=+,.!\\/~%\\$]*)?)$/i</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (regular.test(strUrl)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获得URL中GET参数值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET[\"t1\"], GET[\"t2\"], GET[\"t3\"]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_get</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    querystr = <span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (querystr[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        GETs = querystr[<span class=\"number\">1</span>].split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        GET = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; GETs.length; i++) &#123;</span><br><span class=\"line\">            tmp_arr = GETs[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            key = tmp_arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">            GET[key] = tmp_arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> querystr[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript判断变量是否空值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript判断变量是否空值</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断变量是否空值</span></span><br><span class=\"line\"><span class=\"comment\"> * undefined, null, '', false, 0, [], &#123;&#125; 均返回true，否则返回false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'undefined'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (trim(v).length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'boolean'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">0</span> === v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'object'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> === v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">undefined</span> !== v.length &amp;&amp; v.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> v) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正整数</span></span><br><span class=\"line\">/^[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*$/;</span><br><span class=\"line\"><span class=\"comment\">//负整数</span></span><br><span class=\"line\">/^-[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*$/;</span><br><span class=\"line\"><span class=\"comment\">//正浮点数</span></span><br><span class=\"line\">/^(([<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]+)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*))$/;</span><br><span class=\"line\"><span class=\"comment\">//负浮点数</span></span><br><span class=\"line\">/^(-(([<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]+)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*)))$/;</span><br><span class=\"line\"><span class=\"comment\">//浮点数</span></span><br><span class=\"line\">/^(-?\\d+)(\\.\\d+)?$/;</span><br><span class=\"line\"><span class=\"comment\">//email地址</span></span><br><span class=\"line\">/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;</span><br><span class=\"line\"><span class=\"comment\">//url地址</span></span><br><span class=\"line\">/^[a-zA-z]+:<span class=\"regexp\">/ /</span> (\\w + (-\\w + ) * )(\\.(\\w + (-\\w + ) * )) * (\\ ? \\S * ) ? $ / ;</span><br><span class=\"line\"><span class=\"comment\">//年/月/日（年-月-日、年.月.日）</span></span><br><span class=\"line\">/^(<span class=\"number\">19</span>|<span class=\"number\">20</span>)\\d\\d[- <span class=\"regexp\">/.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//匹配中文字符</span></span><br><span class=\"line\">/[\\u4e00-\\u9fa5]/;</span><br><span class=\"line\"><span class=\"comment\">//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)</span></span><br><span class=\"line\">/^[a-zA-Z][a-zA-Z0<span class=\"number\">-9</span>_]&#123;<span class=\"number\">4</span>,<span class=\"number\">9</span>&#125;$/;</span><br><span class=\"line\"><span class=\"comment\">//匹配空白行的正则表达式</span></span><br><span class=\"line\">/\\n\\s*\\r/;</span><br><span class=\"line\"><span class=\"comment\">//匹配中国邮政编码</span></span><br><span class=\"line\">/[<span class=\"number\">1</span><span class=\"number\">-9</span>]\\d&#123;<span class=\"number\">5</span>&#125;(?!\\d)/;</span><br><span class=\"line\"><span class=\"comment\">//匹配身份证</span></span><br><span class=\"line\">/\\d&#123;<span class=\"number\">15</span>&#125;|\\d&#123;<span class=\"number\">18</span>&#125;/;</span><br><span class=\"line\"><span class=\"comment\">//匹配国内电话号码</span></span><br><span class=\"line\">/(\\d&#123;<span class=\"number\">3</span>&#125;-|\\d&#123;<span class=\"number\">4</span>&#125;-)?(\\d&#123;<span class=\"number\">8</span>&#125;|\\d&#123;<span class=\"number\">7</span>&#125;)?<span class=\"regexp\">/;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/匹配IP地址</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>((<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)\\.)&#123;<span class=\"number\">3</span>&#125;(<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)/;</span><br><span class=\"line\"><span class=\"comment\">//匹配首尾空白字符的正则表达式</span></span><br><span class=\"line\">/^\\s*|\\s*$/;</span><br><span class=\"line\"><span class=\"comment\">//匹配HTML标记的正则表达式</span></span><br><span class=\"line\">&lt;(\\S * ? )[ ^ &gt; ] * &gt; .* ? | <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">.</span>* ? /&gt;</span>;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>常用代码片段，DOM操作类、字符串操作类、常用正则表达式等</p>","more":"<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><h3 id=\"DOM操作类\"><a href=\"#DOM操作类\" class=\"headerlink\" title=\"DOM操作类\"></a>DOM操作类</h3><ol>\n<li><p>原生JavaScript元素显示的通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !id ? <span class=\"literal\">null</span> : <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = $(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.style.visibility) &#123;</span><br><span class=\"line\">        obj.style.visibility = obj.style.visibility == <span class=\"string\">'visible'</span> ? <span class=\"string\">'hidden'</span> : <span class=\"string\">'visible'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        obj.style.display = obj.style.display == <span class=\"string\">''</span> ? <span class=\"string\">'none'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现checkbox全选与全不选</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> selectall = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"selectall\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allbox = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">\"allbox\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selectall.checked) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class=\"line\">            allbox[i].checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class=\"line\">            allbox[i].checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript跨浏览器添加事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvt</span>(<span class=\"params\">oTarget, sEvtType, fnHandle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oTarget) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oTarget.addEventListener) &#123;</span><br><span class=\"line\">        oTarget.addEventListener(sEvtType, fnHandle, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oTarget.attachEvent) &#123;</span><br><span class=\"line\">        oTarget.attachEvent(<span class=\"string\">\"on\"</span> + sEvtType, fnHandle);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        oTarget[<span class=\"string\">\"on\"</span> + sEvtType] = fnHandle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现全选通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript实现全选通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkall</span>(<span class=\"params\">form, prefix, checkall</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> checkall = checkall ? checkall : <span class=\"string\">'chkall'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; form.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = form.elements[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.type == <span class=\"string\">\"checkbox\"</span>) &#123;</span><br><span class=\"line\">            e.checked = form.elements[checkall].checked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现全部取消选择通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript实现全部取消选择通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uncheckAll</span>(<span class=\"params\">form</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; form.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = form.elements[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.name != <span class=\"string\">'chkall'</span>)</span><br><span class=\"line\">            e.checked = !e.checked;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获取单选按钮的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript获取单选按钮的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_radio_value</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (field &amp;&amp; field.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; field.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field[i].checked) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field[i].value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获取复选框的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript获取复选框的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_checkbox_value</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (field &amp;&amp; field.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; field.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field[i].checked &amp;&amp; !field[i].disabled) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field[i].value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript实现返回顶部的通用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript实现返回顶部的通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backTop</span>(<span class=\"params\">btnId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(btnId);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.onscroll = set;</span><br><span class=\"line\">    btn.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">    btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        btn.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.onscroll = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            d.scrollTop -= <span class=\"built_in\">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class=\"number\">0.1</span>);</span><br><span class=\"line\">            b.scrollTop -= <span class=\"built_in\">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class=\"number\">0.1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((d.scrollTop + b.scrollTop) == <span class=\"number\">0</span>) clearInterval(btn.timer, <span class=\"built_in\">window</span>.onscroll = set);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">            <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        btn.style.display = (d.scrollTop + b.scrollTop &gt; <span class=\"number\">100</span>) ? <span class=\"string\">'block'</span> : <span class=\"string\">\"none\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">backTop(<span class=\"string\">'goTop'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"字符串类\"><a href=\"#字符串类\" class=\"headerlink\" title=\"字符串类\"></a>字符串类</h3><ol>\n<li><p>原生JavaScript实现字符串长度截取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cutstr</span>(<span class=\"params\">str, len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> icount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> patrn = <span class=\"regexp\">/[^\\x00-\\xff]/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strre = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (icount &lt; len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp = str.substr(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (patrn.exec(temp) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                icount = icount + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                icount = icount + <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            strre += temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strre + <span class=\"string\">\"...\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获取域名主机</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHost</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> host = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> url == <span class=\"string\">\"undefined\"</span> || <span class=\"literal\">null</span> == url) &#123;</span><br><span class=\"line\">        url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^\\w+\\:\\/\\/([^\\/]*).*/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> match = url.match(regex);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> match != <span class=\"string\">\"undefined\"</span> &amp;&amp; <span class=\"literal\">null</span> != match) &#123;</span><br><span class=\"line\">        host = match[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> host;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`        </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. 原生JavaScript完美判断是否为网址</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsURL</span>(<span class=\"params\">strUrl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> regular = <span class=\"regexp\">/^\\b(((https?|ftp):\\/\\/)?[-a-z0-9]+(\\.[-a-z0-9]+)*\\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d))\\b(\\/[-a-z0-9_:\\@&amp;?=+,.!\\/~%\\$]*)?)$/i</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (regular.test(strUrl)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript获得URL中GET参数值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET[\"t1\"], GET[\"t2\"], GET[\"t3\"]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_get</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    querystr = <span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (querystr[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        GETs = querystr[<span class=\"number\">1</span>].split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        GET = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; GETs.length; i++) &#123;</span><br><span class=\"line\">            tmp_arr = GETs[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            key = tmp_arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">            GET[key] = tmp_arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> querystr[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生JavaScript判断变量是否空值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生JavaScript判断变量是否空值</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断变量是否空值</span></span><br><span class=\"line\"><span class=\"comment\"> * undefined, null, '', false, 0, [], &#123;&#125; 均返回true，否则返回false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'undefined'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (trim(v).length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'boolean'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">0</span> === v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'object'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> === v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">undefined</span> !== v.length &amp;&amp; v.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> v) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正整数</span></span><br><span class=\"line\">/^[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*$/;</span><br><span class=\"line\"><span class=\"comment\">//负整数</span></span><br><span class=\"line\">/^-[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*$/;</span><br><span class=\"line\"><span class=\"comment\">//正浮点数</span></span><br><span class=\"line\">/^(([<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]+)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*))$/;</span><br><span class=\"line\"><span class=\"comment\">//负浮点数</span></span><br><span class=\"line\">/^(-(([<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*\\.[<span class=\"number\">0</span><span class=\"number\">-9</span>]+)|([<span class=\"number\">0</span><span class=\"number\">-9</span>]*[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*)))$/;</span><br><span class=\"line\"><span class=\"comment\">//浮点数</span></span><br><span class=\"line\">/^(-?\\d+)(\\.\\d+)?$/;</span><br><span class=\"line\"><span class=\"comment\">//email地址</span></span><br><span class=\"line\">/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;</span><br><span class=\"line\"><span class=\"comment\">//url地址</span></span><br><span class=\"line\">/^[a-zA-z]+:<span class=\"regexp\">/ /</span> (\\w + (-\\w + ) * )(\\.(\\w + (-\\w + ) * )) * (\\ ? \\S * ) ? $ / ;</span><br><span class=\"line\"><span class=\"comment\">//年/月/日（年-月-日、年.月.日）</span></span><br><span class=\"line\">/^(<span class=\"number\">19</span>|<span class=\"number\">20</span>)\\d\\d[- <span class=\"regexp\">/.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//匹配中文字符</span></span><br><span class=\"line\">/[\\u4e00-\\u9fa5]/;</span><br><span class=\"line\"><span class=\"comment\">//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)</span></span><br><span class=\"line\">/^[a-zA-Z][a-zA-Z0<span class=\"number\">-9</span>_]&#123;<span class=\"number\">4</span>,<span class=\"number\">9</span>&#125;$/;</span><br><span class=\"line\"><span class=\"comment\">//匹配空白行的正则表达式</span></span><br><span class=\"line\">/\\n\\s*\\r/;</span><br><span class=\"line\"><span class=\"comment\">//匹配中国邮政编码</span></span><br><span class=\"line\">/[<span class=\"number\">1</span><span class=\"number\">-9</span>]\\d&#123;<span class=\"number\">5</span>&#125;(?!\\d)/;</span><br><span class=\"line\"><span class=\"comment\">//匹配身份证</span></span><br><span class=\"line\">/\\d&#123;<span class=\"number\">15</span>&#125;|\\d&#123;<span class=\"number\">18</span>&#125;/;</span><br><span class=\"line\"><span class=\"comment\">//匹配国内电话号码</span></span><br><span class=\"line\">/(\\d&#123;<span class=\"number\">3</span>&#125;-|\\d&#123;<span class=\"number\">4</span>&#125;-)?(\\d&#123;<span class=\"number\">8</span>&#125;|\\d&#123;<span class=\"number\">7</span>&#125;)?<span class=\"regexp\">/;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/匹配IP地址</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>((<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)\\.)&#123;<span class=\"number\">3</span>&#125;(<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)/;</span><br><span class=\"line\"><span class=\"comment\">//匹配首尾空白字符的正则表达式</span></span><br><span class=\"line\">/^\\s*|\\s*$/;</span><br><span class=\"line\"><span class=\"comment\">//匹配HTML标记的正则表达式</span></span><br><span class=\"line\">&lt;(\\S * ? )[ ^ &gt; ] * &gt; .* ? | <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">.</span>* ? /&gt;</span>;</span></span><br></pre></td></tr></table></figure>"},{"title":"前端代码打包工具之gulp","p":"javascript/cli-gulp-guide","date":"2014-01-23T01:36:58.000Z","_content":"\n## 前言\n\n<!--more-->\n\n## 正文\n\n### 老WEB项目(JSP,PHP)中想使用less等打包工具方法 \n\n``` JS\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar path = require('path');\nvar minify = require('gulp-minify-css');\n\nvar paths = {\n    'less': ['../css/less/*.less'],\n    'css': '../css/',\n    'css-release': '../css/release/'\n};\n\ngulp.task('less', function () {\n    gulp.src(paths.less)\n        .pipe(less())\n        .pipe(gulp.dest(paths.css))\n        .pipe(minify())\n        .pipe(gulp.dest(paths['css-release']));\n});\n\ngulp.task('watch', function () {\n    gulp.watch(paths.less, ['less']);\n});\n\ngulp.task('default', ['less']);\n```\n\n\n### 基于gulp的H5-rem2px项目方案\n\n#### 项目架构\n``` JS\n- package.json\n- gulpfile.js\n- src/asset/css/***.less\n```\n\npackage.json\n\n``` JS\n{\n  \"name\": \"less-gulp-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"lint\": \"gulp lint\",\n    \"watch\": \"gulp watch\",\n    \"build\": \"cross-env NODE_ENV=production gulp build\"\n  },\n  \"author\": \"peter\",\n  \"license\": \"ISC\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"cross-env\": \"^3.1.3\",\n    \"eslint\": \"^3.8.1\",\n    \"eslint-config-standard\": \"^6.2.1\",\n    \"eslint-friendly-formatter\": \"^2.0.6\",\n    \"eslint-plugin-json\": \"^1.2.0\",\n    \"eslint-plugin-promise\": \"^3.3.0\",\n    \"eslint-plugin-standard\": \"^2.0.1\",\n    \"generate-weapp-page\": \"^0.1.3\",\n\n    \"autoprefixer\": \"^7.2.5\",\n    \"cssnext\": \"^1.8.4\",\n    \"del\": \"^3.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-eslint\": \"^3.0.1\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-if\": \"^2.0.1\",\n    \"gulp-imagemin\": \"^3.0.3\",\n    \"gulp-jsonminify\": \"^1.0.0\",\n    \"gulp-less\": \"^3.1.0\",\n    \"gulp-load-plugins\": \"^1.5.0\",\n    \"gulp-postcss\": \"^7.0.1\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sourcemaps\": \"^2.2.0\",\n    \"gulp-uglify\": \"^2.0.0\",\n    \"gulp-util\": \"^3.0.7\",\n    \"inquirer\": \"^1.2.2\",\n    \"postcss\": \"^6.0.16\",\n    \"postcss-px2rem\": \"^0.3.0\",\n    \"postcss-pxtorem\": \"^4.0.1\",\n    \"precss\": \"^3.0.0\",\n    \"run-sequence\": \"^2.2.1\"\n  }\n}\n\n```\n\ngulpfile.js\n\n``` JS\n\n/*\n  使用Flexible实现手淘H5页面的终端适配\n  自动化gulp编译工具\n  可以通过任意开发工具完成`src`下的编码，`gulp`会监视项目根目录下`src`文件夹，当文件变化自动编译\n  \n  环境：\n  1、安装node\n  2、安装gulp\n  3、启动项目：npm run watch\n  4、最终编写的文件会保存在dist目录\n*/\n\nvar gulp = require('gulp');\nconst gulpLoadPlugins = require('gulp-load-plugins')\nvar postcss = require('gulp-postcss');\nconst del = require('del')\nconst runSequence = require('run-sequence')\n\nvar autoprefixer = require('autoprefixer');\nvar cssnext = require('cssnext');\nvar precss = require('precss');\nvar px2rem = require('postcss-px2rem'); \n// https://www.npmjs.com/package/px2rem\n\n// load all gulp plugins\nconst plugins = gulpLoadPlugins()\nconst env = process.env.NODE_ENV || 'development'\nconst isProduction = () => env === 'production'\n\n// processors规则\nvar processors = [\n  autoprefixer, // 处理浏览器私有前缀\n  cssnext,      // 使用CSS未来的语法\n  precss,       // 像Sass的函数\n  px2rem({\n    remUnit: 75, // set `rem` unit value (default: 75)\n    // baseDpr: 2    // set base device pixel ratio (default: 2)\n  })\n];\n\n/**\n * Clean distribution directory\n */\ngulp.task('clean', del.bind(null, ['dist/*']))\n\n/**\n * Lint source code\n */\ngulp.task('lint', () => {\n  // return gulp.src(['*.{js,json}', '**/*.{js,json}', '!node_modules/**', '!dist/**', '!**/bluebird.js'])\n  //   .pipe(plugins.eslint())\n  //   .pipe(plugins.eslint.format('node_modules/eslint-friendly-formatter'))\n  //   .pipe(plugins.eslint.failAfterError())\n})\n\n/**\n * Compile js source to distribution directory\n */\ngulp.task('compile:js', () => {\n  return gulp.src(['src/**/*.js'])\n    .pipe(plugins.babel())\n    .pipe(plugins.if(isProduction, plugins.uglify()))\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile css source to distribution directory\n */\ngulp.task('compile:css', function () { \n  \n  return gulp.src('src/**/*.css')\n    .pipe(postcss(processors))\n    .pipe(gulp.dest('dist')); \n});\n\n/**\n * Compile less source to distribution directory\n */\ngulp.task('compile:less', () => {\n  return gulp.src(['src/**/*.less'])\n    .pipe(plugins.less())\n    .pipe(postcss(processors))\n    .pipe(plugins.if(isProduction, plugins.cssnano({ compatibility: '*' })))\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile json source to distribution directory\n */\ngulp.task('compile:json', () => {\n  return gulp.src(['src/**/*.json'])\n    .pipe(plugins.jsonminify())\n    .pipe(gulp.dest('dist'))\n})\n\n\n/**\n * Compile img source to distribution directory\n */\ngulp.task('compile:img', () => {\n  return gulp.src(['src/**/*.{jpg,jpeg,png,gif}'])\n    .pipe(plugins.imagemin())\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile html source to distribution directory\n */\ngulp.task('compile:html', () => {\n  return gulp.src(['src/**/*.html'])\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile source to distribution directory\n */\ngulp.task('compile', ['clean'], next => {\n  runSequence([\n    'compile:js',\n    'compile:css',\n    'compile:less',\n    'compile:json',\n    'compile:img',\n    'compile:html'\n  ], next)\n})\n\n/**\n * Copy extras to distribution directory\n */\ngulp.task('extras', [], () => {\n  return gulp.src([\n    'src/**/*.*',\n    '!src/**/*.js',\n    '!src/**/*.css',\n    '!src/**/*.less',\n    '!src/**/*.json',\n    '!src/**/*.{jpe?g,png,gif}',\n    '!src/**/*.html'\n  ])\n  .pipe(gulp.dest('dist'))\n})\n\n/**\n * Build\n */\ngulp.task('build', ['lint'], next => runSequence(['compile', 'extras'], next))\n\n\n/**\n * Watch source change\n */\ngulp.task('watch', ['build'], () => {\n  gulp.watch('src/**/*.js', ['compile:js'])\n  gulp.watch('src/**/*.css', ['compile:css'])\n  gulp.watch('src/**/*.less', ['compile:less'])\n  gulp.watch('src/**/*.json', ['compile:json'])\n  gulp.watch('src/**/*.{jpe?g,png,gif}', ['compile:img'])\n  gulp.watch('src/**/*.html', ['compile:html'])\n})\n\n/**\n * Default task\n */\ngulp.task('default', ['watch'])\n\n```\n\nsrc/asset/css/***.less\n``` LESS\n\n/*函数表达式*/\n.wrap () {\n    text-wrap: wrap;\n    white-space: pre-wrap;\n    white-space: -moz-pre-wrap;\n    word-wrap: break-word;\n}\n\npre { \n    .wrap; \n    div {\n        width: 100px;\n    }\n}\n\n\n/*mixin*/\n.mixin (dark, @color) {\n    color: darken(@color, 10%);\n}\n.mixin (light, @color) {\n    color: lighten(@color, 20%);\n}\n.mixin (@_, @color) {\n    display: block;\n}\n\n@switch: dark;\n\n.class {\n  .mixin(@switch, #888);\n}\n\n\n\n/*参数形式*/\n.border-radius (@radius) {\n    border-radius: @radius;\n    -moz-border-radius: @radius;\n    -webkit-border-radius: @radius;\n}\n\n#header {\n    .border-radius(4px);\n}\n\n.button {\n    .border-radius(6px);  \n}\n\n\n/*嵌套形式*/\n#header {\n    color: black;\n    .navigation {\n        font-size: 12px;\n    }\n    .logo {\n        width: 300px;\n        &:hover { text-decoration: none }\n    }\n}\n\n.bordered {\n    &.float {\n        float: left; \n    }\n    .top {\n        margin: 5px; \n    }\n}\n```\n\n\n## 小结\n\n本文示例代码：[打包工具示例](https://github.com/taoqianbao/tools-cli-guide)\n\n可以参考以下资料：\nhttps://github.com/amfe/article/issues/17?utm_source=caibaojian.com\nhttps://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html\n  \n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/cli-gulp-guide.md","raw":"---\ntitle: 前端代码打包工具之gulp\ntags: [package, gulp, javascript]\np: javascript/cli-gulp-guide\ndate: 2014-01-23 09:36:58\ncategories: Javascript\n---\n\n## 前言\n\n<!--more-->\n\n## 正文\n\n### 老WEB项目(JSP,PHP)中想使用less等打包工具方法 \n\n``` JS\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar path = require('path');\nvar minify = require('gulp-minify-css');\n\nvar paths = {\n    'less': ['../css/less/*.less'],\n    'css': '../css/',\n    'css-release': '../css/release/'\n};\n\ngulp.task('less', function () {\n    gulp.src(paths.less)\n        .pipe(less())\n        .pipe(gulp.dest(paths.css))\n        .pipe(minify())\n        .pipe(gulp.dest(paths['css-release']));\n});\n\ngulp.task('watch', function () {\n    gulp.watch(paths.less, ['less']);\n});\n\ngulp.task('default', ['less']);\n```\n\n\n### 基于gulp的H5-rem2px项目方案\n\n#### 项目架构\n``` JS\n- package.json\n- gulpfile.js\n- src/asset/css/***.less\n```\n\npackage.json\n\n``` JS\n{\n  \"name\": \"less-gulp-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"lint\": \"gulp lint\",\n    \"watch\": \"gulp watch\",\n    \"build\": \"cross-env NODE_ENV=production gulp build\"\n  },\n  \"author\": \"peter\",\n  \"license\": \"ISC\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"cross-env\": \"^3.1.3\",\n    \"eslint\": \"^3.8.1\",\n    \"eslint-config-standard\": \"^6.2.1\",\n    \"eslint-friendly-formatter\": \"^2.0.6\",\n    \"eslint-plugin-json\": \"^1.2.0\",\n    \"eslint-plugin-promise\": \"^3.3.0\",\n    \"eslint-plugin-standard\": \"^2.0.1\",\n    \"generate-weapp-page\": \"^0.1.3\",\n\n    \"autoprefixer\": \"^7.2.5\",\n    \"cssnext\": \"^1.8.4\",\n    \"del\": \"^3.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-eslint\": \"^3.0.1\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-if\": \"^2.0.1\",\n    \"gulp-imagemin\": \"^3.0.3\",\n    \"gulp-jsonminify\": \"^1.0.0\",\n    \"gulp-less\": \"^3.1.0\",\n    \"gulp-load-plugins\": \"^1.5.0\",\n    \"gulp-postcss\": \"^7.0.1\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sourcemaps\": \"^2.2.0\",\n    \"gulp-uglify\": \"^2.0.0\",\n    \"gulp-util\": \"^3.0.7\",\n    \"inquirer\": \"^1.2.2\",\n    \"postcss\": \"^6.0.16\",\n    \"postcss-px2rem\": \"^0.3.0\",\n    \"postcss-pxtorem\": \"^4.0.1\",\n    \"precss\": \"^3.0.0\",\n    \"run-sequence\": \"^2.2.1\"\n  }\n}\n\n```\n\ngulpfile.js\n\n``` JS\n\n/*\n  使用Flexible实现手淘H5页面的终端适配\n  自动化gulp编译工具\n  可以通过任意开发工具完成`src`下的编码，`gulp`会监视项目根目录下`src`文件夹，当文件变化自动编译\n  \n  环境：\n  1、安装node\n  2、安装gulp\n  3、启动项目：npm run watch\n  4、最终编写的文件会保存在dist目录\n*/\n\nvar gulp = require('gulp');\nconst gulpLoadPlugins = require('gulp-load-plugins')\nvar postcss = require('gulp-postcss');\nconst del = require('del')\nconst runSequence = require('run-sequence')\n\nvar autoprefixer = require('autoprefixer');\nvar cssnext = require('cssnext');\nvar precss = require('precss');\nvar px2rem = require('postcss-px2rem'); \n// https://www.npmjs.com/package/px2rem\n\n// load all gulp plugins\nconst plugins = gulpLoadPlugins()\nconst env = process.env.NODE_ENV || 'development'\nconst isProduction = () => env === 'production'\n\n// processors规则\nvar processors = [\n  autoprefixer, // 处理浏览器私有前缀\n  cssnext,      // 使用CSS未来的语法\n  precss,       // 像Sass的函数\n  px2rem({\n    remUnit: 75, // set `rem` unit value (default: 75)\n    // baseDpr: 2    // set base device pixel ratio (default: 2)\n  })\n];\n\n/**\n * Clean distribution directory\n */\ngulp.task('clean', del.bind(null, ['dist/*']))\n\n/**\n * Lint source code\n */\ngulp.task('lint', () => {\n  // return gulp.src(['*.{js,json}', '**/*.{js,json}', '!node_modules/**', '!dist/**', '!**/bluebird.js'])\n  //   .pipe(plugins.eslint())\n  //   .pipe(plugins.eslint.format('node_modules/eslint-friendly-formatter'))\n  //   .pipe(plugins.eslint.failAfterError())\n})\n\n/**\n * Compile js source to distribution directory\n */\ngulp.task('compile:js', () => {\n  return gulp.src(['src/**/*.js'])\n    .pipe(plugins.babel())\n    .pipe(plugins.if(isProduction, plugins.uglify()))\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile css source to distribution directory\n */\ngulp.task('compile:css', function () { \n  \n  return gulp.src('src/**/*.css')\n    .pipe(postcss(processors))\n    .pipe(gulp.dest('dist')); \n});\n\n/**\n * Compile less source to distribution directory\n */\ngulp.task('compile:less', () => {\n  return gulp.src(['src/**/*.less'])\n    .pipe(plugins.less())\n    .pipe(postcss(processors))\n    .pipe(plugins.if(isProduction, plugins.cssnano({ compatibility: '*' })))\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile json source to distribution directory\n */\ngulp.task('compile:json', () => {\n  return gulp.src(['src/**/*.json'])\n    .pipe(plugins.jsonminify())\n    .pipe(gulp.dest('dist'))\n})\n\n\n/**\n * Compile img source to distribution directory\n */\ngulp.task('compile:img', () => {\n  return gulp.src(['src/**/*.{jpg,jpeg,png,gif}'])\n    .pipe(plugins.imagemin())\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile html source to distribution directory\n */\ngulp.task('compile:html', () => {\n  return gulp.src(['src/**/*.html'])\n    .pipe(gulp.dest('dist'))\n})\n\n/**\n * Compile source to distribution directory\n */\ngulp.task('compile', ['clean'], next => {\n  runSequence([\n    'compile:js',\n    'compile:css',\n    'compile:less',\n    'compile:json',\n    'compile:img',\n    'compile:html'\n  ], next)\n})\n\n/**\n * Copy extras to distribution directory\n */\ngulp.task('extras', [], () => {\n  return gulp.src([\n    'src/**/*.*',\n    '!src/**/*.js',\n    '!src/**/*.css',\n    '!src/**/*.less',\n    '!src/**/*.json',\n    '!src/**/*.{jpe?g,png,gif}',\n    '!src/**/*.html'\n  ])\n  .pipe(gulp.dest('dist'))\n})\n\n/**\n * Build\n */\ngulp.task('build', ['lint'], next => runSequence(['compile', 'extras'], next))\n\n\n/**\n * Watch source change\n */\ngulp.task('watch', ['build'], () => {\n  gulp.watch('src/**/*.js', ['compile:js'])\n  gulp.watch('src/**/*.css', ['compile:css'])\n  gulp.watch('src/**/*.less', ['compile:less'])\n  gulp.watch('src/**/*.json', ['compile:json'])\n  gulp.watch('src/**/*.{jpe?g,png,gif}', ['compile:img'])\n  gulp.watch('src/**/*.html', ['compile:html'])\n})\n\n/**\n * Default task\n */\ngulp.task('default', ['watch'])\n\n```\n\nsrc/asset/css/***.less\n``` LESS\n\n/*函数表达式*/\n.wrap () {\n    text-wrap: wrap;\n    white-space: pre-wrap;\n    white-space: -moz-pre-wrap;\n    word-wrap: break-word;\n}\n\npre { \n    .wrap; \n    div {\n        width: 100px;\n    }\n}\n\n\n/*mixin*/\n.mixin (dark, @color) {\n    color: darken(@color, 10%);\n}\n.mixin (light, @color) {\n    color: lighten(@color, 20%);\n}\n.mixin (@_, @color) {\n    display: block;\n}\n\n@switch: dark;\n\n.class {\n  .mixin(@switch, #888);\n}\n\n\n\n/*参数形式*/\n.border-radius (@radius) {\n    border-radius: @radius;\n    -moz-border-radius: @radius;\n    -webkit-border-radius: @radius;\n}\n\n#header {\n    .border-radius(4px);\n}\n\n.button {\n    .border-radius(6px);  \n}\n\n\n/*嵌套形式*/\n#header {\n    color: black;\n    .navigation {\n        font-size: 12px;\n    }\n    .logo {\n        width: 300px;\n        &:hover { text-decoration: none }\n    }\n}\n\n.bordered {\n    &.float {\n        float: left; \n    }\n    .top {\n        margin: 5px; \n    }\n}\n```\n\n\n## 小结\n\n本文示例代码：[打包工具示例](https://github.com/taoqianbao/tools-cli-guide)\n\n可以参考以下资料：\nhttps://github.com/amfe/article/issues/17?utm_source=caibaojian.com\nhttps://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html\n  \n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/cli-gulp-guide","published":1,"updated":"2018-01-23T02:52:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2j000sfme3wjudn6t1","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"老WEB项目-JSP-PHP-中想使用less等打包工具方法\"><a href=\"#老WEB项目-JSP-PHP-中想使用less等打包工具方法\" class=\"headerlink\" title=\"老WEB项目(JSP,PHP)中想使用less等打包工具方法\"></a>老WEB项目(JSP,PHP)中想使用less等打包工具方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> paths = &#123;</span><br><span class=\"line\">    <span class=\"string\">'less'</span>: [<span class=\"string\">'../css/less/*.less'</span>],</span><br><span class=\"line\">    <span class=\"string\">'css'</span>: <span class=\"string\">'../css/'</span>,</span><br><span class=\"line\">    <span class=\"string\">'css-release'</span>: <span class=\"string\">'../css/release/'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(paths.less)</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(paths.css))</span><br><span class=\"line\">        .pipe(minify())</span><br><span class=\"line\">        .pipe(gulp.dest(paths[<span class=\"string\">'css-release'</span>]));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(paths.less, [<span class=\"string\">'less'</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于gulp的H5-rem2px项目方案\"><a href=\"#基于gulp的H5-rem2px项目方案\" class=\"headerlink\" title=\"基于gulp的H5-rem2px项目方案\"></a>基于gulp的H5-rem2px项目方案</h3><h4 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- package.json</span><br><span class=\"line\">- gulpfile.js</span><br><span class=\"line\">- src/asset/css<span class=\"comment\">/***.less</span></span><br></pre></td></tr></table></figure>\n<p>package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"less-gulp-cli\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"gulp lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch\"</span>: <span class=\"string\">\"gulp watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production gulp build\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"peter\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.18.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cross-env\"</span>: <span class=\"string\">\"^3.1.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"^3.8.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-config-standard\"</span>: <span class=\"string\">\"^6.2.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-friendly-formatter\"</span>: <span class=\"string\">\"^2.0.6\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-plugin-json\"</span>: <span class=\"string\">\"^1.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-plugin-promise\"</span>: <span class=\"string\">\"^3.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-plugin-standard\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"generate-weapp-page\"</span>: <span class=\"string\">\"^0.1.3\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"autoprefixer\"</span>: <span class=\"string\">\"^7.2.5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cssnext\"</span>: <span class=\"string\">\"^1.8.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"del\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-babel\"</span>: <span class=\"string\">\"^6.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-cssnano\"</span>: <span class=\"string\">\"^2.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-eslint\"</span>: <span class=\"string\">\"^3.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-htmlmin\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-if\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-imagemin\"</span>: <span class=\"string\">\"^3.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-jsonminify\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-less\"</span>: <span class=\"string\">\"^3.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-load-plugins\"</span>: <span class=\"string\">\"^1.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-postcss\"</span>: <span class=\"string\">\"^7.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-rename\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-sourcemaps\"</span>: <span class=\"string\">\"^2.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-util\"</span>: <span class=\"string\">\"^3.0.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"inquirer\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postcss\"</span>: <span class=\"string\">\"^6.0.16\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postcss-px2rem\"</span>: <span class=\"string\">\"^0.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postcss-pxtorem\"</span>: <span class=\"string\">\"^4.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"precss\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"run-sequence\"</span>: <span class=\"string\">\"^2.2.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gulpfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  使用Flexible实现手淘H5页面的终端适配</span></span><br><span class=\"line\"><span class=\"comment\">  自动化gulp编译工具</span></span><br><span class=\"line\"><span class=\"comment\">  可以通过任意开发工具完成`src`下的编码，`gulp`会监视项目根目录下`src`文件夹，当文件变化自动编译</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">  环境：</span></span><br><span class=\"line\"><span class=\"comment\">  1、安装node</span></span><br><span class=\"line\"><span class=\"comment\">  2、安装gulp</span></span><br><span class=\"line\"><span class=\"comment\">  3、启动项目：npm run watch</span></span><br><span class=\"line\"><span class=\"comment\">  4、最终编写的文件会保存在dist目录</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpLoadPlugins = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-load-plugins'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-postcss'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> runSequence = <span class=\"built_in\">require</span>(<span class=\"string\">'run-sequence'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cssnext = <span class=\"built_in\">require</span>(<span class=\"string\">'cssnext'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> precss = <span class=\"built_in\">require</span>(<span class=\"string\">'precss'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> px2rem = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-px2rem'</span>); </span><br><span class=\"line\"><span class=\"comment\">// https://www.npmjs.com/package/px2rem</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load all gulp plugins</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> plugins = gulpLoadPlugins()</span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV || <span class=\"string\">'development'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isProduction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> env === <span class=\"string\">'production'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// processors规则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> processors = [</span><br><span class=\"line\">  autoprefixer, <span class=\"comment\">// 处理浏览器私有前缀</span></span><br><span class=\"line\">  cssnext,      <span class=\"comment\">// 使用CSS未来的语法</span></span><br><span class=\"line\">  precss,       <span class=\"comment\">// 像Sass的函数</span></span><br><span class=\"line\">  px2rem(&#123;</span><br><span class=\"line\">    remUnit: <span class=\"number\">75</span>, <span class=\"comment\">// set `rem` unit value (default: 75)</span></span><br><span class=\"line\">    <span class=\"comment\">// baseDpr: 2    // set base device pixel ratio (default: 2)</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Clean distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, del.bind(<span class=\"literal\">null</span>, [<span class=\"string\">'dist/*'</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Lint source code</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return gulp.src(['*.&#123;js,json&#125;', '**/*.&#123;js,json&#125;', '!node_modules/**', '!dist/**', '!**/bluebird.js'])</span></span><br><span class=\"line\">  <span class=\"comment\">//   .pipe(plugins.eslint())</span></span><br><span class=\"line\">  <span class=\"comment\">//   .pipe(plugins.eslint.format('node_modules/eslint-friendly-formatter'))</span></span><br><span class=\"line\">  <span class=\"comment\">//   .pipe(plugins.eslint.failAfterError())</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile js source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:js'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.js'</span>])</span><br><span class=\"line\">    .pipe(plugins.babel())</span><br><span class=\"line\">    .pipe(plugins.if(isProduction, plugins.uglify()))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile css source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/**/*.css'</span>)</span><br><span class=\"line\">    .pipe(postcss(processors))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>)); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile less source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:less'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.less'</span>])</span><br><span class=\"line\">    .pipe(plugins.less())</span><br><span class=\"line\">    .pipe(postcss(processors))</span><br><span class=\"line\">    .pipe(plugins.if(isProduction, plugins.cssnano(&#123; <span class=\"attr\">compatibility</span>: <span class=\"string\">'*'</span> &#125;)))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile json source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:json'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.json'</span>])</span><br><span class=\"line\">    .pipe(plugins.jsonminify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile img source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:img'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.&#123;jpg,jpeg,png,gif&#125;'</span>])</span><br><span class=\"line\">    .pipe(plugins.imagemin())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile html source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:html'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.html'</span>])</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile'</span>, [<span class=\"string\">'clean'</span>], next =&gt; &#123;</span><br><span class=\"line\">  runSequence([</span><br><span class=\"line\">    <span class=\"string\">'compile:js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:css'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:less'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:json'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:img'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:html'</span></span><br><span class=\"line\">  ], next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copy extras to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'extras'</span>, [], () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</span><br><span class=\"line\">    <span class=\"string\">'src/**/*.*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.css'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.less'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.json'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.&#123;jpe?g,png,gif&#125;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.html'</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Build</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'lint'</span>], next =&gt; runSequence([<span class=\"string\">'compile'</span>, <span class=\"string\">'extras'</span>], next))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Watch source change</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'build'</span>], () =&gt; &#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.js'</span>, [<span class=\"string\">'compile:js'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.css'</span>, [<span class=\"string\">'compile:css'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.less'</span>, [<span class=\"string\">'compile:less'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.json'</span>, [<span class=\"string\">'compile:json'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.&#123;jpe?g,png,gif&#125;'</span>, [<span class=\"string\">'compile:img'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.html'</span>, [<span class=\"string\">'compile:html'</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Default task</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'watch'</span>])</span><br></pre></td></tr></table></figure>\n<p>src/asset/css/<em>*</em>.less<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*函数表达式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> () &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-wrap</span>: wrap;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: pre-wrap;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: -moz-pre-wrap;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">pre</span> &#123; </span><br><span class=\"line\">    <span class=\"selector-class\">.wrap</span>; </span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*mixin*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.mixin</span> (dark, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: darken(<span class=\"variable\">@color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.mixin</span> (light, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lighten(<span class=\"variable\">@color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.mixin</span> (<span class=\"variable\">@_</span>, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@switch:</span> dark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.mixin</span>(<span class=\"variable\">@switch</span>, <span class=\"number\">#888</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*参数形式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.border-radius</span> (<span class=\"variable\">@radius</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-border-radius</span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.border-radius</span>(<span class=\"number\">4px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.border-radius</span>(<span class=\"number\">6px</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*嵌套形式*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: none &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bordered</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.top</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文示例代码：<a href=\"https://github.com/taoqianbao/tools-cli-guide\" target=\"_blank\" rel=\"noopener\">打包工具示例</a></p>\n<p>可以参考以下资料：<br><a href=\"https://github.com/amfe/article/issues/17?utm_source=caibaojian.com\" target=\"_blank\" rel=\"noopener\">https://github.com/amfe/article/issues/17?utm_source=caibaojian.com</a><br><a href=\"https://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"老WEB项目-JSP-PHP-中想使用less等打包工具方法\"><a href=\"#老WEB项目-JSP-PHP-中想使用less等打包工具方法\" class=\"headerlink\" title=\"老WEB项目(JSP,PHP)中想使用less等打包工具方法\"></a>老WEB项目(JSP,PHP)中想使用less等打包工具方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> paths = &#123;</span><br><span class=\"line\">    <span class=\"string\">'less'</span>: [<span class=\"string\">'../css/less/*.less'</span>],</span><br><span class=\"line\">    <span class=\"string\">'css'</span>: <span class=\"string\">'../css/'</span>,</span><br><span class=\"line\">    <span class=\"string\">'css-release'</span>: <span class=\"string\">'../css/release/'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(paths.less)</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(paths.css))</span><br><span class=\"line\">        .pipe(minify())</span><br><span class=\"line\">        .pipe(gulp.dest(paths[<span class=\"string\">'css-release'</span>]));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(paths.less, [<span class=\"string\">'less'</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于gulp的H5-rem2px项目方案\"><a href=\"#基于gulp的H5-rem2px项目方案\" class=\"headerlink\" title=\"基于gulp的H5-rem2px项目方案\"></a>基于gulp的H5-rem2px项目方案</h3><h4 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- package.json</span><br><span class=\"line\">- gulpfile.js</span><br><span class=\"line\">- src/asset/css<span class=\"comment\">/***.less</span></span><br></pre></td></tr></table></figure>\n<p>package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"less-gulp-cli\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"gulp lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch\"</span>: <span class=\"string\">\"gulp watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production gulp build\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"peter\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.18.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cross-env\"</span>: <span class=\"string\">\"^3.1.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"^3.8.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-config-standard\"</span>: <span class=\"string\">\"^6.2.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-friendly-formatter\"</span>: <span class=\"string\">\"^2.0.6\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-plugin-json\"</span>: <span class=\"string\">\"^1.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-plugin-promise\"</span>: <span class=\"string\">\"^3.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint-plugin-standard\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"generate-weapp-page\"</span>: <span class=\"string\">\"^0.1.3\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"autoprefixer\"</span>: <span class=\"string\">\"^7.2.5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cssnext\"</span>: <span class=\"string\">\"^1.8.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"del\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-babel\"</span>: <span class=\"string\">\"^6.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-cssnano\"</span>: <span class=\"string\">\"^2.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-eslint\"</span>: <span class=\"string\">\"^3.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-htmlmin\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-if\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-imagemin\"</span>: <span class=\"string\">\"^3.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-jsonminify\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-less\"</span>: <span class=\"string\">\"^3.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-load-plugins\"</span>: <span class=\"string\">\"^1.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-postcss\"</span>: <span class=\"string\">\"^7.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-rename\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-sourcemaps\"</span>: <span class=\"string\">\"^2.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-util\"</span>: <span class=\"string\">\"^3.0.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"inquirer\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postcss\"</span>: <span class=\"string\">\"^6.0.16\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postcss-px2rem\"</span>: <span class=\"string\">\"^0.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postcss-pxtorem\"</span>: <span class=\"string\">\"^4.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"precss\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"run-sequence\"</span>: <span class=\"string\">\"^2.2.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gulpfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  使用Flexible实现手淘H5页面的终端适配</span></span><br><span class=\"line\"><span class=\"comment\">  自动化gulp编译工具</span></span><br><span class=\"line\"><span class=\"comment\">  可以通过任意开发工具完成`src`下的编码，`gulp`会监视项目根目录下`src`文件夹，当文件变化自动编译</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">  环境：</span></span><br><span class=\"line\"><span class=\"comment\">  1、安装node</span></span><br><span class=\"line\"><span class=\"comment\">  2、安装gulp</span></span><br><span class=\"line\"><span class=\"comment\">  3、启动项目：npm run watch</span></span><br><span class=\"line\"><span class=\"comment\">  4、最终编写的文件会保存在dist目录</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpLoadPlugins = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-load-plugins'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-postcss'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> runSequence = <span class=\"built_in\">require</span>(<span class=\"string\">'run-sequence'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cssnext = <span class=\"built_in\">require</span>(<span class=\"string\">'cssnext'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> precss = <span class=\"built_in\">require</span>(<span class=\"string\">'precss'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> px2rem = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-px2rem'</span>); </span><br><span class=\"line\"><span class=\"comment\">// https://www.npmjs.com/package/px2rem</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load all gulp plugins</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> plugins = gulpLoadPlugins()</span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV || <span class=\"string\">'development'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isProduction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> env === <span class=\"string\">'production'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// processors规则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> processors = [</span><br><span class=\"line\">  autoprefixer, <span class=\"comment\">// 处理浏览器私有前缀</span></span><br><span class=\"line\">  cssnext,      <span class=\"comment\">// 使用CSS未来的语法</span></span><br><span class=\"line\">  precss,       <span class=\"comment\">// 像Sass的函数</span></span><br><span class=\"line\">  px2rem(&#123;</span><br><span class=\"line\">    remUnit: <span class=\"number\">75</span>, <span class=\"comment\">// set `rem` unit value (default: 75)</span></span><br><span class=\"line\">    <span class=\"comment\">// baseDpr: 2    // set base device pixel ratio (default: 2)</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Clean distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, del.bind(<span class=\"literal\">null</span>, [<span class=\"string\">'dist/*'</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Lint source code</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return gulp.src(['*.&#123;js,json&#125;', '**/*.&#123;js,json&#125;', '!node_modules/**', '!dist/**', '!**/bluebird.js'])</span></span><br><span class=\"line\">  <span class=\"comment\">//   .pipe(plugins.eslint())</span></span><br><span class=\"line\">  <span class=\"comment\">//   .pipe(plugins.eslint.format('node_modules/eslint-friendly-formatter'))</span></span><br><span class=\"line\">  <span class=\"comment\">//   .pipe(plugins.eslint.failAfterError())</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile js source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:js'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.js'</span>])</span><br><span class=\"line\">    .pipe(plugins.babel())</span><br><span class=\"line\">    .pipe(plugins.if(isProduction, plugins.uglify()))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile css source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/**/*.css'</span>)</span><br><span class=\"line\">    .pipe(postcss(processors))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>)); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile less source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:less'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.less'</span>])</span><br><span class=\"line\">    .pipe(plugins.less())</span><br><span class=\"line\">    .pipe(postcss(processors))</span><br><span class=\"line\">    .pipe(plugins.if(isProduction, plugins.cssnano(&#123; <span class=\"attr\">compatibility</span>: <span class=\"string\">'*'</span> &#125;)))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile json source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:json'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.json'</span>])</span><br><span class=\"line\">    .pipe(plugins.jsonminify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile img source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:img'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.&#123;jpg,jpeg,png,gif&#125;'</span>])</span><br><span class=\"line\">    .pipe(plugins.imagemin())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile html source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:html'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.html'</span>])</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compile source to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile'</span>, [<span class=\"string\">'clean'</span>], next =&gt; &#123;</span><br><span class=\"line\">  runSequence([</span><br><span class=\"line\">    <span class=\"string\">'compile:js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:css'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:less'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:json'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:img'</span>,</span><br><span class=\"line\">    <span class=\"string\">'compile:html'</span></span><br><span class=\"line\">  ], next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copy extras to distribution directory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'extras'</span>, [], () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</span><br><span class=\"line\">    <span class=\"string\">'src/**/*.*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.css'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.less'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.json'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.&#123;jpe?g,png,gif&#125;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'!src/**/*.html'</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Build</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'lint'</span>], next =&gt; runSequence([<span class=\"string\">'compile'</span>, <span class=\"string\">'extras'</span>], next))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Watch source change</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'build'</span>], () =&gt; &#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.js'</span>, [<span class=\"string\">'compile:js'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.css'</span>, [<span class=\"string\">'compile:css'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.less'</span>, [<span class=\"string\">'compile:less'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.json'</span>, [<span class=\"string\">'compile:json'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.&#123;jpe?g,png,gif&#125;'</span>, [<span class=\"string\">'compile:img'</span>])</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/**/*.html'</span>, [<span class=\"string\">'compile:html'</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Default task</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'watch'</span>])</span><br></pre></td></tr></table></figure>\n<p>src/asset/css/<em>*</em>.less<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*函数表达式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> () &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-wrap</span>: wrap;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: pre-wrap;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: -moz-pre-wrap;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">pre</span> &#123; </span><br><span class=\"line\">    <span class=\"selector-class\">.wrap</span>; </span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*mixin*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.mixin</span> (dark, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: darken(<span class=\"variable\">@color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.mixin</span> (light, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lighten(<span class=\"variable\">@color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.mixin</span> (<span class=\"variable\">@_</span>, <span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@switch:</span> dark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.mixin</span>(<span class=\"variable\">@switch</span>, <span class=\"number\">#888</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*参数形式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.border-radius</span> (<span class=\"variable\">@radius</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-border-radius</span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.border-radius</span>(<span class=\"number\">4px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.border-radius</span>(<span class=\"number\">6px</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*嵌套形式*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: none &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bordered</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.top</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文示例代码：<a href=\"https://github.com/taoqianbao/tools-cli-guide\" target=\"_blank\" rel=\"noopener\">打包工具示例</a></p>\n<p>可以参考以下资料：<br><a href=\"https://github.com/amfe/article/issues/17?utm_source=caibaojian.com\" target=\"_blank\" rel=\"noopener\">https://github.com/amfe/article/issues/17?utm_source=caibaojian.com</a><br><a href=\"https://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"OOJ-面向对象的JAVASCRIPT（二）","p":"javascript/OOJ-TWO","date":"2010-05-31T12:52:05.000Z","_content":"\n本文继上篇文章介绍javascript 匿名函数以及闭包的特性\n----------------\n\n<!--more-->\n\n## 1、什么叫匿名函数？\n\n　　匿名函数：就是没有函数名的函数。\n\n　　函数是JavaScript中最灵活的一种对象，这里只是讲解其匿名函数的用途。\n\n1、函数的定义，首先简单介绍一下函数的定义，大致可分为三种方式\n\n第一种：这也是最常规的一种\n\n``` JS\nfunction double( x ){\n\n    return 2 * x;  \n\n}\n``` \n\n第二种：这种方法使用了Function构造函数，把参数列表和函数体都作为字符串，很不方便，不建议使用。\n``` JS\nvar double = new Function( 'x'  , ' return 2 * x;');\n``` \n\n第三种：\n``` JS\nvar double = function( x ) { return 2* x; }\n``` \n\n注意 '='右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量double。\n\n2、匿名函数的创建\n\n第一种方式：就是上面所讲的定义square函数，这也是最常用的方式之一。\n\n第二种方式：\n``` JS\n(function( x , y){\n\n    alert( x + y); \n\n})(2 ,3 );//函数的自调用的形式，直接可以得出结果。\n```\n这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。\n\n## 2、闭包\n闭包的英文单词是closure，这是JavaScript中非常重要的一部分知识，因为使用闭包可以大大减少我们的代码量，使我们的代码看上去更加清晰等等，总之功能十分强大。\n\n闭包的含义：闭包说白了就是函数的嵌套，内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕（这点涉及JavaScript作用域链）。\n\n示例一：\n``` JS\nfunction checkClosure(){\n\n    var str = 'rain-man';\n\n    setTimeout(\n\n        function(){ alert( str ); } //这是一个匿名函数\n\n    , 2000);\n\n}//这个函数要求延迟2秒执行。\n\ncheckClosure();\n```\n这个例子看上去十分的简单，仔细分析下它的执行过程还是有许多知识点的：checkClosure函数的执行是瞬间的（也许用时只是0.00001毫秒），在checkClosure的函数体内创建了一个变量str，在checkClosure执行完毕之后str并没有被释放，这是因为setTimeout内的匿名函数存在这对str的引用。待到2秒后函数体内的匿名函数被执行完毕,str才被释放。\n\n``` JS\n//示例二：优化代码\n\nfunction forTimeout( x, y){\n\n    alert( x + y );\n\n}\n\nfunction delay( x , y  , time ){\n    setTimeout( 'forTimeout(' +  x + ',' +  y + ')' , time );   \n}\n\n/**\n *上面的delay函数十分难以阅读，也不容易编写，但如果使用闭包就可以让代码更加清晰\n\nfunction delay( x , y , time ){\n\n    setTimeout(\n\n        function(){\n\n            forTimeout( x , y )\n\n        }         \n\n    , time );  \n\n}\n*/\n```\n\n举例\n\n匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。\n\n``` JS\n//示例三：\nvar oEvent = {};\n(function(){\nvar addEvent = function(){ /*代码的实现省略了*/ };\nfunction removeEvent(){}\noEvent.addEvent = addEvent;\noEvent.removeEvent = removeEvent;\n})();\n```\n\n在这段代码中函数addEvent和removeEvent都是局部变量，但我们可以通过全局变量oEvent使用它，这就大大减少了全局变量的使用，增强了网页的安全性。\n\n我们要想使用此段代码：\n``` JS\noEvent.addEvent( document.getElementById('box') , 'click' , function(){} );\n```\n\n``` JS\n//示例四：\n\nvar rainman = (function( x , y ){\n    return x + y;\n})( 2 , 3 );\n/**\n *也可以写成下面的形式，因为第一个括号只是帮助我们阅读，但是不推荐使用下面这种书写格式。\nvar rainman = function( x , y ){\n    return x + y;\n}( 2 , 3 );\n*/\n```\n\n在这里我们创建了一个变量rainman，并通过直接调用匿名函数初始化为5，这种小技巧有时十分实用。\n\n``` JS\n示例五：\n\nvar outer = null;\n(function(){\nvar one = 1;\nfunction inner (){\n    one += 1;\n    alert( one );\n}\nouter = inner;\n})();\nouter();    //2\nouter();    //3\nouter();    //4\n\n```\n\n这段代码中的变量one是一个局部变量（因为它被定义在一个函数之内），因此外部是不可以访问的。但是这里我们创建了inner函数，inner函数是可以访问变量one的；又将全局变量outer引用了inner，所以三次调用outer会弹出递增的结果。\n\n注意\n\n一：闭包允许内层函数引用父函数中的变量，但是该变量是最终值。\n\n``` JS\n示例六：\n\n/**\n<body>\n<ul>\n    <li>one</li>\n    <li>two</li>\n    <li>three</li>\n    <li>one</li>\n</ul>\n*/\n\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    lists[ i ].onmouseover = function(){\n        alert( i );       };\n}\n```\n\n你会发现当鼠标移过每一个<li>元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？注意事项里已经讲了（最终值）。显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。\n\n``` JS\n＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃\n\n推荐第一个解决方法，因为第一种解决方法完全利用了闭包的优点，运用匿名函数的自调用技术。\n\n＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃\n\n解决方法一：\n\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    (function( index ){\n        lists[ index ].onmouseover = function(){\n            alert( index );   \n        };                   \n    })( i );//利用闭包的函数自调用的特性，当i的值传到匿名函数之后，匿名函数就可以自己调用，然后得出结果。\n}\n\n解决方法二：\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    lists[ i ].$$index = i;    //通过在Dom元素上绑定$$index属性记录下标\n    lists[ i ].onmouseover = function(){\n        alert( this.$$index );   \n    };\n}\n\n解决方法三：\n\nfunction eventListener( list , index ){\n    list.onmouseover = function(){\n        alert(index);\n    };\n}\n\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    eventListener( lists[ i ] , i );\n}\n```","source":"_posts/javascript/OOJ-TWO.md","raw":"---\ntitle: OOJ-面向对象的JAVASCRIPT（二）\np: javascript/OOJ-TWO\ndate: 2010-05-31 20:52:05\ntags:\n    -   JS\n    -   Javascript\n    -   OOP\n    -   OOJ\n    -   H5\n    -   WEB\ncategories: Javascript\n---\n\n本文继上篇文章介绍javascript 匿名函数以及闭包的特性\n----------------\n\n<!--more-->\n\n## 1、什么叫匿名函数？\n\n　　匿名函数：就是没有函数名的函数。\n\n　　函数是JavaScript中最灵活的一种对象，这里只是讲解其匿名函数的用途。\n\n1、函数的定义，首先简单介绍一下函数的定义，大致可分为三种方式\n\n第一种：这也是最常规的一种\n\n``` JS\nfunction double( x ){\n\n    return 2 * x;  \n\n}\n``` \n\n第二种：这种方法使用了Function构造函数，把参数列表和函数体都作为字符串，很不方便，不建议使用。\n``` JS\nvar double = new Function( 'x'  , ' return 2 * x;');\n``` \n\n第三种：\n``` JS\nvar double = function( x ) { return 2* x; }\n``` \n\n注意 '='右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量double。\n\n2、匿名函数的创建\n\n第一种方式：就是上面所讲的定义square函数，这也是最常用的方式之一。\n\n第二种方式：\n``` JS\n(function( x , y){\n\n    alert( x + y); \n\n})(2 ,3 );//函数的自调用的形式，直接可以得出结果。\n```\n这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。\n\n## 2、闭包\n闭包的英文单词是closure，这是JavaScript中非常重要的一部分知识，因为使用闭包可以大大减少我们的代码量，使我们的代码看上去更加清晰等等，总之功能十分强大。\n\n闭包的含义：闭包说白了就是函数的嵌套，内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕（这点涉及JavaScript作用域链）。\n\n示例一：\n``` JS\nfunction checkClosure(){\n\n    var str = 'rain-man';\n\n    setTimeout(\n\n        function(){ alert( str ); } //这是一个匿名函数\n\n    , 2000);\n\n}//这个函数要求延迟2秒执行。\n\ncheckClosure();\n```\n这个例子看上去十分的简单，仔细分析下它的执行过程还是有许多知识点的：checkClosure函数的执行是瞬间的（也许用时只是0.00001毫秒），在checkClosure的函数体内创建了一个变量str，在checkClosure执行完毕之后str并没有被释放，这是因为setTimeout内的匿名函数存在这对str的引用。待到2秒后函数体内的匿名函数被执行完毕,str才被释放。\n\n``` JS\n//示例二：优化代码\n\nfunction forTimeout( x, y){\n\n    alert( x + y );\n\n}\n\nfunction delay( x , y  , time ){\n    setTimeout( 'forTimeout(' +  x + ',' +  y + ')' , time );   \n}\n\n/**\n *上面的delay函数十分难以阅读，也不容易编写，但如果使用闭包就可以让代码更加清晰\n\nfunction delay( x , y , time ){\n\n    setTimeout(\n\n        function(){\n\n            forTimeout( x , y )\n\n        }         \n\n    , time );  \n\n}\n*/\n```\n\n举例\n\n匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。\n\n``` JS\n//示例三：\nvar oEvent = {};\n(function(){\nvar addEvent = function(){ /*代码的实现省略了*/ };\nfunction removeEvent(){}\noEvent.addEvent = addEvent;\noEvent.removeEvent = removeEvent;\n})();\n```\n\n在这段代码中函数addEvent和removeEvent都是局部变量，但我们可以通过全局变量oEvent使用它，这就大大减少了全局变量的使用，增强了网页的安全性。\n\n我们要想使用此段代码：\n``` JS\noEvent.addEvent( document.getElementById('box') , 'click' , function(){} );\n```\n\n``` JS\n//示例四：\n\nvar rainman = (function( x , y ){\n    return x + y;\n})( 2 , 3 );\n/**\n *也可以写成下面的形式，因为第一个括号只是帮助我们阅读，但是不推荐使用下面这种书写格式。\nvar rainman = function( x , y ){\n    return x + y;\n}( 2 , 3 );\n*/\n```\n\n在这里我们创建了一个变量rainman，并通过直接调用匿名函数初始化为5，这种小技巧有时十分实用。\n\n``` JS\n示例五：\n\nvar outer = null;\n(function(){\nvar one = 1;\nfunction inner (){\n    one += 1;\n    alert( one );\n}\nouter = inner;\n})();\nouter();    //2\nouter();    //3\nouter();    //4\n\n```\n\n这段代码中的变量one是一个局部变量（因为它被定义在一个函数之内），因此外部是不可以访问的。但是这里我们创建了inner函数，inner函数是可以访问变量one的；又将全局变量outer引用了inner，所以三次调用outer会弹出递增的结果。\n\n注意\n\n一：闭包允许内层函数引用父函数中的变量，但是该变量是最终值。\n\n``` JS\n示例六：\n\n/**\n<body>\n<ul>\n    <li>one</li>\n    <li>two</li>\n    <li>three</li>\n    <li>one</li>\n</ul>\n*/\n\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    lists[ i ].onmouseover = function(){\n        alert( i );       };\n}\n```\n\n你会发现当鼠标移过每一个<li>元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？注意事项里已经讲了（最终值）。显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。\n\n``` JS\n＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃\n\n推荐第一个解决方法，因为第一种解决方法完全利用了闭包的优点，运用匿名函数的自调用技术。\n\n＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃\n\n解决方法一：\n\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    (function( index ){\n        lists[ index ].onmouseover = function(){\n            alert( index );   \n        };                   \n    })( i );//利用闭包的函数自调用的特性，当i的值传到匿名函数之后，匿名函数就可以自己调用，然后得出结果。\n}\n\n解决方法二：\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    lists[ i ].$$index = i;    //通过在Dom元素上绑定$$index属性记录下标\n    lists[ i ].onmouseover = function(){\n        alert( this.$$index );   \n    };\n}\n\n解决方法三：\n\nfunction eventListener( list , index ){\n    list.onmouseover = function(){\n        alert(index);\n    };\n}\n\nvar lists = document.getElementsByTagName('li');\nfor(var i = 0 , len = lists.length ; i < len ; i++ ){\n    eventListener( lists[ i ] , i );\n}\n```","slug":"javascript/OOJ-TWO","published":1,"updated":"2018-01-05T03:56:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2l000tfme36namzl0m","content":"<h2 id=\"本文继上篇文章介绍javascript-匿名函数以及闭包的特性\"><a href=\"#本文继上篇文章介绍javascript-匿名函数以及闭包的特性\" class=\"headerlink\" title=\"本文继上篇文章介绍javascript 匿名函数以及闭包的特性\"></a>本文继上篇文章介绍javascript 匿名函数以及闭包的特性</h2><a id=\"more\"></a>\n<h2 id=\"1、什么叫匿名函数？\"><a href=\"#1、什么叫匿名函数？\" class=\"headerlink\" title=\"1、什么叫匿名函数？\"></a>1、什么叫匿名函数？</h2><p>　　匿名函数：就是没有函数名的函数。</p>\n<p>　　函数是JavaScript中最灵活的一种对象，这里只是讲解其匿名函数的用途。</p>\n<p>1、函数的定义，首先简单介绍一下函数的定义，大致可分为三种方式</p>\n<p>第一种：这也是最常规的一种</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span>(<span class=\"params\"> x </span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第二种：这种方法使用了Function构造函数，把参数列表和函数体都作为字符串，很不方便，不建议使用。</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"keyword\">var</span> double = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>( <span class=\"string\">'x'</span>  , <span class=\"string\">' return 2 * x;'</span>);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第三种：</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"keyword\">var</span> double = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> x </span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>* x; &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">注意 '='右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量double。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2、匿名函数的创建</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第一种方式：就是上面所讲的定义square函数，这也是最常用的方式之一。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第二种方式：</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> x , y</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert( x + y); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"number\">2</span> ,<span class=\"number\">3</span> );<span class=\"comment\">//函数的自调用的形式，直接可以得出结果。</span></span><br></pre></td></tr></table></figure>\n<p>这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。</p>\n<h2 id=\"2、闭包\"><a href=\"#2、闭包\" class=\"headerlink\" title=\"2、闭包\"></a>2、闭包</h2><p>闭包的英文单词是closure，这是JavaScript中非常重要的一部分知识，因为使用闭包可以大大减少我们的代码量，使我们的代码看上去更加清晰等等，总之功能十分强大。</p>\n<p>闭包的含义：闭包说白了就是函数的嵌套，内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕（这点涉及JavaScript作用域链）。</p>\n<p>示例一：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkClosure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'rain-man'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; alert( str ); &#125; <span class=\"comment\">//这是一个匿名函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    , <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"comment\">//这个函数要求延迟2秒执行。</span></span><br><span class=\"line\"></span><br><span class=\"line\">checkClosure();</span><br></pre></td></tr></table></figure></p>\n<p>这个例子看上去十分的简单，仔细分析下它的执行过程还是有许多知识点的：checkClosure函数的执行是瞬间的（也许用时只是0.00001毫秒），在checkClosure的函数体内创建了一个变量str，在checkClosure执行完毕之后str并没有被释放，这是因为setTimeout内的匿名函数存在这对str的引用。待到2秒后函数体内的匿名函数被执行完毕,str才被释放。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例二：优化代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forTimeout</span>(<span class=\"params\"> x, y</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert( x + y );</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\"> x , y  , time </span>)</span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"string\">'forTimeout('</span> +  x + <span class=\"string\">','</span> +  y + <span class=\"string\">')'</span> , time );   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *上面的delay函数十分难以阅读，也不容易编写，但如果使用闭包就可以让代码更加清晰</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">function delay( x , y , time )&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    setTimeout(</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            forTimeout( x , y )</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        &#125;         </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    , time );  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>举例</p>\n<p>匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例三：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oEvent = &#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/*代码的实现省略了*/</span> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeEvent</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">oEvent.addEvent = addEvent;</span><br><span class=\"line\">oEvent.removeEvent = removeEvent;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>在这段代码中函数addEvent和removeEvent都是局部变量，但我们可以通过全局变量oEvent使用它，这就大大减少了全局变量的使用，增强了网页的安全性。</p>\n<p>我们要想使用此段代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oEvent.addEvent( <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>) , <span class=\"string\">'click'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; );</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例四：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rainman = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> x , y </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;)( <span class=\"number\">2</span> , <span class=\"number\">3</span> );</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *也可以写成下面的形式，因为第一个括号只是帮助我们阅读，但是不推荐使用下面这种书写格式。</span></span><br><span class=\"line\"><span class=\"comment\">var rainman = function( x , y )&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return x + y;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;( 2 , 3 );</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>在这里我们创建了一个变量rainman，并通过直接调用匿名函数初始化为5，这种小技巧有时十分实用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例五：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> outer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    one += <span class=\"number\">1</span>;</span><br><span class=\"line\">    alert( one );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outer = inner;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">outer();    <span class=\"comment\">//2</span></span><br><span class=\"line\">outer();    <span class=\"comment\">//3</span></span><br><span class=\"line\">outer();    <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>这段代码中的变量one是一个局部变量（因为它被定义在一个函数之内），因此外部是不可以访问的。但是这里我们创建了inner函数，inner函数是可以访问变量one的；又将全局变量outer引用了inner，所以三次调用outer会弹出递增的结果。</p>\n<p>注意</p>\n<p>一：闭包允许内层函数引用父函数中的变量，但是该变量是最终值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例六：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;one&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;two&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;three&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;one&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    lists[ i ].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert( i );       &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你会发现当鼠标移过每一个<li>元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？注意事项里已经讲了（最终值）。显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。</li></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃</span><br><span class=\"line\"></span><br><span class=\"line\">推荐第一个解决方法，因为第一种解决方法完全利用了闭包的优点，运用匿名函数的自调用技术。</span><br><span class=\"line\"></span><br><span class=\"line\">＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法一：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> index </span>)</span>&#123;</span><br><span class=\"line\">        lists[ index ].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert( index );   </span><br><span class=\"line\">        &#125;;                   </span><br><span class=\"line\">    &#125;)( i );<span class=\"comment\">//利用闭包的函数自调用的特性，当i的值传到匿名函数之后，匿名函数就可以自己调用，然后得出结果。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法二：</span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    lists[ i ].$$index = i;    <span class=\"comment\">//通过在Dom元素上绑定$$index属性记录下标</span></span><br><span class=\"line\">    lists[ i ].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert( <span class=\"keyword\">this</span>.$$index );   </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法三：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListener</span>(<span class=\"params\"> list , index </span>)</span>&#123;</span><br><span class=\"line\">    list.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(index);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    eventListener( lists[ i ] , i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"本文继上篇文章介绍javascript-匿名函数以及闭包的特性\"><a href=\"#本文继上篇文章介绍javascript-匿名函数以及闭包的特性\" class=\"headerlink\" title=\"本文继上篇文章介绍javascript 匿名函数以及闭包的特性\"></a>本文继上篇文章介绍javascript 匿名函数以及闭包的特性</h2>","more":"<h2 id=\"1、什么叫匿名函数？\"><a href=\"#1、什么叫匿名函数？\" class=\"headerlink\" title=\"1、什么叫匿名函数？\"></a>1、什么叫匿名函数？</h2><p>　　匿名函数：就是没有函数名的函数。</p>\n<p>　　函数是JavaScript中最灵活的一种对象，这里只是讲解其匿名函数的用途。</p>\n<p>1、函数的定义，首先简单介绍一下函数的定义，大致可分为三种方式</p>\n<p>第一种：这也是最常规的一种</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span>(<span class=\"params\"> x </span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第二种：这种方法使用了Function构造函数，把参数列表和函数体都作为字符串，很不方便，不建议使用。</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"keyword\">var</span> double = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>( <span class=\"string\">'x'</span>  , <span class=\"string\">' return 2 * x;'</span>);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第三种：</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"keyword\">var</span> double = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> x </span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>* x; &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">注意 '='右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量double。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2、匿名函数的创建</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第一种方式：就是上面所讲的定义square函数，这也是最常用的方式之一。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">第二种方式：</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> x , y</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert( x + y); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"number\">2</span> ,<span class=\"number\">3</span> );<span class=\"comment\">//函数的自调用的形式，直接可以得出结果。</span></span><br></pre></td></tr></table></figure>\n<p>这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。</p>\n<h2 id=\"2、闭包\"><a href=\"#2、闭包\" class=\"headerlink\" title=\"2、闭包\"></a>2、闭包</h2><p>闭包的英文单词是closure，这是JavaScript中非常重要的一部分知识，因为使用闭包可以大大减少我们的代码量，使我们的代码看上去更加清晰等等，总之功能十分强大。</p>\n<p>闭包的含义：闭包说白了就是函数的嵌套，内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕（这点涉及JavaScript作用域链）。</p>\n<p>示例一：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkClosure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">'rain-man'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; alert( str ); &#125; <span class=\"comment\">//这是一个匿名函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    , <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"comment\">//这个函数要求延迟2秒执行。</span></span><br><span class=\"line\"></span><br><span class=\"line\">checkClosure();</span><br></pre></td></tr></table></figure></p>\n<p>这个例子看上去十分的简单，仔细分析下它的执行过程还是有许多知识点的：checkClosure函数的执行是瞬间的（也许用时只是0.00001毫秒），在checkClosure的函数体内创建了一个变量str，在checkClosure执行完毕之后str并没有被释放，这是因为setTimeout内的匿名函数存在这对str的引用。待到2秒后函数体内的匿名函数被执行完毕,str才被释放。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例二：优化代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forTimeout</span>(<span class=\"params\"> x, y</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert( x + y );</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\"> x , y  , time </span>)</span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"string\">'forTimeout('</span> +  x + <span class=\"string\">','</span> +  y + <span class=\"string\">')'</span> , time );   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *上面的delay函数十分难以阅读，也不容易编写，但如果使用闭包就可以让代码更加清晰</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">function delay( x , y , time )&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    setTimeout(</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            forTimeout( x , y )</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        &#125;         </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    , time );  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>举例</p>\n<p>匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例三：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oEvent = &#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/*代码的实现省略了*/</span> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeEvent</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">oEvent.addEvent = addEvent;</span><br><span class=\"line\">oEvent.removeEvent = removeEvent;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>在这段代码中函数addEvent和removeEvent都是局部变量，但我们可以通过全局变量oEvent使用它，这就大大减少了全局变量的使用，增强了网页的安全性。</p>\n<p>我们要想使用此段代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oEvent.addEvent( <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>) , <span class=\"string\">'click'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; );</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例四：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rainman = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> x , y </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;)( <span class=\"number\">2</span> , <span class=\"number\">3</span> );</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *也可以写成下面的形式，因为第一个括号只是帮助我们阅读，但是不推荐使用下面这种书写格式。</span></span><br><span class=\"line\"><span class=\"comment\">var rainman = function( x , y )&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    return x + y;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;( 2 , 3 );</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>在这里我们创建了一个变量rainman，并通过直接调用匿名函数初始化为5，这种小技巧有时十分实用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例五：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> outer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    one += <span class=\"number\">1</span>;</span><br><span class=\"line\">    alert( one );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outer = inner;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">outer();    <span class=\"comment\">//2</span></span><br><span class=\"line\">outer();    <span class=\"comment\">//3</span></span><br><span class=\"line\">outer();    <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>这段代码中的变量one是一个局部变量（因为它被定义在一个函数之内），因此外部是不可以访问的。但是这里我们创建了inner函数，inner函数是可以访问变量one的；又将全局变量outer引用了inner，所以三次调用outer会弹出递增的结果。</p>\n<p>注意</p>\n<p>一：闭包允许内层函数引用父函数中的变量，但是该变量是最终值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例六：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;one&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;two&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;three&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;one&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    lists[ i ].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert( i );       &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你会发现当鼠标移过每一个<li>元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？注意事项里已经讲了（最终值）。显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。</li></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃</span><br><span class=\"line\"></span><br><span class=\"line\">推荐第一个解决方法，因为第一种解决方法完全利用了闭包的优点，运用匿名函数的自调用技术。</span><br><span class=\"line\"></span><br><span class=\"line\">＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法一：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> index </span>)</span>&#123;</span><br><span class=\"line\">        lists[ index ].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert( index );   </span><br><span class=\"line\">        &#125;;                   </span><br><span class=\"line\">    &#125;)( i );<span class=\"comment\">//利用闭包的函数自调用的特性，当i的值传到匿名函数之后，匿名函数就可以自己调用，然后得出结果。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法二：</span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    lists[ i ].$$index = i;    <span class=\"comment\">//通过在Dom元素上绑定$$index属性记录下标</span></span><br><span class=\"line\">    lists[ i ].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert( <span class=\"keyword\">this</span>.$$index );   </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法三：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListener</span>(<span class=\"params\"> list , index </span>)</span>&#123;</span><br><span class=\"line\">    list.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(index);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> , len = lists.length ; i &lt; len ; i++ )&#123;</span><br><span class=\"line\">    eventListener( lists[ i ] , i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"OOJ-面向对象的JAVASCRIPT（一）","p":"javascript/OOJ-ONE","date":"2010-05-15T08:52:05.000Z","_content":"\n现代编程都有一个共性，无任是新语言，还是发展健全的语言，都有一套面向对象编程的理论。\nWEB前端开发的JAVASCRIPT也不例外。最近着迷发展的JAVASCRIPT，也想把自己的想法和前人的经验总结下，让更多的IT农民工学习研究。\n\n<!--more-->\n\n## 一、面向对象的基础理论\n百度知道里讲诉的已经非常清晰, [更多详情](http://baike.baidu.com/view/125370.htm) ，这里纯理论的知识大家就自我学习。\n\n## 二、OOJ概述\njavascript面向对象编程与一般的C++,C#等开发语言结构还不一致。它即面向对象，又类似于一般的结构性语言。\n\n### JavaScript 对象是词典\n在 C++ 或 C# 中，在谈论对象时，是指类或结构的实例。对象有不同的属性和方法，具体取决于将它们实例化的模板（即类）。而 JavaScript 对象却不是这样。在 JavaScript 中，对象只是一组名称/值对，就是说，将 JavaScript 对象视为包含字符串关键字的词典。我们可以使用熟悉的“.”（点）运算符或“[]”运算符，来获得和设置对象的属性，这是在处理词典时通常采用的方法。以下代码段：\n\n``` JS\nvar userObject = new Object();\nuserObject.lastLoginTime = new Date();\nalert(userObject.lastLoginTime);        \n```\n的功能与下面的代码段完全相同：\n\n``` JS\nvar userObject = {}; // equivalent to new Object()\nuserObject[“lastLoginTime”] = new Date();\nalert(userObject[“lastLoginTime”]);\n```\n\n 我们还可以直接在 userObject 的定义中定义 lastLoginTime 属性，如下所示：\n\n``` JS\nvar userObject = { “lastLoginTime”: new Date() };\nalert(userObject.lastLoginTime);\n```\n\n这里大家需要注意的是： JavaScript 对象/词典只接受字符串关键字\n\n如果记住 JavaScript 对象是词典，您就不会对此感到吃惊了，毕竟，我们一直在向词典添加新关键字（和其各自的值）。\n\n接下来，我们了解下JAVASCRIPT的对象方法，若要理解对象方法，首先需要仔细了解一下 JavaScript 函数。\n\n### JavaScript 函数的奇特性\n\n大家了解的很多编程语言中，函数和对象通常被视为两样不同的东西。在 JavaScript 中，其差别很模糊 — JavaScript 函数实际上是具有与它关联的可执行代码的对象。请如此看待普通函数：\n\n``` JS\nfunction func(x) {\n    alert(x);\n}\nfunc(“blah”);\n```\n 这就是通常在 JavaScript 中定义函数的方法。但是，还可以按以下方法定义该函数，您在此创建匿名函数对象，并将它赋给变量 func  \n``` JS\nvar func = function(x) {\n    alert(x);\n};\nfunc(“blah2”);\n```\n 甚至也可以像下面这样，使用 Function 构造函数：   \n``` JS\nvar func = new Function(“x”, “alert(x);”);\nfunc(“blah3”);\n```\n 此示例表明函数实际上只是支持函数调用操作的对象。最后一个使用 Function 构造函数来定义函数的方法并不常用，但它展示的可能性非常有趣，因为您可能注意到，该函数的主体正是 Function 构造函数的 String 参数。这意味着，您可以在运行时构造任意函数。\n\n为了进一步演示函数是对象，您可以像对其他任何 JavaScript 对象一样，在函数中设置或添加属性： \n\n``` JS\nfunction sayHi(x) {\n    alert(“Hi, “ + x + “!”);\n}\nsayHi.text = “Hello World!”;\nsayHi[“text2”] = “Hello World... again.”;\n\nalert(sayHi[“text”]); // displays “Hello World!”\nalert(sayHi.text2); // displays “Hello World... again.”\n```\n\n作为对象，函数还可以赋给变量、作为参数传递给其他函数、作为其他函数的值返回，并可以作为对象的属性或数组的元素进行存储等等。下面提供了这样一个示例：\n \n``` JS\n// assign an anonymous function to a variable\nvar greet = function(x) {\n    alert(“Hello, “ + x);\n};\ngreet(“MSDN readers”);\n\n// passing a function as an argument to another\nfunction square(x) {\n    return x * x;\n}\nfunction operateOn(num, func) {\n    return func(num);\n}\n// displays 256\nalert(operateOn(16, square));\n\n// functions as return values\nfunction makeIncrementer() {\n    return function(x) { return x + 1; };\n}\nvar inc = makeIncrementer();\n// displays 8\nalert(inc(7));\n\n// functions stored as array elements\nvar arr = [];\narr[0] = function(x) { return x * x; };\narr[1] = arr[0](2);\narr[2] = arr[0](arr[1]);\narr[3] = arr[0](arr[2]);\n// displays 256\nalert(arr[3]);\n\n// functions as object properties\nvar obj = { “toString” : function() { return “This is an object.”; } };\n// calls obj.toString()\nalert(obj);\n\n```\n\n记住这一点后，向对象添加方法将是很容易的事情：只需选择名称，然后将函数赋给该名称。因此，我通过将匿名函数分别赋给相应的方法名称，在对象中定义了三个方法： \n\n``` JS\nvar myDog = {\n    “name” : “Spot”,\n    “bark” : function() { alert(“Woof!”); },\n    “displayFullName” : function() {\n        alert(this.name + “ The Alpha Dog”);\n    },\n    “chaseMrPostman” : function() { \n        // implementation beyond the scope of this article \n    }    \n};\nmyDog.displayFullName(); \nmyDog.bark(); // Woof!\n```        \n\nC++/C# 开发人员应当很熟悉 displayFullName 函数中使用的“this”关键字 — 它引用一个对象，通过对象调用方法（使用 Visual Basic 的开发人员也应当很熟悉它，它在 Visual Basic 中叫做“Me”）。因此在上面的示例中，displayFullName 中的“this”的值是 myDog 对象。但是，“this”的值不是静态的。通过不同对象调用“this”时，它的值也会更改以便指向相应的对象，如下所示。\n\n#### “this”随对象更改而更改\n\n``` JS\nfunction displayQuote() {\n    // the value of “this” will change; depends on \n    // which object it is called through\n    alert(this.memorableQuote);    \n}\n\nvar williamShakespeare = {\n    “memorableQuote”: “It is a wise father that knows his own child.”, \n    “sayIt” : displayQuote\n};\n\nvar markTwain = {\n    “memorableQuote”: “Golf is a good walk spoiled.”, \n    “sayIt” : displayQuote\n};\n\nvar oscarWilde = {\n    “memorableQuote”: “True friends stab you in the front.” \n    // we can call the function displayQuote\n    // as a method of oscarWilde without assigning it \n    // as oscarWilde’s method. \n    //”sayIt” : displayQuote\n};\n\nwilliamShakespeare.sayIt(); // true, true\nmarkTwain.sayIt(); // he didn’t know where to play golf\n\n// watch this, each function has a method call()\n// that allows the function to be called as a \n// method of the object passed to call() as an\n// argument. \n// this line below is equivalent to assigning\n// displayQuote to sayIt, and calling oscarWilde.sayIt().\ndisplayQuote.call(oscarWilde); // ouch!\n```\n\n上面代码中最后一行表示的是将函数作为对象的方法进行调用的另一种方式。请记住，JavaScript 中的函数是对象。每个函数对象都有一个名为 call 的方法，它将函数作为第一个参数的方法进行调用。就是说，作为函数第一个参数传递给 call 的任何对象都将在函数调用中成为“this”的值。这一技术对于调用基类构造函数来说非常有用，稍后将对此进行介绍。\n\n有一点需要记住，绝不要调用包含“this”（却没有所属对象）的函数。否则，将违反全局命名空间，因为在该调用中，“this”将引用全局对象，而这必然会给您的应用程序带来灾难。例如，下面的脚本将更改 JavaScript 的全局函数 isNaN 的行为。一定不要这样做！\n\n``` JS\nalert(“NaN is NaN: “ + isNaN(NaN));\n\nfunction x() {\n    this.isNaN = function() { \n        return “not anymore!”;\n    };\n}\n// alert!!! trampling the Global object!!!\nx();\n\nalert(“NaN is NaN: “ + isNaN(NaN));\n```\n\n到这里，我们已经介绍了如何创建对象，包括它的属性和方法。但如果注意上面的所有代码段，您会发现属性和方法是在对象定义本身中进行硬编码的。但如果需要更好地控制对象的创建，该怎么做呢？例如，您可能需要根据某些参数来计算对象的属性值。或者，可能需要将对象的属性初始化为仅在运行时才能获得的值。也可能需要创建对象的多个实例（此要求非常常见）。\n\n     在 C# 中，我们使用类来实例化对象实例。但 JavaScript 与此不同，因为它没有类。您将在下一节中看到，您可以充分利用这一情况：函数在与“new”运算符一起使用时，函数将充当构造函数。\n\n### 构造函数而不是类\n\n前面提到过，有关 JavaScript OOP 的最奇怪的事情是，JavaScript 不像 C# 或 C++ 那样，它没有类。在 C# 中，在执行类似下面的操作时： \n``` JS\nDog spot = new Dog();\n```\n将返回一个对象，该对象是 Dog 类的实例。但在 JavaScript 中，本来就没有类。与访问类最近似的方法是定义构造函数，如下所示：  \n\n``` JS\nfunction DogConstructor(name) {\n    this.name = name;\n    this.respondTo = function(name) {\n        if(this.name == name) {\n            alert(“Woof”);        \n        }\n    };\n}\n\nvar spot = new DogConstructor(“Spot”);\nspot.respondTo(“Rover”); // nope\nspot.respondTo(“Spot”); // yeah!\n```\n \n\n那么，结果会怎样呢？暂时忽略 DogConstructor 函数定义，看一看这一行：\n``` JS\nvar spot = new DogConstructor(“Spot”);\n```\n\n“new”运算符执行的操作很简单。首先，它创建一个新的空对象。然后执行紧随其后的函数调用，将新的空对象设置为该函数中“this”的值。换句话说，可以认为上面这行包含“new”运算符的代码与下面两行代码的功能相当： \n\n``` JS\n// create an empty object\nvar spot = {}; \n// call the function as a method of the empty object\nDogConstructor.call(spot, “Spot”);\n```\n\n正如在 DogConstructor 主体中看到的那样，调用此函数将初始化对象，在调用期间关键字“this”将引用此对象。这样，就可以为对象创建模板！只要需要创建类似的对象，就可以与构造函数一起调用“new”，返回的结果将是一个完全初始化的对象。这与类非常相似，不是吗？实际上，在 JavaScript 中构造函数的名称通常就是所模拟的类的名称，因此在上面的示例中，可以直接命名构造函数 Dog：  \n\n``` JS\n// Think of this as class Dog\nfunction Dog(name) {\n    // instance variable \n    this.name = name;\n    // instance method? Hmmm...\n    this.respondTo = function(name) {\n        if(this.name == name) {\n            alert(“Woof”);        \n        }\n    };\n}\n\nvar spot = new Dog(“Spot”);\n```\n\n在上面的 Dog 定义中，我定义了名为 name 的实例变量。使用 Dog 作为其构造函数所创建的每个对象都有它自己的实例变量名称副本（前面提到过，它就是对象词典的条目）。这就是希望的结果。毕竟，每个对象都需要它自己的实例变量副本来表示其状态。但如果看看下一行，就会发现每个 Dog 实例也都有它自己的 respondTo 方法副本，这是个浪费；您只需要一个可供各个 Dog 实例共享的 respondTo 实例！通过在 Dog 以外定义 respondTo，可以避免此问题，如下所示：\n\n``` JS\nfunction respondTo() {\n    // respondTo definition\n}\n\nfunction Dog(name) {\n    this.name = name;\n    // attached this function as a method of the object\n    this.respondTo = respondTo;\n}\n```\n这样，所有 Dog 实例（即用构造函数 Dog 创建的所有实例）都可以共享 respondTo 方法的一个实例。但随着方法数的增加，维护工作将越来越难。最后，基本代码中将有很多全局函数，而且随着“类”的增加，事情只会变得更加糟糕（如果它们的方法具有相似的名称，则尤甚）。但使用原型对象可以更好地解决这个问题，这是下一节的主题。\n\n\n## 三、Javascript核心理论原型\n\n在使用 JavaScript 的面向对象编程中，原型对象是个核心概念。在 JavaScript 中对象是作为现有示例（即原型）对象的副本而创建的，该名称就来自于这一概念。此原型对象的任何属性和方法都将显示为从原型的构造函数创建的对象的属性和方法。可以说，这些对象从其原型继承了属性和方法。当您创建如下所示的新 Dog 对象时：\n``` JS\nvar buddy = new Dog(“Buddy“);\n```\nbuddy 所引用的对象将从它的原型继承属性和方法，尽管仅从这一行可能无法明确判断原型来自哪里。对象 buddy 的原型来自构造函数（在这里是函数 Dog）的属性。\n\n在 JavaScript 中，每个函数都有名为“prototype”的属性，用于引用原型对象。此原型对象又有名为“constructor”的属性，它反过来引用函数本身。这是一种循环引用，图A1 更好地说明了这种循环关系。\n\n![图A1 每个函数的原型都有一个 Constructor 属性](/imgs/ooj-1.gif)\n\n现在，通过“new”运算符用函数（上面示例中为 Dog）创建对象时，所获得的对象将继承 Dog.prototype 的属性。在图A1 中，可以看到 Dog.prototype 对象有一个回指 Dog 函数的构造函数属性。这样，每个 Dog 对象（从 Dog.prototype 继承而来）都有一个回指 Dog 函数的构造函数属性。代码段B1 中的代码证实了这一点。图A2 显示了构造函数、原型对象以及用它们创建的对象之间的这一关系。\n\n代码段B1\n=====\n``` JS\nvar spot = new Dog(“Spot”);\n\n// Dog.prototype is the prototype of spot\nalert(Dog.prototype.isPrototypeOf(spot));\n\n// spot inherits the constructor property\n// from Dog.prototype\nalert(spot.constructor == Dog.prototype.constructor);\nalert(spot.constructor == Dog);\n\n// But constructor property doesn’t belong\n// to spot. The line below displays “false”\nalert(spot.hasOwnProperty(“constructor”));\n\n// The constructor property belongs to Dog.prototype\n// The line below displays “true”\nalert(Dog.prototype.hasOwnProperty(“constructor”));\n```\n\n![图A2-实例继承其原型](/imgs/ooj-2.gif)\n\n某些读者可能已经注意到代码段B1 中对 hasOwnProperty 和 isPrototypeOf 方法的调用。这些方法是从哪里来的呢？它们不是来自 Dog.prototype。实际上，在 Dog.prototype 和 Dog 实例中还可以调用其他方法，比如 toString、toLocaleString 和 valueOf，但它们都不来自 Dog.prototype。您会发现，就像 .NET Framework 中的 System.Object 充当所有类的最终基类一样，JavaScript 中的 Object.prototype 是所有原型的最终基础原型。（Object.prototype 的原型是 null。）\n在此示例中，请记住 Dog.prototype 是对象。它是通过调用 Object 构造函数创建的（尽管它不可见）：\n \n``` JS\nDog.prototype = new Object();\n```\n\n因此，正如 Dog 实例继承 Dog.prototype 一样，Dog.prototype 继承 Object.prototype。这使得所有 Dog 实例也继承了 Object.prototype 的方法和属性。\n每个 JavaScript 对象都继承一个原型链，而所有原型都终止于 Object.prototype。注意，迄今为止您看到的这种继承是活动对象之间的继承。它不同于继承的常见概念，后者是指在声明类时类之间的发生的继承。因此，JavaScript 继承动态性更强。它使用简单算法实现这一点，如下所示：当您尝试访问对象的属性/方法时，JavaScript 将检查该属性/方法是否是在该对象中定义的。如果不是，则检查对象的原型。如果还不是，则检查该对象的原型的原型，如此继续，一直检查到 Object.prototype。\n图A3 说明了此解析过程。\n\n\n![图A3 在原型链中解析 toString() 方法](/imgs/ooj-3.gif)\n\n\nJavaScript 动态地解析属性访问和方法调用的方式产生了一些特殊效果：\n-   继承原型对象的对象上可以立即呈现对原型所做的更改，即使是在创建这些对象之后。\n-   如果在对象中定义了属性/方法 X，则该对象的原型中将隐藏同名的属性/方法。例如，通过在 Dog.prototype 中定义 toString 方法，可以改写 Object.prototype 的 toString 方法。\n-   更改只沿一个方向传递，即从原型到它的派生对象，但不能沿相反方向传递。\n\n代码段B2 说明了这些效果。B2还显示了如何解决前面遇到的不需要的方法实例的问题。通过将方法放在原型内部，可以使对象共享方法，而不必使每个对象都有单独的函数对象实例。在此示例中，rover 和 spot 共享 getBreed 方法，直至在 spot 中以任何方式改写 toString 方法。此后，spot 有了它自己版本的 getBreed 方法，但 rover 对象和用新 GreatDane 创建的后续对象仍将共享在 GreatDane.prototype 对象中定义的那个 getBreed 方法实例。\n\n代码段B2-继承原型\n--------------\n\n``` JS\nfunction GreatDane() { }\n\nvar rover = new GreatDane();\nvar spot = new GreatDane();\n\nGreatDane.prototype.getBreed = function() {\n    return “Great Dane”;\n};\n\n// Works, even though at this point\n// rover and spot are already created.\nalert(rover.getBreed());\n\n// this hides getBreed() in GreatDane.prototype\nspot.getBreed = function() {\n    return “Little Great Dane”;\n};\nalert(spot.getBreed()); \n\n// but of course, the change to getBreed \n// doesn’t propagate back to GreatDane.prototype\n// and other objects inheriting from it,\n// it only happens in the spot object\nalert(rover.getBreed());\n\n```\n\n### 静态属性和方法\n有时，您需要绑定到类而不是实例的属性或方法，也就是，静态属性和方法。在 JavaScript 中很容易做到这一点，因为函数是可以按需要设置其属性和方法的对象。由于在 JavaScript 中构造函数表示类，因此可以通过在构造函数中设置静态方法和属性，直接将它们添加到类中，如下所示：\n\n``` JS\nfunction DateTime() { }\n\n    // set static method now()\n    DateTime.now = function() {\n        return new Date();\n    };\n\n    alert(DateTime.now());\n```\n\n在 JavaScript 中调用静态方法的语法与在 C# 中几乎完全相同。这不应当让人感到吃惊，因为构造函数的名称实际上是类的名称。这样，就有了类、公用属性/方法，以及静态属性/方法。还需要其他什么吗？当然，私有成员。但 JavaScript 本身并不支持私有成员（同样，也不支持受保护成员）。任何人都可以访问对象的所有属性和方法。但我们有办法让类中包含私有成员，但在此之前，您首先需要理解闭包。\n \n### 闭包\n不了解JAVASCRIPT就不要说JAVASCRIPT多么的简单或有多么的难学。JavaScript 实际上是功能强大、表现力强而且非常简练的语言。它甚至具有其他更流行的语言才刚刚开始支持的功能。\nJavaScript 的更高级功能之一是它支持闭包，这是 C# 2.0 通过它的匿名方法支持的功能。闭包是当内部函数（或 C# 中的内部匿名方法）绑定到它的外部函数的本地变量时所发生的运行时现象。很明显，除非此内部函数以某种方式可被外部函数访问，否则它没有多少意义。示例可以更好说明这一点。\n假设需要根据一个简单条件筛选一个数字序列，这个条件是：只有大于 100 的数字才能通过筛选，并忽略其余数字。为此，可以编写类似代码段B3 中的函数。\n\n代码段B3 -根据谓词筛选元素\n===========\n\n``` JS\nfunction filter(pred, arr) {\n    var len = arr.length;\n    var filtered = []; // shorter version of new Array();\n    // iterate through every element in the array...\n    for(var i = 0; i < len; i++) {\n        var val = arr[i];\n        // if the element satisfies the predicate let it through\n        if(pred(val)) {\n            filtered.push(val);\n        }\n    }\n    return filtered;\n}\n\nvar someRandomNumbers = [12, 32, 1, 3, 2, 2, 234, 236, 632,7, 8];\nvar numbersGreaterThan100 = filter(\n    function(x) { return (x > 100) ? true : false; }, \n    someRandomNumbers);\n\n// displays 234, 236, 632\nalert(numbersGreaterThan100);\n```\n\n但是，现在要创建不同的筛选条件，假设这次只有大于 300 的数字才能通过筛选，则可以编写下面这样的函数：\n``` JS\nvar greaterThan300 = filter(\n    function(x) { return (x > 300) ? true : false; }, \n    someRandomNumbers);\n ```\n\n然后，也许需要筛选大于 50、25、10、600 如此等等的数字，但作为一个聪明人，您会发现它们全部都有相同的谓词“greater than”，只有数字不同。因此，可以用类似下面的函数分开各个数字：\n\n``` JS\nfunction makeGreaterThanPredicate(lowerBound) {\n    return function(numberToCheck) {\n        return (numberToCheck > lowerBound) ? true : false;\n    };\n}\n```\n\n这样，您就可以编写以下代码：\n``` JS\nvar greaterThan10 = makeGreaterThanPredicate(10);\nvar greaterThan100 = makeGreaterThanPredicate(100);\nalert(filter(greaterThan10, someRandomNumbers));\nalert(filter(greaterThan100, someRandomNumbers));\n```\n\n通过观察函数 makeGreaterThanPredicate 返回的内部匿名函数，可以发现，该匿名内部函数使用 lowerBound，后者是传递给 makeGreaterThanPredicate 的参数。按照作用域的一般规则，当 makeGreaterThanPredicate 退出时，lowerBound 超出了作用域！但在这里，内部匿名函数仍然携带 lowerBound，甚至在 makeGreaterThanPredicate 退出之后的很长时间内仍然如此。这就是我们所说的闭包：因为内部函数关闭了定义它的环境（即外部函数的参数和本地变量）。\n\n开始可能感觉不到闭包的功能很强大。但如果应用恰当，它们就可以非常有创造性地帮您将想法转换成代码，这个过程非常有趣。在 JavaScript 中，闭包最有趣的用途之一是模拟类的私有变量。\n\n模拟私有属性\n-----------\n现在介绍闭包如何帮助模拟私有成员。正常情况下，无法从函数以外访问函数内的本地变量。函数退出之后，由于各种实际原因，该本地变量将永远消失。但是，如果该本地变量被内部函数的闭包捕获，它就会生存下来。这一事实是模拟 JavaScript 私有属性的关键。假设有一个 Person 类：\n\n``` JS\nfunction Person(name, age) {\n    this.getName = function() { return name; };\n    this.setName = function(newName) { name = newName; };\n    this.getAge = function() { return age; };\n    this.setAge = function(newAge) { age = newAge; };\n}\n```\n\n参数 name 和 age 是构造函数 Person 的本地变量。Person 返回时，name 和 age 应当永远消失。但是，它们被作为 Person 实例的方法而分配的四个内部函数捕获，实际上这会使 name 和 age 继续存在，但只能严格地通过这四个方法访问它们。因此，您可以：\n\n``` JS\nvar ray = new Person(“Ray”, 31);\nalert(ray.getName());\nalert(ray.getAge());\nray.setName(“Younger Ray”);\n// Instant rejuvenation!\nray.setAge(22);\nalert(ray.getName() + “ is now “ + ray.getAge() + \n      “ years old.”);\n```\n\n未在构造函数中初始化的私有成员可以成为构造函数的本地变量，如下所示：\n\n``` JS\nfunction Person(name, age) {\n    var occupation;\n    this.getOccupation = function() { return occupation; };\n    this.setOccupation = function(newOcc) { occupation = \n                         newOcc; };\n  \n    // accessors for name and age    \n}\n```\n\n注意，这些私有成员与我们期望从 C# 中产生的私有成员略有不同。在 C# 中，类的公用方法可以访问它的私有成员。但在 JavaScript 中，只能通过在其闭包内拥有这些私有成员的方法来访问私有成员（由于这些方法不同于普通的公用方法，它们通常被称为特权方法）。因此，在 Person 的公用方法中，仍然必须通过私有成员的特权访问器方法才能访问私有成员：\n\n``` JS\nPerson.prototype.somePublicMethod = function() {\n    // doesn’t work!\n    // alert(this.name);\n    // this one below works\n    alert(this.getName());\n};\n```\n\nDouglas Crockford 是著名的发现（或者也许是发布）使用闭包来模拟私有成员这一技术的第一人。他的网站 javascript.crockford.com 包含有关 JavaScript 的丰富信息，任何对 JavaScript 感兴趣的开发人员都应当仔细研读。\n\n从类继承\n---------\n到这里，我们已经了解了构造函数和原型对象如何使您在 JavaScript 中模拟类。您已经看到，原型链可以确保所有对象都有 Object.prototype 的公用方法，以及如何使用闭包来模拟类的私有成员。但这里还缺少点什么。您尚未看到如何从类派生，这在 C# 中是每天必做的工作。遗憾的是，在 JavaScript 中从类继承并非像在 C# 中键入冒号即可继承那样简单，它需要进行更多操作。另一方面，JavaScript 非常灵活，可以有很多从类继承的方式。\n例如，有一个基类 Pet，它有一个派生类 Dog，如图A4 所示。这个在 JavaScript 中如何实现呢？Pet 类很容易。您已经看见如何实现它了：\n\n\n![图A4-类图](/imgs/ooj-4.gif)\n\n``` JS\n// class Pet\nfunction Pet(name) {\n    this.getName = function() { return name; };\n    this.setName = function(newName) { name = newName; };\n}\n\nPet.prototype.toString = function() {\n    return “This pet’s name is: “ + this.getName();\n};\n// end of class Pet\n\nvar parrotty = new Pet(“Parrotty the Parrot”);\nalert(parrotty);\n```\n\n现在，如何创建从 Pet 派生的类 Dog 呢？在图A4 中可以看到，Dog 有另一个属性 breed，它改写了 Pet 的 toString 方法（注意，JavaScript 的约定是方法和属性名称使用 camel 大小写，而不是在 C# 中建议的 Pascal 大小写）。代码段B3 显示如何这样做。\n\n代码段B3-从PET类派生\n-------\n\n``` JS\n// class Dog : Pet \n// public Dog(string name, string breed)\nfunction Dog(name, breed) {\n    // think Dog : base(name) \n    Pet.call(this, name);\n    this.getBreed = function() { return breed; };\n    // Breed doesn’t change, obviously! It’s read only.\n    // this.setBreed = function(newBreed) { name = newName; };\n}\n\n// this makes Dog.prototype inherits\n// from Pet.prototype\nDog.prototype = new Pet();\n\n// remember that Pet.prototype.constructor\n// points to Pet. We want our Dog instances’\n// constructor to point to Dog.\nDog.prototype.constructor = Dog;\n\n// Now we override Pet.prototype.toString\nDog.prototype.toString = function() {\n    return “This dog’s name is: “ + this.getName() + \n        “, and its breed is: “ + this.getBreed();\n};\n// end of class Dog\n\nvar dog = new Dog(“Buddy”, “Great Dane”);\n// test the new toString()\nalert(dog);\n\n// Testing instanceof (similar to the is operator)\n// (dog is Dog)? yes\nalert(dog instanceof Dog);\n// (dog is Pet)? yes\nalert(dog instanceof Pet);\n// (dog is Object)? yes\nalert(dog instanceof Object);\n```\n\n所使用的原型 — 替换技巧正确设置了原型链，因此假如使用 C#，测试的实例将按预期运行。而且，特权方法仍然会按预期运行。\n\n\n模拟命名空间\n-------------\n\n在 C++ 和 C# 中，命名空间用于尽可能地减少名称冲突。例如，在 .NET Framework 中，命名空间有助于将 Microsoft.Build.Task.Message 类与 System.Messaging.Message 区分开来。JavaScript 没有任何特定语言功能来支持命名空间，但很容易使用对象来模拟命名空间。如果要创建一个 JavaScript 库，则可以将它们包装在命名空间内，而不需要定义全局函数和类，如下所示：\n\n``` JS\nvar MSDNMagNS = {};\n\nMSDNMagNS.Pet = function(name) { // code here };\nMSDNMagNS.Pet.prototype.toString = function() { // code };\n\nvar pet = new MSDNMagNS.Pet(“Yammer”);\n```\n\n命名空间的一个级别可能不是唯一的，因此可以创建嵌套的命名空间：\n\n``` JS\nvar MSDNMagNS = {};\n// nested namespace “Examples”\nMSDNMagNS.Examples = {}; \n\nMSDNMagNS.Examples.Pet = function(name) { // code };\nMSDNMagNS.Examples.Pet.prototype.toString = function() { // code };\n\nvar pet = new MSDNMagNS.Examples.Pet(“Yammer”);\n```\n\n可以想象，键入这些冗长的嵌套命名空间会让人很累。 幸运的是，库用户可以很容易地为命名空间指定更短的别名：\n\n``` JS\n// MSDNMagNS.Examples and Pet definition...\n\n// think “using Eg = MSDNMagNS.Examples;” \nvar Eg = MSDNMagNS.Examples;\nvar pet = new Eg.Pet(“Yammer”);\nalert(pet);\n```\n\n\n如果看一下 Microsoft AJAX 库的源代码，就会发现库的作者使用了类似的技术来实现命名空间（请参阅静态方法 Type.registerNamespace 的实现）。有关详细信息，请参与侧栏“OOP 和 ASP.NET AJAX”。\n\n应当这样编写 JavaScript 代码吗？\n----------------------------\n您已经看见 JavaScript 可以很好地支持面向对象的编程。尽管它是一种基于原型的语言，但它的灵活性和强大功能可以满足在其他流行语言中常见的基于类的编程风格。但问题是：是否应当这样编写 JavaScript 代码？在 JavaScript 中的编程方式是否应与 C# 或 C++ 中的编码方式相同？是否有更聪明的方式来模拟 JavaScript 中没有的功能？每种编程语言都各不相同，一种语言的最佳做法，对另一种语言而言则可能并非最佳。\n在 JavaScript 中，您已看到对象继承对象（与类继承类不同）。因此，使用静态继承层次结构建立很多类的方式可能并不适合 JavaScript。也许，就像 Douglas Crockford 在他的文章 Prototypal Inheritance in JavaScript 中说的那样，JavaScript 编程方式是建立原型对象，并使用下面的简单对象函数建立新的对象，而后者则继承原始对象：\n\n``` JS\nfunction object(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    }\n```\n\n然后，由于 JavaScript 中的对象是可延展的，因此可以方便地在创建对象之后，根据需要用新字段和新方法增大对象。\n\n这的确很好，但它不可否认的是，全世界大多数开发人员更熟悉基于类的编程。实际上，基于类的编程也会在这里出现。按照即将颁发的 ECMA-262 规范第 4 版（ECMA-262 是 JavaScript 的官方规范），JavaScript 2.0 将拥有真正的类。因此，JavaScript 正在发展成为基于类的语言。但是，数年之后 JavaScript 2.0 才可能会被广泛使用。同时，必须清楚当前的 JavaScript 完全可以用基于原型的风格和基于类的风格读取和写入 JavaScript 代码。\n\n...更多内容请看下篇文章\n\n## 四、作者总结\n\n　　面向对象的JAVASCRIPT编程技术极大的拓展了JAVASCRIPT的应用。对WEB2.0的发展起到了关键性的作用。作为新一代的IT农民工，学习掌握这门奇特的语言将在未来的工作中受益匪浅。\n\n　　随着交互式胖客户端 AJAX 应用程序的广泛使用，越来越多的程序员开始学习和使用JAVASCRIPT，我也将在未来一段时间内不断的学习使用JAVASCRIPT更多的与ASP.NET之间的结合。\n\n　　本文献给刚出茅庐的农民工们！希望大家在城市的建设中发挥自己最大的能量。\n\n　　本文作者：朱峰（Peter Zhu）\n\n　　发表时间：2010-05-31\n\n## 五、本文参考引用文章列表\n\n1. 使用面向对象的技术创建高级Web 应用程序 http://msdn.microsoft.com/zh-cn/magazine/cc163419.aspx\n\n2. 百度知道 http://baike.baidu.com/view/125370.htm \n\n3. OOJ-面向对象的JAVASCRIPT - [PeterZhu](http://www.cnblogs.com/taoqianbao/archive/2010/05/31/OOJ.html)\n\n","source":"_posts/javascript/OOJ-ONE.md","raw":"---\ntitle: OOJ-面向对象的JAVASCRIPT（一）\np: javascript/OOJ-ONE\ndate: 2010-05-15 16:52:05\ntags:\n    -   JS\n    -   Javascript\n    -   OOP\n    -   OOJ\n    -   H5\n    -   WEB\ncategories: Javascript\n---\n\n现代编程都有一个共性，无任是新语言，还是发展健全的语言，都有一套面向对象编程的理论。\nWEB前端开发的JAVASCRIPT也不例外。最近着迷发展的JAVASCRIPT，也想把自己的想法和前人的经验总结下，让更多的IT农民工学习研究。\n\n<!--more-->\n\n## 一、面向对象的基础理论\n百度知道里讲诉的已经非常清晰, [更多详情](http://baike.baidu.com/view/125370.htm) ，这里纯理论的知识大家就自我学习。\n\n## 二、OOJ概述\njavascript面向对象编程与一般的C++,C#等开发语言结构还不一致。它即面向对象，又类似于一般的结构性语言。\n\n### JavaScript 对象是词典\n在 C++ 或 C# 中，在谈论对象时，是指类或结构的实例。对象有不同的属性和方法，具体取决于将它们实例化的模板（即类）。而 JavaScript 对象却不是这样。在 JavaScript 中，对象只是一组名称/值对，就是说，将 JavaScript 对象视为包含字符串关键字的词典。我们可以使用熟悉的“.”（点）运算符或“[]”运算符，来获得和设置对象的属性，这是在处理词典时通常采用的方法。以下代码段：\n\n``` JS\nvar userObject = new Object();\nuserObject.lastLoginTime = new Date();\nalert(userObject.lastLoginTime);        \n```\n的功能与下面的代码段完全相同：\n\n``` JS\nvar userObject = {}; // equivalent to new Object()\nuserObject[“lastLoginTime”] = new Date();\nalert(userObject[“lastLoginTime”]);\n```\n\n 我们还可以直接在 userObject 的定义中定义 lastLoginTime 属性，如下所示：\n\n``` JS\nvar userObject = { “lastLoginTime”: new Date() };\nalert(userObject.lastLoginTime);\n```\n\n这里大家需要注意的是： JavaScript 对象/词典只接受字符串关键字\n\n如果记住 JavaScript 对象是词典，您就不会对此感到吃惊了，毕竟，我们一直在向词典添加新关键字（和其各自的值）。\n\n接下来，我们了解下JAVASCRIPT的对象方法，若要理解对象方法，首先需要仔细了解一下 JavaScript 函数。\n\n### JavaScript 函数的奇特性\n\n大家了解的很多编程语言中，函数和对象通常被视为两样不同的东西。在 JavaScript 中，其差别很模糊 — JavaScript 函数实际上是具有与它关联的可执行代码的对象。请如此看待普通函数：\n\n``` JS\nfunction func(x) {\n    alert(x);\n}\nfunc(“blah”);\n```\n 这就是通常在 JavaScript 中定义函数的方法。但是，还可以按以下方法定义该函数，您在此创建匿名函数对象，并将它赋给变量 func  \n``` JS\nvar func = function(x) {\n    alert(x);\n};\nfunc(“blah2”);\n```\n 甚至也可以像下面这样，使用 Function 构造函数：   \n``` JS\nvar func = new Function(“x”, “alert(x);”);\nfunc(“blah3”);\n```\n 此示例表明函数实际上只是支持函数调用操作的对象。最后一个使用 Function 构造函数来定义函数的方法并不常用，但它展示的可能性非常有趣，因为您可能注意到，该函数的主体正是 Function 构造函数的 String 参数。这意味着，您可以在运行时构造任意函数。\n\n为了进一步演示函数是对象，您可以像对其他任何 JavaScript 对象一样，在函数中设置或添加属性： \n\n``` JS\nfunction sayHi(x) {\n    alert(“Hi, “ + x + “!”);\n}\nsayHi.text = “Hello World!”;\nsayHi[“text2”] = “Hello World... again.”;\n\nalert(sayHi[“text”]); // displays “Hello World!”\nalert(sayHi.text2); // displays “Hello World... again.”\n```\n\n作为对象，函数还可以赋给变量、作为参数传递给其他函数、作为其他函数的值返回，并可以作为对象的属性或数组的元素进行存储等等。下面提供了这样一个示例：\n \n``` JS\n// assign an anonymous function to a variable\nvar greet = function(x) {\n    alert(“Hello, “ + x);\n};\ngreet(“MSDN readers”);\n\n// passing a function as an argument to another\nfunction square(x) {\n    return x * x;\n}\nfunction operateOn(num, func) {\n    return func(num);\n}\n// displays 256\nalert(operateOn(16, square));\n\n// functions as return values\nfunction makeIncrementer() {\n    return function(x) { return x + 1; };\n}\nvar inc = makeIncrementer();\n// displays 8\nalert(inc(7));\n\n// functions stored as array elements\nvar arr = [];\narr[0] = function(x) { return x * x; };\narr[1] = arr[0](2);\narr[2] = arr[0](arr[1]);\narr[3] = arr[0](arr[2]);\n// displays 256\nalert(arr[3]);\n\n// functions as object properties\nvar obj = { “toString” : function() { return “This is an object.”; } };\n// calls obj.toString()\nalert(obj);\n\n```\n\n记住这一点后，向对象添加方法将是很容易的事情：只需选择名称，然后将函数赋给该名称。因此，我通过将匿名函数分别赋给相应的方法名称，在对象中定义了三个方法： \n\n``` JS\nvar myDog = {\n    “name” : “Spot”,\n    “bark” : function() { alert(“Woof!”); },\n    “displayFullName” : function() {\n        alert(this.name + “ The Alpha Dog”);\n    },\n    “chaseMrPostman” : function() { \n        // implementation beyond the scope of this article \n    }    \n};\nmyDog.displayFullName(); \nmyDog.bark(); // Woof!\n```        \n\nC++/C# 开发人员应当很熟悉 displayFullName 函数中使用的“this”关键字 — 它引用一个对象，通过对象调用方法（使用 Visual Basic 的开发人员也应当很熟悉它，它在 Visual Basic 中叫做“Me”）。因此在上面的示例中，displayFullName 中的“this”的值是 myDog 对象。但是，“this”的值不是静态的。通过不同对象调用“this”时，它的值也会更改以便指向相应的对象，如下所示。\n\n#### “this”随对象更改而更改\n\n``` JS\nfunction displayQuote() {\n    // the value of “this” will change; depends on \n    // which object it is called through\n    alert(this.memorableQuote);    \n}\n\nvar williamShakespeare = {\n    “memorableQuote”: “It is a wise father that knows his own child.”, \n    “sayIt” : displayQuote\n};\n\nvar markTwain = {\n    “memorableQuote”: “Golf is a good walk spoiled.”, \n    “sayIt” : displayQuote\n};\n\nvar oscarWilde = {\n    “memorableQuote”: “True friends stab you in the front.” \n    // we can call the function displayQuote\n    // as a method of oscarWilde without assigning it \n    // as oscarWilde’s method. \n    //”sayIt” : displayQuote\n};\n\nwilliamShakespeare.sayIt(); // true, true\nmarkTwain.sayIt(); // he didn’t know where to play golf\n\n// watch this, each function has a method call()\n// that allows the function to be called as a \n// method of the object passed to call() as an\n// argument. \n// this line below is equivalent to assigning\n// displayQuote to sayIt, and calling oscarWilde.sayIt().\ndisplayQuote.call(oscarWilde); // ouch!\n```\n\n上面代码中最后一行表示的是将函数作为对象的方法进行调用的另一种方式。请记住，JavaScript 中的函数是对象。每个函数对象都有一个名为 call 的方法，它将函数作为第一个参数的方法进行调用。就是说，作为函数第一个参数传递给 call 的任何对象都将在函数调用中成为“this”的值。这一技术对于调用基类构造函数来说非常有用，稍后将对此进行介绍。\n\n有一点需要记住，绝不要调用包含“this”（却没有所属对象）的函数。否则，将违反全局命名空间，因为在该调用中，“this”将引用全局对象，而这必然会给您的应用程序带来灾难。例如，下面的脚本将更改 JavaScript 的全局函数 isNaN 的行为。一定不要这样做！\n\n``` JS\nalert(“NaN is NaN: “ + isNaN(NaN));\n\nfunction x() {\n    this.isNaN = function() { \n        return “not anymore!”;\n    };\n}\n// alert!!! trampling the Global object!!!\nx();\n\nalert(“NaN is NaN: “ + isNaN(NaN));\n```\n\n到这里，我们已经介绍了如何创建对象，包括它的属性和方法。但如果注意上面的所有代码段，您会发现属性和方法是在对象定义本身中进行硬编码的。但如果需要更好地控制对象的创建，该怎么做呢？例如，您可能需要根据某些参数来计算对象的属性值。或者，可能需要将对象的属性初始化为仅在运行时才能获得的值。也可能需要创建对象的多个实例（此要求非常常见）。\n\n     在 C# 中，我们使用类来实例化对象实例。但 JavaScript 与此不同，因为它没有类。您将在下一节中看到，您可以充分利用这一情况：函数在与“new”运算符一起使用时，函数将充当构造函数。\n\n### 构造函数而不是类\n\n前面提到过，有关 JavaScript OOP 的最奇怪的事情是，JavaScript 不像 C# 或 C++ 那样，它没有类。在 C# 中，在执行类似下面的操作时： \n``` JS\nDog spot = new Dog();\n```\n将返回一个对象，该对象是 Dog 类的实例。但在 JavaScript 中，本来就没有类。与访问类最近似的方法是定义构造函数，如下所示：  \n\n``` JS\nfunction DogConstructor(name) {\n    this.name = name;\n    this.respondTo = function(name) {\n        if(this.name == name) {\n            alert(“Woof”);        \n        }\n    };\n}\n\nvar spot = new DogConstructor(“Spot”);\nspot.respondTo(“Rover”); // nope\nspot.respondTo(“Spot”); // yeah!\n```\n \n\n那么，结果会怎样呢？暂时忽略 DogConstructor 函数定义，看一看这一行：\n``` JS\nvar spot = new DogConstructor(“Spot”);\n```\n\n“new”运算符执行的操作很简单。首先，它创建一个新的空对象。然后执行紧随其后的函数调用，将新的空对象设置为该函数中“this”的值。换句话说，可以认为上面这行包含“new”运算符的代码与下面两行代码的功能相当： \n\n``` JS\n// create an empty object\nvar spot = {}; \n// call the function as a method of the empty object\nDogConstructor.call(spot, “Spot”);\n```\n\n正如在 DogConstructor 主体中看到的那样，调用此函数将初始化对象，在调用期间关键字“this”将引用此对象。这样，就可以为对象创建模板！只要需要创建类似的对象，就可以与构造函数一起调用“new”，返回的结果将是一个完全初始化的对象。这与类非常相似，不是吗？实际上，在 JavaScript 中构造函数的名称通常就是所模拟的类的名称，因此在上面的示例中，可以直接命名构造函数 Dog：  \n\n``` JS\n// Think of this as class Dog\nfunction Dog(name) {\n    // instance variable \n    this.name = name;\n    // instance method? Hmmm...\n    this.respondTo = function(name) {\n        if(this.name == name) {\n            alert(“Woof”);        \n        }\n    };\n}\n\nvar spot = new Dog(“Spot”);\n```\n\n在上面的 Dog 定义中，我定义了名为 name 的实例变量。使用 Dog 作为其构造函数所创建的每个对象都有它自己的实例变量名称副本（前面提到过，它就是对象词典的条目）。这就是希望的结果。毕竟，每个对象都需要它自己的实例变量副本来表示其状态。但如果看看下一行，就会发现每个 Dog 实例也都有它自己的 respondTo 方法副本，这是个浪费；您只需要一个可供各个 Dog 实例共享的 respondTo 实例！通过在 Dog 以外定义 respondTo，可以避免此问题，如下所示：\n\n``` JS\nfunction respondTo() {\n    // respondTo definition\n}\n\nfunction Dog(name) {\n    this.name = name;\n    // attached this function as a method of the object\n    this.respondTo = respondTo;\n}\n```\n这样，所有 Dog 实例（即用构造函数 Dog 创建的所有实例）都可以共享 respondTo 方法的一个实例。但随着方法数的增加，维护工作将越来越难。最后，基本代码中将有很多全局函数，而且随着“类”的增加，事情只会变得更加糟糕（如果它们的方法具有相似的名称，则尤甚）。但使用原型对象可以更好地解决这个问题，这是下一节的主题。\n\n\n## 三、Javascript核心理论原型\n\n在使用 JavaScript 的面向对象编程中，原型对象是个核心概念。在 JavaScript 中对象是作为现有示例（即原型）对象的副本而创建的，该名称就来自于这一概念。此原型对象的任何属性和方法都将显示为从原型的构造函数创建的对象的属性和方法。可以说，这些对象从其原型继承了属性和方法。当您创建如下所示的新 Dog 对象时：\n``` JS\nvar buddy = new Dog(“Buddy“);\n```\nbuddy 所引用的对象将从它的原型继承属性和方法，尽管仅从这一行可能无法明确判断原型来自哪里。对象 buddy 的原型来自构造函数（在这里是函数 Dog）的属性。\n\n在 JavaScript 中，每个函数都有名为“prototype”的属性，用于引用原型对象。此原型对象又有名为“constructor”的属性，它反过来引用函数本身。这是一种循环引用，图A1 更好地说明了这种循环关系。\n\n![图A1 每个函数的原型都有一个 Constructor 属性](/imgs/ooj-1.gif)\n\n现在，通过“new”运算符用函数（上面示例中为 Dog）创建对象时，所获得的对象将继承 Dog.prototype 的属性。在图A1 中，可以看到 Dog.prototype 对象有一个回指 Dog 函数的构造函数属性。这样，每个 Dog 对象（从 Dog.prototype 继承而来）都有一个回指 Dog 函数的构造函数属性。代码段B1 中的代码证实了这一点。图A2 显示了构造函数、原型对象以及用它们创建的对象之间的这一关系。\n\n代码段B1\n=====\n``` JS\nvar spot = new Dog(“Spot”);\n\n// Dog.prototype is the prototype of spot\nalert(Dog.prototype.isPrototypeOf(spot));\n\n// spot inherits the constructor property\n// from Dog.prototype\nalert(spot.constructor == Dog.prototype.constructor);\nalert(spot.constructor == Dog);\n\n// But constructor property doesn’t belong\n// to spot. The line below displays “false”\nalert(spot.hasOwnProperty(“constructor”));\n\n// The constructor property belongs to Dog.prototype\n// The line below displays “true”\nalert(Dog.prototype.hasOwnProperty(“constructor”));\n```\n\n![图A2-实例继承其原型](/imgs/ooj-2.gif)\n\n某些读者可能已经注意到代码段B1 中对 hasOwnProperty 和 isPrototypeOf 方法的调用。这些方法是从哪里来的呢？它们不是来自 Dog.prototype。实际上，在 Dog.prototype 和 Dog 实例中还可以调用其他方法，比如 toString、toLocaleString 和 valueOf，但它们都不来自 Dog.prototype。您会发现，就像 .NET Framework 中的 System.Object 充当所有类的最终基类一样，JavaScript 中的 Object.prototype 是所有原型的最终基础原型。（Object.prototype 的原型是 null。）\n在此示例中，请记住 Dog.prototype 是对象。它是通过调用 Object 构造函数创建的（尽管它不可见）：\n \n``` JS\nDog.prototype = new Object();\n```\n\n因此，正如 Dog 实例继承 Dog.prototype 一样，Dog.prototype 继承 Object.prototype。这使得所有 Dog 实例也继承了 Object.prototype 的方法和属性。\n每个 JavaScript 对象都继承一个原型链，而所有原型都终止于 Object.prototype。注意，迄今为止您看到的这种继承是活动对象之间的继承。它不同于继承的常见概念，后者是指在声明类时类之间的发生的继承。因此，JavaScript 继承动态性更强。它使用简单算法实现这一点，如下所示：当您尝试访问对象的属性/方法时，JavaScript 将检查该属性/方法是否是在该对象中定义的。如果不是，则检查对象的原型。如果还不是，则检查该对象的原型的原型，如此继续，一直检查到 Object.prototype。\n图A3 说明了此解析过程。\n\n\n![图A3 在原型链中解析 toString() 方法](/imgs/ooj-3.gif)\n\n\nJavaScript 动态地解析属性访问和方法调用的方式产生了一些特殊效果：\n-   继承原型对象的对象上可以立即呈现对原型所做的更改，即使是在创建这些对象之后。\n-   如果在对象中定义了属性/方法 X，则该对象的原型中将隐藏同名的属性/方法。例如，通过在 Dog.prototype 中定义 toString 方法，可以改写 Object.prototype 的 toString 方法。\n-   更改只沿一个方向传递，即从原型到它的派生对象，但不能沿相反方向传递。\n\n代码段B2 说明了这些效果。B2还显示了如何解决前面遇到的不需要的方法实例的问题。通过将方法放在原型内部，可以使对象共享方法，而不必使每个对象都有单独的函数对象实例。在此示例中，rover 和 spot 共享 getBreed 方法，直至在 spot 中以任何方式改写 toString 方法。此后，spot 有了它自己版本的 getBreed 方法，但 rover 对象和用新 GreatDane 创建的后续对象仍将共享在 GreatDane.prototype 对象中定义的那个 getBreed 方法实例。\n\n代码段B2-继承原型\n--------------\n\n``` JS\nfunction GreatDane() { }\n\nvar rover = new GreatDane();\nvar spot = new GreatDane();\n\nGreatDane.prototype.getBreed = function() {\n    return “Great Dane”;\n};\n\n// Works, even though at this point\n// rover and spot are already created.\nalert(rover.getBreed());\n\n// this hides getBreed() in GreatDane.prototype\nspot.getBreed = function() {\n    return “Little Great Dane”;\n};\nalert(spot.getBreed()); \n\n// but of course, the change to getBreed \n// doesn’t propagate back to GreatDane.prototype\n// and other objects inheriting from it,\n// it only happens in the spot object\nalert(rover.getBreed());\n\n```\n\n### 静态属性和方法\n有时，您需要绑定到类而不是实例的属性或方法，也就是，静态属性和方法。在 JavaScript 中很容易做到这一点，因为函数是可以按需要设置其属性和方法的对象。由于在 JavaScript 中构造函数表示类，因此可以通过在构造函数中设置静态方法和属性，直接将它们添加到类中，如下所示：\n\n``` JS\nfunction DateTime() { }\n\n    // set static method now()\n    DateTime.now = function() {\n        return new Date();\n    };\n\n    alert(DateTime.now());\n```\n\n在 JavaScript 中调用静态方法的语法与在 C# 中几乎完全相同。这不应当让人感到吃惊，因为构造函数的名称实际上是类的名称。这样，就有了类、公用属性/方法，以及静态属性/方法。还需要其他什么吗？当然，私有成员。但 JavaScript 本身并不支持私有成员（同样，也不支持受保护成员）。任何人都可以访问对象的所有属性和方法。但我们有办法让类中包含私有成员，但在此之前，您首先需要理解闭包。\n \n### 闭包\n不了解JAVASCRIPT就不要说JAVASCRIPT多么的简单或有多么的难学。JavaScript 实际上是功能强大、表现力强而且非常简练的语言。它甚至具有其他更流行的语言才刚刚开始支持的功能。\nJavaScript 的更高级功能之一是它支持闭包，这是 C# 2.0 通过它的匿名方法支持的功能。闭包是当内部函数（或 C# 中的内部匿名方法）绑定到它的外部函数的本地变量时所发生的运行时现象。很明显，除非此内部函数以某种方式可被外部函数访问，否则它没有多少意义。示例可以更好说明这一点。\n假设需要根据一个简单条件筛选一个数字序列，这个条件是：只有大于 100 的数字才能通过筛选，并忽略其余数字。为此，可以编写类似代码段B3 中的函数。\n\n代码段B3 -根据谓词筛选元素\n===========\n\n``` JS\nfunction filter(pred, arr) {\n    var len = arr.length;\n    var filtered = []; // shorter version of new Array();\n    // iterate through every element in the array...\n    for(var i = 0; i < len; i++) {\n        var val = arr[i];\n        // if the element satisfies the predicate let it through\n        if(pred(val)) {\n            filtered.push(val);\n        }\n    }\n    return filtered;\n}\n\nvar someRandomNumbers = [12, 32, 1, 3, 2, 2, 234, 236, 632,7, 8];\nvar numbersGreaterThan100 = filter(\n    function(x) { return (x > 100) ? true : false; }, \n    someRandomNumbers);\n\n// displays 234, 236, 632\nalert(numbersGreaterThan100);\n```\n\n但是，现在要创建不同的筛选条件，假设这次只有大于 300 的数字才能通过筛选，则可以编写下面这样的函数：\n``` JS\nvar greaterThan300 = filter(\n    function(x) { return (x > 300) ? true : false; }, \n    someRandomNumbers);\n ```\n\n然后，也许需要筛选大于 50、25、10、600 如此等等的数字，但作为一个聪明人，您会发现它们全部都有相同的谓词“greater than”，只有数字不同。因此，可以用类似下面的函数分开各个数字：\n\n``` JS\nfunction makeGreaterThanPredicate(lowerBound) {\n    return function(numberToCheck) {\n        return (numberToCheck > lowerBound) ? true : false;\n    };\n}\n```\n\n这样，您就可以编写以下代码：\n``` JS\nvar greaterThan10 = makeGreaterThanPredicate(10);\nvar greaterThan100 = makeGreaterThanPredicate(100);\nalert(filter(greaterThan10, someRandomNumbers));\nalert(filter(greaterThan100, someRandomNumbers));\n```\n\n通过观察函数 makeGreaterThanPredicate 返回的内部匿名函数，可以发现，该匿名内部函数使用 lowerBound，后者是传递给 makeGreaterThanPredicate 的参数。按照作用域的一般规则，当 makeGreaterThanPredicate 退出时，lowerBound 超出了作用域！但在这里，内部匿名函数仍然携带 lowerBound，甚至在 makeGreaterThanPredicate 退出之后的很长时间内仍然如此。这就是我们所说的闭包：因为内部函数关闭了定义它的环境（即外部函数的参数和本地变量）。\n\n开始可能感觉不到闭包的功能很强大。但如果应用恰当，它们就可以非常有创造性地帮您将想法转换成代码，这个过程非常有趣。在 JavaScript 中，闭包最有趣的用途之一是模拟类的私有变量。\n\n模拟私有属性\n-----------\n现在介绍闭包如何帮助模拟私有成员。正常情况下，无法从函数以外访问函数内的本地变量。函数退出之后，由于各种实际原因，该本地变量将永远消失。但是，如果该本地变量被内部函数的闭包捕获，它就会生存下来。这一事实是模拟 JavaScript 私有属性的关键。假设有一个 Person 类：\n\n``` JS\nfunction Person(name, age) {\n    this.getName = function() { return name; };\n    this.setName = function(newName) { name = newName; };\n    this.getAge = function() { return age; };\n    this.setAge = function(newAge) { age = newAge; };\n}\n```\n\n参数 name 和 age 是构造函数 Person 的本地变量。Person 返回时，name 和 age 应当永远消失。但是，它们被作为 Person 实例的方法而分配的四个内部函数捕获，实际上这会使 name 和 age 继续存在，但只能严格地通过这四个方法访问它们。因此，您可以：\n\n``` JS\nvar ray = new Person(“Ray”, 31);\nalert(ray.getName());\nalert(ray.getAge());\nray.setName(“Younger Ray”);\n// Instant rejuvenation!\nray.setAge(22);\nalert(ray.getName() + “ is now “ + ray.getAge() + \n      “ years old.”);\n```\n\n未在构造函数中初始化的私有成员可以成为构造函数的本地变量，如下所示：\n\n``` JS\nfunction Person(name, age) {\n    var occupation;\n    this.getOccupation = function() { return occupation; };\n    this.setOccupation = function(newOcc) { occupation = \n                         newOcc; };\n  \n    // accessors for name and age    \n}\n```\n\n注意，这些私有成员与我们期望从 C# 中产生的私有成员略有不同。在 C# 中，类的公用方法可以访问它的私有成员。但在 JavaScript 中，只能通过在其闭包内拥有这些私有成员的方法来访问私有成员（由于这些方法不同于普通的公用方法，它们通常被称为特权方法）。因此，在 Person 的公用方法中，仍然必须通过私有成员的特权访问器方法才能访问私有成员：\n\n``` JS\nPerson.prototype.somePublicMethod = function() {\n    // doesn’t work!\n    // alert(this.name);\n    // this one below works\n    alert(this.getName());\n};\n```\n\nDouglas Crockford 是著名的发现（或者也许是发布）使用闭包来模拟私有成员这一技术的第一人。他的网站 javascript.crockford.com 包含有关 JavaScript 的丰富信息，任何对 JavaScript 感兴趣的开发人员都应当仔细研读。\n\n从类继承\n---------\n到这里，我们已经了解了构造函数和原型对象如何使您在 JavaScript 中模拟类。您已经看到，原型链可以确保所有对象都有 Object.prototype 的公用方法，以及如何使用闭包来模拟类的私有成员。但这里还缺少点什么。您尚未看到如何从类派生，这在 C# 中是每天必做的工作。遗憾的是，在 JavaScript 中从类继承并非像在 C# 中键入冒号即可继承那样简单，它需要进行更多操作。另一方面，JavaScript 非常灵活，可以有很多从类继承的方式。\n例如，有一个基类 Pet，它有一个派生类 Dog，如图A4 所示。这个在 JavaScript 中如何实现呢？Pet 类很容易。您已经看见如何实现它了：\n\n\n![图A4-类图](/imgs/ooj-4.gif)\n\n``` JS\n// class Pet\nfunction Pet(name) {\n    this.getName = function() { return name; };\n    this.setName = function(newName) { name = newName; };\n}\n\nPet.prototype.toString = function() {\n    return “This pet’s name is: “ + this.getName();\n};\n// end of class Pet\n\nvar parrotty = new Pet(“Parrotty the Parrot”);\nalert(parrotty);\n```\n\n现在，如何创建从 Pet 派生的类 Dog 呢？在图A4 中可以看到，Dog 有另一个属性 breed，它改写了 Pet 的 toString 方法（注意，JavaScript 的约定是方法和属性名称使用 camel 大小写，而不是在 C# 中建议的 Pascal 大小写）。代码段B3 显示如何这样做。\n\n代码段B3-从PET类派生\n-------\n\n``` JS\n// class Dog : Pet \n// public Dog(string name, string breed)\nfunction Dog(name, breed) {\n    // think Dog : base(name) \n    Pet.call(this, name);\n    this.getBreed = function() { return breed; };\n    // Breed doesn’t change, obviously! It’s read only.\n    // this.setBreed = function(newBreed) { name = newName; };\n}\n\n// this makes Dog.prototype inherits\n// from Pet.prototype\nDog.prototype = new Pet();\n\n// remember that Pet.prototype.constructor\n// points to Pet. We want our Dog instances’\n// constructor to point to Dog.\nDog.prototype.constructor = Dog;\n\n// Now we override Pet.prototype.toString\nDog.prototype.toString = function() {\n    return “This dog’s name is: “ + this.getName() + \n        “, and its breed is: “ + this.getBreed();\n};\n// end of class Dog\n\nvar dog = new Dog(“Buddy”, “Great Dane”);\n// test the new toString()\nalert(dog);\n\n// Testing instanceof (similar to the is operator)\n// (dog is Dog)? yes\nalert(dog instanceof Dog);\n// (dog is Pet)? yes\nalert(dog instanceof Pet);\n// (dog is Object)? yes\nalert(dog instanceof Object);\n```\n\n所使用的原型 — 替换技巧正确设置了原型链，因此假如使用 C#，测试的实例将按预期运行。而且，特权方法仍然会按预期运行。\n\n\n模拟命名空间\n-------------\n\n在 C++ 和 C# 中，命名空间用于尽可能地减少名称冲突。例如，在 .NET Framework 中，命名空间有助于将 Microsoft.Build.Task.Message 类与 System.Messaging.Message 区分开来。JavaScript 没有任何特定语言功能来支持命名空间，但很容易使用对象来模拟命名空间。如果要创建一个 JavaScript 库，则可以将它们包装在命名空间内，而不需要定义全局函数和类，如下所示：\n\n``` JS\nvar MSDNMagNS = {};\n\nMSDNMagNS.Pet = function(name) { // code here };\nMSDNMagNS.Pet.prototype.toString = function() { // code };\n\nvar pet = new MSDNMagNS.Pet(“Yammer”);\n```\n\n命名空间的一个级别可能不是唯一的，因此可以创建嵌套的命名空间：\n\n``` JS\nvar MSDNMagNS = {};\n// nested namespace “Examples”\nMSDNMagNS.Examples = {}; \n\nMSDNMagNS.Examples.Pet = function(name) { // code };\nMSDNMagNS.Examples.Pet.prototype.toString = function() { // code };\n\nvar pet = new MSDNMagNS.Examples.Pet(“Yammer”);\n```\n\n可以想象，键入这些冗长的嵌套命名空间会让人很累。 幸运的是，库用户可以很容易地为命名空间指定更短的别名：\n\n``` JS\n// MSDNMagNS.Examples and Pet definition...\n\n// think “using Eg = MSDNMagNS.Examples;” \nvar Eg = MSDNMagNS.Examples;\nvar pet = new Eg.Pet(“Yammer”);\nalert(pet);\n```\n\n\n如果看一下 Microsoft AJAX 库的源代码，就会发现库的作者使用了类似的技术来实现命名空间（请参阅静态方法 Type.registerNamespace 的实现）。有关详细信息，请参与侧栏“OOP 和 ASP.NET AJAX”。\n\n应当这样编写 JavaScript 代码吗？\n----------------------------\n您已经看见 JavaScript 可以很好地支持面向对象的编程。尽管它是一种基于原型的语言，但它的灵活性和强大功能可以满足在其他流行语言中常见的基于类的编程风格。但问题是：是否应当这样编写 JavaScript 代码？在 JavaScript 中的编程方式是否应与 C# 或 C++ 中的编码方式相同？是否有更聪明的方式来模拟 JavaScript 中没有的功能？每种编程语言都各不相同，一种语言的最佳做法，对另一种语言而言则可能并非最佳。\n在 JavaScript 中，您已看到对象继承对象（与类继承类不同）。因此，使用静态继承层次结构建立很多类的方式可能并不适合 JavaScript。也许，就像 Douglas Crockford 在他的文章 Prototypal Inheritance in JavaScript 中说的那样，JavaScript 编程方式是建立原型对象，并使用下面的简单对象函数建立新的对象，而后者则继承原始对象：\n\n``` JS\nfunction object(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    }\n```\n\n然后，由于 JavaScript 中的对象是可延展的，因此可以方便地在创建对象之后，根据需要用新字段和新方法增大对象。\n\n这的确很好，但它不可否认的是，全世界大多数开发人员更熟悉基于类的编程。实际上，基于类的编程也会在这里出现。按照即将颁发的 ECMA-262 规范第 4 版（ECMA-262 是 JavaScript 的官方规范），JavaScript 2.0 将拥有真正的类。因此，JavaScript 正在发展成为基于类的语言。但是，数年之后 JavaScript 2.0 才可能会被广泛使用。同时，必须清楚当前的 JavaScript 完全可以用基于原型的风格和基于类的风格读取和写入 JavaScript 代码。\n\n...更多内容请看下篇文章\n\n## 四、作者总结\n\n　　面向对象的JAVASCRIPT编程技术极大的拓展了JAVASCRIPT的应用。对WEB2.0的发展起到了关键性的作用。作为新一代的IT农民工，学习掌握这门奇特的语言将在未来的工作中受益匪浅。\n\n　　随着交互式胖客户端 AJAX 应用程序的广泛使用，越来越多的程序员开始学习和使用JAVASCRIPT，我也将在未来一段时间内不断的学习使用JAVASCRIPT更多的与ASP.NET之间的结合。\n\n　　本文献给刚出茅庐的农民工们！希望大家在城市的建设中发挥自己最大的能量。\n\n　　本文作者：朱峰（Peter Zhu）\n\n　　发表时间：2010-05-31\n\n## 五、本文参考引用文章列表\n\n1. 使用面向对象的技术创建高级Web 应用程序 http://msdn.microsoft.com/zh-cn/magazine/cc163419.aspx\n\n2. 百度知道 http://baike.baidu.com/view/125370.htm \n\n3. OOJ-面向对象的JAVASCRIPT - [PeterZhu](http://www.cnblogs.com/taoqianbao/archive/2010/05/31/OOJ.html)\n\n","slug":"javascript/OOJ-ONE","published":1,"updated":"2018-01-05T03:56:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2n000xfme32hgfqdze","content":"<p>现代编程都有一个共性，无任是新语言，还是发展健全的语言，都有一套面向对象编程的理论。<br>WEB前端开发的JAVASCRIPT也不例外。最近着迷发展的JAVASCRIPT，也想把自己的想法和前人的经验总结下，让更多的IT农民工学习研究。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、面向对象的基础理论\"><a href=\"#一、面向对象的基础理论\" class=\"headerlink\" title=\"一、面向对象的基础理论\"></a>一、面向对象的基础理论</h2><p>百度知道里讲诉的已经非常清晰, <a href=\"http://baike.baidu.com/view/125370.htm\" target=\"_blank\" rel=\"noopener\">更多详情</a> ，这里纯理论的知识大家就自我学习。</p>\n<h2 id=\"二、OOJ概述\"><a href=\"#二、OOJ概述\" class=\"headerlink\" title=\"二、OOJ概述\"></a>二、OOJ概述</h2><p>javascript面向对象编程与一般的C++,C#等开发语言结构还不一致。它即面向对象，又类似于一般的结构性语言。</p>\n<h3 id=\"JavaScript-对象是词典\"><a href=\"#JavaScript-对象是词典\" class=\"headerlink\" title=\"JavaScript 对象是词典\"></a>JavaScript 对象是词典</h3><p>在 C++ 或 C# 中，在谈论对象时，是指类或结构的实例。对象有不同的属性和方法，具体取决于将它们实例化的模板（即类）。而 JavaScript 对象却不是这样。在 JavaScript 中，对象只是一组名称/值对，就是说，将 JavaScript 对象视为包含字符串关键字的词典。我们可以使用熟悉的“.”（点）运算符或“[]”运算符，来获得和设置对象的属性，这是在处理词典时通常采用的方法。以下代码段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userObject = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">userObject.lastLoginTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">alert(userObject.lastLoginTime);</span><br></pre></td></tr></table></figure>\n<p>的功能与下面的代码段完全相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userObject = &#123;&#125;; <span class=\"comment\">// equivalent to new Object()</span></span><br><span class=\"line\">userObject[“lastLoginTime”] = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">alert(userObject[“lastLoginTime”]);</span><br></pre></td></tr></table></figure>\n<p> 我们还可以直接在 userObject 的定义中定义 lastLoginTime 属性，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userObject = &#123; “lastLoginTime”: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;;</span><br><span class=\"line\">alert(userObject.lastLoginTime);</span><br></pre></td></tr></table></figure>\n<p>这里大家需要注意的是： JavaScript 对象/词典只接受字符串关键字</p>\n<p>如果记住 JavaScript 对象是词典，您就不会对此感到吃惊了，毕竟，我们一直在向词典添加新关键字（和其各自的值）。</p>\n<p>接下来，我们了解下JAVASCRIPT的对象方法，若要理解对象方法，首先需要仔细了解一下 JavaScript 函数。</p>\n<h3 id=\"JavaScript-函数的奇特性\"><a href=\"#JavaScript-函数的奇特性\" class=\"headerlink\" title=\"JavaScript 函数的奇特性\"></a>JavaScript 函数的奇特性</h3><p>大家了解的很多编程语言中，函数和对象通常被视为两样不同的东西。在 JavaScript 中，其差别很模糊 — JavaScript 函数实际上是具有与它关联的可执行代码的对象。请如此看待普通函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func(“blah”);</span><br></pre></td></tr></table></figure>\n<p> 这就是通常在 JavaScript 中定义函数的方法。但是，还可以按以下方法定义该函数，您在此创建匿名函数对象，并将它赋给变量 func<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func(“blah2”);</span><br></pre></td></tr></table></figure></p>\n<p> 甚至也可以像下面这样，使用 Function 构造函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(“x”, “alert(x);”);</span><br><span class=\"line\">func(“blah3”);</span><br></pre></td></tr></table></figure></p>\n<p> 此示例表明函数实际上只是支持函数调用操作的对象。最后一个使用 Function 构造函数来定义函数的方法并不常用，但它展示的可能性非常有趣，因为您可能注意到，该函数的主体正是 Function 构造函数的 String 参数。这意味着，您可以在运行时构造任意函数。</p>\n<p>为了进一步演示函数是对象，您可以像对其他任何 JavaScript 对象一样，在函数中设置或添加属性： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(“Hi, “ + x + “!”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHi.text = “Hello World!”;</span><br><span class=\"line\">sayHi[“text2”] = “Hello World... again.”;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sayHi[“text”]); <span class=\"comment\">// displays “Hello World!”</span></span><br><span class=\"line\">alert(sayHi.text2); <span class=\"comment\">// displays “Hello World... again.”</span></span><br></pre></td></tr></table></figure>\n<p>作为对象，函数还可以赋给变量、作为参数传递给其他函数、作为其他函数的值返回，并可以作为对象的属性或数组的元素进行存储等等。下面提供了这样一个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// assign an anonymous function to a variable</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(“Hello, “ + x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greet(“MSDN readers”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// passing a function as an argument to another</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operateOn</span>(<span class=\"params\">num, func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// displays 256</span></span><br><span class=\"line\">alert(operateOn(<span class=\"number\">16</span>, square));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions as return values</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeIncrementer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = makeIncrementer();</span><br><span class=\"line\"><span class=\"comment\">// displays 8</span></span><br><span class=\"line\">alert(inc(<span class=\"number\">7</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions stored as array elements</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = arr[<span class=\"number\">0</span>](<span class=\"number\">2</span>);</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = arr[<span class=\"number\">0</span>](arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = arr[<span class=\"number\">0</span>](arr[<span class=\"number\">2</span>]);</span><br><span class=\"line\"><span class=\"comment\">// displays 256</span></span><br><span class=\"line\">alert(arr[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions as object properties</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; “toString” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> “This is an object.”; &#125; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// calls obj.toString()</span></span><br><span class=\"line\">alert(obj);</span><br></pre></td></tr></table></figure>\n<p>记住这一点后，向对象添加方法将是很容易的事情：只需选择名称，然后将函数赋给该名称。因此，我通过将匿名函数分别赋给相应的方法名称，在对象中定义了三个方法： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDog = &#123;</span><br><span class=\"line\">    “name” : “Spot”,</span><br><span class=\"line\">    “bark” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; alert(“Woof!”); &#125;,</span><br><span class=\"line\">    “displayFullName” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + “ The Alpha Dog”);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    “chaseMrPostman” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// implementation beyond the scope of this article </span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myDog.displayFullName(); </span><br><span class=\"line\">myDog.bark(); <span class=\"comment\">// Woof!</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`        </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">C++/C# 开发人员应当很熟悉 displayFullName 函数中使用的“this”关键字 — 它引用一个对象，通过对象调用方法（使用 Visual Basic 的开发人员也应当很熟悉它，它在 Visual Basic 中叫做“Me”）。因此在上面的示例中，displayFullName 中的“this”的值是 myDog 对象。但是，“this”的值不是静态的。通过不同对象调用“this”时，它的值也会更改以便指向相应的对象，如下所示。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### “this”随对象更改而更改</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayQuote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// the value of “this” will change; depends on </span></span><br><span class=\"line\">    <span class=\"comment\">// which object it is called through</span></span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.memorableQuote);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> williamShakespeare = &#123;</span><br><span class=\"line\">    “memorableQuote”: “It is a wise father that knows his own child.”, </span><br><span class=\"line\">    “sayIt” : displayQuote</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> markTwain = &#123;</span><br><span class=\"line\">    “memorableQuote”: “Golf is a good walk spoiled.”, </span><br><span class=\"line\">    “sayIt” : displayQuote</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oscarWilde = &#123;</span><br><span class=\"line\">    “memorableQuote”: “True friends stab you <span class=\"keyword\">in</span> the front.” </span><br><span class=\"line\">    <span class=\"comment\">// we can call the function displayQuote</span></span><br><span class=\"line\">    <span class=\"comment\">// as a method of oscarWilde without assigning it </span></span><br><span class=\"line\">    <span class=\"comment\">// as oscarWilde’s method. </span></span><br><span class=\"line\">    <span class=\"comment\">//”sayIt” : displayQuote</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">williamShakespeare.sayIt(); <span class=\"comment\">// true, true</span></span><br><span class=\"line\">markTwain.sayIt(); <span class=\"comment\">// he didn’t know where to play golf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// watch this, each function has a method call()</span></span><br><span class=\"line\"><span class=\"comment\">// that allows the function to be called as a </span></span><br><span class=\"line\"><span class=\"comment\">// method of the object passed to call() as an</span></span><br><span class=\"line\"><span class=\"comment\">// argument. </span></span><br><span class=\"line\"><span class=\"comment\">// this line below is equivalent to assigning</span></span><br><span class=\"line\"><span class=\"comment\">// displayQuote to sayIt, and calling oscarWilde.sayIt().</span></span><br><span class=\"line\">displayQuote.call(oscarWilde); <span class=\"comment\">// ouch!</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中最后一行表示的是将函数作为对象的方法进行调用的另一种方式。请记住，JavaScript 中的函数是对象。每个函数对象都有一个名为 call 的方法，它将函数作为第一个参数的方法进行调用。就是说，作为函数第一个参数传递给 call 的任何对象都将在函数调用中成为“this”的值。这一技术对于调用基类构造函数来说非常有用，稍后将对此进行介绍。</p>\n<p>有一点需要记住，绝不要调用包含“this”（却没有所属对象）的函数。否则，将违反全局命名空间，因为在该调用中，“this”将引用全局对象，而这必然会给您的应用程序带来灾难。例如，下面的脚本将更改 JavaScript 的全局函数 isNaN 的行为。一定不要这样做！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(“<span class=\"literal\">NaN</span> is <span class=\"literal\">NaN</span>: “ + <span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> “not anymore!”;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// alert!!! trampling the Global object!!!</span></span><br><span class=\"line\">x();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(“<span class=\"literal\">NaN</span> is <span class=\"literal\">NaN</span>: “ + <span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>));</span><br></pre></td></tr></table></figure>\n<p>到这里，我们已经介绍了如何创建对象，包括它的属性和方法。但如果注意上面的所有代码段，您会发现属性和方法是在对象定义本身中进行硬编码的。但如果需要更好地控制对象的创建，该怎么做呢？例如，您可能需要根据某些参数来计算对象的属性值。或者，可能需要将对象的属性初始化为仅在运行时才能获得的值。也可能需要创建对象的多个实例（此要求非常常见）。</p>\n<pre><code>在 C# 中，我们使用类来实例化对象实例。但 JavaScript 与此不同，因为它没有类。您将在下一节中看到，您可以充分利用这一情况：函数在与“new”运算符一起使用时，函数将充当构造函数。\n</code></pre><h3 id=\"构造函数而不是类\"><a href=\"#构造函数而不是类\" class=\"headerlink\" title=\"构造函数而不是类\"></a>构造函数而不是类</h3><p>前面提到过，有关 JavaScript OOP 的最奇怪的事情是，JavaScript 不像 C# 或 C++ 那样，它没有类。在 C# 中，在执行类似下面的操作时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog spot = <span class=\"keyword\">new</span> Dog();</span><br></pre></td></tr></table></figure></p>\n<p>将返回一个对象，该对象是 Dog 类的实例。但在 JavaScript 中，本来就没有类。与访问类最近似的方法是定义构造函数，如下所示：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DogConstructor</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.respondTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == name) &#123;</span><br><span class=\"line\">            alert(“Woof”);        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> DogConstructor(“Spot”);</span><br><span class=\"line\">spot.respondTo(“Rover”); <span class=\"comment\">// nope</span></span><br><span class=\"line\">spot.respondTo(“Spot”); <span class=\"comment\">// yeah!</span></span><br></pre></td></tr></table></figure>\n<p>那么，结果会怎样呢？暂时忽略 DogConstructor 函数定义，看一看这一行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> DogConstructor(“Spot”);</span><br></pre></td></tr></table></figure></p>\n<p>“new”运算符执行的操作很简单。首先，它创建一个新的空对象。然后执行紧随其后的函数调用，将新的空对象设置为该函数中“this”的值。换句话说，可以认为上面这行包含“new”运算符的代码与下面两行代码的功能相当： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create an empty object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = &#123;&#125;; </span><br><span class=\"line\"><span class=\"comment\">// call the function as a method of the empty object</span></span><br><span class=\"line\">DogConstructor.call(spot, “Spot”);</span><br></pre></td></tr></table></figure>\n<p>正如在 DogConstructor 主体中看到的那样，调用此函数将初始化对象，在调用期间关键字“this”将引用此对象。这样，就可以为对象创建模板！只要需要创建类似的对象，就可以与构造函数一起调用“new”，返回的结果将是一个完全初始化的对象。这与类非常相似，不是吗？实际上，在 JavaScript 中构造函数的名称通常就是所模拟的类的名称，因此在上面的示例中，可以直接命名构造函数 Dog：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Think of this as class Dog</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// instance variable </span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"comment\">// instance method? Hmmm...</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.respondTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == name) &#123;</span><br><span class=\"line\">            alert(“Woof”);        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> Dog(“Spot”);</span><br></pre></td></tr></table></figure>\n<p>在上面的 Dog 定义中，我定义了名为 name 的实例变量。使用 Dog 作为其构造函数所创建的每个对象都有它自己的实例变量名称副本（前面提到过，它就是对象词典的条目）。这就是希望的结果。毕竟，每个对象都需要它自己的实例变量副本来表示其状态。但如果看看下一行，就会发现每个 Dog 实例也都有它自己的 respondTo 方法副本，这是个浪费；您只需要一个可供各个 Dog 实例共享的 respondTo 实例！通过在 Dog 以外定义 respondTo，可以避免此问题，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">respondTo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// respondTo definition</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"comment\">// attached this function as a method of the object</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.respondTo = respondTo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，所有 Dog 实例（即用构造函数 Dog 创建的所有实例）都可以共享 respondTo 方法的一个实例。但随着方法数的增加，维护工作将越来越难。最后，基本代码中将有很多全局函数，而且随着“类”的增加，事情只会变得更加糟糕（如果它们的方法具有相似的名称，则尤甚）。但使用原型对象可以更好地解决这个问题，这是下一节的主题。</p>\n<h2 id=\"三、Javascript核心理论原型\"><a href=\"#三、Javascript核心理论原型\" class=\"headerlink\" title=\"三、Javascript核心理论原型\"></a>三、Javascript核心理论原型</h2><p>在使用 JavaScript 的面向对象编程中，原型对象是个核心概念。在 JavaScript 中对象是作为现有示例（即原型）对象的副本而创建的，该名称就来自于这一概念。此原型对象的任何属性和方法都将显示为从原型的构造函数创建的对象的属性和方法。可以说，这些对象从其原型继承了属性和方法。当您创建如下所示的新 Dog 对象时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buddy = <span class=\"keyword\">new</span> Dog(“Buddy“);</span><br></pre></td></tr></table></figure></p>\n<p>buddy 所引用的对象将从它的原型继承属性和方法，尽管仅从这一行可能无法明确判断原型来自哪里。对象 buddy 的原型来自构造函数（在这里是函数 Dog）的属性。</p>\n<p>在 JavaScript 中，每个函数都有名为“prototype”的属性，用于引用原型对象。此原型对象又有名为“constructor”的属性，它反过来引用函数本身。这是一种循环引用，图A1 更好地说明了这种循环关系。</p>\n<p><img src=\"/imgs/ooj-1.gif\" alt=\"图A1 每个函数的原型都有一个 Constructor 属性\"></p>\n<p>现在，通过“new”运算符用函数（上面示例中为 Dog）创建对象时，所获得的对象将继承 Dog.prototype 的属性。在图A1 中，可以看到 Dog.prototype 对象有一个回指 Dog 函数的构造函数属性。这样，每个 Dog 对象（从 Dog.prototype 继承而来）都有一个回指 Dog 函数的构造函数属性。代码段B1 中的代码证实了这一点。图A2 显示了构造函数、原型对象以及用它们创建的对象之间的这一关系。</p>\n<h1 id=\"代码段B1\"><a href=\"#代码段B1\" class=\"headerlink\" title=\"代码段B1\"></a>代码段B1</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> Dog(“Spot”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dog.prototype is the prototype of spot</span></span><br><span class=\"line\">alert(Dog.prototype.isPrototypeOf(spot));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spot inherits the constructor property</span></span><br><span class=\"line\"><span class=\"comment\">// from Dog.prototype</span></span><br><span class=\"line\">alert(spot.constructor == Dog.prototype.constructor);</span><br><span class=\"line\">alert(spot.constructor == Dog);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// But constructor property doesn’t belong</span></span><br><span class=\"line\"><span class=\"comment\">// to spot. The line below displays “false”</span></span><br><span class=\"line\">alert(spot.hasOwnProperty(“<span class=\"keyword\">constructor</span>”));</span><br><span class=\"line\"></span><br><span class=\"line\">// The <span class=\"keyword\">constructor</span> property belongs to Dog.prototype</span><br><span class=\"line\">// The line below displays “true”</span><br><span class=\"line\">alert(Dog.prototype.hasOwnProperty(“<span class=\"keyword\">constructor</span>”));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/imgs/ooj-2.gif\" alt=\"图A2-实例继承其原型\"></p>\n<p>某些读者可能已经注意到代码段B1 中对 hasOwnProperty 和 isPrototypeOf 方法的调用。这些方法是从哪里来的呢？它们不是来自 Dog.prototype。实际上，在 Dog.prototype 和 Dog 实例中还可以调用其他方法，比如 toString、toLocaleString 和 valueOf，但它们都不来自 Dog.prototype。您会发现，就像 .NET Framework 中的 System.Object 充当所有类的最终基类一样，JavaScript 中的 Object.prototype 是所有原型的最终基础原型。（Object.prototype 的原型是 null。）<br>在此示例中，请记住 Dog.prototype 是对象。它是通过调用 Object 构造函数创建的（尽管它不可见）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>因此，正如 Dog 实例继承 Dog.prototype 一样，Dog.prototype 继承 Object.prototype。这使得所有 Dog 实例也继承了 Object.prototype 的方法和属性。<br>每个 JavaScript 对象都继承一个原型链，而所有原型都终止于 Object.prototype。注意，迄今为止您看到的这种继承是活动对象之间的继承。它不同于继承的常见概念，后者是指在声明类时类之间的发生的继承。因此，JavaScript 继承动态性更强。它使用简单算法实现这一点，如下所示：当您尝试访问对象的属性/方法时，JavaScript 将检查该属性/方法是否是在该对象中定义的。如果不是，则检查对象的原型。如果还不是，则检查该对象的原型的原型，如此继续，一直检查到 Object.prototype。<br>图A3 说明了此解析过程。</p>\n<p><img src=\"/imgs/ooj-3.gif\" alt=\"图A3 在原型链中解析 toString() 方法\"></p>\n<p>JavaScript 动态地解析属性访问和方法调用的方式产生了一些特殊效果：</p>\n<ul>\n<li>继承原型对象的对象上可以立即呈现对原型所做的更改，即使是在创建这些对象之后。</li>\n<li>如果在对象中定义了属性/方法 X，则该对象的原型中将隐藏同名的属性/方法。例如，通过在 Dog.prototype 中定义 toString 方法，可以改写 Object.prototype 的 toString 方法。</li>\n<li>更改只沿一个方向传递，即从原型到它的派生对象，但不能沿相反方向传递。</li>\n</ul>\n<p>代码段B2 说明了这些效果。B2还显示了如何解决前面遇到的不需要的方法实例的问题。通过将方法放在原型内部，可以使对象共享方法，而不必使每个对象都有单独的函数对象实例。在此示例中，rover 和 spot 共享 getBreed 方法，直至在 spot 中以任何方式改写 toString 方法。此后，spot 有了它自己版本的 getBreed 方法，但 rover 对象和用新 GreatDane 创建的后续对象仍将共享在 GreatDane.prototype 对象中定义的那个 getBreed 方法实例。</p>\n<h2 id=\"代码段B2-继承原型\"><a href=\"#代码段B2-继承原型\" class=\"headerlink\" title=\"代码段B2-继承原型\"></a>代码段B2-继承原型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GreatDane</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rover = <span class=\"keyword\">new</span> GreatDane();</span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> GreatDane();</span><br><span class=\"line\"></span><br><span class=\"line\">GreatDane.prototype.getBreed = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “Great Dane”;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Works, even though at this point</span></span><br><span class=\"line\"><span class=\"comment\">// rover and spot are already created.</span></span><br><span class=\"line\">alert(rover.getBreed());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this hides getBreed() in GreatDane.prototype</span></span><br><span class=\"line\">spot.getBreed = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “Little Great Dane”;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(spot.getBreed()); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// but of course, the change to getBreed </span></span><br><span class=\"line\"><span class=\"comment\">// doesn’t propagate back to GreatDane.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// and other objects inheriting from it,</span></span><br><span class=\"line\"><span class=\"comment\">// it only happens in the spot object</span></span><br><span class=\"line\">alert(rover.getBreed());</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态属性和方法\"><a href=\"#静态属性和方法\" class=\"headerlink\" title=\"静态属性和方法\"></a>静态属性和方法</h3><p>有时，您需要绑定到类而不是实例的属性或方法，也就是，静态属性和方法。在 JavaScript 中很容易做到这一点，因为函数是可以按需要设置其属性和方法的对象。由于在 JavaScript 中构造函数表示类，因此可以通过在构造函数中设置静态方法和属性，直接将它们添加到类中，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DateTime</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set static method now()</span></span><br><span class=\"line\">    DateTime.now = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(DateTime.now());</span><br></pre></td></tr></table></figure>\n<p>在 JavaScript 中调用静态方法的语法与在 C# 中几乎完全相同。这不应当让人感到吃惊，因为构造函数的名称实际上是类的名称。这样，就有了类、公用属性/方法，以及静态属性/方法。还需要其他什么吗？当然，私有成员。但 JavaScript 本身并不支持私有成员（同样，也不支持受保护成员）。任何人都可以访问对象的所有属性和方法。但我们有办法让类中包含私有成员，但在此之前，您首先需要理解闭包。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>不了解JAVASCRIPT就不要说JAVASCRIPT多么的简单或有多么的难学。JavaScript 实际上是功能强大、表现力强而且非常简练的语言。它甚至具有其他更流行的语言才刚刚开始支持的功能。<br>JavaScript 的更高级功能之一是它支持闭包，这是 C# 2.0 通过它的匿名方法支持的功能。闭包是当内部函数（或 C# 中的内部匿名方法）绑定到它的外部函数的本地变量时所发生的运行时现象。很明显，除非此内部函数以某种方式可被外部函数访问，否则它没有多少意义。示例可以更好说明这一点。<br>假设需要根据一个简单条件筛选一个数字序列，这个条件是：只有大于 100 的数字才能通过筛选，并忽略其余数字。为此，可以编写类似代码段B3 中的函数。</p>\n<h1 id=\"代码段B3-根据谓词筛选元素\"><a href=\"#代码段B3-根据谓词筛选元素\" class=\"headerlink\" title=\"代码段B3 -根据谓词筛选元素\"></a>代码段B3 -根据谓词筛选元素</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\">pred, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filtered = []; <span class=\"comment\">// shorter version of new Array();</span></span><br><span class=\"line\">    <span class=\"comment\">// iterate through every element in the array...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = arr[i];</span><br><span class=\"line\">        <span class=\"comment\">// if the element satisfies the predicate let it through</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pred(val)) &#123;</span><br><span class=\"line\">            filtered.push(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filtered;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someRandomNumbers = [<span class=\"number\">12</span>, <span class=\"number\">32</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">234</span>, <span class=\"number\">236</span>, <span class=\"number\">632</span>,<span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> numbersGreaterThan100 = filter(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x &gt; <span class=\"number\">100</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; &#125;, </span><br><span class=\"line\">    someRandomNumbers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// displays 234, 236, 632</span></span><br><span class=\"line\">alert(numbersGreaterThan100);</span><br></pre></td></tr></table></figure>\n<p>但是，现在要创建不同的筛选条件，假设这次只有大于 300 的数字才能通过筛选，则可以编写下面这样的函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greaterThan300 = filter(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x &gt; <span class=\"number\">300</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; &#125;, </span><br><span class=\"line\">    someRandomNumbers);</span><br></pre></td></tr></table></figure></p>\n<p>然后，也许需要筛选大于 50、25、10、600 如此等等的数字，但作为一个聪明人，您会发现它们全部都有相同的谓词“greater than”，只有数字不同。因此，可以用类似下面的函数分开各个数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeGreaterThanPredicate</span>(<span class=\"params\">lowerBound</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numberToCheck</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (numberToCheck &gt; lowerBound) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，您就可以编写以下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greaterThan10 = makeGreaterThanPredicate(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> greaterThan100 = makeGreaterThanPredicate(<span class=\"number\">100</span>);</span><br><span class=\"line\">alert(filter(greaterThan10, someRandomNumbers));</span><br><span class=\"line\">alert(filter(greaterThan100, someRandomNumbers));</span><br></pre></td></tr></table></figure></p>\n<p>通过观察函数 makeGreaterThanPredicate 返回的内部匿名函数，可以发现，该匿名内部函数使用 lowerBound，后者是传递给 makeGreaterThanPredicate 的参数。按照作用域的一般规则，当 makeGreaterThanPredicate 退出时，lowerBound 超出了作用域！但在这里，内部匿名函数仍然携带 lowerBound，甚至在 makeGreaterThanPredicate 退出之后的很长时间内仍然如此。这就是我们所说的闭包：因为内部函数关闭了定义它的环境（即外部函数的参数和本地变量）。</p>\n<p>开始可能感觉不到闭包的功能很强大。但如果应用恰当，它们就可以非常有创造性地帮您将想法转换成代码，这个过程非常有趣。在 JavaScript 中，闭包最有趣的用途之一是模拟类的私有变量。</p>\n<h2 id=\"模拟私有属性\"><a href=\"#模拟私有属性\" class=\"headerlink\" title=\"模拟私有属性\"></a>模拟私有属性</h2><p>现在介绍闭包如何帮助模拟私有成员。正常情况下，无法从函数以外访问函数内的本地变量。函数退出之后，由于各种实际原因，该本地变量将永远消失。但是，如果该本地变量被内部函数的闭包捕获，它就会生存下来。这一事实是模拟 JavaScript 私有属性的关键。假设有一个 Person 类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> name; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newName</span>) </span>&#123; name = newName; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> age; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newAge</span>) </span>&#123; age = newAge; &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数 name 和 age 是构造函数 Person 的本地变量。Person 返回时，name 和 age 应当永远消失。但是，它们被作为 Person 实例的方法而分配的四个内部函数捕获，实际上这会使 name 和 age 继续存在，但只能严格地通过这四个方法访问它们。因此，您可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ray = <span class=\"keyword\">new</span> Person(“Ray”, <span class=\"number\">31</span>);</span><br><span class=\"line\">alert(ray.getName());</span><br><span class=\"line\">alert(ray.getAge());</span><br><span class=\"line\">ray.setName(“Younger Ray”);</span><br><span class=\"line\"><span class=\"comment\">// Instant rejuvenation!</span></span><br><span class=\"line\">ray.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\">alert(ray.getName() + “ is now “ + ray.getAge() + </span><br><span class=\"line\">      “ years old.”);</span><br></pre></td></tr></table></figure>\n<p>未在构造函数中初始化的私有成员可以成为构造函数的本地变量，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> occupation;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getOccupation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> occupation; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setOccupation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newOcc</span>) </span>&#123; occupation = </span><br><span class=\"line\">                         newOcc; &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// accessors for name and age    </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，这些私有成员与我们期望从 C# 中产生的私有成员略有不同。在 C# 中，类的公用方法可以访问它的私有成员。但在 JavaScript 中，只能通过在其闭包内拥有这些私有成员的方法来访问私有成员（由于这些方法不同于普通的公用方法，它们通常被称为特权方法）。因此，在 Person 的公用方法中，仍然必须通过私有成员的特权访问器方法才能访问私有成员：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.somePublicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// doesn’t work!</span></span><br><span class=\"line\">    <span class=\"comment\">// alert(this.name);</span></span><br><span class=\"line\">    <span class=\"comment\">// this one below works</span></span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.getName());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Douglas Crockford 是著名的发现（或者也许是发布）使用闭包来模拟私有成员这一技术的第一人。他的网站 javascript.crockford.com 包含有关 JavaScript 的丰富信息，任何对 JavaScript 感兴趣的开发人员都应当仔细研读。</p>\n<h2 id=\"从类继承\"><a href=\"#从类继承\" class=\"headerlink\" title=\"从类继承\"></a>从类继承</h2><p>到这里，我们已经了解了构造函数和原型对象如何使您在 JavaScript 中模拟类。您已经看到，原型链可以确保所有对象都有 Object.prototype 的公用方法，以及如何使用闭包来模拟类的私有成员。但这里还缺少点什么。您尚未看到如何从类派生，这在 C# 中是每天必做的工作。遗憾的是，在 JavaScript 中从类继承并非像在 C# 中键入冒号即可继承那样简单，它需要进行更多操作。另一方面，JavaScript 非常灵活，可以有很多从类继承的方式。<br>例如，有一个基类 Pet，它有一个派生类 Dog，如图A4 所示。这个在 JavaScript 中如何实现呢？Pet 类很容易。您已经看见如何实现它了：</p>\n<p><img src=\"/imgs/ooj-4.gif\" alt=\"图A4-类图\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Pet</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> name; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newName</span>) </span>&#123; name = newName; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pet.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “This pet’s name is: “ + <span class=\"keyword\">this</span>.getName();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// end of class Pet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> parrotty = <span class=\"keyword\">new</span> Pet(“Parrotty the Parrot”);</span><br><span class=\"line\">alert(parrotty);</span><br></pre></td></tr></table></figure>\n<p>现在，如何创建从 Pet 派生的类 Dog 呢？在图A4 中可以看到，Dog 有另一个属性 breed，它改写了 Pet 的 toString 方法（注意，JavaScript 的约定是方法和属性名称使用 camel 大小写，而不是在 C# 中建议的 Pascal 大小写）。代码段B3 显示如何这样做。</p>\n<h2 id=\"代码段B3-从PET类派生\"><a href=\"#代码段B3-从PET类派生\" class=\"headerlink\" title=\"代码段B3-从PET类派生\"></a>代码段B3-从PET类派生</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Dog : Pet </span></span><br><span class=\"line\"><span class=\"comment\">// public Dog(string name, string breed)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, breed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// think Dog : base(name) </span></span><br><span class=\"line\">    Pet.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getBreed = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> breed; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// Breed doesn’t change, obviously! It’s read only.</span></span><br><span class=\"line\">    <span class=\"comment\">// this.setBreed = function(newBreed) &#123; name = newName; &#125;;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this makes Dog.prototype inherits</span></span><br><span class=\"line\"><span class=\"comment\">// from Pet.prototype</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Pet();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// remember that Pet.prototype.constructor</span></span><br><span class=\"line\"><span class=\"comment\">// points to Pet. We want our Dog instances’</span></span><br><span class=\"line\"><span class=\"comment\">// constructor to point to Dog.</span></span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Now we override Pet.prototype.toString</span></span><br><span class=\"line\">Dog.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “This dog’s name is: “ + <span class=\"keyword\">this</span>.getName() + </span><br><span class=\"line\">        “, and its breed is: “ + <span class=\"keyword\">this</span>.getBreed();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// end of class Dog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(“Buddy”, “Great Dane”);</span><br><span class=\"line\"><span class=\"comment\">// test the new toString()</span></span><br><span class=\"line\">alert(dog);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Testing instanceof (similar to the is operator)</span></span><br><span class=\"line\"><span class=\"comment\">// (dog is Dog)? yes</span></span><br><span class=\"line\">alert(dog <span class=\"keyword\">instanceof</span> Dog);</span><br><span class=\"line\"><span class=\"comment\">// (dog is Pet)? yes</span></span><br><span class=\"line\">alert(dog <span class=\"keyword\">instanceof</span> Pet);</span><br><span class=\"line\"><span class=\"comment\">// (dog is Object)? yes</span></span><br><span class=\"line\">alert(dog <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure>\n<p>所使用的原型 — 替换技巧正确设置了原型链，因此假如使用 C#，测试的实例将按预期运行。而且，特权方法仍然会按预期运行。</p>\n<h2 id=\"模拟命名空间\"><a href=\"#模拟命名空间\" class=\"headerlink\" title=\"模拟命名空间\"></a>模拟命名空间</h2><p>在 C++ 和 C# 中，命名空间用于尽可能地减少名称冲突。例如，在 .NET Framework 中，命名空间有助于将 Microsoft.Build.Task.Message 类与 System.Messaging.Message 区分开来。JavaScript 没有任何特定语言功能来支持命名空间，但很容易使用对象来模拟命名空间。如果要创建一个 JavaScript 库，则可以将它们包装在命名空间内，而不需要定义全局函数和类，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MSDNMagNS = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">MSDNMagNS.Pet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"comment\">// code here &#125;;</span></span><br><span class=\"line\">MSDNMagNS.Pet.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// code &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> MSDNMagNS.Pet(“Yammer”);</span><br></pre></td></tr></table></figure>\n<p>命名空间的一个级别可能不是唯一的，因此可以创建嵌套的命名空间：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MSDNMagNS = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// nested namespace “Examples”</span></span><br><span class=\"line\">MSDNMagNS.Examples = &#123;&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">MSDNMagNS.Examples.Pet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"comment\">// code &#125;;</span></span><br><span class=\"line\">MSDNMagNS.Examples.Pet.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// code &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> MSDNMagNS.Examples.Pet(“Yammer”);</span><br></pre></td></tr></table></figure>\n<p>可以想象，键入这些冗长的嵌套命名空间会让人很累。 幸运的是，库用户可以很容易地为命名空间指定更短的别名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MSDNMagNS.Examples and Pet definition...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// think “using Eg = MSDNMagNS.Examples;” </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Eg = MSDNMagNS.Examples;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> Eg.Pet(“Yammer”);</span><br><span class=\"line\">alert(pet);</span><br></pre></td></tr></table></figure>\n<p>如果看一下 Microsoft AJAX 库的源代码，就会发现库的作者使用了类似的技术来实现命名空间（请参阅静态方法 Type.registerNamespace 的实现）。有关详细信息，请参与侧栏“OOP 和 ASP.NET AJAX”。</p>\n<h2 id=\"应当这样编写-JavaScript-代码吗？\"><a href=\"#应当这样编写-JavaScript-代码吗？\" class=\"headerlink\" title=\"应当这样编写 JavaScript 代码吗？\"></a>应当这样编写 JavaScript 代码吗？</h2><p>您已经看见 JavaScript 可以很好地支持面向对象的编程。尽管它是一种基于原型的语言，但它的灵活性和强大功能可以满足在其他流行语言中常见的基于类的编程风格。但问题是：是否应当这样编写 JavaScript 代码？在 JavaScript 中的编程方式是否应与 C# 或 C++ 中的编码方式相同？是否有更聪明的方式来模拟 JavaScript 中没有的功能？每种编程语言都各不相同，一种语言的最佳做法，对另一种语言而言则可能并非最佳。<br>在 JavaScript 中，您已看到对象继承对象（与类继承类不同）。因此，使用静态继承层次结构建立很多类的方式可能并不适合 JavaScript。也许，就像 Douglas Crockford 在他的文章 Prototypal Inheritance in JavaScript 中说的那样，JavaScript 编程方式是建立原型对象，并使用下面的简单对象函数建立新的对象，而后者则继承原始对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后，由于 JavaScript 中的对象是可延展的，因此可以方便地在创建对象之后，根据需要用新字段和新方法增大对象。</p>\n<p>这的确很好，但它不可否认的是，全世界大多数开发人员更熟悉基于类的编程。实际上，基于类的编程也会在这里出现。按照即将颁发的 ECMA-262 规范第 4 版（ECMA-262 是 JavaScript 的官方规范），JavaScript 2.0 将拥有真正的类。因此，JavaScript 正在发展成为基于类的语言。但是，数年之后 JavaScript 2.0 才可能会被广泛使用。同时，必须清楚当前的 JavaScript 完全可以用基于原型的风格和基于类的风格读取和写入 JavaScript 代码。</p>\n<p>…更多内容请看下篇文章</p>\n<h2 id=\"四、作者总结\"><a href=\"#四、作者总结\" class=\"headerlink\" title=\"四、作者总结\"></a>四、作者总结</h2><p>　　面向对象的JAVASCRIPT编程技术极大的拓展了JAVASCRIPT的应用。对WEB2.0的发展起到了关键性的作用。作为新一代的IT农民工，学习掌握这门奇特的语言将在未来的工作中受益匪浅。</p>\n<p>　　随着交互式胖客户端 AJAX 应用程序的广泛使用，越来越多的程序员开始学习和使用JAVASCRIPT，我也将在未来一段时间内不断的学习使用JAVASCRIPT更多的与ASP.NET之间的结合。</p>\n<p>　　本文献给刚出茅庐的农民工们！希望大家在城市的建设中发挥自己最大的能量。</p>\n<p>　　本文作者：朱峰（Peter Zhu）</p>\n<p>　　发表时间：2010-05-31</p>\n<h2 id=\"五、本文参考引用文章列表\"><a href=\"#五、本文参考引用文章列表\" class=\"headerlink\" title=\"五、本文参考引用文章列表\"></a>五、本文参考引用文章列表</h2><ol>\n<li><p>使用面向对象的技术创建高级Web 应用程序 <a href=\"http://msdn.microsoft.com/zh-cn/magazine/cc163419.aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/zh-cn/magazine/cc163419.aspx</a></p>\n</li>\n<li><p>百度知道 <a href=\"http://baike.baidu.com/view/125370.htm\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/view/125370.htm</a> </p>\n</li>\n<li><p>OOJ-面向对象的JAVASCRIPT - <a href=\"http://www.cnblogs.com/taoqianbao/archive/2010/05/31/OOJ.html\" target=\"_blank\" rel=\"noopener\">PeterZhu</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>现代编程都有一个共性，无任是新语言，还是发展健全的语言，都有一套面向对象编程的理论。<br>WEB前端开发的JAVASCRIPT也不例外。最近着迷发展的JAVASCRIPT，也想把自己的想法和前人的经验总结下，让更多的IT农民工学习研究。</p>","more":"<h2 id=\"一、面向对象的基础理论\"><a href=\"#一、面向对象的基础理论\" class=\"headerlink\" title=\"一、面向对象的基础理论\"></a>一、面向对象的基础理论</h2><p>百度知道里讲诉的已经非常清晰, <a href=\"http://baike.baidu.com/view/125370.htm\" target=\"_blank\" rel=\"noopener\">更多详情</a> ，这里纯理论的知识大家就自我学习。</p>\n<h2 id=\"二、OOJ概述\"><a href=\"#二、OOJ概述\" class=\"headerlink\" title=\"二、OOJ概述\"></a>二、OOJ概述</h2><p>javascript面向对象编程与一般的C++,C#等开发语言结构还不一致。它即面向对象，又类似于一般的结构性语言。</p>\n<h3 id=\"JavaScript-对象是词典\"><a href=\"#JavaScript-对象是词典\" class=\"headerlink\" title=\"JavaScript 对象是词典\"></a>JavaScript 对象是词典</h3><p>在 C++ 或 C# 中，在谈论对象时，是指类或结构的实例。对象有不同的属性和方法，具体取决于将它们实例化的模板（即类）。而 JavaScript 对象却不是这样。在 JavaScript 中，对象只是一组名称/值对，就是说，将 JavaScript 对象视为包含字符串关键字的词典。我们可以使用熟悉的“.”（点）运算符或“[]”运算符，来获得和设置对象的属性，这是在处理词典时通常采用的方法。以下代码段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userObject = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">userObject.lastLoginTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">alert(userObject.lastLoginTime);</span><br></pre></td></tr></table></figure>\n<p>的功能与下面的代码段完全相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userObject = &#123;&#125;; <span class=\"comment\">// equivalent to new Object()</span></span><br><span class=\"line\">userObject[“lastLoginTime”] = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">alert(userObject[“lastLoginTime”]);</span><br></pre></td></tr></table></figure>\n<p> 我们还可以直接在 userObject 的定义中定义 lastLoginTime 属性，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userObject = &#123; “lastLoginTime”: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;;</span><br><span class=\"line\">alert(userObject.lastLoginTime);</span><br></pre></td></tr></table></figure>\n<p>这里大家需要注意的是： JavaScript 对象/词典只接受字符串关键字</p>\n<p>如果记住 JavaScript 对象是词典，您就不会对此感到吃惊了，毕竟，我们一直在向词典添加新关键字（和其各自的值）。</p>\n<p>接下来，我们了解下JAVASCRIPT的对象方法，若要理解对象方法，首先需要仔细了解一下 JavaScript 函数。</p>\n<h3 id=\"JavaScript-函数的奇特性\"><a href=\"#JavaScript-函数的奇特性\" class=\"headerlink\" title=\"JavaScript 函数的奇特性\"></a>JavaScript 函数的奇特性</h3><p>大家了解的很多编程语言中，函数和对象通常被视为两样不同的东西。在 JavaScript 中，其差别很模糊 — JavaScript 函数实际上是具有与它关联的可执行代码的对象。请如此看待普通函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func(“blah”);</span><br></pre></td></tr></table></figure>\n<p> 这就是通常在 JavaScript 中定义函数的方法。但是，还可以按以下方法定义该函数，您在此创建匿名函数对象，并将它赋给变量 func<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func(“blah2”);</span><br></pre></td></tr></table></figure></p>\n<p> 甚至也可以像下面这样，使用 Function 构造函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(“x”, “alert(x);”);</span><br><span class=\"line\">func(“blah3”);</span><br></pre></td></tr></table></figure></p>\n<p> 此示例表明函数实际上只是支持函数调用操作的对象。最后一个使用 Function 构造函数来定义函数的方法并不常用，但它展示的可能性非常有趣，因为您可能注意到，该函数的主体正是 Function 构造函数的 String 参数。这意味着，您可以在运行时构造任意函数。</p>\n<p>为了进一步演示函数是对象，您可以像对其他任何 JavaScript 对象一样，在函数中设置或添加属性： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(“Hi, “ + x + “!”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHi.text = “Hello World!”;</span><br><span class=\"line\">sayHi[“text2”] = “Hello World... again.”;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sayHi[“text”]); <span class=\"comment\">// displays “Hello World!”</span></span><br><span class=\"line\">alert(sayHi.text2); <span class=\"comment\">// displays “Hello World... again.”</span></span><br></pre></td></tr></table></figure>\n<p>作为对象，函数还可以赋给变量、作为参数传递给其他函数、作为其他函数的值返回，并可以作为对象的属性或数组的元素进行存储等等。下面提供了这样一个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// assign an anonymous function to a variable</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    alert(“Hello, “ + x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greet(“MSDN readers”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// passing a function as an argument to another</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operateOn</span>(<span class=\"params\">num, func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// displays 256</span></span><br><span class=\"line\">alert(operateOn(<span class=\"number\">16</span>, square));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions as return values</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeIncrementer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = makeIncrementer();</span><br><span class=\"line\"><span class=\"comment\">// displays 8</span></span><br><span class=\"line\">alert(inc(<span class=\"number\">7</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions stored as array elements</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = arr[<span class=\"number\">0</span>](<span class=\"number\">2</span>);</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = arr[<span class=\"number\">0</span>](arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = arr[<span class=\"number\">0</span>](arr[<span class=\"number\">2</span>]);</span><br><span class=\"line\"><span class=\"comment\">// displays 256</span></span><br><span class=\"line\">alert(arr[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// functions as object properties</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; “toString” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> “This is an object.”; &#125; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// calls obj.toString()</span></span><br><span class=\"line\">alert(obj);</span><br></pre></td></tr></table></figure>\n<p>记住这一点后，向对象添加方法将是很容易的事情：只需选择名称，然后将函数赋给该名称。因此，我通过将匿名函数分别赋给相应的方法名称，在对象中定义了三个方法： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDog = &#123;</span><br><span class=\"line\">    “name” : “Spot”,</span><br><span class=\"line\">    “bark” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; alert(“Woof!”); &#125;,</span><br><span class=\"line\">    “displayFullName” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + “ The Alpha Dog”);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    “chaseMrPostman” : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// implementation beyond the scope of this article </span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myDog.displayFullName(); </span><br><span class=\"line\">myDog.bark(); <span class=\"comment\">// Woof!</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`        </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">C++/C# 开发人员应当很熟悉 displayFullName 函数中使用的“this”关键字 — 它引用一个对象，通过对象调用方法（使用 Visual Basic 的开发人员也应当很熟悉它，它在 Visual Basic 中叫做“Me”）。因此在上面的示例中，displayFullName 中的“this”的值是 myDog 对象。但是，“this”的值不是静态的。通过不同对象调用“this”时，它的值也会更改以便指向相应的对象，如下所示。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### “this”随对象更改而更改</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayQuote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// the value of “this” will change; depends on </span></span><br><span class=\"line\">    <span class=\"comment\">// which object it is called through</span></span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.memorableQuote);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> williamShakespeare = &#123;</span><br><span class=\"line\">    “memorableQuote”: “It is a wise father that knows his own child.”, </span><br><span class=\"line\">    “sayIt” : displayQuote</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> markTwain = &#123;</span><br><span class=\"line\">    “memorableQuote”: “Golf is a good walk spoiled.”, </span><br><span class=\"line\">    “sayIt” : displayQuote</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oscarWilde = &#123;</span><br><span class=\"line\">    “memorableQuote”: “True friends stab you <span class=\"keyword\">in</span> the front.” </span><br><span class=\"line\">    <span class=\"comment\">// we can call the function displayQuote</span></span><br><span class=\"line\">    <span class=\"comment\">// as a method of oscarWilde without assigning it </span></span><br><span class=\"line\">    <span class=\"comment\">// as oscarWilde’s method. </span></span><br><span class=\"line\">    <span class=\"comment\">//”sayIt” : displayQuote</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">williamShakespeare.sayIt(); <span class=\"comment\">// true, true</span></span><br><span class=\"line\">markTwain.sayIt(); <span class=\"comment\">// he didn’t know where to play golf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// watch this, each function has a method call()</span></span><br><span class=\"line\"><span class=\"comment\">// that allows the function to be called as a </span></span><br><span class=\"line\"><span class=\"comment\">// method of the object passed to call() as an</span></span><br><span class=\"line\"><span class=\"comment\">// argument. </span></span><br><span class=\"line\"><span class=\"comment\">// this line below is equivalent to assigning</span></span><br><span class=\"line\"><span class=\"comment\">// displayQuote to sayIt, and calling oscarWilde.sayIt().</span></span><br><span class=\"line\">displayQuote.call(oscarWilde); <span class=\"comment\">// ouch!</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中最后一行表示的是将函数作为对象的方法进行调用的另一种方式。请记住，JavaScript 中的函数是对象。每个函数对象都有一个名为 call 的方法，它将函数作为第一个参数的方法进行调用。就是说，作为函数第一个参数传递给 call 的任何对象都将在函数调用中成为“this”的值。这一技术对于调用基类构造函数来说非常有用，稍后将对此进行介绍。</p>\n<p>有一点需要记住，绝不要调用包含“this”（却没有所属对象）的函数。否则，将违反全局命名空间，因为在该调用中，“this”将引用全局对象，而这必然会给您的应用程序带来灾难。例如，下面的脚本将更改 JavaScript 的全局函数 isNaN 的行为。一定不要这样做！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(“<span class=\"literal\">NaN</span> is <span class=\"literal\">NaN</span>: “ + <span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> “not anymore!”;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// alert!!! trampling the Global object!!!</span></span><br><span class=\"line\">x();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(“<span class=\"literal\">NaN</span> is <span class=\"literal\">NaN</span>: “ + <span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>));</span><br></pre></td></tr></table></figure>\n<p>到这里，我们已经介绍了如何创建对象，包括它的属性和方法。但如果注意上面的所有代码段，您会发现属性和方法是在对象定义本身中进行硬编码的。但如果需要更好地控制对象的创建，该怎么做呢？例如，您可能需要根据某些参数来计算对象的属性值。或者，可能需要将对象的属性初始化为仅在运行时才能获得的值。也可能需要创建对象的多个实例（此要求非常常见）。</p>\n<pre><code>在 C# 中，我们使用类来实例化对象实例。但 JavaScript 与此不同，因为它没有类。您将在下一节中看到，您可以充分利用这一情况：函数在与“new”运算符一起使用时，函数将充当构造函数。\n</code></pre><h3 id=\"构造函数而不是类\"><a href=\"#构造函数而不是类\" class=\"headerlink\" title=\"构造函数而不是类\"></a>构造函数而不是类</h3><p>前面提到过，有关 JavaScript OOP 的最奇怪的事情是，JavaScript 不像 C# 或 C++ 那样，它没有类。在 C# 中，在执行类似下面的操作时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog spot = <span class=\"keyword\">new</span> Dog();</span><br></pre></td></tr></table></figure></p>\n<p>将返回一个对象，该对象是 Dog 类的实例。但在 JavaScript 中，本来就没有类。与访问类最近似的方法是定义构造函数，如下所示：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DogConstructor</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.respondTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == name) &#123;</span><br><span class=\"line\">            alert(“Woof”);        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> DogConstructor(“Spot”);</span><br><span class=\"line\">spot.respondTo(“Rover”); <span class=\"comment\">// nope</span></span><br><span class=\"line\">spot.respondTo(“Spot”); <span class=\"comment\">// yeah!</span></span><br></pre></td></tr></table></figure>\n<p>那么，结果会怎样呢？暂时忽略 DogConstructor 函数定义，看一看这一行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> DogConstructor(“Spot”);</span><br></pre></td></tr></table></figure></p>\n<p>“new”运算符执行的操作很简单。首先，它创建一个新的空对象。然后执行紧随其后的函数调用，将新的空对象设置为该函数中“this”的值。换句话说，可以认为上面这行包含“new”运算符的代码与下面两行代码的功能相当： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create an empty object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = &#123;&#125;; </span><br><span class=\"line\"><span class=\"comment\">// call the function as a method of the empty object</span></span><br><span class=\"line\">DogConstructor.call(spot, “Spot”);</span><br></pre></td></tr></table></figure>\n<p>正如在 DogConstructor 主体中看到的那样，调用此函数将初始化对象，在调用期间关键字“this”将引用此对象。这样，就可以为对象创建模板！只要需要创建类似的对象，就可以与构造函数一起调用“new”，返回的结果将是一个完全初始化的对象。这与类非常相似，不是吗？实际上，在 JavaScript 中构造函数的名称通常就是所模拟的类的名称，因此在上面的示例中，可以直接命名构造函数 Dog：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Think of this as class Dog</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// instance variable </span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"comment\">// instance method? Hmmm...</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.respondTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == name) &#123;</span><br><span class=\"line\">            alert(“Woof”);        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> Dog(“Spot”);</span><br></pre></td></tr></table></figure>\n<p>在上面的 Dog 定义中，我定义了名为 name 的实例变量。使用 Dog 作为其构造函数所创建的每个对象都有它自己的实例变量名称副本（前面提到过，它就是对象词典的条目）。这就是希望的结果。毕竟，每个对象都需要它自己的实例变量副本来表示其状态。但如果看看下一行，就会发现每个 Dog 实例也都有它自己的 respondTo 方法副本，这是个浪费；您只需要一个可供各个 Dog 实例共享的 respondTo 实例！通过在 Dog 以外定义 respondTo，可以避免此问题，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">respondTo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// respondTo definition</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"comment\">// attached this function as a method of the object</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.respondTo = respondTo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，所有 Dog 实例（即用构造函数 Dog 创建的所有实例）都可以共享 respondTo 方法的一个实例。但随着方法数的增加，维护工作将越来越难。最后，基本代码中将有很多全局函数，而且随着“类”的增加，事情只会变得更加糟糕（如果它们的方法具有相似的名称，则尤甚）。但使用原型对象可以更好地解决这个问题，这是下一节的主题。</p>\n<h2 id=\"三、Javascript核心理论原型\"><a href=\"#三、Javascript核心理论原型\" class=\"headerlink\" title=\"三、Javascript核心理论原型\"></a>三、Javascript核心理论原型</h2><p>在使用 JavaScript 的面向对象编程中，原型对象是个核心概念。在 JavaScript 中对象是作为现有示例（即原型）对象的副本而创建的，该名称就来自于这一概念。此原型对象的任何属性和方法都将显示为从原型的构造函数创建的对象的属性和方法。可以说，这些对象从其原型继承了属性和方法。当您创建如下所示的新 Dog 对象时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buddy = <span class=\"keyword\">new</span> Dog(“Buddy“);</span><br></pre></td></tr></table></figure></p>\n<p>buddy 所引用的对象将从它的原型继承属性和方法，尽管仅从这一行可能无法明确判断原型来自哪里。对象 buddy 的原型来自构造函数（在这里是函数 Dog）的属性。</p>\n<p>在 JavaScript 中，每个函数都有名为“prototype”的属性，用于引用原型对象。此原型对象又有名为“constructor”的属性，它反过来引用函数本身。这是一种循环引用，图A1 更好地说明了这种循环关系。</p>\n<p><img src=\"/imgs/ooj-1.gif\" alt=\"图A1 每个函数的原型都有一个 Constructor 属性\"></p>\n<p>现在，通过“new”运算符用函数（上面示例中为 Dog）创建对象时，所获得的对象将继承 Dog.prototype 的属性。在图A1 中，可以看到 Dog.prototype 对象有一个回指 Dog 函数的构造函数属性。这样，每个 Dog 对象（从 Dog.prototype 继承而来）都有一个回指 Dog 函数的构造函数属性。代码段B1 中的代码证实了这一点。图A2 显示了构造函数、原型对象以及用它们创建的对象之间的这一关系。</p>\n<h1 id=\"代码段B1\"><a href=\"#代码段B1\" class=\"headerlink\" title=\"代码段B1\"></a>代码段B1</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> Dog(“Spot”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dog.prototype is the prototype of spot</span></span><br><span class=\"line\">alert(Dog.prototype.isPrototypeOf(spot));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spot inherits the constructor property</span></span><br><span class=\"line\"><span class=\"comment\">// from Dog.prototype</span></span><br><span class=\"line\">alert(spot.constructor == Dog.prototype.constructor);</span><br><span class=\"line\">alert(spot.constructor == Dog);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// But constructor property doesn’t belong</span></span><br><span class=\"line\"><span class=\"comment\">// to spot. The line below displays “false”</span></span><br><span class=\"line\">alert(spot.hasOwnProperty(“<span class=\"keyword\">constructor</span>”));</span><br><span class=\"line\"></span><br><span class=\"line\">// The <span class=\"keyword\">constructor</span> property belongs to Dog.prototype</span><br><span class=\"line\">// The line below displays “true”</span><br><span class=\"line\">alert(Dog.prototype.hasOwnProperty(“<span class=\"keyword\">constructor</span>”));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/imgs/ooj-2.gif\" alt=\"图A2-实例继承其原型\"></p>\n<p>某些读者可能已经注意到代码段B1 中对 hasOwnProperty 和 isPrototypeOf 方法的调用。这些方法是从哪里来的呢？它们不是来自 Dog.prototype。实际上，在 Dog.prototype 和 Dog 实例中还可以调用其他方法，比如 toString、toLocaleString 和 valueOf，但它们都不来自 Dog.prototype。您会发现，就像 .NET Framework 中的 System.Object 充当所有类的最终基类一样，JavaScript 中的 Object.prototype 是所有原型的最终基础原型。（Object.prototype 的原型是 null。）<br>在此示例中，请记住 Dog.prototype 是对象。它是通过调用 Object 构造函数创建的（尽管它不可见）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>因此，正如 Dog 实例继承 Dog.prototype 一样，Dog.prototype 继承 Object.prototype。这使得所有 Dog 实例也继承了 Object.prototype 的方法和属性。<br>每个 JavaScript 对象都继承一个原型链，而所有原型都终止于 Object.prototype。注意，迄今为止您看到的这种继承是活动对象之间的继承。它不同于继承的常见概念，后者是指在声明类时类之间的发生的继承。因此，JavaScript 继承动态性更强。它使用简单算法实现这一点，如下所示：当您尝试访问对象的属性/方法时，JavaScript 将检查该属性/方法是否是在该对象中定义的。如果不是，则检查对象的原型。如果还不是，则检查该对象的原型的原型，如此继续，一直检查到 Object.prototype。<br>图A3 说明了此解析过程。</p>\n<p><img src=\"/imgs/ooj-3.gif\" alt=\"图A3 在原型链中解析 toString() 方法\"></p>\n<p>JavaScript 动态地解析属性访问和方法调用的方式产生了一些特殊效果：</p>\n<ul>\n<li>继承原型对象的对象上可以立即呈现对原型所做的更改，即使是在创建这些对象之后。</li>\n<li>如果在对象中定义了属性/方法 X，则该对象的原型中将隐藏同名的属性/方法。例如，通过在 Dog.prototype 中定义 toString 方法，可以改写 Object.prototype 的 toString 方法。</li>\n<li>更改只沿一个方向传递，即从原型到它的派生对象，但不能沿相反方向传递。</li>\n</ul>\n<p>代码段B2 说明了这些效果。B2还显示了如何解决前面遇到的不需要的方法实例的问题。通过将方法放在原型内部，可以使对象共享方法，而不必使每个对象都有单独的函数对象实例。在此示例中，rover 和 spot 共享 getBreed 方法，直至在 spot 中以任何方式改写 toString 方法。此后，spot 有了它自己版本的 getBreed 方法，但 rover 对象和用新 GreatDane 创建的后续对象仍将共享在 GreatDane.prototype 对象中定义的那个 getBreed 方法实例。</p>\n<h2 id=\"代码段B2-继承原型\"><a href=\"#代码段B2-继承原型\" class=\"headerlink\" title=\"代码段B2-继承原型\"></a>代码段B2-继承原型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GreatDane</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rover = <span class=\"keyword\">new</span> GreatDane();</span><br><span class=\"line\"><span class=\"keyword\">var</span> spot = <span class=\"keyword\">new</span> GreatDane();</span><br><span class=\"line\"></span><br><span class=\"line\">GreatDane.prototype.getBreed = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “Great Dane”;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Works, even though at this point</span></span><br><span class=\"line\"><span class=\"comment\">// rover and spot are already created.</span></span><br><span class=\"line\">alert(rover.getBreed());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this hides getBreed() in GreatDane.prototype</span></span><br><span class=\"line\">spot.getBreed = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “Little Great Dane”;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(spot.getBreed()); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// but of course, the change to getBreed </span></span><br><span class=\"line\"><span class=\"comment\">// doesn’t propagate back to GreatDane.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// and other objects inheriting from it,</span></span><br><span class=\"line\"><span class=\"comment\">// it only happens in the spot object</span></span><br><span class=\"line\">alert(rover.getBreed());</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态属性和方法\"><a href=\"#静态属性和方法\" class=\"headerlink\" title=\"静态属性和方法\"></a>静态属性和方法</h3><p>有时，您需要绑定到类而不是实例的属性或方法，也就是，静态属性和方法。在 JavaScript 中很容易做到这一点，因为函数是可以按需要设置其属性和方法的对象。由于在 JavaScript 中构造函数表示类，因此可以通过在构造函数中设置静态方法和属性，直接将它们添加到类中，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DateTime</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set static method now()</span></span><br><span class=\"line\">    DateTime.now = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(DateTime.now());</span><br></pre></td></tr></table></figure>\n<p>在 JavaScript 中调用静态方法的语法与在 C# 中几乎完全相同。这不应当让人感到吃惊，因为构造函数的名称实际上是类的名称。这样，就有了类、公用属性/方法，以及静态属性/方法。还需要其他什么吗？当然，私有成员。但 JavaScript 本身并不支持私有成员（同样，也不支持受保护成员）。任何人都可以访问对象的所有属性和方法。但我们有办法让类中包含私有成员，但在此之前，您首先需要理解闭包。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>不了解JAVASCRIPT就不要说JAVASCRIPT多么的简单或有多么的难学。JavaScript 实际上是功能强大、表现力强而且非常简练的语言。它甚至具有其他更流行的语言才刚刚开始支持的功能。<br>JavaScript 的更高级功能之一是它支持闭包，这是 C# 2.0 通过它的匿名方法支持的功能。闭包是当内部函数（或 C# 中的内部匿名方法）绑定到它的外部函数的本地变量时所发生的运行时现象。很明显，除非此内部函数以某种方式可被外部函数访问，否则它没有多少意义。示例可以更好说明这一点。<br>假设需要根据一个简单条件筛选一个数字序列，这个条件是：只有大于 100 的数字才能通过筛选，并忽略其余数字。为此，可以编写类似代码段B3 中的函数。</p>\n<h1 id=\"代码段B3-根据谓词筛选元素\"><a href=\"#代码段B3-根据谓词筛选元素\" class=\"headerlink\" title=\"代码段B3 -根据谓词筛选元素\"></a>代码段B3 -根据谓词筛选元素</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\">pred, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filtered = []; <span class=\"comment\">// shorter version of new Array();</span></span><br><span class=\"line\">    <span class=\"comment\">// iterate through every element in the array...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = arr[i];</span><br><span class=\"line\">        <span class=\"comment\">// if the element satisfies the predicate let it through</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pred(val)) &#123;</span><br><span class=\"line\">            filtered.push(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filtered;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someRandomNumbers = [<span class=\"number\">12</span>, <span class=\"number\">32</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">234</span>, <span class=\"number\">236</span>, <span class=\"number\">632</span>,<span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> numbersGreaterThan100 = filter(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x &gt; <span class=\"number\">100</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; &#125;, </span><br><span class=\"line\">    someRandomNumbers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// displays 234, 236, 632</span></span><br><span class=\"line\">alert(numbersGreaterThan100);</span><br></pre></td></tr></table></figure>\n<p>但是，现在要创建不同的筛选条件，假设这次只有大于 300 的数字才能通过筛选，则可以编写下面这样的函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greaterThan300 = filter(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x &gt; <span class=\"number\">300</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; &#125;, </span><br><span class=\"line\">    someRandomNumbers);</span><br></pre></td></tr></table></figure></p>\n<p>然后，也许需要筛选大于 50、25、10、600 如此等等的数字，但作为一个聪明人，您会发现它们全部都有相同的谓词“greater than”，只有数字不同。因此，可以用类似下面的函数分开各个数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeGreaterThanPredicate</span>(<span class=\"params\">lowerBound</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numberToCheck</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (numberToCheck &gt; lowerBound) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，您就可以编写以下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greaterThan10 = makeGreaterThanPredicate(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> greaterThan100 = makeGreaterThanPredicate(<span class=\"number\">100</span>);</span><br><span class=\"line\">alert(filter(greaterThan10, someRandomNumbers));</span><br><span class=\"line\">alert(filter(greaterThan100, someRandomNumbers));</span><br></pre></td></tr></table></figure></p>\n<p>通过观察函数 makeGreaterThanPredicate 返回的内部匿名函数，可以发现，该匿名内部函数使用 lowerBound，后者是传递给 makeGreaterThanPredicate 的参数。按照作用域的一般规则，当 makeGreaterThanPredicate 退出时，lowerBound 超出了作用域！但在这里，内部匿名函数仍然携带 lowerBound，甚至在 makeGreaterThanPredicate 退出之后的很长时间内仍然如此。这就是我们所说的闭包：因为内部函数关闭了定义它的环境（即外部函数的参数和本地变量）。</p>\n<p>开始可能感觉不到闭包的功能很强大。但如果应用恰当，它们就可以非常有创造性地帮您将想法转换成代码，这个过程非常有趣。在 JavaScript 中，闭包最有趣的用途之一是模拟类的私有变量。</p>\n<h2 id=\"模拟私有属性\"><a href=\"#模拟私有属性\" class=\"headerlink\" title=\"模拟私有属性\"></a>模拟私有属性</h2><p>现在介绍闭包如何帮助模拟私有成员。正常情况下，无法从函数以外访问函数内的本地变量。函数退出之后，由于各种实际原因，该本地变量将永远消失。但是，如果该本地变量被内部函数的闭包捕获，它就会生存下来。这一事实是模拟 JavaScript 私有属性的关键。假设有一个 Person 类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> name; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newName</span>) </span>&#123; name = newName; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> age; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newAge</span>) </span>&#123; age = newAge; &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数 name 和 age 是构造函数 Person 的本地变量。Person 返回时，name 和 age 应当永远消失。但是，它们被作为 Person 实例的方法而分配的四个内部函数捕获，实际上这会使 name 和 age 继续存在，但只能严格地通过这四个方法访问它们。因此，您可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ray = <span class=\"keyword\">new</span> Person(“Ray”, <span class=\"number\">31</span>);</span><br><span class=\"line\">alert(ray.getName());</span><br><span class=\"line\">alert(ray.getAge());</span><br><span class=\"line\">ray.setName(“Younger Ray”);</span><br><span class=\"line\"><span class=\"comment\">// Instant rejuvenation!</span></span><br><span class=\"line\">ray.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\">alert(ray.getName() + “ is now “ + ray.getAge() + </span><br><span class=\"line\">      “ years old.”);</span><br></pre></td></tr></table></figure>\n<p>未在构造函数中初始化的私有成员可以成为构造函数的本地变量，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> occupation;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getOccupation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> occupation; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setOccupation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newOcc</span>) </span>&#123; occupation = </span><br><span class=\"line\">                         newOcc; &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// accessors for name and age    </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，这些私有成员与我们期望从 C# 中产生的私有成员略有不同。在 C# 中，类的公用方法可以访问它的私有成员。但在 JavaScript 中，只能通过在其闭包内拥有这些私有成员的方法来访问私有成员（由于这些方法不同于普通的公用方法，它们通常被称为特权方法）。因此，在 Person 的公用方法中，仍然必须通过私有成员的特权访问器方法才能访问私有成员：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.somePublicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// doesn’t work!</span></span><br><span class=\"line\">    <span class=\"comment\">// alert(this.name);</span></span><br><span class=\"line\">    <span class=\"comment\">// this one below works</span></span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.getName());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Douglas Crockford 是著名的发现（或者也许是发布）使用闭包来模拟私有成员这一技术的第一人。他的网站 javascript.crockford.com 包含有关 JavaScript 的丰富信息，任何对 JavaScript 感兴趣的开发人员都应当仔细研读。</p>\n<h2 id=\"从类继承\"><a href=\"#从类继承\" class=\"headerlink\" title=\"从类继承\"></a>从类继承</h2><p>到这里，我们已经了解了构造函数和原型对象如何使您在 JavaScript 中模拟类。您已经看到，原型链可以确保所有对象都有 Object.prototype 的公用方法，以及如何使用闭包来模拟类的私有成员。但这里还缺少点什么。您尚未看到如何从类派生，这在 C# 中是每天必做的工作。遗憾的是，在 JavaScript 中从类继承并非像在 C# 中键入冒号即可继承那样简单，它需要进行更多操作。另一方面，JavaScript 非常灵活，可以有很多从类继承的方式。<br>例如，有一个基类 Pet，它有一个派生类 Dog，如图A4 所示。这个在 JavaScript 中如何实现呢？Pet 类很容易。您已经看见如何实现它了：</p>\n<p><img src=\"/imgs/ooj-4.gif\" alt=\"图A4-类图\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Pet</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> name; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newName</span>) </span>&#123; name = newName; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pet.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “This pet’s name is: “ + <span class=\"keyword\">this</span>.getName();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// end of class Pet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> parrotty = <span class=\"keyword\">new</span> Pet(“Parrotty the Parrot”);</span><br><span class=\"line\">alert(parrotty);</span><br></pre></td></tr></table></figure>\n<p>现在，如何创建从 Pet 派生的类 Dog 呢？在图A4 中可以看到，Dog 有另一个属性 breed，它改写了 Pet 的 toString 方法（注意，JavaScript 的约定是方法和属性名称使用 camel 大小写，而不是在 C# 中建议的 Pascal 大小写）。代码段B3 显示如何这样做。</p>\n<h2 id=\"代码段B3-从PET类派生\"><a href=\"#代码段B3-从PET类派生\" class=\"headerlink\" title=\"代码段B3-从PET类派生\"></a>代码段B3-从PET类派生</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Dog : Pet </span></span><br><span class=\"line\"><span class=\"comment\">// public Dog(string name, string breed)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, breed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// think Dog : base(name) </span></span><br><span class=\"line\">    Pet.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getBreed = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> breed; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// Breed doesn’t change, obviously! It’s read only.</span></span><br><span class=\"line\">    <span class=\"comment\">// this.setBreed = function(newBreed) &#123; name = newName; &#125;;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this makes Dog.prototype inherits</span></span><br><span class=\"line\"><span class=\"comment\">// from Pet.prototype</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Pet();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// remember that Pet.prototype.constructor</span></span><br><span class=\"line\"><span class=\"comment\">// points to Pet. We want our Dog instances’</span></span><br><span class=\"line\"><span class=\"comment\">// constructor to point to Dog.</span></span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Now we override Pet.prototype.toString</span></span><br><span class=\"line\">Dog.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> “This dog’s name is: “ + <span class=\"keyword\">this</span>.getName() + </span><br><span class=\"line\">        “, and its breed is: “ + <span class=\"keyword\">this</span>.getBreed();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// end of class Dog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(“Buddy”, “Great Dane”);</span><br><span class=\"line\"><span class=\"comment\">// test the new toString()</span></span><br><span class=\"line\">alert(dog);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Testing instanceof (similar to the is operator)</span></span><br><span class=\"line\"><span class=\"comment\">// (dog is Dog)? yes</span></span><br><span class=\"line\">alert(dog <span class=\"keyword\">instanceof</span> Dog);</span><br><span class=\"line\"><span class=\"comment\">// (dog is Pet)? yes</span></span><br><span class=\"line\">alert(dog <span class=\"keyword\">instanceof</span> Pet);</span><br><span class=\"line\"><span class=\"comment\">// (dog is Object)? yes</span></span><br><span class=\"line\">alert(dog <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure>\n<p>所使用的原型 — 替换技巧正确设置了原型链，因此假如使用 C#，测试的实例将按预期运行。而且，特权方法仍然会按预期运行。</p>\n<h2 id=\"模拟命名空间\"><a href=\"#模拟命名空间\" class=\"headerlink\" title=\"模拟命名空间\"></a>模拟命名空间</h2><p>在 C++ 和 C# 中，命名空间用于尽可能地减少名称冲突。例如，在 .NET Framework 中，命名空间有助于将 Microsoft.Build.Task.Message 类与 System.Messaging.Message 区分开来。JavaScript 没有任何特定语言功能来支持命名空间，但很容易使用对象来模拟命名空间。如果要创建一个 JavaScript 库，则可以将它们包装在命名空间内，而不需要定义全局函数和类，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MSDNMagNS = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">MSDNMagNS.Pet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"comment\">// code here &#125;;</span></span><br><span class=\"line\">MSDNMagNS.Pet.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// code &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> MSDNMagNS.Pet(“Yammer”);</span><br></pre></td></tr></table></figure>\n<p>命名空间的一个级别可能不是唯一的，因此可以创建嵌套的命名空间：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MSDNMagNS = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// nested namespace “Examples”</span></span><br><span class=\"line\">MSDNMagNS.Examples = &#123;&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">MSDNMagNS.Examples.Pet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"comment\">// code &#125;;</span></span><br><span class=\"line\">MSDNMagNS.Examples.Pet.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// code &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> MSDNMagNS.Examples.Pet(“Yammer”);</span><br></pre></td></tr></table></figure>\n<p>可以想象，键入这些冗长的嵌套命名空间会让人很累。 幸运的是，库用户可以很容易地为命名空间指定更短的别名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MSDNMagNS.Examples and Pet definition...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// think “using Eg = MSDNMagNS.Examples;” </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Eg = MSDNMagNS.Examples;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> Eg.Pet(“Yammer”);</span><br><span class=\"line\">alert(pet);</span><br></pre></td></tr></table></figure>\n<p>如果看一下 Microsoft AJAX 库的源代码，就会发现库的作者使用了类似的技术来实现命名空间（请参阅静态方法 Type.registerNamespace 的实现）。有关详细信息，请参与侧栏“OOP 和 ASP.NET AJAX”。</p>\n<h2 id=\"应当这样编写-JavaScript-代码吗？\"><a href=\"#应当这样编写-JavaScript-代码吗？\" class=\"headerlink\" title=\"应当这样编写 JavaScript 代码吗？\"></a>应当这样编写 JavaScript 代码吗？</h2><p>您已经看见 JavaScript 可以很好地支持面向对象的编程。尽管它是一种基于原型的语言，但它的灵活性和强大功能可以满足在其他流行语言中常见的基于类的编程风格。但问题是：是否应当这样编写 JavaScript 代码？在 JavaScript 中的编程方式是否应与 C# 或 C++ 中的编码方式相同？是否有更聪明的方式来模拟 JavaScript 中没有的功能？每种编程语言都各不相同，一种语言的最佳做法，对另一种语言而言则可能并非最佳。<br>在 JavaScript 中，您已看到对象继承对象（与类继承类不同）。因此，使用静态继承层次结构建立很多类的方式可能并不适合 JavaScript。也许，就像 Douglas Crockford 在他的文章 Prototypal Inheritance in JavaScript 中说的那样，JavaScript 编程方式是建立原型对象，并使用下面的简单对象函数建立新的对象，而后者则继承原始对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后，由于 JavaScript 中的对象是可延展的，因此可以方便地在创建对象之后，根据需要用新字段和新方法增大对象。</p>\n<p>这的确很好，但它不可否认的是，全世界大多数开发人员更熟悉基于类的编程。实际上，基于类的编程也会在这里出现。按照即将颁发的 ECMA-262 规范第 4 版（ECMA-262 是 JavaScript 的官方规范），JavaScript 2.0 将拥有真正的类。因此，JavaScript 正在发展成为基于类的语言。但是，数年之后 JavaScript 2.0 才可能会被广泛使用。同时，必须清楚当前的 JavaScript 完全可以用基于原型的风格和基于类的风格读取和写入 JavaScript 代码。</p>\n<p>…更多内容请看下篇文章</p>\n<h2 id=\"四、作者总结\"><a href=\"#四、作者总结\" class=\"headerlink\" title=\"四、作者总结\"></a>四、作者总结</h2><p>　　面向对象的JAVASCRIPT编程技术极大的拓展了JAVASCRIPT的应用。对WEB2.0的发展起到了关键性的作用。作为新一代的IT农民工，学习掌握这门奇特的语言将在未来的工作中受益匪浅。</p>\n<p>　　随着交互式胖客户端 AJAX 应用程序的广泛使用，越来越多的程序员开始学习和使用JAVASCRIPT，我也将在未来一段时间内不断的学习使用JAVASCRIPT更多的与ASP.NET之间的结合。</p>\n<p>　　本文献给刚出茅庐的农民工们！希望大家在城市的建设中发挥自己最大的能量。</p>\n<p>　　本文作者：朱峰（Peter Zhu）</p>\n<p>　　发表时间：2010-05-31</p>\n<h2 id=\"五、本文参考引用文章列表\"><a href=\"#五、本文参考引用文章列表\" class=\"headerlink\" title=\"五、本文参考引用文章列表\"></a>五、本文参考引用文章列表</h2><ol>\n<li><p>使用面向对象的技术创建高级Web 应用程序 <a href=\"http://msdn.microsoft.com/zh-cn/magazine/cc163419.aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/zh-cn/magazine/cc163419.aspx</a></p>\n</li>\n<li><p>百度知道 <a href=\"http://baike.baidu.com/view/125370.htm\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/view/125370.htm</a> </p>\n</li>\n<li><p>OOJ-面向对象的JAVASCRIPT - <a href=\"http://www.cnblogs.com/taoqianbao/archive/2010/05/31/OOJ.html\" target=\"_blank\" rel=\"noopener\">PeterZhu</a></p>\n</li>\n</ol>"},{"title":"OOJ-面向对象编程的三大特点-封装，继承，多态分析与实例","p":"javascript/OOJ-THREE","date":"2010-06-01T02:19:05.000Z","_content":"\n今天谈谈面向对象编程的三个主要的关键词：封装、继承、多态。\n\njavascript面向对象编程，既然是面向对象编程不得不提到面向对象的几大关键字：封装，继承，多态。\n\n<!--more-->\n\n### 首先：封装\n\n在前几篇的文章中我们已经了解到JAVASCRIPT需要通过模拟实现一些类似C++,C#语言面向对象的特征。\n\n今天我们重新温习加强理解下实现的要点与注意事项：\n\njavascript中创建对象的模式中，一般认为通过闭包才算的上是真正意义上的封装，所以首先我们先来简单介绍一下闭包，看下面这个例子：\n\n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n  function myInfo(){\n    var name =\"Hello\",age =27;\n    var myInfo = \"my name is\" + name + \"i am\" + age +\"years old\";\n    function showInfo(){\n      alert(myInfo);\n    }\n    return showInfo;\n  }\n  var oldFish = myInfo();\n  oldFish();\n// ]]>\n</script>\n```\n\n上面的代码段其实就是一个简单的闭包应用。 \n简单解释一下：上面的函数myInfo中定义的变量，在它的内嵌函数showInfo中是可访问的（这个很好理解），但是当我们把这个内嵌函数的返回引用赋值给一个变量oldFish，这个时候函数showInfo是在myInfo函数体外被调用，但是同样可以访问到定义在函数体内的变量。 \n总结一下闭包的原理吧：函数是运行在定义他们的作用域中而不是调用他们的作用域中。其实返回一个内嵌函数也是创建闭包最常用的一种方法！ \n\n如果觉得上面的解释太抽象的话，那么我们一起重塑上面的函数，看看这样是否层次鲜明一些：\n\n``` JS\n\n  var ioldFish = function(name,age){\n    var name = name,age = age;\n    var myInfo = \"my name is\" + name + \"i am\" + age +\"\">years old\";\n    return {\n      showInfo: function(){\n        alert(myInfo);  \n      } \n    }\n  }\n  ioldFish(\"Hello\",27).showInfo();\n```\n上例中的编码风格是ext yui中比较常见的，公私分明，一目了然。通过闭包，我们可以很方便的把一些不希望被外部直接访问到的东西隐藏起来，你要访问函数内定义的变量，只能通过特定的方法才可以访问的到，直接从外部访问是访问不到的，写的挺累，饶了一圈终于转回来了，封装嘛，不就是把不希望被别人看到的东西隐藏起来嘛！ \n上例如果转换成JQ的风格的话，应该如下例所写， 这样的封装模式属于门户大开型模式，里面定义的变量是可以被外部访问到的（下面的例子如果你先实例化一个对象，然后在函数外部访问对象的name或者age属性都是可以读取到的）当然这种模式下我们可以设置一些”潜规则”，让团队开发成员明白哪些变量是私用的，通常我们人为的在私有变量和方法前加下划线”_”，标识警戒讯号！从而实现”封装”！ \n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n    var ioldFish = function(name,age){\n      return ioldFish.func.init(name,age);  \n    };\n    ioldFish.func = ioldFish.prototype ={\n        init:function(name,age){\n            this.name = name;\n            this.age = age;\n            return this;\n        },\n        showInfo:function(){\n            var info = \"my name is\" + this.name +\"i am \" +this.age+\"years old\";\n            alert(info);\n        }\n    };\n    ioldFish.func.init.prototype = ioldFish.func;\n    ioldFish(\"Hello\",27).showInfo();\n    //var oldFish = new ioldFish(\"Hello\",27);\n    //alert(oldFish.name);\n// ]]>\n</script>\n```\n两种模式各有特点，大家看情况随机使用。\n\n## 其次：继承\n\n与闭包封装有点冲突，闭包封装不利于子类派生。\n\n在javascript中继承一般分为三种方式：”类式继承”，”原型继承”,”掺元类”。下面简单的介绍一下三类继承方式的原理。 \n\n*A.类式继承*：这个是现在主流框架中常用的继承方式，看下例：\n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n  var Name = function(name){\n    this.name = name;\n  };\n  Name.prototype.getName = function(){\n    alert(this.name);\n  };\n  var Fish = function(name,age){\n    Name.call(this,name);\n    this.age = age;\n  };\n  Fish.prototype = new Name();\n  Fish.prototype.constructor = Fish;\n  Fish.prototype.showInfo = function(){\n   alert(this.age);\n  }\n  var ioldFish = new Fish(\"Hello\",27);\n  ioldFish.getName();\n// ]]>\n</script>\n```\n\n上述子类Fish中并没定义getName方法，但是子类Fish的实例对象ioldFish依然调用到了该方法，这是因为子类Fish继承了父类Name中定义的getName方法。解释一下，这里子类Fish的prototype指到了父类的一个实例，在子类Fish中虽然没有申明getName方法，但是根据原型链原理，会向prototype指向的上一级对象中去查找是否有该方法，如果没找到该方法，会一直搜索到最初的原型对象。这其实也就是继承的原理了。这里特别说明一下，Fish.prototype.constructor = Fish;这句，由于默认子类的prototype应该是指向本身的，但是之前把prototype指向到了超类的实例对象，所以在这里要把它设置回来。当然这里可以把相关代码通过一个函数来组织起来，起到伪装extend的作用，这里不再阐述。 \n\n*B.原型继承*，从内存性能上看优于类式继承。\n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n  function clone(object){\n    var F = function(){};\n    F.prototype = object;\n    return new F();\n  };\n  var Name = {\n    name:\"who's name\",\n    showInfo:function(){\n      alert(this.name);\n    }\n  };\n  var Fish = clone(Name);\n  //Fish.name = \"Hello\";\n  Fish.showInfo();\n// ]]>\n</script>\n```\n\n很明显，原型继承核心就是这个clone函数，同样是原型链的原理，不同的是它直接克隆超类，这样的话子类就继承了超类的所有属性和方法.特别说一下，这类继承并不需要创建构造函数，只需要创建一个对象字变量，定义相应的属性和方法，然后在子类中只需要通过圆点”.”符号来引用属性和方法就可以了.\n\n*C.掺元类*：把一些常用通用性比较大的方法统一封装在一个函数中，然后通过下面这个函数分派给要用到这些方法的类．还可以针对不同的类，选择性的传递需要的方法。 \n\n``` JS\n  function agument(receveClass,giveClass){\n    if(arguments[2]){\n      var len = arguments.length;\n      for(i=2;i<len;i++){\n        receveClass.prototype[arguments[i]] = giveClass.prototype[arguments[i]];\n      }\n    }\n    else{\n      for(method in giveClass.prototype){\n        if(!receveClass.prototype[method]){\n          receveClass.prototype[method] = giveClass.prototype[method];\n        }\n      }\n    }\n  };\n  var Name = function(){};\n  Name.prototype ={\n    sayLike:function(){\n      alert(\"i like oldfish\");\n    },\n    sayLove:function(){\n      alert(\"i love oldfish\");\n    }\n  }\n  var Fish = function(){};\n  var ioldFish = new Fish();\n  agument(Fish,Name,\"sayLove\");\n  ioldFish.sayLove();\n  ioldFish.sayLike();\n\n```\n\n多态：个人觉得这个比较抽象，很难言传，所以下面就从重载和覆盖两个方面来简单阐述一下。\n\n重载：上面这个例子中agument函数初始带了两个参数，但是在后面的调用中，agument(Fish,Name,”sayLove”)同样可以带入任意多个参数，javascript的重载，是在函数中由用户自己通过操作arguments这个属性来实现的。\n\n覆盖：这个很简单，就是子类中定义的方法如果与从超类中继承过来的的方法同名，就覆盖这个方法（这里并不是覆盖超类中的方法，注意一下），这里就不累赘了！\n\n最后重点着墨说一下this和执行上下文，在前面举的封装例子中，this都是表示this所在的类的实例化对象本身，但是并不是千篇一律的，打个比方，通过HTML属性定义的事件处理代码，见如下代码：\n``` JS\n\n var Name = function(name) {\n    this.name = name;\n    this.getName = function () {\n        alert(this.name);\n    }\n };\n   var ioldFish = new Name(\"Hello\"),\n   btn = document.getElementById('btn');\n   btn.onclick = ioldFish.getName;\n   //btn.onclick = function(){ioldFish.getName.call(ioldFish)};\n```\n上例中点了按钮以后弹出框里并没有显示出实例对象的属性，这是因为this的执行上下文已经改变了，他现在所在的上下文应该是input这个HTML标签，但是该标签又不存在getName这个属性，所以自然无法输出这个属性的属性值了！从这个例子我们不难看出：执行上下文是在执行时才确定的，它随时可以变。\n\n当然你可以去掉上面我注释掉的那段代码，通过call改变this的执行上下文，从而获取getName方法。apply方法同样可以实现改变执行上下文的功能，不过在prototype框架中发现了一个更为优美的实现方法bind。看一下这个方法的实现吧，不得不感叹先人的伟大……\n\n``` JS\nFunction.prototype.bind = function(obj) {\n    var method = this,\n    temp = function() {\n        return method.apply(obj, arguments);\n    };\n}\n```\n循序渐进,日有所学。学习语言基本靠实践。只要不断的写才能得到提高。\n\n\n感谢老鱼的文章：本文引自：http://ued.alipay.com/2009/03/javascript-orient-object/  ","source":"_posts/javascript/OOJ-THREE.md","raw":"---\ntitle: OOJ-面向对象编程的三大特点-封装，继承，多态分析与实例\np: javascript/OOJ-THREE\ndate: 2010-06-01 10:19:05\ntags:\n    -   JS\n    -   Javascript\n    -   OOP\n    -   OOJ\n    -   H5\n    -   WEB\ncategories: Javascript\n---\n\n今天谈谈面向对象编程的三个主要的关键词：封装、继承、多态。\n\njavascript面向对象编程，既然是面向对象编程不得不提到面向对象的几大关键字：封装，继承，多态。\n\n<!--more-->\n\n### 首先：封装\n\n在前几篇的文章中我们已经了解到JAVASCRIPT需要通过模拟实现一些类似C++,C#语言面向对象的特征。\n\n今天我们重新温习加强理解下实现的要点与注意事项：\n\njavascript中创建对象的模式中，一般认为通过闭包才算的上是真正意义上的封装，所以首先我们先来简单介绍一下闭包，看下面这个例子：\n\n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n  function myInfo(){\n    var name =\"Hello\",age =27;\n    var myInfo = \"my name is\" + name + \"i am\" + age +\"years old\";\n    function showInfo(){\n      alert(myInfo);\n    }\n    return showInfo;\n  }\n  var oldFish = myInfo();\n  oldFish();\n// ]]>\n</script>\n```\n\n上面的代码段其实就是一个简单的闭包应用。 \n简单解释一下：上面的函数myInfo中定义的变量，在它的内嵌函数showInfo中是可访问的（这个很好理解），但是当我们把这个内嵌函数的返回引用赋值给一个变量oldFish，这个时候函数showInfo是在myInfo函数体外被调用，但是同样可以访问到定义在函数体内的变量。 \n总结一下闭包的原理吧：函数是运行在定义他们的作用域中而不是调用他们的作用域中。其实返回一个内嵌函数也是创建闭包最常用的一种方法！ \n\n如果觉得上面的解释太抽象的话，那么我们一起重塑上面的函数，看看这样是否层次鲜明一些：\n\n``` JS\n\n  var ioldFish = function(name,age){\n    var name = name,age = age;\n    var myInfo = \"my name is\" + name + \"i am\" + age +\"\">years old\";\n    return {\n      showInfo: function(){\n        alert(myInfo);  \n      } \n    }\n  }\n  ioldFish(\"Hello\",27).showInfo();\n```\n上例中的编码风格是ext yui中比较常见的，公私分明，一目了然。通过闭包，我们可以很方便的把一些不希望被外部直接访问到的东西隐藏起来，你要访问函数内定义的变量，只能通过特定的方法才可以访问的到，直接从外部访问是访问不到的，写的挺累，饶了一圈终于转回来了，封装嘛，不就是把不希望被别人看到的东西隐藏起来嘛！ \n上例如果转换成JQ的风格的话，应该如下例所写， 这样的封装模式属于门户大开型模式，里面定义的变量是可以被外部访问到的（下面的例子如果你先实例化一个对象，然后在函数外部访问对象的name或者age属性都是可以读取到的）当然这种模式下我们可以设置一些”潜规则”，让团队开发成员明白哪些变量是私用的，通常我们人为的在私有变量和方法前加下划线”_”，标识警戒讯号！从而实现”封装”！ \n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n    var ioldFish = function(name,age){\n      return ioldFish.func.init(name,age);  \n    };\n    ioldFish.func = ioldFish.prototype ={\n        init:function(name,age){\n            this.name = name;\n            this.age = age;\n            return this;\n        },\n        showInfo:function(){\n            var info = \"my name is\" + this.name +\"i am \" +this.age+\"years old\";\n            alert(info);\n        }\n    };\n    ioldFish.func.init.prototype = ioldFish.func;\n    ioldFish(\"Hello\",27).showInfo();\n    //var oldFish = new ioldFish(\"Hello\",27);\n    //alert(oldFish.name);\n// ]]>\n</script>\n```\n两种模式各有特点，大家看情况随机使用。\n\n## 其次：继承\n\n与闭包封装有点冲突，闭包封装不利于子类派生。\n\n在javascript中继承一般分为三种方式：”类式继承”，”原型继承”,”掺元类”。下面简单的介绍一下三类继承方式的原理。 \n\n*A.类式继承*：这个是现在主流框架中常用的继承方式，看下例：\n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n  var Name = function(name){\n    this.name = name;\n  };\n  Name.prototype.getName = function(){\n    alert(this.name);\n  };\n  var Fish = function(name,age){\n    Name.call(this,name);\n    this.age = age;\n  };\n  Fish.prototype = new Name();\n  Fish.prototype.constructor = Fish;\n  Fish.prototype.showInfo = function(){\n   alert(this.age);\n  }\n  var ioldFish = new Fish(\"Hello\",27);\n  ioldFish.getName();\n// ]]>\n</script>\n```\n\n上述子类Fish中并没定义getName方法，但是子类Fish的实例对象ioldFish依然调用到了该方法，这是因为子类Fish继承了父类Name中定义的getName方法。解释一下，这里子类Fish的prototype指到了父类的一个实例，在子类Fish中虽然没有申明getName方法，但是根据原型链原理，会向prototype指向的上一级对象中去查找是否有该方法，如果没找到该方法，会一直搜索到最初的原型对象。这其实也就是继承的原理了。这里特别说明一下，Fish.prototype.constructor = Fish;这句，由于默认子类的prototype应该是指向本身的，但是之前把prototype指向到了超类的实例对象，所以在这里要把它设置回来。当然这里可以把相关代码通过一个函数来组织起来，起到伪装extend的作用，这里不再阐述。 \n\n*B.原型继承*，从内存性能上看优于类式继承。\n``` JS\n<script type=\"text/javascript\">\n// <![CDATA[\n  function clone(object){\n    var F = function(){};\n    F.prototype = object;\n    return new F();\n  };\n  var Name = {\n    name:\"who's name\",\n    showInfo:function(){\n      alert(this.name);\n    }\n  };\n  var Fish = clone(Name);\n  //Fish.name = \"Hello\";\n  Fish.showInfo();\n// ]]>\n</script>\n```\n\n很明显，原型继承核心就是这个clone函数，同样是原型链的原理，不同的是它直接克隆超类，这样的话子类就继承了超类的所有属性和方法.特别说一下，这类继承并不需要创建构造函数，只需要创建一个对象字变量，定义相应的属性和方法，然后在子类中只需要通过圆点”.”符号来引用属性和方法就可以了.\n\n*C.掺元类*：把一些常用通用性比较大的方法统一封装在一个函数中，然后通过下面这个函数分派给要用到这些方法的类．还可以针对不同的类，选择性的传递需要的方法。 \n\n``` JS\n  function agument(receveClass,giveClass){\n    if(arguments[2]){\n      var len = arguments.length;\n      for(i=2;i<len;i++){\n        receveClass.prototype[arguments[i]] = giveClass.prototype[arguments[i]];\n      }\n    }\n    else{\n      for(method in giveClass.prototype){\n        if(!receveClass.prototype[method]){\n          receveClass.prototype[method] = giveClass.prototype[method];\n        }\n      }\n    }\n  };\n  var Name = function(){};\n  Name.prototype ={\n    sayLike:function(){\n      alert(\"i like oldfish\");\n    },\n    sayLove:function(){\n      alert(\"i love oldfish\");\n    }\n  }\n  var Fish = function(){};\n  var ioldFish = new Fish();\n  agument(Fish,Name,\"sayLove\");\n  ioldFish.sayLove();\n  ioldFish.sayLike();\n\n```\n\n多态：个人觉得这个比较抽象，很难言传，所以下面就从重载和覆盖两个方面来简单阐述一下。\n\n重载：上面这个例子中agument函数初始带了两个参数，但是在后面的调用中，agument(Fish,Name,”sayLove”)同样可以带入任意多个参数，javascript的重载，是在函数中由用户自己通过操作arguments这个属性来实现的。\n\n覆盖：这个很简单，就是子类中定义的方法如果与从超类中继承过来的的方法同名，就覆盖这个方法（这里并不是覆盖超类中的方法，注意一下），这里就不累赘了！\n\n最后重点着墨说一下this和执行上下文，在前面举的封装例子中，this都是表示this所在的类的实例化对象本身，但是并不是千篇一律的，打个比方，通过HTML属性定义的事件处理代码，见如下代码：\n``` JS\n\n var Name = function(name) {\n    this.name = name;\n    this.getName = function () {\n        alert(this.name);\n    }\n };\n   var ioldFish = new Name(\"Hello\"),\n   btn = document.getElementById('btn');\n   btn.onclick = ioldFish.getName;\n   //btn.onclick = function(){ioldFish.getName.call(ioldFish)};\n```\n上例中点了按钮以后弹出框里并没有显示出实例对象的属性，这是因为this的执行上下文已经改变了，他现在所在的上下文应该是input这个HTML标签，但是该标签又不存在getName这个属性，所以自然无法输出这个属性的属性值了！从这个例子我们不难看出：执行上下文是在执行时才确定的，它随时可以变。\n\n当然你可以去掉上面我注释掉的那段代码，通过call改变this的执行上下文，从而获取getName方法。apply方法同样可以实现改变执行上下文的功能，不过在prototype框架中发现了一个更为优美的实现方法bind。看一下这个方法的实现吧，不得不感叹先人的伟大……\n\n``` JS\nFunction.prototype.bind = function(obj) {\n    var method = this,\n    temp = function() {\n        return method.apply(obj, arguments);\n    };\n}\n```\n循序渐进,日有所学。学习语言基本靠实践。只要不断的写才能得到提高。\n\n\n感谢老鱼的文章：本文引自：http://ued.alipay.com/2009/03/javascript-orient-object/  ","slug":"javascript/OOJ-THREE","published":1,"updated":"2018-01-05T03:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2q000zfme3x3ud69lw","content":"<p>今天谈谈面向对象编程的三个主要的关键词：封装、继承、多态。</p>\n<p>javascript面向对象编程，既然是面向对象编程不得不提到面向对象的几大关键字：封装，继承，多态。</p>\n<a id=\"more\"></a>\n<h3 id=\"首先：封装\"><a href=\"#首先：封装\" class=\"headerlink\" title=\"首先：封装\"></a>首先：封装</h3><p>在前几篇的文章中我们已经了解到JAVASCRIPT需要通过模拟实现一些类似C++,C#语言面向对象的特征。</p>\n<p>今天我们重新温习加强理解下实现的要点与注意事项：</p>\n<p>javascript中创建对象的模式中，一般认为通过闭包才算的上是真正意义上的封装，所以首先我们先来简单介绍一下闭包，看下面这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInfo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name =<span class=\"string\">\"Hello\"</span>,age =<span class=\"number\">27</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myInfo = <span class=\"string\">\"my name is\"</span> + name + <span class=\"string\">\"i am\"</span> + age +<span class=\"string\">\"years old\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showInfo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      alert(myInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> showInfo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oldFish = myInfo();</span><br><span class=\"line\">  oldFish();</span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码段其实就是一个简单的闭包应用。<br>简单解释一下：上面的函数myInfo中定义的变量，在它的内嵌函数showInfo中是可访问的（这个很好理解），但是当我们把这个内嵌函数的返回引用赋值给一个变量oldFish，这个时候函数showInfo是在myInfo函数体外被调用，但是同样可以访问到定义在函数体内的变量。<br>总结一下闭包的原理吧：函数是运行在定义他们的作用域中而不是调用他们的作用域中。其实返回一个内嵌函数也是创建闭包最常用的一种方法！ </p>\n<p>如果觉得上面的解释太抽象的话，那么我们一起重塑上面的函数，看看这样是否层次鲜明一些：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ioldFish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = name,age = age;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myInfo = <span class=\"string\">\"my name is\"</span> + name + <span class=\"string\">\"i am\"</span> + age +<span class=\"string\">\"\"</span>&gt;years old<span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">  return &#123;</span></span><br><span class=\"line\"><span class=\"string\">    showInfo: function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">      alert(myInfo);  </span></span><br><span class=\"line\"><span class=\"string\">    &#125; </span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">ioldFish(\"</span>Hello<span class=\"string\">\",27).showInfo();</span></span><br></pre></td></tr></table></figure>\n<p>上例中的编码风格是ext yui中比较常见的，公私分明，一目了然。通过闭包，我们可以很方便的把一些不希望被外部直接访问到的东西隐藏起来，你要访问函数内定义的变量，只能通过特定的方法才可以访问的到，直接从外部访问是访问不到的，写的挺累，饶了一圈终于转回来了，封装嘛，不就是把不希望被别人看到的东西隐藏起来嘛！<br>上例如果转换成JQ的风格的话，应该如下例所写， 这样的封装模式属于门户大开型模式，里面定义的变量是可以被外部访问到的（下面的例子如果你先实例化一个对象，然后在函数外部访问对象的name或者age属性都是可以读取到的）当然这种模式下我们可以设置一些”潜规则”，让团队开发成员明白哪些变量是私用的，通常我们人为的在私有变量和方法前加下划线”_”，标识警戒讯号！从而实现”封装”！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ioldFish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ioldFish.func.init(name,age);  </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ioldFish.func = ioldFish.prototype =&#123;</span><br><span class=\"line\">        init:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        showInfo:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> info = <span class=\"string\">\"my name is\"</span> + <span class=\"keyword\">this</span>.name +<span class=\"string\">\"i am \"</span> +<span class=\"keyword\">this</span>.age+<span class=\"string\">\"years old\"</span>;</span><br><span class=\"line\">            alert(info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ioldFish.func.init.prototype = ioldFish.func;</span><br><span class=\"line\">    ioldFish(<span class=\"string\">\"Hello\"</span>,<span class=\"number\">27</span>).showInfo();</span><br><span class=\"line\">    <span class=\"comment\">//var oldFish = new ioldFish(\"Hello\",27);</span></span><br><span class=\"line\">    <span class=\"comment\">//alert(oldFish.name);</span></span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>两种模式各有特点，大家看情况随机使用。</p>\n<h2 id=\"其次：继承\"><a href=\"#其次：继承\" class=\"headerlink\" title=\"其次：继承\"></a>其次：继承</h2><p>与闭包封装有点冲突，闭包封装不利于子类派生。</p>\n<p>在javascript中继承一般分为三种方式：”类式继承”，”原型继承”,”掺元类”。下面简单的介绍一下三类继承方式的原理。 </p>\n<p><em>A.类式继承</em>：这个是现在主流框架中常用的继承方式，看下例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Name.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    Name.call(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Fish.prototype = <span class=\"keyword\">new</span> Name();</span><br><span class=\"line\">  Fish.prototype.constructor = Fish;</span><br><span class=\"line\">  Fish.prototype.showInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ioldFish = <span class=\"keyword\">new</span> Fish(<span class=\"string\">\"Hello\"</span>,<span class=\"number\">27</span>);</span><br><span class=\"line\">  ioldFish.getName();</span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>上述子类Fish中并没定义getName方法，但是子类Fish的实例对象ioldFish依然调用到了该方法，这是因为子类Fish继承了父类Name中定义的getName方法。解释一下，这里子类Fish的prototype指到了父类的一个实例，在子类Fish中虽然没有申明getName方法，但是根据原型链原理，会向prototype指向的上一级对象中去查找是否有该方法，如果没找到该方法，会一直搜索到最初的原型对象。这其实也就是继承的原理了。这里特别说明一下，Fish.prototype.constructor = Fish;这句，由于默认子类的prototype应该是指向本身的，但是之前把prototype指向到了超类的实例对象，所以在这里要把它设置回来。当然这里可以把相关代码通过一个函数来组织起来，起到伪装extend的作用，这里不再阐述。 </p>\n<p><em>B.原型继承</em>，从内存性能上看优于类式继承。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">object</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = object;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Name = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"who's name\"</span>,</span><br><span class=\"line\">    showInfo:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fish = clone(Name);</span><br><span class=\"line\">  <span class=\"comment\">//Fish.name = \"Hello\";</span></span><br><span class=\"line\">  Fish.showInfo();</span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>很明显，原型继承核心就是这个clone函数，同样是原型链的原理，不同的是它直接克隆超类，这样的话子类就继承了超类的所有属性和方法.特别说一下，这类继承并不需要创建构造函数，只需要创建一个对象字变量，定义相应的属性和方法，然后在子类中只需要通过圆点”.”符号来引用属性和方法就可以了.</p>\n<p><em>C.掺元类</em>：把一些常用通用性比较大的方法统一封装在一个函数中，然后通过下面这个函数分派给要用到这些方法的类．还可以针对不同的类，选择性的传递需要的方法。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agument</span>(<span class=\"params\">receveClass,giveClass</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">      receveClass.prototype[<span class=\"built_in\">arguments</span>[i]] = giveClass.prototype[<span class=\"built_in\">arguments</span>[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(method <span class=\"keyword\">in</span> giveClass.prototype)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!receveClass.prototype[method])&#123;</span><br><span class=\"line\">        receveClass.prototype[method] = giveClass.prototype[method];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Name.prototype =&#123;</span><br><span class=\"line\">  sayLike:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"i like oldfish\"</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sayLove:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"i love oldfish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Fish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ioldFish = <span class=\"keyword\">new</span> Fish();</span><br><span class=\"line\">agument(Fish,Name,<span class=\"string\">\"sayLove\"</span>);</span><br><span class=\"line\">ioldFish.sayLove();</span><br><span class=\"line\">ioldFish.sayLike();</span><br></pre></td></tr></table></figure>\n<p>多态：个人觉得这个比较抽象，很难言传，所以下面就从重载和覆盖两个方面来简单阐述一下。</p>\n<p>重载：上面这个例子中agument函数初始带了两个参数，但是在后面的调用中，agument(Fish,Name,”sayLove”)同样可以带入任意多个参数，javascript的重载，是在函数中由用户自己通过操作arguments这个属性来实现的。</p>\n<p>覆盖：这个很简单，就是子类中定义的方法如果与从超类中继承过来的的方法同名，就覆盖这个方法（这里并不是覆盖超类中的方法，注意一下），这里就不累赘了！</p>\n<p>最后重点着墨说一下this和执行上下文，在前面举的封装例子中，this都是表示this所在的类的实例化对象本身，但是并不是千篇一律的，打个比方，通过HTML属性定义的事件处理代码，见如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ioldFish = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Hello\"</span>),</span><br><span class=\"line\">  btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">  btn.onclick = ioldFish.getName;</span><br><span class=\"line\">  <span class=\"comment\">//btn.onclick = function()&#123;ioldFish.getName.call(ioldFish)&#125;;</span></span><br></pre></td></tr></table></figure></p>\n<p>上例中点了按钮以后弹出框里并没有显示出实例对象的属性，这是因为this的执行上下文已经改变了，他现在所在的上下文应该是input这个HTML标签，但是该标签又不存在getName这个属性，所以自然无法输出这个属性的属性值了！从这个例子我们不难看出：执行上下文是在执行时才确定的，它随时可以变。</p>\n<p>当然你可以去掉上面我注释掉的那段代码，通过call改变this的执行上下文，从而获取getName方法。apply方法同样可以实现改变执行上下文的功能，不过在prototype框架中发现了一个更为优美的实现方法bind。看一下这个方法的实现吧，不得不感叹先人的伟大……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> method = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    temp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.apply(obj, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循序渐进,日有所学。学习语言基本靠实践。只要不断的写才能得到提高。</p>\n<p>感谢老鱼的文章：本文引自：<a href=\"http://ued.alipay.com/2009/03/javascript-orient-object/\" target=\"_blank\" rel=\"noopener\">http://ued.alipay.com/2009/03/javascript-orient-object/</a>  </p>\n","site":{"data":{}},"excerpt":"<p>今天谈谈面向对象编程的三个主要的关键词：封装、继承、多态。</p>\n<p>javascript面向对象编程，既然是面向对象编程不得不提到面向对象的几大关键字：封装，继承，多态。</p>","more":"<h3 id=\"首先：封装\"><a href=\"#首先：封装\" class=\"headerlink\" title=\"首先：封装\"></a>首先：封装</h3><p>在前几篇的文章中我们已经了解到JAVASCRIPT需要通过模拟实现一些类似C++,C#语言面向对象的特征。</p>\n<p>今天我们重新温习加强理解下实现的要点与注意事项：</p>\n<p>javascript中创建对象的模式中，一般认为通过闭包才算的上是真正意义上的封装，所以首先我们先来简单介绍一下闭包，看下面这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInfo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name =<span class=\"string\">\"Hello\"</span>,age =<span class=\"number\">27</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myInfo = <span class=\"string\">\"my name is\"</span> + name + <span class=\"string\">\"i am\"</span> + age +<span class=\"string\">\"years old\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showInfo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      alert(myInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> showInfo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oldFish = myInfo();</span><br><span class=\"line\">  oldFish();</span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码段其实就是一个简单的闭包应用。<br>简单解释一下：上面的函数myInfo中定义的变量，在它的内嵌函数showInfo中是可访问的（这个很好理解），但是当我们把这个内嵌函数的返回引用赋值给一个变量oldFish，这个时候函数showInfo是在myInfo函数体外被调用，但是同样可以访问到定义在函数体内的变量。<br>总结一下闭包的原理吧：函数是运行在定义他们的作用域中而不是调用他们的作用域中。其实返回一个内嵌函数也是创建闭包最常用的一种方法！ </p>\n<p>如果觉得上面的解释太抽象的话，那么我们一起重塑上面的函数，看看这样是否层次鲜明一些：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ioldFish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = name,age = age;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myInfo = <span class=\"string\">\"my name is\"</span> + name + <span class=\"string\">\"i am\"</span> + age +<span class=\"string\">\"\"</span>&gt;years old<span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">  return &#123;</span></span><br><span class=\"line\"><span class=\"string\">    showInfo: function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">      alert(myInfo);  </span></span><br><span class=\"line\"><span class=\"string\">    &#125; </span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">ioldFish(\"</span>Hello<span class=\"string\">\",27).showInfo();</span></span><br></pre></td></tr></table></figure>\n<p>上例中的编码风格是ext yui中比较常见的，公私分明，一目了然。通过闭包，我们可以很方便的把一些不希望被外部直接访问到的东西隐藏起来，你要访问函数内定义的变量，只能通过特定的方法才可以访问的到，直接从外部访问是访问不到的，写的挺累，饶了一圈终于转回来了，封装嘛，不就是把不希望被别人看到的东西隐藏起来嘛！<br>上例如果转换成JQ的风格的话，应该如下例所写， 这样的封装模式属于门户大开型模式，里面定义的变量是可以被外部访问到的（下面的例子如果你先实例化一个对象，然后在函数外部访问对象的name或者age属性都是可以读取到的）当然这种模式下我们可以设置一些”潜规则”，让团队开发成员明白哪些变量是私用的，通常我们人为的在私有变量和方法前加下划线”_”，标识警戒讯号！从而实现”封装”！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ioldFish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ioldFish.func.init(name,age);  </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ioldFish.func = ioldFish.prototype =&#123;</span><br><span class=\"line\">        init:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        showInfo:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> info = <span class=\"string\">\"my name is\"</span> + <span class=\"keyword\">this</span>.name +<span class=\"string\">\"i am \"</span> +<span class=\"keyword\">this</span>.age+<span class=\"string\">\"years old\"</span>;</span><br><span class=\"line\">            alert(info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ioldFish.func.init.prototype = ioldFish.func;</span><br><span class=\"line\">    ioldFish(<span class=\"string\">\"Hello\"</span>,<span class=\"number\">27</span>).showInfo();</span><br><span class=\"line\">    <span class=\"comment\">//var oldFish = new ioldFish(\"Hello\",27);</span></span><br><span class=\"line\">    <span class=\"comment\">//alert(oldFish.name);</span></span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>两种模式各有特点，大家看情况随机使用。</p>\n<h2 id=\"其次：继承\"><a href=\"#其次：继承\" class=\"headerlink\" title=\"其次：继承\"></a>其次：继承</h2><p>与闭包封装有点冲突，闭包封装不利于子类派生。</p>\n<p>在javascript中继承一般分为三种方式：”类式继承”，”原型继承”,”掺元类”。下面简单的介绍一下三类继承方式的原理。 </p>\n<p><em>A.类式继承</em>：这个是现在主流框架中常用的继承方式，看下例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Name.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    Name.call(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Fish.prototype = <span class=\"keyword\">new</span> Name();</span><br><span class=\"line\">  Fish.prototype.constructor = Fish;</span><br><span class=\"line\">  Fish.prototype.showInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ioldFish = <span class=\"keyword\">new</span> Fish(<span class=\"string\">\"Hello\"</span>,<span class=\"number\">27</span>);</span><br><span class=\"line\">  ioldFish.getName();</span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>上述子类Fish中并没定义getName方法，但是子类Fish的实例对象ioldFish依然调用到了该方法，这是因为子类Fish继承了父类Name中定义的getName方法。解释一下，这里子类Fish的prototype指到了父类的一个实例，在子类Fish中虽然没有申明getName方法，但是根据原型链原理，会向prototype指向的上一级对象中去查找是否有该方法，如果没找到该方法，会一直搜索到最初的原型对象。这其实也就是继承的原理了。这里特别说明一下，Fish.prototype.constructor = Fish;这句，由于默认子类的prototype应该是指向本身的，但是之前把prototype指向到了超类的实例对象，所以在这里要把它设置回来。当然这里可以把相关代码通过一个函数来组织起来，起到伪装extend的作用，这里不再阐述。 </p>\n<p><em>B.原型继承</em>，从内存性能上看优于类式继承。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// &lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">object</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = object;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Name = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"who's name\"</span>,</span><br><span class=\"line\">    showInfo:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fish = clone(Name);</span><br><span class=\"line\">  <span class=\"comment\">//Fish.name = \"Hello\";</span></span><br><span class=\"line\">  Fish.showInfo();</span><br><span class=\"line\"><span class=\"comment\">// ]]&gt;</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>很明显，原型继承核心就是这个clone函数，同样是原型链的原理，不同的是它直接克隆超类，这样的话子类就继承了超类的所有属性和方法.特别说一下，这类继承并不需要创建构造函数，只需要创建一个对象字变量，定义相应的属性和方法，然后在子类中只需要通过圆点”.”符号来引用属性和方法就可以了.</p>\n<p><em>C.掺元类</em>：把一些常用通用性比较大的方法统一封装在一个函数中，然后通过下面这个函数分派给要用到这些方法的类．还可以针对不同的类，选择性的传递需要的方法。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agument</span>(<span class=\"params\">receveClass,giveClass</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">      receveClass.prototype[<span class=\"built_in\">arguments</span>[i]] = giveClass.prototype[<span class=\"built_in\">arguments</span>[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(method <span class=\"keyword\">in</span> giveClass.prototype)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!receveClass.prototype[method])&#123;</span><br><span class=\"line\">        receveClass.prototype[method] = giveClass.prototype[method];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Name.prototype =&#123;</span><br><span class=\"line\">  sayLike:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"i like oldfish\"</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sayLove:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"i love oldfish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Fish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ioldFish = <span class=\"keyword\">new</span> Fish();</span><br><span class=\"line\">agument(Fish,Name,<span class=\"string\">\"sayLove\"</span>);</span><br><span class=\"line\">ioldFish.sayLove();</span><br><span class=\"line\">ioldFish.sayLike();</span><br></pre></td></tr></table></figure>\n<p>多态：个人觉得这个比较抽象，很难言传，所以下面就从重载和覆盖两个方面来简单阐述一下。</p>\n<p>重载：上面这个例子中agument函数初始带了两个参数，但是在后面的调用中，agument(Fish,Name,”sayLove”)同样可以带入任意多个参数，javascript的重载，是在函数中由用户自己通过操作arguments这个属性来实现的。</p>\n<p>覆盖：这个很简单，就是子类中定义的方法如果与从超类中继承过来的的方法同名，就覆盖这个方法（这里并不是覆盖超类中的方法，注意一下），这里就不累赘了！</p>\n<p>最后重点着墨说一下this和执行上下文，在前面举的封装例子中，this都是表示this所在的类的实例化对象本身，但是并不是千篇一律的，打个比方，通过HTML属性定义的事件处理代码，见如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ioldFish = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Hello\"</span>),</span><br><span class=\"line\">  btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">  btn.onclick = ioldFish.getName;</span><br><span class=\"line\">  <span class=\"comment\">//btn.onclick = function()&#123;ioldFish.getName.call(ioldFish)&#125;;</span></span><br></pre></td></tr></table></figure></p>\n<p>上例中点了按钮以后弹出框里并没有显示出实例对象的属性，这是因为this的执行上下文已经改变了，他现在所在的上下文应该是input这个HTML标签，但是该标签又不存在getName这个属性，所以自然无法输出这个属性的属性值了！从这个例子我们不难看出：执行上下文是在执行时才确定的，它随时可以变。</p>\n<p>当然你可以去掉上面我注释掉的那段代码，通过call改变this的执行上下文，从而获取getName方法。apply方法同样可以实现改变执行上下文的功能，不过在prototype框架中发现了一个更为优美的实现方法bind。看一下这个方法的实现吧，不得不感叹先人的伟大……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> method = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    temp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.apply(obj, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循序渐进,日有所学。学习语言基本靠实践。只要不断的写才能得到提高。</p>\n<p>感谢老鱼的文章：本文引自：<a href=\"http://ued.alipay.com/2009/03/javascript-orient-object/\" target=\"_blank\" rel=\"noopener\">http://ued.alipay.com/2009/03/javascript-orient-object/</a>  </p>"},{"title":"代码实现无障碍的对话框","p":"javascript/code-snippet-dialog","date":"2013-03-17T07:50:54.000Z","_content":"\n## 前言\n\n全方面考虑对话框对可访问性的影响。\n多数情况下，它是可访问性的一个灾难。输入焦点未能正确处理以及屏幕阅读器无法感知内容变化。其实，使对话框可访问并非如此困难，你只需要理解几行代码的作用。\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [首先考虑 ARIA](#首先考虑-aria)\n    - [如何将焦点设置在对话框上？](#如何将焦点设置在对话框上)\n    - [如何限制焦点(Trapping focus)？](#如何限制焦点trapping-focus)\n    - [如何恢复焦点(Restoring focus)？](#如何恢复焦点restoring-focus)\n    - [最后退出对话框](#最后退出对话框)\n    - [DEMO示例](#demo示例)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n### 首先考虑 ARIA \n\n如果你想要屏幕阅读器用户感知到弹出了一个对话框，那么你需要学习一些ARIA role知识。ARIA role [1]为HTML元素提供了额外的语义，让浏览器与屏幕阅读器以更具描述性的方式进行沟通。ARIA定义了大量的角色，改变了屏幕阅读器感知页面中不同元素的方式。与对话框有关的角色有两个：dialog和alertdialog 。\n\n在大多数情况下， 我们使用dialog。将一个元素的role属性设为此值，浏览器则会把该元素看作为一个对话框。\n\n``` JS\n<div id=\"my-dialog\" role=\"dialog\">\n    <-- Your dialog code here -->\n</div>\n```\n\n当role属性值为dialog的元素可见时，浏览器会告知屏幕阅读器一个对话框已打开。这可以让屏幕阅读器用户意识到，他们已经不在页面的常规流中了。\n\n对话框应有描述标签（label）。你可以使用aria-label属性来指明描述文本或者使用aria-labelledby属性来指明包含描述文字的元素的ID。示例如下：\n\n``` JS\n<div id=\"my-dialog\" role=\"dialog\" aria-label=\"New Message\">\n    <-- Your dialog code here -->\n</div>\n\n<div id=\"my-dialog\" role=\"dialog\" aria-labelledby=\"dialog-title\">\n    <h3 id=\"dialog-title\">New Message</h3>\n    <-- Your dialog code here -->\n</div>\n```\n在第一个例子中，aria-label属性用于指定一个仅用于屏幕阅读器的标签。当对话框的label无需可见时，你可以使用此方法。在第二个例子中，aria-labelledby属性用于指定包含对话框标签的元素的ID。由于对话框有一个可见的标签，关联复用比再重复一遍更妥。当对话框显示时，屏幕阅读器会报读对话框的标签。\n\nalertdialog role是对话框的一种特殊类型，目的是为了吸引用户的注意力。你可以把它看作是当你尝试删除一些东西时弹出的确认对话框（confirmation dialog ）。alertdialog的交互相比而言较少。它的主要目的是让用户感知到一个操作已执行。与此相比，dialog 可能是供用户输入信息的区域，比如写一封电子邮件或即时消息。\n\n当一个alertdialog显示时，屏幕阅读器会查找描述文字来报读。建议使用aria-describedby来指定需要朗读的文本。这个属性与aria-labelledby 类似，其值是包含欲朗读内容的元素的ID。如果未指定aria-describedby，那么屏幕阅读器将试图找出能起描述作用的文本，往往会选择元素内第一段文本内容。例如：\n\n``` JS\n<div id=\"my-dialog\" role=\"alertdialog\" aria-describedby=\"dialog-desc\">\n    <p id=\"dialog-desc\">Are you sure you want to delete this message?</p>\n    <-- Your dialog code here -->\n</div>\n```\n此示例使用一个元素包含了描述文本。这样做可以确保在对话框显示时，会报读正确的文本。\n\n即使你不设置这些额外的属性，仅对对话框设置适当的role，应用的可访问性也会得到极大地提高。\n\n\n### 如何将焦点设置在对话框上？\n创建无障碍对话框的下一步就是管理焦点。当一个对话框出现时，焦点应在对话框内，这样用户才可以使用键盘继续浏览。焦点设置在对话框内的确切位置，在很大程度上取决于对话框本身的目的。如果确认对话框（confirmation dialog ）内有一个“继续”按钮和一个“取消”按钮，那么你可以将焦点默认设置在“取消”按钮上。如果对话框是用来让用户输入文字的，那么你可以将焦点默认设置在文本输入框内。如果你实在不知道将焦点设在何处，将焦点设置在能代表对话框的元素上是个不错的选择。\n\n由于多数情况下，我们使用<div>元素来表示一个对话框，那么可以将焦点默认设置在该<div>上。你需要将该元素的tabIndex属性设置为-1，这样这个元素才能获得焦点。这个属性值允许你使用JavaScript将焦点设置到该元素，但不会将该元素插入到正常的Tab键顺序中。也就是说用户将无法按TAB键将焦点设置在对话框上。直接在HTML中设置或通过JavaScript设置都可以。在HTML中设置：\n\n``` JS\n<div id=\"my-dialog\" role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"dialog-title\">\n    <h3 id=\"dialog-title\">New Message</h3>\n    <-- Your dialog code here -->\n</div>\n```\n通过JavaScript设置：\n\n``` JS\nvar div = document.getElementById(\"my-dialog\");\ndiv.tabIndex = -1;\ndiv.focus();\n```\n\n一旦将tabIndex设置为-1，元素就可以调用focus()，就像任何其他的可聚焦元素一样。这样用户就可以按Tab键在对话框中导航了。\n\n### 如何限制焦点(Trapping focus)？\n对话框的另一个可访问性问题是要确保焦点不能跳出对话框。一般来说，如果对话框是模态的，其焦点应无法逃脱对话框。当对话框打开时，如果按tab键将焦点设置到对话框背后的页面元素中，那么对于键盘用户来说将焦点重新返回到对话框内是相当困难的。因此，我们最好使用一些JavaScript以避免这种情况发生。\n\n基本思路是使用事件捕获（event capturing）侦听focus事件，这种方法由Peter-Paul Koch[2]推广，如今已在JavaScript库中广泛使用。由于focus不冒泡（bubble），你无法在事件流的冒泡阶段捕捉到它。相反，你可以通过使用事件捕获方法捕获页面上的所有focus事件。之后，你只需确定获得焦点的元素是否在对话框中。如果没有，则将焦点设置在对话框上。代码是非常简单的：\n\n``` JS\ndocument.addEventListener(\"focus\", function(event) {\n    var dialog = document.getElementById(\"my-dialog\");\n    if (dialogOpen && !dialog.contains(event.target)) {\n        event.stopPropagation();\n        dialog.focus();\n    }\n}, true);\n```\n代码监听document的focus事件，用以在目标元素接收到它们之前截获所有这类事件。假设对话框打开时，变量dialogOpen的值为true。当focus事件发生时，这个函数截获事件，并检查对话框是否是打开的，如果是的话，再检查接收焦点的元素是否在对话框内。如果两个条件都满足，则重新将焦点设置在对话框上。这样焦点就会在对话框的尾部和起始处循环。这就不会tab出对话框，键盘用户就很难再迷失方向。\n\n如果你使用JavaScript库的话，focus事件委托的方法也可以实现同样的效果。如果不使用JavaScript库，同时需要支持Internet Explorer 8及更早的版本，可以使用focusin事件代替(译者注：focusin和focusout支持事件冒泡)。\n\n### 如何恢复焦点(Restoring focus)？\n对话框的最后一个焦点难题：当对话框关闭时，将焦点返回至页面的主体部分。思路很简单：为了打开对话框，用户可能激活了一个链接或一个按钮。此时焦点转移到对话框中，用户完成一些任务后，然后退出对话框。焦点应该重新设回至为了打开对话框而点击的链接或按钮上，以便可以继续浏览网页。在Web应用程序中经常忽视这个问题，但效果是天壤之别。\n\n与其他部分一样，少量代码即可实现效果。所有浏览器都支持document.activeElement ，返回当前具有焦点的元素。你只需获得这个值，然后显示对话框，关闭对话框时，将焦点返回到该元素。例如:\n\n``` JS\nvar lastFocus = document.activeElement,\n    dialog = document.getElementById(\"my-dialog\");\n\ndialog.className = \"show\";\ndialog.focus();\n```\n这段代码的重点是它记录了最后的焦点元素。这样一来，对话框被关闭时，将焦点设置在它上面：\n\n``` JS\nlastFocus.focus()\n```\n总体而言，只会在你已有的对话框代码上增加几行代码即可实现。\n\n\n### 最后退出对话框\n最后一个问题是要为用户提供一个快速简便的方法来退出对话框。最好的办法是使用Esc键关闭对话框。这是对话框在桌面应用程序中的退出方式，所以用户非常熟悉这种方式。只需监听Esc键是否被按下，然后退出对话框，如：\n\n``` JS\ndocument.addEventListener(\"keydown\", function(event) {\n    if (dialogOpen && event.keyCode == 27) {\n        // close the dialog\n    }\n}, true);\n```\nEsc键的keyCode值是27，所以你只需在keydown事件中查找它。一旦监听到，关闭对话框并将焦点设置回之前的焦点元素上。\n\n\n### DEMO示例\n\n[jsbin](http://jsbin.com/saloraj)\n\n``` JS\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n\n  <div class=\"content\">\n    Page Content\n    <button id=\"openDialog\">打开dialog</button>\n  </div>\n  \n<div id=\"my-dialog\" role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"dialog-title\">\n    <h3 id=\"dialog-title\">New Message</h3>\n    <!-- Your dialog code here -->\n    <p id=\"dialog-desc\">Are you sure you want to delete this message?</p>\n  <button id=\"closeDialog\">关闭dialog</button>\n</div>\n</body>\n</html>\n```\n\nCSS部分\n\n``` css\n* {\n  margin:0;\n  padding:0;\n  font-size:12px;\n}\nbutton {\n  width: 100px;\n  height:30px;\n}\n\n#my-dialog {\n  width: 400px;\n  height: 300px;\n  border: solid 1px red;\n  position:absolute;\n  display: none;\n  top:50%;\n  left:50%;\n  margin-top: -150px;\n  margin-left: -200px;\n}\n#my-dialog.show {\n  display: block;\n}\n#dialog-title {\n  font-size:14px;\n  background: #d4d3de;\n  height: 40px;\n  line-height: 40px;\n}\n```\n\nJS部分\n``` JS\nvar lastFocus = document.activeElement,\n    dialogOpen = false,\n    dialog = document.getElementById(\"my-dialog\"),\n    btnOpenDG = document.getElementById(\"openDialog\"),\n    btnCloseDG = document.getElementById(\"closeDialog\");\n//div.tabIndex = -1;\n//div.focus();\n\n\nbtnOpenDG.addEventListener(\"click\", function(){\n  showDialog()\n});\n\nbtnCloseDG.addEventListener(\"click\", function(){\n  closeDialog()\n})\n\ndocument.onload += function(){\n  \n  document.addEventListener(\"focus\", function(event) {\n    var dialog = document.getElementById(\"my-dialog\");\n    if (dialogOpen && !dialog.contains(event.target)) {\n        event.stopPropagation();\n        dialog.focus();\n    }\n}, true);\n  \n  \n  document.addEventListener(\"keydown\", function(event) {\n    if (dialogOpen && event.keyCode == 27) {\n        // close the dialog\n        resetDialog()\n    }\n}, true);\n  \n}\n\nfunction showDialog(){\n  lastFocus = document.activeElement;\n  dialog.className = \"show\";\n  dialog.focus();\n  dialogOpen = true;\n}\n\nfunction resetDialog(){\n  lastFocus.focus();\n  dialogOpen = false;\n  dialog.className = '';\n}\n\nfunction closeDialog(){\n  resetDialog()\n}\n\n```\n## 小结\n\n[WAI-ARIA （W3C）](http://www.w3.org/WAI/intro/aria.php)\n[focus和blur事件委托](http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html) by Peter-Paul Koch（Quirksmode）\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/code-snippet-dialog.md","raw":"---\ntitle: 代码实现无障碍的对话框\np: javascript/code-snippet-dialog\ndate: 2013-03-17 15:50:54\ntags: [javascript,dialog]\ncategories: Javascript\n---\n\n## 前言\n\n全方面考虑对话框对可访问性的影响。\n多数情况下，它是可访问性的一个灾难。输入焦点未能正确处理以及屏幕阅读器无法感知内容变化。其实，使对话框可访问并非如此困难，你只需要理解几行代码的作用。\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [首先考虑 ARIA](#首先考虑-aria)\n    - [如何将焦点设置在对话框上？](#如何将焦点设置在对话框上)\n    - [如何限制焦点(Trapping focus)？](#如何限制焦点trapping-focus)\n    - [如何恢复焦点(Restoring focus)？](#如何恢复焦点restoring-focus)\n    - [最后退出对话框](#最后退出对话框)\n    - [DEMO示例](#demo示例)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n### 首先考虑 ARIA \n\n如果你想要屏幕阅读器用户感知到弹出了一个对话框，那么你需要学习一些ARIA role知识。ARIA role [1]为HTML元素提供了额外的语义，让浏览器与屏幕阅读器以更具描述性的方式进行沟通。ARIA定义了大量的角色，改变了屏幕阅读器感知页面中不同元素的方式。与对话框有关的角色有两个：dialog和alertdialog 。\n\n在大多数情况下， 我们使用dialog。将一个元素的role属性设为此值，浏览器则会把该元素看作为一个对话框。\n\n``` JS\n<div id=\"my-dialog\" role=\"dialog\">\n    <-- Your dialog code here -->\n</div>\n```\n\n当role属性值为dialog的元素可见时，浏览器会告知屏幕阅读器一个对话框已打开。这可以让屏幕阅读器用户意识到，他们已经不在页面的常规流中了。\n\n对话框应有描述标签（label）。你可以使用aria-label属性来指明描述文本或者使用aria-labelledby属性来指明包含描述文字的元素的ID。示例如下：\n\n``` JS\n<div id=\"my-dialog\" role=\"dialog\" aria-label=\"New Message\">\n    <-- Your dialog code here -->\n</div>\n\n<div id=\"my-dialog\" role=\"dialog\" aria-labelledby=\"dialog-title\">\n    <h3 id=\"dialog-title\">New Message</h3>\n    <-- Your dialog code here -->\n</div>\n```\n在第一个例子中，aria-label属性用于指定一个仅用于屏幕阅读器的标签。当对话框的label无需可见时，你可以使用此方法。在第二个例子中，aria-labelledby属性用于指定包含对话框标签的元素的ID。由于对话框有一个可见的标签，关联复用比再重复一遍更妥。当对话框显示时，屏幕阅读器会报读对话框的标签。\n\nalertdialog role是对话框的一种特殊类型，目的是为了吸引用户的注意力。你可以把它看作是当你尝试删除一些东西时弹出的确认对话框（confirmation dialog ）。alertdialog的交互相比而言较少。它的主要目的是让用户感知到一个操作已执行。与此相比，dialog 可能是供用户输入信息的区域，比如写一封电子邮件或即时消息。\n\n当一个alertdialog显示时，屏幕阅读器会查找描述文字来报读。建议使用aria-describedby来指定需要朗读的文本。这个属性与aria-labelledby 类似，其值是包含欲朗读内容的元素的ID。如果未指定aria-describedby，那么屏幕阅读器将试图找出能起描述作用的文本，往往会选择元素内第一段文本内容。例如：\n\n``` JS\n<div id=\"my-dialog\" role=\"alertdialog\" aria-describedby=\"dialog-desc\">\n    <p id=\"dialog-desc\">Are you sure you want to delete this message?</p>\n    <-- Your dialog code here -->\n</div>\n```\n此示例使用一个元素包含了描述文本。这样做可以确保在对话框显示时，会报读正确的文本。\n\n即使你不设置这些额外的属性，仅对对话框设置适当的role，应用的可访问性也会得到极大地提高。\n\n\n### 如何将焦点设置在对话框上？\n创建无障碍对话框的下一步就是管理焦点。当一个对话框出现时，焦点应在对话框内，这样用户才可以使用键盘继续浏览。焦点设置在对话框内的确切位置，在很大程度上取决于对话框本身的目的。如果确认对话框（confirmation dialog ）内有一个“继续”按钮和一个“取消”按钮，那么你可以将焦点默认设置在“取消”按钮上。如果对话框是用来让用户输入文字的，那么你可以将焦点默认设置在文本输入框内。如果你实在不知道将焦点设在何处，将焦点设置在能代表对话框的元素上是个不错的选择。\n\n由于多数情况下，我们使用<div>元素来表示一个对话框，那么可以将焦点默认设置在该<div>上。你需要将该元素的tabIndex属性设置为-1，这样这个元素才能获得焦点。这个属性值允许你使用JavaScript将焦点设置到该元素，但不会将该元素插入到正常的Tab键顺序中。也就是说用户将无法按TAB键将焦点设置在对话框上。直接在HTML中设置或通过JavaScript设置都可以。在HTML中设置：\n\n``` JS\n<div id=\"my-dialog\" role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"dialog-title\">\n    <h3 id=\"dialog-title\">New Message</h3>\n    <-- Your dialog code here -->\n</div>\n```\n通过JavaScript设置：\n\n``` JS\nvar div = document.getElementById(\"my-dialog\");\ndiv.tabIndex = -1;\ndiv.focus();\n```\n\n一旦将tabIndex设置为-1，元素就可以调用focus()，就像任何其他的可聚焦元素一样。这样用户就可以按Tab键在对话框中导航了。\n\n### 如何限制焦点(Trapping focus)？\n对话框的另一个可访问性问题是要确保焦点不能跳出对话框。一般来说，如果对话框是模态的，其焦点应无法逃脱对话框。当对话框打开时，如果按tab键将焦点设置到对话框背后的页面元素中，那么对于键盘用户来说将焦点重新返回到对话框内是相当困难的。因此，我们最好使用一些JavaScript以避免这种情况发生。\n\n基本思路是使用事件捕获（event capturing）侦听focus事件，这种方法由Peter-Paul Koch[2]推广，如今已在JavaScript库中广泛使用。由于focus不冒泡（bubble），你无法在事件流的冒泡阶段捕捉到它。相反，你可以通过使用事件捕获方法捕获页面上的所有focus事件。之后，你只需确定获得焦点的元素是否在对话框中。如果没有，则将焦点设置在对话框上。代码是非常简单的：\n\n``` JS\ndocument.addEventListener(\"focus\", function(event) {\n    var dialog = document.getElementById(\"my-dialog\");\n    if (dialogOpen && !dialog.contains(event.target)) {\n        event.stopPropagation();\n        dialog.focus();\n    }\n}, true);\n```\n代码监听document的focus事件，用以在目标元素接收到它们之前截获所有这类事件。假设对话框打开时，变量dialogOpen的值为true。当focus事件发生时，这个函数截获事件，并检查对话框是否是打开的，如果是的话，再检查接收焦点的元素是否在对话框内。如果两个条件都满足，则重新将焦点设置在对话框上。这样焦点就会在对话框的尾部和起始处循环。这就不会tab出对话框，键盘用户就很难再迷失方向。\n\n如果你使用JavaScript库的话，focus事件委托的方法也可以实现同样的效果。如果不使用JavaScript库，同时需要支持Internet Explorer 8及更早的版本，可以使用focusin事件代替(译者注：focusin和focusout支持事件冒泡)。\n\n### 如何恢复焦点(Restoring focus)？\n对话框的最后一个焦点难题：当对话框关闭时，将焦点返回至页面的主体部分。思路很简单：为了打开对话框，用户可能激活了一个链接或一个按钮。此时焦点转移到对话框中，用户完成一些任务后，然后退出对话框。焦点应该重新设回至为了打开对话框而点击的链接或按钮上，以便可以继续浏览网页。在Web应用程序中经常忽视这个问题，但效果是天壤之别。\n\n与其他部分一样，少量代码即可实现效果。所有浏览器都支持document.activeElement ，返回当前具有焦点的元素。你只需获得这个值，然后显示对话框，关闭对话框时，将焦点返回到该元素。例如:\n\n``` JS\nvar lastFocus = document.activeElement,\n    dialog = document.getElementById(\"my-dialog\");\n\ndialog.className = \"show\";\ndialog.focus();\n```\n这段代码的重点是它记录了最后的焦点元素。这样一来，对话框被关闭时，将焦点设置在它上面：\n\n``` JS\nlastFocus.focus()\n```\n总体而言，只会在你已有的对话框代码上增加几行代码即可实现。\n\n\n### 最后退出对话框\n最后一个问题是要为用户提供一个快速简便的方法来退出对话框。最好的办法是使用Esc键关闭对话框。这是对话框在桌面应用程序中的退出方式，所以用户非常熟悉这种方式。只需监听Esc键是否被按下，然后退出对话框，如：\n\n``` JS\ndocument.addEventListener(\"keydown\", function(event) {\n    if (dialogOpen && event.keyCode == 27) {\n        // close the dialog\n    }\n}, true);\n```\nEsc键的keyCode值是27，所以你只需在keydown事件中查找它。一旦监听到，关闭对话框并将焦点设置回之前的焦点元素上。\n\n\n### DEMO示例\n\n[jsbin](http://jsbin.com/saloraj)\n\n``` JS\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n\n  <div class=\"content\">\n    Page Content\n    <button id=\"openDialog\">打开dialog</button>\n  </div>\n  \n<div id=\"my-dialog\" role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"dialog-title\">\n    <h3 id=\"dialog-title\">New Message</h3>\n    <!-- Your dialog code here -->\n    <p id=\"dialog-desc\">Are you sure you want to delete this message?</p>\n  <button id=\"closeDialog\">关闭dialog</button>\n</div>\n</body>\n</html>\n```\n\nCSS部分\n\n``` css\n* {\n  margin:0;\n  padding:0;\n  font-size:12px;\n}\nbutton {\n  width: 100px;\n  height:30px;\n}\n\n#my-dialog {\n  width: 400px;\n  height: 300px;\n  border: solid 1px red;\n  position:absolute;\n  display: none;\n  top:50%;\n  left:50%;\n  margin-top: -150px;\n  margin-left: -200px;\n}\n#my-dialog.show {\n  display: block;\n}\n#dialog-title {\n  font-size:14px;\n  background: #d4d3de;\n  height: 40px;\n  line-height: 40px;\n}\n```\n\nJS部分\n``` JS\nvar lastFocus = document.activeElement,\n    dialogOpen = false,\n    dialog = document.getElementById(\"my-dialog\"),\n    btnOpenDG = document.getElementById(\"openDialog\"),\n    btnCloseDG = document.getElementById(\"closeDialog\");\n//div.tabIndex = -1;\n//div.focus();\n\n\nbtnOpenDG.addEventListener(\"click\", function(){\n  showDialog()\n});\n\nbtnCloseDG.addEventListener(\"click\", function(){\n  closeDialog()\n})\n\ndocument.onload += function(){\n  \n  document.addEventListener(\"focus\", function(event) {\n    var dialog = document.getElementById(\"my-dialog\");\n    if (dialogOpen && !dialog.contains(event.target)) {\n        event.stopPropagation();\n        dialog.focus();\n    }\n}, true);\n  \n  \n  document.addEventListener(\"keydown\", function(event) {\n    if (dialogOpen && event.keyCode == 27) {\n        // close the dialog\n        resetDialog()\n    }\n}, true);\n  \n}\n\nfunction showDialog(){\n  lastFocus = document.activeElement;\n  dialog.className = \"show\";\n  dialog.focus();\n  dialogOpen = true;\n}\n\nfunction resetDialog(){\n  lastFocus.focus();\n  dialogOpen = false;\n  dialog.className = '';\n}\n\nfunction closeDialog(){\n  resetDialog()\n}\n\n```\n## 小结\n\n[WAI-ARIA （W3C）](http://www.w3.org/WAI/intro/aria.php)\n[focus和blur事件委托](http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html) by Peter-Paul Koch（Quirksmode）\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/code-snippet-dialog","published":1,"updated":"2018-01-17T09:26:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2r0012fme3tewvftsc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>全方面考虑对话框对可访问性的影响。<br>多数情况下，它是可访问性的一个灾难。输入焦点未能正确处理以及屏幕阅读器无法感知内容变化。其实，使对话框可访问并非如此困难，你只需要理解几行代码的作用。</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#首先考虑-aria\">首先考虑 ARIA</a></li>\n<li><a href=\"#如何将焦点设置在对话框上\">如何将焦点设置在对话框上？</a></li>\n<li><a href=\"#如何限制焦点trapping-focus\">如何限制焦点(Trapping focus)？</a></li>\n<li><a href=\"#如何恢复焦点restoring-focus\">如何恢复焦点(Restoring focus)？</a></li>\n<li><a href=\"#最后退出对话框\">最后退出对话框</a></li>\n<li><a href=\"#demo示例\">DEMO示例</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"首先考虑-ARIA\"><a href=\"#首先考虑-ARIA\" class=\"headerlink\" title=\"首先考虑 ARIA\"></a>首先考虑 ARIA</h3><p>如果你想要屏幕阅读器用户感知到弹出了一个对话框，那么你需要学习一些ARIA role知识。ARIA role [1]为HTML元素提供了额外的语义，让浏览器与屏幕阅读器以更具描述性的方式进行沟通。ARIA定义了大量的角色，改变了屏幕阅读器感知页面中不同元素的方式。与对话框有关的角色有两个：dialog和alertdialog 。</p>\n<p>在大多数情况下， 我们使用dialog。将一个元素的role属性设为此值，浏览器则会把该元素看作为一个对话框。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span>&gt;</span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当role属性值为dialog的元素可见时，浏览器会告知屏幕阅读器一个对话框已打开。这可以让屏幕阅读器用户意识到，他们已经不在页面的常规流中了。</p>\n<p>对话框应有描述标签（label）。你可以使用aria-label属性来指明描述文本或者使用aria-labelledby属性来指明包含描述文字的元素的ID。示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span> aria-label=<span class=\"string\">\"New Message\"</span>&gt;</span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div id=\"my-dialog\" role=\"dialog\" aria-labelledby=\"dialog-title\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h3 id=\"dialog-title\"&gt;New Message&lt;/</span>h3&gt;</span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在第一个例子中，aria-label属性用于指定一个仅用于屏幕阅读器的标签。当对话框的label无需可见时，你可以使用此方法。在第二个例子中，aria-labelledby属性用于指定包含对话框标签的元素的ID。由于对话框有一个可见的标签，关联复用比再重复一遍更妥。当对话框显示时，屏幕阅读器会报读对话框的标签。</p>\n<p>alertdialog role是对话框的一种特殊类型，目的是为了吸引用户的注意力。你可以把它看作是当你尝试删除一些东西时弹出的确认对话框（confirmation dialog ）。alertdialog的交互相比而言较少。它的主要目的是让用户感知到一个操作已执行。与此相比，dialog 可能是供用户输入信息的区域，比如写一封电子邮件或即时消息。</p>\n<p>当一个alertdialog显示时，屏幕阅读器会查找描述文字来报读。建议使用aria-describedby来指定需要朗读的文本。这个属性与aria-labelledby 类似，其值是包含欲朗读内容的元素的ID。如果未指定aria-describedby，那么屏幕阅读器将试图找出能起描述作用的文本，往往会选择元素内第一段文本内容。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"alertdialog\"</span> aria-describedby=<span class=\"string\">\"dialog-desc\"</span>&gt;</span><br><span class=\"line\">    &lt;p id=<span class=\"string\">\"dialog-desc\"</span>&gt;Are you sure you want to <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span> message?<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此示例使用一个元素包含了描述文本。这样做可以确保在对话框显示时，会报读正确的文本。</p>\n<p>即使你不设置这些额外的属性，仅对对话框设置适当的role，应用的可访问性也会得到极大地提高。</p>\n<h3 id=\"如何将焦点设置在对话框上？\"><a href=\"#如何将焦点设置在对话框上？\" class=\"headerlink\" title=\"如何将焦点设置在对话框上？\"></a>如何将焦点设置在对话框上？</h3><p>创建无障碍对话框的下一步就是管理焦点。当一个对话框出现时，焦点应在对话框内，这样用户才可以使用键盘继续浏览。焦点设置在对话框内的确切位置，在很大程度上取决于对话框本身的目的。如果确认对话框（confirmation dialog ）内有一个“继续”按钮和一个“取消”按钮，那么你可以将焦点默认设置在“取消”按钮上。如果对话框是用来让用户输入文字的，那么你可以将焦点默认设置在文本输入框内。如果你实在不知道将焦点设在何处，将焦点设置在能代表对话框的元素上是个不错的选择。</p>\n<p>由于多数情况下，我们使用<div>元素来表示一个对话框，那么可以将焦点默认设置在该<div>上。你需要将该元素的tabIndex属性设置为-1，这样这个元素才能获得焦点。这个属性值允许你使用JavaScript将焦点设置到该元素，但不会将该元素插入到正常的Tab键顺序中。也就是说用户将无法按TAB键将焦点设置在对话框上。直接在HTML中设置或通过JavaScript设置都可以。在HTML中设置：</div></div></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span> tabindex=<span class=\"string\">\"-1\"</span> aria-labelledby=<span class=\"string\">\"dialog-title\"</span>&gt;</span><br><span class=\"line\">    &lt;h3 id=<span class=\"string\">\"dialog-title\"</span>&gt;New Message&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;-- Your dialog code here --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>通过JavaScript设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\">div.tabIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\">div.focus();</span><br></pre></td></tr></table></figure>\n<p>一旦将tabIndex设置为-1，元素就可以调用focus()，就像任何其他的可聚焦元素一样。这样用户就可以按Tab键在对话框中导航了。</p>\n<h3 id=\"如何限制焦点-Trapping-focus-？\"><a href=\"#如何限制焦点-Trapping-focus-？\" class=\"headerlink\" title=\"如何限制焦点(Trapping focus)？\"></a>如何限制焦点(Trapping focus)？</h3><p>对话框的另一个可访问性问题是要确保焦点不能跳出对话框。一般来说，如果对话框是模态的，其焦点应无法逃脱对话框。当对话框打开时，如果按tab键将焦点设置到对话框背后的页面元素中，那么对于键盘用户来说将焦点重新返回到对话框内是相当困难的。因此，我们最好使用一些JavaScript以避免这种情况发生。</p>\n<p>基本思路是使用事件捕获（event capturing）侦听focus事件，这种方法由Peter-Paul Koch[2]推广，如今已在JavaScript库中广泛使用。由于focus不冒泡（bubble），你无法在事件流的冒泡阶段捕捉到它。相反，你可以通过使用事件捕获方法捕获页面上的所有focus事件。之后，你只需确定获得焦点的元素是否在对话框中。如果没有，则将焦点设置在对话框上。代码是非常简单的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"focus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; !dialog.contains(event.target)) &#123;</span><br><span class=\"line\">        event.stopPropagation();</span><br><span class=\"line\">        dialog.focus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>代码监听document的focus事件，用以在目标元素接收到它们之前截获所有这类事件。假设对话框打开时，变量dialogOpen的值为true。当focus事件发生时，这个函数截获事件，并检查对话框是否是打开的，如果是的话，再检查接收焦点的元素是否在对话框内。如果两个条件都满足，则重新将焦点设置在对话框上。这样焦点就会在对话框的尾部和起始处循环。这就不会tab出对话框，键盘用户就很难再迷失方向。</p>\n<p>如果你使用JavaScript库的话，focus事件委托的方法也可以实现同样的效果。如果不使用JavaScript库，同时需要支持Internet Explorer 8及更早的版本，可以使用focusin事件代替(译者注：focusin和focusout支持事件冒泡)。</p>\n<h3 id=\"如何恢复焦点-Restoring-focus-？\"><a href=\"#如何恢复焦点-Restoring-focus-？\" class=\"headerlink\" title=\"如何恢复焦点(Restoring focus)？\"></a>如何恢复焦点(Restoring focus)？</h3><p>对话框的最后一个焦点难题：当对话框关闭时，将焦点返回至页面的主体部分。思路很简单：为了打开对话框，用户可能激活了一个链接或一个按钮。此时焦点转移到对话框中，用户完成一些任务后，然后退出对话框。焦点应该重新设回至为了打开对话框而点击的链接或按钮上，以便可以继续浏览网页。在Web应用程序中经常忽视这个问题，但效果是天壤之别。</p>\n<p>与其他部分一样，少量代码即可实现效果。所有浏览器都支持document.activeElement ，返回当前具有焦点的元素。你只需获得这个值，然后显示对话框，关闭对话框时，将焦点返回到该元素。例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lastFocus = <span class=\"built_in\">document</span>.activeElement,</span><br><span class=\"line\">    dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">dialog.className = <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\">dialog.focus();</span><br></pre></td></tr></table></figure>\n<p>这段代码的重点是它记录了最后的焦点元素。这样一来，对话框被关闭时，将焦点设置在它上面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lastFocus.focus()</span><br></pre></td></tr></table></figure>\n<p>总体而言，只会在你已有的对话框代码上增加几行代码即可实现。</p>\n<h3 id=\"最后退出对话框\"><a href=\"#最后退出对话框\" class=\"headerlink\" title=\"最后退出对话框\"></a>最后退出对话框</h3><p>最后一个问题是要为用户提供一个快速简便的方法来退出对话框。最好的办法是使用Esc键关闭对话框。这是对话框在桌面应用程序中的退出方式，所以用户非常熟悉这种方式。只需监听Esc键是否被按下，然后退出对话框，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; event.keyCode == <span class=\"number\">27</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// close the dialog</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>Esc键的keyCode值是27，所以你只需在keydown事件中查找它。一旦监听到，关闭对话框并将焦点设置回之前的焦点元素上。</p>\n<h3 id=\"DEMO示例\"><a href=\"#DEMO示例\" class=\"headerlink\" title=\"DEMO示例\"></a>DEMO示例</h3><p><a href=\"http://jsbin.com/saloraj\" target=\"_blank\" rel=\"noopener\">jsbin</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;JS Bin&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">    Page Content</span><br><span class=\"line\">    &lt;button id=<span class=\"string\">\"openDialog\"</span>&gt;打开dialog&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span> tabindex=<span class=\"string\">\"-1\"</span> aria-labelledby=<span class=\"string\">\"dialog-title\"</span>&gt;</span><br><span class=\"line\">    &lt;h3 id=<span class=\"string\">\"dialog-title\"</span>&gt;New Message&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;!-- Your dialog code here --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p id=\"dialog-desc\"&gt;Are you sure you want to delete this message?&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;button id=<span class=\"string\">\"closeDialog\"</span>&gt;关闭dialog&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS部分</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#my-dialog</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#my-dialog</span><span class=\"selector-class\">.show</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#dialog-title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#d4d3de</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JS部分<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lastFocus = <span class=\"built_in\">document</span>.activeElement,</span><br><span class=\"line\">    dialogOpen = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>),</span><br><span class=\"line\">    btnOpenDG = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"openDialog\"</span>),</span><br><span class=\"line\">    btnCloseDG = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"closeDialog\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//div.tabIndex = -1;</span></span><br><span class=\"line\"><span class=\"comment\">//div.focus();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">btnOpenDG.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  showDialog()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">btnCloseDG.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  closeDialog()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onload += <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"focus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; !dialog.contains(event.target)) &#123;</span><br><span class=\"line\">        event.stopPropagation();</span><br><span class=\"line\">        dialog.focus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; event.keyCode == <span class=\"number\">27</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// close the dialog</span></span><br><span class=\"line\">        resetDialog()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDialog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  lastFocus = <span class=\"built_in\">document</span>.activeElement;</span><br><span class=\"line\">  dialog.className = <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\">  dialog.focus();</span><br><span class=\"line\">  dialogOpen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetDialog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  lastFocus.focus();</span><br><span class=\"line\">  dialogOpen = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dialog.className = <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeDialog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  resetDialog()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"http://www.w3.org/WAI/intro/aria.php\" target=\"_blank\" rel=\"noopener\">WAI-ARIA （W3C）</a><br><a href=\"http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\" target=\"_blank\" rel=\"noopener\">focus和blur事件委托</a> by Peter-Paul Koch（Quirksmode）</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>全方面考虑对话框对可访问性的影响。<br>多数情况下，它是可访问性的一个灾难。输入焦点未能正确处理以及屏幕阅读器无法感知内容变化。其实，使对话框可访问并非如此困难，你只需要理解几行代码的作用。</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#首先考虑-aria\">首先考虑 ARIA</a></li>\n<li><a href=\"#如何将焦点设置在对话框上\">如何将焦点设置在对话框上？</a></li>\n<li><a href=\"#如何限制焦点trapping-focus\">如何限制焦点(Trapping focus)？</a></li>\n<li><a href=\"#如何恢复焦点restoring-focus\">如何恢复焦点(Restoring focus)？</a></li>\n<li><a href=\"#最后退出对话框\">最后退出对话框</a></li>\n<li><a href=\"#demo示例\">DEMO示例</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"首先考虑-ARIA\"><a href=\"#首先考虑-ARIA\" class=\"headerlink\" title=\"首先考虑 ARIA\"></a>首先考虑 ARIA</h3><p>如果你想要屏幕阅读器用户感知到弹出了一个对话框，那么你需要学习一些ARIA role知识。ARIA role [1]为HTML元素提供了额外的语义，让浏览器与屏幕阅读器以更具描述性的方式进行沟通。ARIA定义了大量的角色，改变了屏幕阅读器感知页面中不同元素的方式。与对话框有关的角色有两个：dialog和alertdialog 。</p>\n<p>在大多数情况下， 我们使用dialog。将一个元素的role属性设为此值，浏览器则会把该元素看作为一个对话框。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span>&gt;</span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当role属性值为dialog的元素可见时，浏览器会告知屏幕阅读器一个对话框已打开。这可以让屏幕阅读器用户意识到，他们已经不在页面的常规流中了。</p>\n<p>对话框应有描述标签（label）。你可以使用aria-label属性来指明描述文本或者使用aria-labelledby属性来指明包含描述文字的元素的ID。示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span> aria-label=<span class=\"string\">\"New Message\"</span>&gt;</span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div id=\"my-dialog\" role=\"dialog\" aria-labelledby=\"dialog-title\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h3 id=\"dialog-title\"&gt;New Message&lt;/</span>h3&gt;</span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在第一个例子中，aria-label属性用于指定一个仅用于屏幕阅读器的标签。当对话框的label无需可见时，你可以使用此方法。在第二个例子中，aria-labelledby属性用于指定包含对话框标签的元素的ID。由于对话框有一个可见的标签，关联复用比再重复一遍更妥。当对话框显示时，屏幕阅读器会报读对话框的标签。</p>\n<p>alertdialog role是对话框的一种特殊类型，目的是为了吸引用户的注意力。你可以把它看作是当你尝试删除一些东西时弹出的确认对话框（confirmation dialog ）。alertdialog的交互相比而言较少。它的主要目的是让用户感知到一个操作已执行。与此相比，dialog 可能是供用户输入信息的区域，比如写一封电子邮件或即时消息。</p>\n<p>当一个alertdialog显示时，屏幕阅读器会查找描述文字来报读。建议使用aria-describedby来指定需要朗读的文本。这个属性与aria-labelledby 类似，其值是包含欲朗读内容的元素的ID。如果未指定aria-describedby，那么屏幕阅读器将试图找出能起描述作用的文本，往往会选择元素内第一段文本内容。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"alertdialog\"</span> aria-describedby=<span class=\"string\">\"dialog-desc\"</span>&gt;</span><br><span class=\"line\">    &lt;p id=<span class=\"string\">\"dialog-desc\"</span>&gt;Are you sure you want to <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span> message?<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">    &lt;-- Your dialog code here --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此示例使用一个元素包含了描述文本。这样做可以确保在对话框显示时，会报读正确的文本。</p>\n<p>即使你不设置这些额外的属性，仅对对话框设置适当的role，应用的可访问性也会得到极大地提高。</p>\n<h3 id=\"如何将焦点设置在对话框上？\"><a href=\"#如何将焦点设置在对话框上？\" class=\"headerlink\" title=\"如何将焦点设置在对话框上？\"></a>如何将焦点设置在对话框上？</h3><p>创建无障碍对话框的下一步就是管理焦点。当一个对话框出现时，焦点应在对话框内，这样用户才可以使用键盘继续浏览。焦点设置在对话框内的确切位置，在很大程度上取决于对话框本身的目的。如果确认对话框（confirmation dialog ）内有一个“继续”按钮和一个“取消”按钮，那么你可以将焦点默认设置在“取消”按钮上。如果对话框是用来让用户输入文字的，那么你可以将焦点默认设置在文本输入框内。如果你实在不知道将焦点设在何处，将焦点设置在能代表对话框的元素上是个不错的选择。</p>\n<p>由于多数情况下，我们使用<div>元素来表示一个对话框，那么可以将焦点默认设置在该<div>上。你需要将该元素的tabIndex属性设置为-1，这样这个元素才能获得焦点。这个属性值允许你使用JavaScript将焦点设置到该元素，但不会将该元素插入到正常的Tab键顺序中。也就是说用户将无法按TAB键将焦点设置在对话框上。直接在HTML中设置或通过JavaScript设置都可以。在HTML中设置：</div></div></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span> tabindex=<span class=\"string\">\"-1\"</span> aria-labelledby=<span class=\"string\">\"dialog-title\"</span>&gt;</span><br><span class=\"line\">    &lt;h3 id=<span class=\"string\">\"dialog-title\"</span>&gt;New Message&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;-- Your dialog code here --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>通过JavaScript设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\">div.tabIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\">div.focus();</span><br></pre></td></tr></table></figure>\n<p>一旦将tabIndex设置为-1，元素就可以调用focus()，就像任何其他的可聚焦元素一样。这样用户就可以按Tab键在对话框中导航了。</p>\n<h3 id=\"如何限制焦点-Trapping-focus-？\"><a href=\"#如何限制焦点-Trapping-focus-？\" class=\"headerlink\" title=\"如何限制焦点(Trapping focus)？\"></a>如何限制焦点(Trapping focus)？</h3><p>对话框的另一个可访问性问题是要确保焦点不能跳出对话框。一般来说，如果对话框是模态的，其焦点应无法逃脱对话框。当对话框打开时，如果按tab键将焦点设置到对话框背后的页面元素中，那么对于键盘用户来说将焦点重新返回到对话框内是相当困难的。因此，我们最好使用一些JavaScript以避免这种情况发生。</p>\n<p>基本思路是使用事件捕获（event capturing）侦听focus事件，这种方法由Peter-Paul Koch[2]推广，如今已在JavaScript库中广泛使用。由于focus不冒泡（bubble），你无法在事件流的冒泡阶段捕捉到它。相反，你可以通过使用事件捕获方法捕获页面上的所有focus事件。之后，你只需确定获得焦点的元素是否在对话框中。如果没有，则将焦点设置在对话框上。代码是非常简单的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"focus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; !dialog.contains(event.target)) &#123;</span><br><span class=\"line\">        event.stopPropagation();</span><br><span class=\"line\">        dialog.focus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>代码监听document的focus事件，用以在目标元素接收到它们之前截获所有这类事件。假设对话框打开时，变量dialogOpen的值为true。当focus事件发生时，这个函数截获事件，并检查对话框是否是打开的，如果是的话，再检查接收焦点的元素是否在对话框内。如果两个条件都满足，则重新将焦点设置在对话框上。这样焦点就会在对话框的尾部和起始处循环。这就不会tab出对话框，键盘用户就很难再迷失方向。</p>\n<p>如果你使用JavaScript库的话，focus事件委托的方法也可以实现同样的效果。如果不使用JavaScript库，同时需要支持Internet Explorer 8及更早的版本，可以使用focusin事件代替(译者注：focusin和focusout支持事件冒泡)。</p>\n<h3 id=\"如何恢复焦点-Restoring-focus-？\"><a href=\"#如何恢复焦点-Restoring-focus-？\" class=\"headerlink\" title=\"如何恢复焦点(Restoring focus)？\"></a>如何恢复焦点(Restoring focus)？</h3><p>对话框的最后一个焦点难题：当对话框关闭时，将焦点返回至页面的主体部分。思路很简单：为了打开对话框，用户可能激活了一个链接或一个按钮。此时焦点转移到对话框中，用户完成一些任务后，然后退出对话框。焦点应该重新设回至为了打开对话框而点击的链接或按钮上，以便可以继续浏览网页。在Web应用程序中经常忽视这个问题，但效果是天壤之别。</p>\n<p>与其他部分一样，少量代码即可实现效果。所有浏览器都支持document.activeElement ，返回当前具有焦点的元素。你只需获得这个值，然后显示对话框，关闭对话框时，将焦点返回到该元素。例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lastFocus = <span class=\"built_in\">document</span>.activeElement,</span><br><span class=\"line\">    dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">dialog.className = <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\">dialog.focus();</span><br></pre></td></tr></table></figure>\n<p>这段代码的重点是它记录了最后的焦点元素。这样一来，对话框被关闭时，将焦点设置在它上面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lastFocus.focus()</span><br></pre></td></tr></table></figure>\n<p>总体而言，只会在你已有的对话框代码上增加几行代码即可实现。</p>\n<h3 id=\"最后退出对话框\"><a href=\"#最后退出对话框\" class=\"headerlink\" title=\"最后退出对话框\"></a>最后退出对话框</h3><p>最后一个问题是要为用户提供一个快速简便的方法来退出对话框。最好的办法是使用Esc键关闭对话框。这是对话框在桌面应用程序中的退出方式，所以用户非常熟悉这种方式。只需监听Esc键是否被按下，然后退出对话框，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; event.keyCode == <span class=\"number\">27</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// close the dialog</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>Esc键的keyCode值是27，所以你只需在keydown事件中查找它。一旦监听到，关闭对话框并将焦点设置回之前的焦点元素上。</p>\n<h3 id=\"DEMO示例\"><a href=\"#DEMO示例\" class=\"headerlink\" title=\"DEMO示例\"></a>DEMO示例</h3><p><a href=\"http://jsbin.com/saloraj\" target=\"_blank\" rel=\"noopener\">jsbin</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;JS Bin&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">    Page Content</span><br><span class=\"line\">    &lt;button id=<span class=\"string\">\"openDialog\"</span>&gt;打开dialog&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"my-dialog\"</span> role=<span class=\"string\">\"dialog\"</span> tabindex=<span class=\"string\">\"-1\"</span> aria-labelledby=<span class=\"string\">\"dialog-title\"</span>&gt;</span><br><span class=\"line\">    &lt;h3 id=<span class=\"string\">\"dialog-title\"</span>&gt;New Message&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;!-- Your dialog code here --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p id=\"dialog-desc\"&gt;Are you sure you want to delete this message?&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;button id=<span class=\"string\">\"closeDialog\"</span>&gt;关闭dialog&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS部分</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#my-dialog</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#my-dialog</span><span class=\"selector-class\">.show</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#dialog-title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#d4d3de</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JS部分<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lastFocus = <span class=\"built_in\">document</span>.activeElement,</span><br><span class=\"line\">    dialogOpen = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>),</span><br><span class=\"line\">    btnOpenDG = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"openDialog\"</span>),</span><br><span class=\"line\">    btnCloseDG = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"closeDialog\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//div.tabIndex = -1;</span></span><br><span class=\"line\"><span class=\"comment\">//div.focus();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">btnOpenDG.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  showDialog()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">btnCloseDG.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  closeDialog()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onload += <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"focus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my-dialog\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; !dialog.contains(event.target)) &#123;</span><br><span class=\"line\">        event.stopPropagation();</span><br><span class=\"line\">        dialog.focus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dialogOpen &amp;&amp; event.keyCode == <span class=\"number\">27</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// close the dialog</span></span><br><span class=\"line\">        resetDialog()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDialog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  lastFocus = <span class=\"built_in\">document</span>.activeElement;</span><br><span class=\"line\">  dialog.className = <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\">  dialog.focus();</span><br><span class=\"line\">  dialogOpen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetDialog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  lastFocus.focus();</span><br><span class=\"line\">  dialogOpen = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dialog.className = <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeDialog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  resetDialog()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"http://www.w3.org/WAI/intro/aria.php\" target=\"_blank\" rel=\"noopener\">WAI-ARIA （W3C）</a><br><a href=\"http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\" target=\"_blank\" rel=\"noopener\">focus和blur事件委托</a> by Peter-Paul Koch（Quirksmode）</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"JS实现Queue代码剖析","p":"javascript/code-snippet-queue","date":"2015-03-17T02:27:28.000Z","_content":"\n## 背景\n本文主要理解下JS里实现普通Queue的代码段，希望对算法有所理解。\n\n<!--more-->\n\n## 正文\n\n``` JS\n\nmodule.exports = Queue;\n/**\n * [Queue]\n * @param {[Int]} size [队列大小]\n*/\nfunction Queue(size) {\n    var list = [];\n    return {\n        push: function (value) {\n            if(value == null){\n                return false;\n            }\n            if(size !=null && !isNAN(size)){\n                if(list.length == size){\n                    this.pop();\n                }\n            }\n            list.unshift(value);\n            return true;\n        },\n        pop: function () {\n            return list.pop()\n        },\n        size: function () {\n            return list.length;\n        },\n        //返回队列的内容\n        quere: function () {\n            reurn list;\n        }\n    };\n}\n```\n\n``` JS\n\n//引用\n\nvar Queue = require('Queue')\n\nvar queue = new Queue()\nqueue.push(11)\nqueue.quere()\nqueue.pop()\n\n```\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。\n","source":"_posts/javascript/code-snippet-queue.md","raw":"---\ntitle: JS实现Queue代码剖析\np: javascript/code-snippet-queue\ndate: 2015-03-17 10:27:28\ntags: [javascript, queue, js, snippet]\ncategories: Javascript\n---\n\n## 背景\n本文主要理解下JS里实现普通Queue的代码段，希望对算法有所理解。\n\n<!--more-->\n\n## 正文\n\n``` JS\n\nmodule.exports = Queue;\n/**\n * [Queue]\n * @param {[Int]} size [队列大小]\n*/\nfunction Queue(size) {\n    var list = [];\n    return {\n        push: function (value) {\n            if(value == null){\n                return false;\n            }\n            if(size !=null && !isNAN(size)){\n                if(list.length == size){\n                    this.pop();\n                }\n            }\n            list.unshift(value);\n            return true;\n        },\n        pop: function () {\n            return list.pop()\n        },\n        size: function () {\n            return list.length;\n        },\n        //返回队列的内容\n        quere: function () {\n            reurn list;\n        }\n    };\n}\n```\n\n``` JS\n\n//引用\n\nvar Queue = require('Queue')\n\nvar queue = new Queue()\nqueue.push(11)\nqueue.quere()\nqueue.pop()\n\n```\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。\n","slug":"javascript/code-snippet-queue","published":1,"updated":"2018-01-17T02:45:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2u0016fme36rvsn8ze","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文主要理解下JS里实现普通Queue的代码段，希望对算法有所理解。</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Queue;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [Queue]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;[Int]&#125; size [队列大小]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        push: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(size !=<span class=\"literal\">null</span> &amp;&amp; !isNAN(size))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(list.length == size)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.pop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.unshift(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        pop: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list.pop()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list.length;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//返回队列的内容</span></span><br><span class=\"line\">        quere: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            reurn list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Queue = <span class=\"built_in\">require</span>(<span class=\"string\">'Queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> queue = <span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">queue.push(<span class=\"number\">11</span>)</span><br><span class=\"line\">queue.quere()</span><br><span class=\"line\">queue.pop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文主要理解下JS里实现普通Queue的代码段，希望对算法有所理解。</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Queue;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [Queue]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;[Int]&#125; size [队列大小]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        push: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(size !=<span class=\"literal\">null</span> &amp;&amp; !isNAN(size))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(list.length == size)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.pop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.unshift(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        pop: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list.pop()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list.length;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//返回队列的内容</span></span><br><span class=\"line\">        quere: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            reurn list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Queue = <span class=\"built_in\">require</span>(<span class=\"string\">'Queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> queue = <span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">queue.push(<span class=\"number\">11</span>)</span><br><span class=\"line\">queue.quere()</span><br><span class=\"line\">queue.pop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。</p>"},{"title":"JS中async与defer区别","p":"javascript/diff-async-defer","date":"2014-01-07T02:48:32.000Z","_content":"\n## 前言\n\nJS中async与defer区别\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n- [如何选用？](#如何选用)\n- [兼容性](#兼容性)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n\n<!--more-->\n\n## 正文\n\n先来试个一句话解释仨，当浏览器碰到 script 脚本的时候：\n\n- script\n``` JS \n<script src=\"script.js\"></script>\n```\n解释1：没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n解释2：script 脚本不设置任何属性。HTML文档解析过程中，遇到script文档时，会停止解析HTML文档，发送请求获取script文档（如果是外部文档的话）。脚本执行后，才恢复HTMl文档解析。\n\n- script async \n``` JS \n<script async src=\"script.js\"></script>\n```\n解释1：有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n解释2：设置async属性后，在HTML解析的同时，下载script文档。script文档下载完成后，HTMl解析会暂停，来执行script文档。\n\n- script defer\n``` JS\n<script defer src=\"myscript.js\"></script>\n```\n解释1：有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\n解释2：设置defer属性后，在HTML解析的同时，下载script脚本。但只有在HTML解析完成后，才执行script文档。同时，defer属性保证脚本按照其在文档中出现的顺序执行。\n\n接着，我们来看一张图咯：\n![图1 浏览器解释1](/imgs/javascript/browser-lifecycle.jpeg)\n\n\n然后从实用角度来说呢，首先把所有脚本都丢到 </body> 之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。\n\n\n蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。\n\n此图告诉我们以下几个要点：\n\n- defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n- 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n- 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n- async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会- 立刻执行\n- 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n\n![图2 浏览器解释2](/imgs/javascript/browser-lifecycle-en.png)\n\n\n## 如何选用？\n通常情况下，尽可能的使用async属性，然后考虑defer，都不适用时才不设置任何属性。选用规则：\n\n- 如果脚本是模块化的，并且不依赖其他脚本，那么使用async。\n- 如果脚本依赖其他脚本或被其他脚本依赖，那么使用defer。\n- 如果脚本比较小，并且被一个async脚本依赖，那么使用行内脚本，并放置在async脚本之前。\n\n## 兼容性\n\n带有defer属性的脚本执行也不一定按照顺序执行，有风险；\nIE9及以下浏览器在实现defer属性上存在糟糕的bug，比如无法保证脚本的执行顺序。如果需要支持<=IE9，不建议使用defer，如果执行顺序非常重要的话，不要使用任何属性。\n\n\n## 小结\nChrome为了更快的页面加载，引入了两项JavaScript新技术：script streaming 和 code caching。简而言之，前者优化脚本文档的解析(Chrome 41)，后者缓存编译后的代码(Chrome 42)。\n\n![图3 浏览器stream](/imgs/javascript/streaming.png)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/diff-async-defer.md","raw":"---\ntitle: JS中async与defer区别\np: javascript/diff-async-defer\ndate: 2014-01-07 10:48:32\ntags: [javascript, async, defer]\ncategories: Javascript\n---\n\n## 前言\n\nJS中async与defer区别\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n- [如何选用？](#如何选用)\n- [兼容性](#兼容性)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n\n<!--more-->\n\n## 正文\n\n先来试个一句话解释仨，当浏览器碰到 script 脚本的时候：\n\n- script\n``` JS \n<script src=\"script.js\"></script>\n```\n解释1：没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\n解释2：script 脚本不设置任何属性。HTML文档解析过程中，遇到script文档时，会停止解析HTML文档，发送请求获取script文档（如果是外部文档的话）。脚本执行后，才恢复HTMl文档解析。\n\n- script async \n``` JS \n<script async src=\"script.js\"></script>\n```\n解释1：有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n解释2：设置async属性后，在HTML解析的同时，下载script文档。script文档下载完成后，HTMl解析会暂停，来执行script文档。\n\n- script defer\n``` JS\n<script defer src=\"myscript.js\"></script>\n```\n解释1：有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\n解释2：设置defer属性后，在HTML解析的同时，下载script脚本。但只有在HTML解析完成后，才执行script文档。同时，defer属性保证脚本按照其在文档中出现的顺序执行。\n\n接着，我们来看一张图咯：\n![图1 浏览器解释1](/imgs/javascript/browser-lifecycle.jpeg)\n\n\n然后从实用角度来说呢，首先把所有脚本都丢到 </body> 之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。\n\n\n蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。\n\n此图告诉我们以下几个要点：\n\n- defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n- 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n- 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n- async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会- 立刻执行\n- 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n\n![图2 浏览器解释2](/imgs/javascript/browser-lifecycle-en.png)\n\n\n## 如何选用？\n通常情况下，尽可能的使用async属性，然后考虑defer，都不适用时才不设置任何属性。选用规则：\n\n- 如果脚本是模块化的，并且不依赖其他脚本，那么使用async。\n- 如果脚本依赖其他脚本或被其他脚本依赖，那么使用defer。\n- 如果脚本比较小，并且被一个async脚本依赖，那么使用行内脚本，并放置在async脚本之前。\n\n## 兼容性\n\n带有defer属性的脚本执行也不一定按照顺序执行，有风险；\nIE9及以下浏览器在实现defer属性上存在糟糕的bug，比如无法保证脚本的执行顺序。如果需要支持<=IE9，不建议使用defer，如果执行顺序非常重要的话，不要使用任何属性。\n\n\n## 小结\nChrome为了更快的页面加载，引入了两项JavaScript新技术：script streaming 和 code caching。简而言之，前者优化脚本文档的解析(Chrome 41)，后者缓存编译后的代码(Chrome 42)。\n\n![图3 浏览器stream](/imgs/javascript/streaming.png)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/diff-async-defer","published":1,"updated":"2018-01-17T06:48:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt2x0017fme3486ft8km","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JS中async与defer区别</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a></li>\n<li><a href=\"#如何选用\">如何选用？</a></li>\n<li><a href=\"#兼容性\">兼容性</a></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>先来试个一句话解释仨，当浏览器碰到 script 脚本的时候：</p>\n<ul>\n<li>script<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"script.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解释1：没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。<br>解释2：script 脚本不设置任何属性。HTML文档解析过程中，遇到script文档时，会停止解析HTML文档，发送请求获取script文档（如果是外部文档的话）。脚本执行后，才恢复HTMl文档解析。</p>\n<ul>\n<li>script async <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"script.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解释1：有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。<br>解释2：设置async属性后，在HTML解析的同时，下载script文档。script文档下载完成后，HTMl解析会暂停，来执行script文档。</p>\n<ul>\n<li>script defer<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src=<span class=\"string\">\"myscript.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解释1：有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。<br>解释2：设置defer属性后，在HTML解析的同时，下载script脚本。但只有在HTML解析完成后，才执行script文档。同时，defer属性保证脚本按照其在文档中出现的顺序执行。</p>\n<p>接着，我们来看一张图咯：<br><img src=\"/imgs/javascript/browser-lifecycle.jpeg\" alt=\"图1 浏览器解释1\"></p>\n<p>然后从实用角度来说呢，首先把所有脚本都丢到  之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。</p>\n<p>蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。</p>\n<p>此图告诉我们以下几个要点：</p>\n<ul>\n<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>\n<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>\n<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>\n<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会- 立刻执行</li>\n<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>\n</ul>\n<p><img src=\"/imgs/javascript/browser-lifecycle-en.png\" alt=\"图2 浏览器解释2\"></p>\n<h2 id=\"如何选用？\"><a href=\"#如何选用？\" class=\"headerlink\" title=\"如何选用？\"></a>如何选用？</h2><p>通常情况下，尽可能的使用async属性，然后考虑defer，都不适用时才不设置任何属性。选用规则：</p>\n<ul>\n<li>如果脚本是模块化的，并且不依赖其他脚本，那么使用async。</li>\n<li>如果脚本依赖其他脚本或被其他脚本依赖，那么使用defer。</li>\n<li>如果脚本比较小，并且被一个async脚本依赖，那么使用行内脚本，并放置在async脚本之前。</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>带有defer属性的脚本执行也不一定按照顺序执行，有风险；<br>IE9及以下浏览器在实现defer属性上存在糟糕的bug，比如无法保证脚本的执行顺序。如果需要支持&lt;=IE9，不建议使用defer，如果执行顺序非常重要的话，不要使用任何属性。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Chrome为了更快的页面加载，引入了两项JavaScript新技术：script streaming 和 code caching。简而言之，前者优化脚本文档的解析(Chrome 41)，后者缓存编译后的代码(Chrome 42)。</p>\n<p><img src=\"/imgs/javascript/streaming.png\" alt=\"图3 浏览器stream\"></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JS中async与defer区别</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a></li>\n<li><a href=\"#如何选用\">如何选用？</a></li>\n<li><a href=\"#兼容性\">兼容性</a></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>先来试个一句话解释仨，当浏览器碰到 script 脚本的时候：</p>\n<ul>\n<li>script<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"script.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解释1：没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。<br>解释2：script 脚本不设置任何属性。HTML文档解析过程中，遇到script文档时，会停止解析HTML文档，发送请求获取script文档（如果是外部文档的话）。脚本执行后，才恢复HTMl文档解析。</p>\n<ul>\n<li>script async <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"script.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解释1：有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。<br>解释2：设置async属性后，在HTML解析的同时，下载script文档。script文档下载完成后，HTMl解析会暂停，来执行script文档。</p>\n<ul>\n<li>script defer<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src=<span class=\"string\">\"myscript.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解释1：有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。<br>解释2：设置defer属性后，在HTML解析的同时，下载script脚本。但只有在HTML解析完成后，才执行script文档。同时，defer属性保证脚本按照其在文档中出现的顺序执行。</p>\n<p>接着，我们来看一张图咯：<br><img src=\"/imgs/javascript/browser-lifecycle.jpeg\" alt=\"图1 浏览器解释1\"></p>\n<p>然后从实用角度来说呢，首先把所有脚本都丢到  之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。</p>\n<p>蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。</p>\n<p>此图告诉我们以下几个要点：</p>\n<ul>\n<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>\n<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>\n<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>\n<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会- 立刻执行</li>\n<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>\n</ul>\n<p><img src=\"/imgs/javascript/browser-lifecycle-en.png\" alt=\"图2 浏览器解释2\"></p>\n<h2 id=\"如何选用？\"><a href=\"#如何选用？\" class=\"headerlink\" title=\"如何选用？\"></a>如何选用？</h2><p>通常情况下，尽可能的使用async属性，然后考虑defer，都不适用时才不设置任何属性。选用规则：</p>\n<ul>\n<li>如果脚本是模块化的，并且不依赖其他脚本，那么使用async。</li>\n<li>如果脚本依赖其他脚本或被其他脚本依赖，那么使用defer。</li>\n<li>如果脚本比较小，并且被一个async脚本依赖，那么使用行内脚本，并放置在async脚本之前。</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>带有defer属性的脚本执行也不一定按照顺序执行，有风险；<br>IE9及以下浏览器在实现defer属性上存在糟糕的bug，比如无法保证脚本的执行顺序。如果需要支持&lt;=IE9，不建议使用defer，如果执行顺序非常重要的话，不要使用任何属性。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Chrome为了更快的页面加载，引入了两项JavaScript新技术：script streaming 和 code caching。简而言之，前者优化脚本文档的解析(Chrome 41)，后者缓存编译后的代码(Chrome 42)。</p>\n<p><img src=\"/imgs/javascript/streaming.png\" alt=\"图3 浏览器stream\"></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"前端面试题整理之理想篇","p":"javascript/interview-four","date":"2018-01-08T09:52:38.000Z","_content":"\n## 背景\n\n本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more-->\n\n## 问题列表\n\n### 你觉得前端工程的价值体现在哪?\n1.为简化用户使用提供技术支持（交互部分）\n2.为多个浏览器兼容性提供支持\n3.为提高用户浏览速度（浏览器性能）提供支持\n4.为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持\n5.为展示数据提供支持（数据接口）\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/interview-four.md","raw":"---\ntitle: 前端面试题整理之理想篇\np: javascript/interview-four\ndate: 2018-01-08 17:52:38\ntags: [面试, 理想, 问题]\ncategories: Javascript\n---\n\n## 背景\n\n本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more-->\n\n## 问题列表\n\n### 你觉得前端工程的价值体现在哪?\n1.为简化用户使用提供技术支持（交互部分）\n2.为多个浏览器兼容性提供支持\n3.为提高用户浏览速度（浏览器性能）提供支持\n4.为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持\n5.为展示数据提供支持（数据接口）\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/interview-four","published":1,"updated":"2018-01-08T09:54:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt30001bfme37iqfylyw","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p>\n<ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"问题列表\"><a href=\"#问题列表\" class=\"headerlink\" title=\"问题列表\"></a>问题列表</h2><h3 id=\"你觉得前端工程的价值体现在哪\"><a href=\"#你觉得前端工程的价值体现在哪\" class=\"headerlink\" title=\"你觉得前端工程的价值体现在哪?\"></a>你觉得前端工程的价值体现在哪?</h3><p>1.为简化用户使用提供技术支持（交互部分）<br>2.为多个浏览器兼容性提供支持<br>3.为提高用户浏览速度（浏览器性能）提供支持<br>4.为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持<br>5.为展示数据提供支持（数据接口）</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p>\n<ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>","more":"<h2 id=\"问题列表\"><a href=\"#问题列表\" class=\"headerlink\" title=\"问题列表\"></a>问题列表</h2><h3 id=\"你觉得前端工程的价值体现在哪\"><a href=\"#你觉得前端工程的价值体现在哪\" class=\"headerlink\" title=\"你觉得前端工程的价值体现在哪?\"></a>你觉得前端工程的价值体现在哪?</h3><p>1.为简化用户使用提供技术支持（交互部分）<br>2.为多个浏览器兼容性提供支持<br>3.为提高用户浏览速度（浏览器性能）提供支持<br>4.为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持<br>5.为展示数据提供支持（数据接口）</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"JS中call与apply区别","p":"javascript/diff-call-apply","date":"2016-04-27T02:48:03.000Z","_content":"\n## 背景\n\n<!-- TOC -->\n\n- [背景](#背景)\n- [定义](#定义)\n    - [call](#call)\n    - [apply](#apply)\n    - [区别](#区别)\n- [用法](#用法)\n- [高级用法](#高级用法)\n- [结束语](#结束语)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n## 定义\nECMAScript规范为所有函数都包含两个方法(这两个方法非继承而来), call 和 apply 。这两个函数都是在特定的作用域中调用函数,能改变函数的作用域，实际上是改变函数体内 this 的值 。\n\n### call\n语法\t\n    call(thisObj，Object)\n定义\t\n    调用一个对象的一个方法，以另一个对象替换当前对象。\n说明\n\tcall 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj\n\n### apply\n语法\n    apply(thisObj，[argArray])\t\n定义\n    应用某一对象的一个方法，用另一个对象替换当前对象。\t\n说明\n    如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数\n\n### 区别\n- 参数不同, apply 传入的是一个参数数组，也就是将多个参数组合成一个参数数组， call 从第二个参数开始依次传入.\n- apply 可以直接将当前函数的arguments对象作为apply的第二个参数传入\n\n## 用法\n\n调用函数，传递参数\n``` JS\n    //定义一个add 方法\n    function add(x, y) {\n        return x + y;\n    }\n\n    //用call 来调用 add 方法\n    function myAddCall(x, y) {\n        //调用 add 方法 的 call 方法\n        return add.call(this, x, y);\n    }\n\n    //apply 来调用 add 方法\n    function myAddApply(x, y) {\n        //调用 add 方法 的 applly 方法\n        return add.apply(this, [x, y]);\n    }\n\n    console.log(myAddCall(10, 20));    //输出结果30\n  \n    console.log(myAddApply(20, 20));  //输出结果40\n```\n\n我们看到通过方法本身的call 和 apply 执行了该函数。\n\n改变函数作用域\n``` JS\n    var name = '小白';\n\n    var obj = {name:'小红'};\n\n    function sayName() {\n        return this.name;\n    }\n\n    console.log(sayName.call(this));    //输出小白\n\n    console.log(sayName.call(obj));    //输入小红\n```    \n我们改变了函数运行的作用域， 通过绑定不同的对象，函数内部 this 也不同。最终输入结果才会这样。\n\n\n## 高级用法\n高级用法，实现 js 继承\n``` JS\n    //父类 Person\n    function Person() {\n        this.sayName = function() {\n            return this.name;\n        }\n    }\n\n    //子类 Chinese\n    function Chinese(name) {\n        //借助 call 实现继承\n        Person.call(this);\n        this.name = name;\n\n        this.ch = function() {\n            alert('我是中国人');\n        }\n    }\n\n    //子类 America\n    function America(name) {\n        //借助 call 实现继承\n        Person.call(this);\n        this.name = name;\n\n        this.am = function() {\n            alert('我是美国人');\n        }\n    }\n\n\n    //测试\n    var chinese = new Chinese('成龙');\n    //调用 父类方法\n    console.log(chinese.sayName());   //输出 成龙\n\n    var america = new America('America');\n    //调用 父类方法\n    console.log(america.sayName());   //输出 America\n```\n\n## 结束语\ncall 和 apply 最大的好处: 方便我们解耦，对象不需要和方法有任何的耦合性，能使我们写出更好的面相对象程序。\n大家如果看一些 js 框架底层的话会看到好多地方都有大量用到。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/diff-call-apply.md","raw":"---\ntitle: JS中call与apply区别\np: javascript/diff-call-apply\ndate: 2016-04-27 10:48:03\ntags: [javascript, call, apply]\ncategories: Javascript\n---\n\n## 背景\n\n<!-- TOC -->\n\n- [背景](#背景)\n- [定义](#定义)\n    - [call](#call)\n    - [apply](#apply)\n    - [区别](#区别)\n- [用法](#用法)\n- [高级用法](#高级用法)\n- [结束语](#结束语)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n## 定义\nECMAScript规范为所有函数都包含两个方法(这两个方法非继承而来), call 和 apply 。这两个函数都是在特定的作用域中调用函数,能改变函数的作用域，实际上是改变函数体内 this 的值 。\n\n### call\n语法\t\n    call(thisObj，Object)\n定义\t\n    调用一个对象的一个方法，以另一个对象替换当前对象。\n说明\n\tcall 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj\n\n### apply\n语法\n    apply(thisObj，[argArray])\t\n定义\n    应用某一对象的一个方法，用另一个对象替换当前对象。\t\n说明\n    如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数\n\n### 区别\n- 参数不同, apply 传入的是一个参数数组，也就是将多个参数组合成一个参数数组， call 从第二个参数开始依次传入.\n- apply 可以直接将当前函数的arguments对象作为apply的第二个参数传入\n\n## 用法\n\n调用函数，传递参数\n``` JS\n    //定义一个add 方法\n    function add(x, y) {\n        return x + y;\n    }\n\n    //用call 来调用 add 方法\n    function myAddCall(x, y) {\n        //调用 add 方法 的 call 方法\n        return add.call(this, x, y);\n    }\n\n    //apply 来调用 add 方法\n    function myAddApply(x, y) {\n        //调用 add 方法 的 applly 方法\n        return add.apply(this, [x, y]);\n    }\n\n    console.log(myAddCall(10, 20));    //输出结果30\n  \n    console.log(myAddApply(20, 20));  //输出结果40\n```\n\n我们看到通过方法本身的call 和 apply 执行了该函数。\n\n改变函数作用域\n``` JS\n    var name = '小白';\n\n    var obj = {name:'小红'};\n\n    function sayName() {\n        return this.name;\n    }\n\n    console.log(sayName.call(this));    //输出小白\n\n    console.log(sayName.call(obj));    //输入小红\n```    \n我们改变了函数运行的作用域， 通过绑定不同的对象，函数内部 this 也不同。最终输入结果才会这样。\n\n\n## 高级用法\n高级用法，实现 js 继承\n``` JS\n    //父类 Person\n    function Person() {\n        this.sayName = function() {\n            return this.name;\n        }\n    }\n\n    //子类 Chinese\n    function Chinese(name) {\n        //借助 call 实现继承\n        Person.call(this);\n        this.name = name;\n\n        this.ch = function() {\n            alert('我是中国人');\n        }\n    }\n\n    //子类 America\n    function America(name) {\n        //借助 call 实现继承\n        Person.call(this);\n        this.name = name;\n\n        this.am = function() {\n            alert('我是美国人');\n        }\n    }\n\n\n    //测试\n    var chinese = new Chinese('成龙');\n    //调用 父类方法\n    console.log(chinese.sayName());   //输出 成龙\n\n    var america = new America('America');\n    //调用 父类方法\n    console.log(america.sayName());   //输出 America\n```\n\n## 结束语\ncall 和 apply 最大的好处: 方便我们解耦，对象不需要和方法有任何的耦合性，能使我们写出更好的面相对象程序。\n大家如果看一些 js 框架底层的话会看到好多地方都有大量用到。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/diff-call-apply","published":1,"updated":"2018-01-17T06:46:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt33001cfme33htf347c","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><!-- TOC -->\n<ul>\n<li><a href=\"#背景\">背景</a></li>\n<li><a href=\"#定义\">定义</a><ul>\n<li><a href=\"#call\">call</a></li>\n<li><a href=\"#apply\">apply</a></li>\n<li><a href=\"#区别\">区别</a></li>\n</ul>\n</li>\n<li><a href=\"#用法\">用法</a></li>\n<li><a href=\"#高级用法\">高级用法</a></li>\n<li><a href=\"#结束语\">结束语</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>ECMAScript规范为所有函数都包含两个方法(这两个方法非继承而来), call 和 apply 。这两个函数都是在特定的作用域中调用函数,能改变函数的作用域，实际上是改变函数体内 this 的值 。</p>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><p>语法<br>    call(thisObj，Object)<br>定义<br>    调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明<br>    call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><p>语法<br>    apply(thisObj，[argArray])<br>定义<br>    应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明<br>    如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>参数不同, apply 传入的是一个参数数组，也就是将多个参数组合成一个参数数组， call 从第二个参数开始依次传入.</li>\n<li>apply 可以直接将当前函数的arguments对象作为apply的第二个参数传入</li>\n</ul>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>调用函数，传递参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个add 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用call 来调用 add 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddCall</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用 add 方法 的 call 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> add.call(<span class=\"keyword\">this</span>, x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//apply 来调用 add 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddApply</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用 add 方法 的 applly 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> add.apply(<span class=\"keyword\">this</span>, [x, y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myAddCall(<span class=\"number\">10</span>, <span class=\"number\">20</span>));    <span class=\"comment\">//输出结果30</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myAddApply(<span class=\"number\">20</span>, <span class=\"number\">20</span>));  <span class=\"comment\">//输出结果40</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到通过方法本身的call 和 apply 执行了该函数。</p>\n<p>改变函数作用域<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'小白'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'小红'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sayName.call(<span class=\"keyword\">this</span>));    <span class=\"comment\">//输出小白</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sayName.call(obj));    <span class=\"comment\">//输入小红</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">我们改变了函数运行的作用域， 通过绑定不同的对象，函数内部 this 也不同。最终输入结果才会这样。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 高级用法</span></span><br><span class=\"line\"><span class=\"string\">高级用法，实现 js 继承</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\">    <span class=\"comment\">//父类 Person</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//子类 Chinese</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chinese</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//借助 call 实现继承</span></span><br><span class=\"line\">        Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'我是中国人'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//子类 America</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">America</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//借助 call 实现继承</span></span><br><span class=\"line\">        Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.am = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'我是美国人'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> chinese = <span class=\"keyword\">new</span> Chinese(<span class=\"string\">'成龙'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//调用 父类方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chinese.sayName());   <span class=\"comment\">//输出 成龙</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> america = <span class=\"keyword\">new</span> America(<span class=\"string\">'America'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//调用 父类方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(america.sayName());   <span class=\"comment\">//输出 America</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>call 和 apply 最大的好处: 方便我们解耦，对象不需要和方法有任何的耦合性，能使我们写出更好的面相对象程序。<br>大家如果看一些 js 框架底层的话会看到好多地方都有大量用到。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><!-- TOC -->\n<ul>\n<li><a href=\"#背景\">背景</a></li>\n<li><a href=\"#定义\">定义</a><ul>\n<li><a href=\"#call\">call</a></li>\n<li><a href=\"#apply\">apply</a></li>\n<li><a href=\"#区别\">区别</a></li>\n</ul>\n</li>\n<li><a href=\"#用法\">用法</a></li>\n<li><a href=\"#高级用法\">高级用法</a></li>\n<li><a href=\"#结束语\">结束语</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>ECMAScript规范为所有函数都包含两个方法(这两个方法非继承而来), call 和 apply 。这两个函数都是在特定的作用域中调用函数,能改变函数的作用域，实际上是改变函数体内 this 的值 。</p>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><p>语法<br>    call(thisObj，Object)<br>定义<br>    调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明<br>    call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><p>语法<br>    apply(thisObj，[argArray])<br>定义<br>    应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明<br>    如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>参数不同, apply 传入的是一个参数数组，也就是将多个参数组合成一个参数数组， call 从第二个参数开始依次传入.</li>\n<li>apply 可以直接将当前函数的arguments对象作为apply的第二个参数传入</li>\n</ul>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>调用函数，传递参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个add 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用call 来调用 add 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddCall</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用 add 方法 的 call 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> add.call(<span class=\"keyword\">this</span>, x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//apply 来调用 add 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddApply</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用 add 方法 的 applly 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> add.apply(<span class=\"keyword\">this</span>, [x, y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myAddCall(<span class=\"number\">10</span>, <span class=\"number\">20</span>));    <span class=\"comment\">//输出结果30</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myAddApply(<span class=\"number\">20</span>, <span class=\"number\">20</span>));  <span class=\"comment\">//输出结果40</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到通过方法本身的call 和 apply 执行了该函数。</p>\n<p>改变函数作用域<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'小白'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'小红'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sayName.call(<span class=\"keyword\">this</span>));    <span class=\"comment\">//输出小白</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sayName.call(obj));    <span class=\"comment\">//输入小红</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">我们改变了函数运行的作用域， 通过绑定不同的对象，函数内部 this 也不同。最终输入结果才会这样。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 高级用法</span></span><br><span class=\"line\"><span class=\"string\">高级用法，实现 js 继承</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> JS</span><br><span class=\"line\">    <span class=\"comment\">//父类 Person</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//子类 Chinese</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chinese</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//借助 call 实现继承</span></span><br><span class=\"line\">        Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'我是中国人'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//子类 America</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">America</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//借助 call 实现继承</span></span><br><span class=\"line\">        Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.am = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'我是美国人'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> chinese = <span class=\"keyword\">new</span> Chinese(<span class=\"string\">'成龙'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//调用 父类方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chinese.sayName());   <span class=\"comment\">//输出 成龙</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> america = <span class=\"keyword\">new</span> America(<span class=\"string\">'America'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//调用 父类方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(america.sayName());   <span class=\"comment\">//输出 America</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>call 和 apply 最大的好处: 方便我们解耦，对象不需要和方法有任何的耦合性，能使我们写出更好的面相对象程序。<br>大家如果看一些 js 框架底层的话会看到好多地方都有大量用到。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"前端面试题整理之基础问答篇","p":"javascript/interview-one","date":"2016-01-08T01:26:33.000Z","_content":"\n## 目录\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more-->\n\n## 问题\n\n1. CSS基础知识\n2. JS基础知识\n3. HTML基础知识\n4. DOM/BOM基础知识\n\n\n### 前端基础\n\n+ prototype和__proto__的关系是什么\n+ meta viewport原理\n+ 域名收敛是什么\n+ float和display：inline-block；的区别\n+ 前端优化策略列举\n+ 首屏、白屏时间如何计算\n+ 闭包\n+ 作用域链\n+ ajax如何实现、readyState五中状态的含义\n+ jsonp如何实现\n+ 怎么处理跨域\n+ restful的method解释\n+ get和post的区别\n+ 事件模型解释\n+ 编写一个元素拖拽的插件\n+ 编写一个contextmenu的插件\n+ 编写web端cookie的设置和获取方法\n+ 兼容ie６的水平垂直居中\n+ 兼容ie的事件封装\n+ h5和原生android的优缺点\n+ 编写h5需要注意什么\n+ xss和crsf的原理以及怎么预防\n+ css优先级\n+ 如何实现点击radio的文字描述控制radio的状态（通过label实现）\n+ delegate如何实现\n\n\n\n### 框架原理\n\n#### angularjs\n\nangular的directive怎么写\nangular的脏检查（双向绑定）是如何实现的\n依赖注入如何实现\nscope如何实现\n$parse模块如何实现（主要自己写了一个类似的库）\n\n#### react\n\nreact在setState后发生了什么（直接说了setState源码）\nflux解释\n对react有什么了解（直接说了react中虚拟dom内部表示，mount过程源码和同步过程源码）\njsBridge\n\n如何说服对方使用jsBridge\nrequirejs\n\namd和cmd区别，怎么了解到这些区别的，是否是去看了规范\nrequirejs那些经常用的方法，然后对其进行解释\nweex\n\nweex实现大致原理（只写过demo，面试管很好没有难为我，只问了这一个问题）\n\nhttp协议\n\naccept是什么，怎么用\nhttp协议状态码，302和303的区别\n前端缓存如何实现、etag如何实现、etag和cache-control的max-age的优先级哪个比较高以及为什么、cache-control和expire优先级哪个比较高以及为什么\nnode\n\nBuffer模块是干什么的\nStream是什么，使用的两种模式\nhttp模块如何将异步处理方式实现成同步处理方式，具体解析请参考http模块如何将异步处理转成同步处理\n其他问题\n\nutf8和gbk的区别\n知道页面上某个点的坐标，如何获取该坐标上的所有元素\nangular、react和jQuery适合哪些应用场景（建议查看各个框架产生背景）\n7点15分小于180度的夹角是多少\n大数相加\n给５升和６升的水杯如何倒出３升的水\n一班喜欢足球的人60%，喜欢排球的70%，喜欢篮球的80%，求喜欢足球和排球的占多少\n前端异常监测如何实现\n直播点赞按钮的冒泡功能如何实现\njs的uglify如何实现\n项目架构、如何带人（自己带过一个小团队）\n前端工程化方面做了哪些东西\n面试中的收获\n\n最开始面试时只阅读过angular源码，阿里一面完后面试官对我说react用的不熟悉没关系，弄懂原理也可以，之后三天疯狂阅读react源码，对于react中虚拟dom内在表示、mount过程、setState的同步过程有了清晰的认识。\n面试官建议去阅读node的http模块和Stream模块源码，其中node-v0.1.100的http模块源码已经阅读完，并且写了一个基于net模块的http模块。node-v6.9.1的Stream模块源码现在还在阅读中。\n初步了解了前端异常监测，并且了解了百姓网、腾讯和阿里在前端异常监测的一些方案和框架。\n阅读了大量前端工程化方面的博文，对前端工程化有了进一步的理解。\n了解了angular和react产生背景。\n\n\n\n#### CSS中position的值， relative和absolute分别是相对于谁进行定位的？\nabsolute：生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。\nfixed： （老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或 frame 进行定位。\nrelative： 生成相对定位的元素，相对于其在普通流中的位置进行定位。\nstatic： 默认值。没有定位，元素出现在正常的流中\nsticky： 生成粘性定位的元素，容器的位置根据正常文档流计算得出  \n关于sticky，[更多介绍](/2016/01/01/css/position-sticky/)\n\n#### XML和JSON的区别？\n(1).数据体积方面。\n    JSON相对于XML来讲，数据的体积小，传递的速度更快些。\n(2).数据交互方面。\n    JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。\n(3).数据描述方面。\n    JSON对数据的描述性比XML较差。\n(4).传输速度方面。\n    JSON的速度要远远快于XML。\n\n#### 说说你对作用域链的理解\n作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。\n\n#### 创建ajax过程\n+ (1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n+ (2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n+ (3)设置响应HTTP请求状态变化的函数.\n+ (4)发送HTTP请求.\n+ (5)获取异步调用返回的数据.\n+ (6)使用JavaScript和DOM实现局部刷新.\n\n\n#### 渐进增强和优雅降级\n渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n\n#### HTTP和HTTPS\nHTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS。\n默认HTTP的端口号为80，HTTPS的端口号为443。\n\n#### 为什么HTTPS安全\n因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl/tsl协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性\n\n#### 对前端模块化的认识 \nAMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\nAMD 是提前执行，CMD 是延迟执行。\nAMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。\n[更多详细说明](/2015/01/01/javascript/modules-one/)\n\n#### 什么是Etag？\n当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。\n情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 200 OK(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。\n情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和Etag\n然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据Etag，判断文件内容自上一次请求之后，有没有发生变化。\n情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发index.html的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— 304 Not Modified，此时浏览器就会从本地缓存中获取index.html的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。\n情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①\n① 只有get请求会被缓存，post请求不会\n\n\n#### Expires和Cache-Control\nExpires要求客户端和服务端的时钟严格同步。HTTP1.1引入Cache-Control来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。\n\n``` JS\n    Cache-Control: no-cache, private, max-age=0\n    ETag: abcde\n    Expires: Thu, 15 Apr 2014 20:00:00 GMT\n    Pragma: private\n    Last-Modified: $now // RFC1123 format\n```\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/interview-one.md","raw":"---\ntitle: 前端面试题整理之基础问答篇\np: javascript/interview-one\ndate: 2016-01-08 09:26:33\ntags: [Javascript, 面试, 题目]\ncategories: Javascript\n---\n\n## 目录\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more-->\n\n## 问题\n\n1. CSS基础知识\n2. JS基础知识\n3. HTML基础知识\n4. DOM/BOM基础知识\n\n\n### 前端基础\n\n+ prototype和__proto__的关系是什么\n+ meta viewport原理\n+ 域名收敛是什么\n+ float和display：inline-block；的区别\n+ 前端优化策略列举\n+ 首屏、白屏时间如何计算\n+ 闭包\n+ 作用域链\n+ ajax如何实现、readyState五中状态的含义\n+ jsonp如何实现\n+ 怎么处理跨域\n+ restful的method解释\n+ get和post的区别\n+ 事件模型解释\n+ 编写一个元素拖拽的插件\n+ 编写一个contextmenu的插件\n+ 编写web端cookie的设置和获取方法\n+ 兼容ie６的水平垂直居中\n+ 兼容ie的事件封装\n+ h5和原生android的优缺点\n+ 编写h5需要注意什么\n+ xss和crsf的原理以及怎么预防\n+ css优先级\n+ 如何实现点击radio的文字描述控制radio的状态（通过label实现）\n+ delegate如何实现\n\n\n\n### 框架原理\n\n#### angularjs\n\nangular的directive怎么写\nangular的脏检查（双向绑定）是如何实现的\n依赖注入如何实现\nscope如何实现\n$parse模块如何实现（主要自己写了一个类似的库）\n\n#### react\n\nreact在setState后发生了什么（直接说了setState源码）\nflux解释\n对react有什么了解（直接说了react中虚拟dom内部表示，mount过程源码和同步过程源码）\njsBridge\n\n如何说服对方使用jsBridge\nrequirejs\n\namd和cmd区别，怎么了解到这些区别的，是否是去看了规范\nrequirejs那些经常用的方法，然后对其进行解释\nweex\n\nweex实现大致原理（只写过demo，面试管很好没有难为我，只问了这一个问题）\n\nhttp协议\n\naccept是什么，怎么用\nhttp协议状态码，302和303的区别\n前端缓存如何实现、etag如何实现、etag和cache-control的max-age的优先级哪个比较高以及为什么、cache-control和expire优先级哪个比较高以及为什么\nnode\n\nBuffer模块是干什么的\nStream是什么，使用的两种模式\nhttp模块如何将异步处理方式实现成同步处理方式，具体解析请参考http模块如何将异步处理转成同步处理\n其他问题\n\nutf8和gbk的区别\n知道页面上某个点的坐标，如何获取该坐标上的所有元素\nangular、react和jQuery适合哪些应用场景（建议查看各个框架产生背景）\n7点15分小于180度的夹角是多少\n大数相加\n给５升和６升的水杯如何倒出３升的水\n一班喜欢足球的人60%，喜欢排球的70%，喜欢篮球的80%，求喜欢足球和排球的占多少\n前端异常监测如何实现\n直播点赞按钮的冒泡功能如何实现\njs的uglify如何实现\n项目架构、如何带人（自己带过一个小团队）\n前端工程化方面做了哪些东西\n面试中的收获\n\n最开始面试时只阅读过angular源码，阿里一面完后面试官对我说react用的不熟悉没关系，弄懂原理也可以，之后三天疯狂阅读react源码，对于react中虚拟dom内在表示、mount过程、setState的同步过程有了清晰的认识。\n面试官建议去阅读node的http模块和Stream模块源码，其中node-v0.1.100的http模块源码已经阅读完，并且写了一个基于net模块的http模块。node-v6.9.1的Stream模块源码现在还在阅读中。\n初步了解了前端异常监测，并且了解了百姓网、腾讯和阿里在前端异常监测的一些方案和框架。\n阅读了大量前端工程化方面的博文，对前端工程化有了进一步的理解。\n了解了angular和react产生背景。\n\n\n\n#### CSS中position的值， relative和absolute分别是相对于谁进行定位的？\nabsolute：生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。\nfixed： （老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或 frame 进行定位。\nrelative： 生成相对定位的元素，相对于其在普通流中的位置进行定位。\nstatic： 默认值。没有定位，元素出现在正常的流中\nsticky： 生成粘性定位的元素，容器的位置根据正常文档流计算得出  \n关于sticky，[更多介绍](/2016/01/01/css/position-sticky/)\n\n#### XML和JSON的区别？\n(1).数据体积方面。\n    JSON相对于XML来讲，数据的体积小，传递的速度更快些。\n(2).数据交互方面。\n    JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。\n(3).数据描述方面。\n    JSON对数据的描述性比XML较差。\n(4).传输速度方面。\n    JSON的速度要远远快于XML。\n\n#### 说说你对作用域链的理解\n作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。\n\n#### 创建ajax过程\n+ (1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n+ (2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n+ (3)设置响应HTTP请求状态变化的函数.\n+ (4)发送HTTP请求.\n+ (5)获取异步调用返回的数据.\n+ (6)使用JavaScript和DOM实现局部刷新.\n\n\n#### 渐进增强和优雅降级\n渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n\n#### HTTP和HTTPS\nHTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS。\n默认HTTP的端口号为80，HTTPS的端口号为443。\n\n#### 为什么HTTPS安全\n因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl/tsl协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性\n\n#### 对前端模块化的认识 \nAMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\nAMD 是提前执行，CMD 是延迟执行。\nAMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。\n[更多详细说明](/2015/01/01/javascript/modules-one/)\n\n#### 什么是Etag？\n当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。\n情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 200 OK(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。\n情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和Etag\n然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据Etag，判断文件内容自上一次请求之后，有没有发生变化。\n情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发index.html的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— 304 Not Modified，此时浏览器就会从本地缓存中获取index.html的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。\n情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①\n① 只有get请求会被缓存，post请求不会\n\n\n#### Expires和Cache-Control\nExpires要求客户端和服务端的时钟严格同步。HTTP1.1引入Cache-Control来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。\n\n``` JS\n    Cache-Control: no-cache, private, max-age=0\n    ETag: abcde\n    Expires: Thu, 15 Apr 2014 20:00:00 GMT\n    Pragma: private\n    Last-Modified: $now // RFC1123 format\n```\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/interview-one","published":1,"updated":"2018-01-15T02:33:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt35001gfme31ejyj8mq","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>CSS基础知识</li>\n<li>JS基础知识</li>\n<li>HTML基础知识</li>\n<li>DOM/BOM基础知识</li>\n</ol>\n<h3 id=\"前端基础\"><a href=\"#前端基础\" class=\"headerlink\" title=\"前端基础\"></a>前端基础</h3><ul>\n<li>prototype和<strong>proto</strong>的关系是什么</li>\n<li>meta viewport原理</li>\n<li>域名收敛是什么</li>\n<li>float和display：inline-block；的区别</li>\n<li>前端优化策略列举</li>\n<li>首屏、白屏时间如何计算</li>\n<li>闭包</li>\n<li>作用域链</li>\n<li>ajax如何实现、readyState五中状态的含义</li>\n<li>jsonp如何实现</li>\n<li>怎么处理跨域</li>\n<li>restful的method解释</li>\n<li>get和post的区别</li>\n<li>事件模型解释</li>\n<li>编写一个元素拖拽的插件</li>\n<li>编写一个contextmenu的插件</li>\n<li>编写web端cookie的设置和获取方法</li>\n<li>兼容ie６的水平垂直居中</li>\n<li>兼容ie的事件封装</li>\n<li>h5和原生android的优缺点</li>\n<li>编写h5需要注意什么</li>\n<li>xss和crsf的原理以及怎么预防</li>\n<li>css优先级</li>\n<li>如何实现点击radio的文字描述控制radio的状态（通过label实现）</li>\n<li>delegate如何实现</li>\n</ul>\n<h3 id=\"框架原理\"><a href=\"#框架原理\" class=\"headerlink\" title=\"框架原理\"></a>框架原理</h3><h4 id=\"angularjs\"><a href=\"#angularjs\" class=\"headerlink\" title=\"angularjs\"></a>angularjs</h4><p>angular的directive怎么写<br>angular的脏检查（双向绑定）是如何实现的<br>依赖注入如何实现<br>scope如何实现<br>$parse模块如何实现（主要自己写了一个类似的库）</p>\n<h4 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h4><p>react在setState后发生了什么（直接说了setState源码）<br>flux解释<br>对react有什么了解（直接说了react中虚拟dom内部表示，mount过程源码和同步过程源码）<br>jsBridge</p>\n<p>如何说服对方使用jsBridge<br>requirejs</p>\n<p>amd和cmd区别，怎么了解到这些区别的，是否是去看了规范<br>requirejs那些经常用的方法，然后对其进行解释<br>weex</p>\n<p>weex实现大致原理（只写过demo，面试管很好没有难为我，只问了这一个问题）</p>\n<p>http协议</p>\n<p>accept是什么，怎么用<br>http协议状态码，302和303的区别<br>前端缓存如何实现、etag如何实现、etag和cache-control的max-age的优先级哪个比较高以及为什么、cache-control和expire优先级哪个比较高以及为什么<br>node</p>\n<p>Buffer模块是干什么的<br>Stream是什么，使用的两种模式<br>http模块如何将异步处理方式实现成同步处理方式，具体解析请参考http模块如何将异步处理转成同步处理<br>其他问题</p>\n<p>utf8和gbk的区别<br>知道页面上某个点的坐标，如何获取该坐标上的所有元素<br>angular、react和jQuery适合哪些应用场景（建议查看各个框架产生背景）<br>7点15分小于180度的夹角是多少<br>大数相加<br>给５升和６升的水杯如何倒出３升的水<br>一班喜欢足球的人60%，喜欢排球的70%，喜欢篮球的80%，求喜欢足球和排球的占多少<br>前端异常监测如何实现<br>直播点赞按钮的冒泡功能如何实现<br>js的uglify如何实现<br>项目架构、如何带人（自己带过一个小团队）<br>前端工程化方面做了哪些东西<br>面试中的收获</p>\n<p>最开始面试时只阅读过angular源码，阿里一面完后面试官对我说react用的不熟悉没关系，弄懂原理也可以，之后三天疯狂阅读react源码，对于react中虚拟dom内在表示、mount过程、setState的同步过程有了清晰的认识。<br>面试官建议去阅读node的http模块和Stream模块源码，其中node-v0.1.100的http模块源码已经阅读完，并且写了一个基于net模块的http模块。node-v6.9.1的Stream模块源码现在还在阅读中。<br>初步了解了前端异常监测，并且了解了百姓网、腾讯和阿里在前端异常监测的一些方案和框架。<br>阅读了大量前端工程化方面的博文，对前端工程化有了进一步的理解。<br>了解了angular和react产生背景。</p>\n<h4 id=\"CSS中position的值，-relative和absolute分别是相对于谁进行定位的？\"><a href=\"#CSS中position的值，-relative和absolute分别是相对于谁进行定位的？\" class=\"headerlink\" title=\"CSS中position的值， relative和absolute分别是相对于谁进行定位的？\"></a>CSS中position的值， relative和absolute分别是相对于谁进行定位的？</h4><p>absolute：生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。<br>fixed： （老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或 frame 进行定位。<br>relative： 生成相对定位的元素，相对于其在普通流中的位置进行定位。<br>static： 默认值。没有定位，元素出现在正常的流中<br>sticky： 生成粘性定位的元素，容器的位置根据正常文档流计算得出<br>关于sticky，<a href=\"/2016/01/01/css/position-sticky/\">更多介绍</a></p>\n<h4 id=\"XML和JSON的区别？\"><a href=\"#XML和JSON的区别？\" class=\"headerlink\" title=\"XML和JSON的区别？\"></a>XML和JSON的区别？</h4><p>(1).数据体积方面。<br>    JSON相对于XML来讲，数据的体积小，传递的速度更快些。<br>(2).数据交互方面。<br>    JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。<br>(3).数据描述方面。<br>    JSON对数据的描述性比XML较差。<br>(4).传输速度方面。<br>    JSON的速度要远远快于XML。</p>\n<h4 id=\"说说你对作用域链的理解\"><a href=\"#说说你对作用域链的理解\" class=\"headerlink\" title=\"说说你对作用域链的理解\"></a>说说你对作用域链的理解</h4><p>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。</p>\n<h4 id=\"创建ajax过程\"><a href=\"#创建ajax过程\" class=\"headerlink\" title=\"创建ajax过程\"></a>创建ajax过程</h4><ul>\n<li>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.</li>\n<li>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</li>\n<li>(3)设置响应HTTP请求状态变化的函数.</li>\n<li>(4)发送HTTP请求.</li>\n<li>(5)获取异步调用返回的数据.</li>\n<li>(6)使用JavaScript和DOM实现局部刷新.</li>\n</ul>\n<h4 id=\"渐进增强和优雅降级\"><a href=\"#渐进增强和优雅降级\" class=\"headerlink\" title=\"渐进增强和优雅降级\"></a>渐进增强和优雅降级</h4><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<h4 id=\"HTTP和HTTPS\"><a href=\"#HTTP和HTTPS\" class=\"headerlink\" title=\"HTTP和HTTPS\"></a>HTTP和HTTPS</h4><p>HTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS。<br>默认HTTP的端口号为80，HTTPS的端口号为443。</p>\n<h4 id=\"为什么HTTPS安全\"><a href=\"#为什么HTTPS安全\" class=\"headerlink\" title=\"为什么HTTPS安全\"></a>为什么HTTPS安全</h4><p>因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl/tsl协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性</p>\n<h4 id=\"对前端模块化的认识\"><a href=\"#对前端模块化的认识\" class=\"headerlink\" title=\"对前端模块化的认识\"></a>对前端模块化的认识</h4><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>AMD 是提前执行，CMD 是延迟执行。<br>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。<br><a href=\"/2015/01/01/javascript/modules-one/\">更多详细说明</a></p>\n<h4 id=\"什么是Etag？\"><a href=\"#什么是Etag？\" class=\"headerlink\" title=\"什么是Etag？\"></a>什么是Etag？</h4><p>当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。<br>情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 200 OK(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。<br>情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和Etag<br>然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据Etag，判断文件内容自上一次请求之后，有没有发生变化。<br>情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发index.html的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— 304 Not Modified，此时浏览器就会从本地缓存中获取index.html的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。<br>情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①<br>① 只有get请求会被缓存，post请求不会</p>\n<h4 id=\"Expires和Cache-Control\"><a href=\"#Expires和Cache-Control\" class=\"headerlink\" title=\"Expires和Cache-Control\"></a>Expires和Cache-Control</h4><p>Expires要求客户端和服务端的时钟严格同步。HTTP1.1引入Cache-Control来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control: no-cache, private, max-age=<span class=\"number\">0</span></span><br><span class=\"line\">ETag: abcde</span><br><span class=\"line\">Expires: Thu, <span class=\"number\">15</span> Apr <span class=\"number\">2014</span> <span class=\"number\">20</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> GMT</span><br><span class=\"line\">Pragma: private</span><br><span class=\"line\">Last-Modified: $now <span class=\"comment\">// RFC1123 format</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>CSS基础知识</li>\n<li>JS基础知识</li>\n<li>HTML基础知识</li>\n<li>DOM/BOM基础知识</li>\n</ol>\n<h3 id=\"前端基础\"><a href=\"#前端基础\" class=\"headerlink\" title=\"前端基础\"></a>前端基础</h3><ul>\n<li>prototype和<strong>proto</strong>的关系是什么</li>\n<li>meta viewport原理</li>\n<li>域名收敛是什么</li>\n<li>float和display：inline-block；的区别</li>\n<li>前端优化策略列举</li>\n<li>首屏、白屏时间如何计算</li>\n<li>闭包</li>\n<li>作用域链</li>\n<li>ajax如何实现、readyState五中状态的含义</li>\n<li>jsonp如何实现</li>\n<li>怎么处理跨域</li>\n<li>restful的method解释</li>\n<li>get和post的区别</li>\n<li>事件模型解释</li>\n<li>编写一个元素拖拽的插件</li>\n<li>编写一个contextmenu的插件</li>\n<li>编写web端cookie的设置和获取方法</li>\n<li>兼容ie６的水平垂直居中</li>\n<li>兼容ie的事件封装</li>\n<li>h5和原生android的优缺点</li>\n<li>编写h5需要注意什么</li>\n<li>xss和crsf的原理以及怎么预防</li>\n<li>css优先级</li>\n<li>如何实现点击radio的文字描述控制radio的状态（通过label实现）</li>\n<li>delegate如何实现</li>\n</ul>\n<h3 id=\"框架原理\"><a href=\"#框架原理\" class=\"headerlink\" title=\"框架原理\"></a>框架原理</h3><h4 id=\"angularjs\"><a href=\"#angularjs\" class=\"headerlink\" title=\"angularjs\"></a>angularjs</h4><p>angular的directive怎么写<br>angular的脏检查（双向绑定）是如何实现的<br>依赖注入如何实现<br>scope如何实现<br>$parse模块如何实现（主要自己写了一个类似的库）</p>\n<h4 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h4><p>react在setState后发生了什么（直接说了setState源码）<br>flux解释<br>对react有什么了解（直接说了react中虚拟dom内部表示，mount过程源码和同步过程源码）<br>jsBridge</p>\n<p>如何说服对方使用jsBridge<br>requirejs</p>\n<p>amd和cmd区别，怎么了解到这些区别的，是否是去看了规范<br>requirejs那些经常用的方法，然后对其进行解释<br>weex</p>\n<p>weex实现大致原理（只写过demo，面试管很好没有难为我，只问了这一个问题）</p>\n<p>http协议</p>\n<p>accept是什么，怎么用<br>http协议状态码，302和303的区别<br>前端缓存如何实现、etag如何实现、etag和cache-control的max-age的优先级哪个比较高以及为什么、cache-control和expire优先级哪个比较高以及为什么<br>node</p>\n<p>Buffer模块是干什么的<br>Stream是什么，使用的两种模式<br>http模块如何将异步处理方式实现成同步处理方式，具体解析请参考http模块如何将异步处理转成同步处理<br>其他问题</p>\n<p>utf8和gbk的区别<br>知道页面上某个点的坐标，如何获取该坐标上的所有元素<br>angular、react和jQuery适合哪些应用场景（建议查看各个框架产生背景）<br>7点15分小于180度的夹角是多少<br>大数相加<br>给５升和６升的水杯如何倒出３升的水<br>一班喜欢足球的人60%，喜欢排球的70%，喜欢篮球的80%，求喜欢足球和排球的占多少<br>前端异常监测如何实现<br>直播点赞按钮的冒泡功能如何实现<br>js的uglify如何实现<br>项目架构、如何带人（自己带过一个小团队）<br>前端工程化方面做了哪些东西<br>面试中的收获</p>\n<p>最开始面试时只阅读过angular源码，阿里一面完后面试官对我说react用的不熟悉没关系，弄懂原理也可以，之后三天疯狂阅读react源码，对于react中虚拟dom内在表示、mount过程、setState的同步过程有了清晰的认识。<br>面试官建议去阅读node的http模块和Stream模块源码，其中node-v0.1.100的http模块源码已经阅读完，并且写了一个基于net模块的http模块。node-v6.9.1的Stream模块源码现在还在阅读中。<br>初步了解了前端异常监测，并且了解了百姓网、腾讯和阿里在前端异常监测的一些方案和框架。<br>阅读了大量前端工程化方面的博文，对前端工程化有了进一步的理解。<br>了解了angular和react产生背景。</p>\n<h4 id=\"CSS中position的值，-relative和absolute分别是相对于谁进行定位的？\"><a href=\"#CSS中position的值，-relative和absolute分别是相对于谁进行定位的？\" class=\"headerlink\" title=\"CSS中position的值， relative和absolute分别是相对于谁进行定位的？\"></a>CSS中position的值， relative和absolute分别是相对于谁进行定位的？</h4><p>absolute：生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。<br>fixed： （老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或 frame 进行定位。<br>relative： 生成相对定位的元素，相对于其在普通流中的位置进行定位。<br>static： 默认值。没有定位，元素出现在正常的流中<br>sticky： 生成粘性定位的元素，容器的位置根据正常文档流计算得出<br>关于sticky，<a href=\"/2016/01/01/css/position-sticky/\">更多介绍</a></p>\n<h4 id=\"XML和JSON的区别？\"><a href=\"#XML和JSON的区别？\" class=\"headerlink\" title=\"XML和JSON的区别？\"></a>XML和JSON的区别？</h4><p>(1).数据体积方面。<br>    JSON相对于XML来讲，数据的体积小，传递的速度更快些。<br>(2).数据交互方面。<br>    JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。<br>(3).数据描述方面。<br>    JSON对数据的描述性比XML较差。<br>(4).传输速度方面。<br>    JSON的速度要远远快于XML。</p>\n<h4 id=\"说说你对作用域链的理解\"><a href=\"#说说你对作用域链的理解\" class=\"headerlink\" title=\"说说你对作用域链的理解\"></a>说说你对作用域链的理解</h4><p>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。</p>\n<h4 id=\"创建ajax过程\"><a href=\"#创建ajax过程\" class=\"headerlink\" title=\"创建ajax过程\"></a>创建ajax过程</h4><ul>\n<li>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.</li>\n<li>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</li>\n<li>(3)设置响应HTTP请求状态变化的函数.</li>\n<li>(4)发送HTTP请求.</li>\n<li>(5)获取异步调用返回的数据.</li>\n<li>(6)使用JavaScript和DOM实现局部刷新.</li>\n</ul>\n<h4 id=\"渐进增强和优雅降级\"><a href=\"#渐进增强和优雅降级\" class=\"headerlink\" title=\"渐进增强和优雅降级\"></a>渐进增强和优雅降级</h4><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<h4 id=\"HTTP和HTTPS\"><a href=\"#HTTP和HTTPS\" class=\"headerlink\" title=\"HTTP和HTTPS\"></a>HTTP和HTTPS</h4><p>HTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS。<br>默认HTTP的端口号为80，HTTPS的端口号为443。</p>\n<h4 id=\"为什么HTTPS安全\"><a href=\"#为什么HTTPS安全\" class=\"headerlink\" title=\"为什么HTTPS安全\"></a>为什么HTTPS安全</h4><p>因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl/tsl协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性</p>\n<h4 id=\"对前端模块化的认识\"><a href=\"#对前端模块化的认识\" class=\"headerlink\" title=\"对前端模块化的认识\"></a>对前端模块化的认识</h4><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>AMD 是提前执行，CMD 是延迟执行。<br>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。<br><a href=\"/2015/01/01/javascript/modules-one/\">更多详细说明</a></p>\n<h4 id=\"什么是Etag？\"><a href=\"#什么是Etag？\" class=\"headerlink\" title=\"什么是Etag？\"></a>什么是Etag？</h4><p>当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。<br>情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 200 OK(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。<br>情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和Etag<br>然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据Etag，判断文件内容自上一次请求之后，有没有发生变化。<br>情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发index.html的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— 304 Not Modified，此时浏览器就会从本地缓存中获取index.html的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。<br>情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①<br>① 只有get请求会被缓存，post请求不会</p>\n<h4 id=\"Expires和Cache-Control\"><a href=\"#Expires和Cache-Control\" class=\"headerlink\" title=\"Expires和Cache-Control\"></a>Expires和Cache-Control</h4><p>Expires要求客户端和服务端的时钟严格同步。HTTP1.1引入Cache-Control来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control: no-cache, private, max-age=<span class=\"number\">0</span></span><br><span class=\"line\">ETag: abcde</span><br><span class=\"line\">Expires: Thu, <span class=\"number\">15</span> Apr <span class=\"number\">2014</span> <span class=\"number\">20</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> GMT</span><br><span class=\"line\">Pragma: private</span><br><span class=\"line\">Last-Modified: $now <span class=\"comment\">// RFC1123 format</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"前端面试题整理之资深理论篇","p":"javascript/interview-one","date":"2017-03-08T01:26:33.000Z","_content":"\n## 目录\n\n本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more-->\n\n## 问题\n\n#### 如何解决跨域问题\n1. JSONP\n原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。\n由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。\n优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。\nJSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里\n``` JS\n<script>\n    function createJs(sUrl){\n\n        var oScript = document.createElement('script');\n        oScript.type = 'text/javascript';\n        oScript.src = sUrl;\n        document.getElementsByTagName('head')[0].appendChild(oScript);\n    }\n\n    createJs('jsonp.js');\n\n    box({\n       'name': 'test'\n    });\n\n    function box(json){\n        alert(json.name);\n    }\n</script>\n```\n\n2. CORS\n服务器端对于CORS的支持，主要就是通过设置 *** Access-Control-Allow-Origin ***来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。\n通过修改document.domain来跨子域\n将子域和主域的document.domain设为同一个主域.\n前提条件：这两个域名必须属于同一个基础域名! 而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域\n主域相同的使用document.domain。\n\n3. 使用window.name来进行跨域\nwindow对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。\n\n4. 使用HTML5中新引进的window.postMessage方法来跨域传送数据\n还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。\n\n\n#### 谈谈你对webpack的看法\nWebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。\n\n###### webpack的两大特色：\n1. code splitting（可以自动完成）\n2. loader 可以处理各种类型的静态文件，并且支持串联操作\nwebpack 是以commonJS的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。\n\n###### webpack特效\nwebpack具有requireJs和browserify的功能，但仍有很多自己的新特性：\n+ 对 CommonJS 、 AMD 、ES6的语法做了兼容\n+ 对js、css、图片等资源文件都支持打包\n+ 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持\n+ 有独立的配置文件webpack.config.js\n+ 可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间\n+ 支持 SourceUrls 和 SourceMaps，易于调试\n+ 具有强大的Plugin接口，大多是内部插件，使用起来比较灵活\n+ webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快\n\n\n###### 说说TCP传输的三次握手四次挥手策略\n*** 三次握手 ***\n为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。\n\n+ 第一次握手：发送端首先发送一个带SYN标志的数据包给对方。\n+ 第二次握手：接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。\n+ 第三次握手：最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 \n\n若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。\n\n*** 断开一个TCP连接则需要“四次挥手”： ***\n+ 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。\n\n+ 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。\n\n+ 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。\n\n+ 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。\n\n\n#### TCP和UDP的区别\n+ TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来\n+ UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！\nUDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。\n\n\n#### Web Worker 和 WebSocket\n\n##### worker主线程：   [查看详细讲解](/2014/05/01/web/how-to-use-webworker/)\nWeb Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。\n\n1. 通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。\n2. 通过worker.postMessage( data ) 方法来向worker发送数据。\n3. 绑定worker.onmessage方法来接收worker发送过来的数据。\n4. 可以使用 worker.terminate() 来终止一个worker的执行。\n\n##### WebSocket\nWebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。\n\n\n#### Javascript垃圾回收方法\n*** 标记清除（mark and sweep） ***\n这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。\n\n垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。\n\n*** 引用计数(reference counting) ***\n在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。\n引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。\n\n在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，也就是说只要涉及BOM及DOM就会出现循环引用问题。\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/interview-three.md","raw":"---\ntitle: 前端面试题整理之资深理论篇\np: javascript/interview-one\ndate: 2017-03-08 09:26:33\ntags: [Javascript, 面试, 题目]\ncategories: Javascript\n---\n\n## 目录\n\n本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more-->\n\n## 问题\n\n#### 如何解决跨域问题\n1. JSONP\n原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。\n由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。\n优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。\nJSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里\n``` JS\n<script>\n    function createJs(sUrl){\n\n        var oScript = document.createElement('script');\n        oScript.type = 'text/javascript';\n        oScript.src = sUrl;\n        document.getElementsByTagName('head')[0].appendChild(oScript);\n    }\n\n    createJs('jsonp.js');\n\n    box({\n       'name': 'test'\n    });\n\n    function box(json){\n        alert(json.name);\n    }\n</script>\n```\n\n2. CORS\n服务器端对于CORS的支持，主要就是通过设置 *** Access-Control-Allow-Origin ***来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。\n通过修改document.domain来跨子域\n将子域和主域的document.domain设为同一个主域.\n前提条件：这两个域名必须属于同一个基础域名! 而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域\n主域相同的使用document.domain。\n\n3. 使用window.name来进行跨域\nwindow对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。\n\n4. 使用HTML5中新引进的window.postMessage方法来跨域传送数据\n还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。\n\n\n#### 谈谈你对webpack的看法\nWebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。\n\n###### webpack的两大特色：\n1. code splitting（可以自动完成）\n2. loader 可以处理各种类型的静态文件，并且支持串联操作\nwebpack 是以commonJS的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。\n\n###### webpack特效\nwebpack具有requireJs和browserify的功能，但仍有很多自己的新特性：\n+ 对 CommonJS 、 AMD 、ES6的语法做了兼容\n+ 对js、css、图片等资源文件都支持打包\n+ 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持\n+ 有独立的配置文件webpack.config.js\n+ 可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间\n+ 支持 SourceUrls 和 SourceMaps，易于调试\n+ 具有强大的Plugin接口，大多是内部插件，使用起来比较灵活\n+ webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快\n\n\n###### 说说TCP传输的三次握手四次挥手策略\n*** 三次握手 ***\n为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。\n\n+ 第一次握手：发送端首先发送一个带SYN标志的数据包给对方。\n+ 第二次握手：接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。\n+ 第三次握手：最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 \n\n若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。\n\n*** 断开一个TCP连接则需要“四次挥手”： ***\n+ 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。\n\n+ 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。\n\n+ 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。\n\n+ 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。\n\n\n#### TCP和UDP的区别\n+ TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来\n+ UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！\nUDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。\n\n\n#### Web Worker 和 WebSocket\n\n##### worker主线程：   [查看详细讲解](/2014/05/01/web/how-to-use-webworker/)\nWeb Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。\n\n1. 通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。\n2. 通过worker.postMessage( data ) 方法来向worker发送数据。\n3. 绑定worker.onmessage方法来接收worker发送过来的数据。\n4. 可以使用 worker.terminate() 来终止一个worker的执行。\n\n##### WebSocket\nWebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。\n\n\n#### Javascript垃圾回收方法\n*** 标记清除（mark and sweep） ***\n这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。\n\n垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。\n\n*** 引用计数(reference counting) ***\n在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。\n引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。\n\n在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，也就是说只要涉及BOM及DOM就会出现循环引用问题。\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/interview-three","published":1,"updated":"2018-01-08T09:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt37001ifme3z92c169m","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p>\n<ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h4 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题\"></a>如何解决跨域问题</h4><ol>\n<li><p>JSONP<br>原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。<br>JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createJs</span>(<span class=\"params\">sUrl</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">        oScript.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">        oScript.src = sUrl;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(oScript);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createJs(<span class=\"string\">'jsonp.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    box(&#123;</span><br><span class=\"line\">       <span class=\"string\">'name'</span>: <span class=\"string\">'test'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">box</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">        alert(json.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CORS<br>服务器端对于CORS的支持，主要就是通过设置 <strong><em> Access-Control-Allow-Origin </em></strong>来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。<br>通过修改document.domain来跨子域<br>将子域和主域的document.domain设为同一个主域.<br>前提条件：这两个域名必须属于同一个基础域名! 而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域<br>主域相同的使用document.domain。</p>\n</li>\n<li><p>使用window.name来进行跨域<br>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。</p>\n</li>\n<li><p>使用HTML5中新引进的window.postMessage方法来跨域传送数据<br>还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p>\n</li>\n</ol>\n<h4 id=\"谈谈你对webpack的看法\"><a href=\"#谈谈你对webpack的看法\" class=\"headerlink\" title=\"谈谈你对webpack的看法\"></a>谈谈你对webpack的看法</h4><p>WebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。</p>\n<h6 id=\"webpack的两大特色：\"><a href=\"#webpack的两大特色：\" class=\"headerlink\" title=\"webpack的两大特色：\"></a>webpack的两大特色：</h6><ol>\n<li>code splitting（可以自动完成）</li>\n<li>loader 可以处理各种类型的静态文件，并且支持串联操作<br>webpack 是以commonJS的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li>\n</ol>\n<h6 id=\"webpack特效\"><a href=\"#webpack特效\" class=\"headerlink\" title=\"webpack特效\"></a>webpack特效</h6><p>webpack具有requireJs和browserify的功能，但仍有很多自己的新特性：</p>\n<ul>\n<li>对 CommonJS 、 AMD 、ES6的语法做了兼容</li>\n<li>对js、css、图片等资源文件都支持打包</li>\n<li>串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持</li>\n<li>有独立的配置文件webpack.config.js</li>\n<li>可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间</li>\n<li>支持 SourceUrls 和 SourceMaps，易于调试</li>\n<li>具有强大的Plugin接口，大多是内部插件，使用起来比较灵活</li>\n<li>webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</li>\n</ul>\n<h6 id=\"说说TCP传输的三次握手四次挥手策略\"><a href=\"#说说TCP传输的三次握手四次挥手策略\" class=\"headerlink\" title=\"说说TCP传输的三次握手四次挥手策略\"></a>说说TCP传输的三次握手四次挥手策略</h6><p><strong><em> 三次握手 </em></strong><br>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。</p>\n<ul>\n<li>第一次握手：发送端首先发送一个带SYN标志的数据包给对方。</li>\n<li>第二次握手：接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。</li>\n<li>第三次握手：最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 </li>\n</ul>\n<p>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p>\n<p><strong><em> 断开一个TCP连接则需要“四次挥手”： </em></strong></p>\n<ul>\n<li><p>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p>\n</li>\n<li><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</p>\n</li>\n<li><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p>\n</li>\n<li><p>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p>\n</li>\n</ul>\n<h4 id=\"TCP和UDP的区别\"><a href=\"#TCP和UDP的区别\" class=\"headerlink\" title=\"TCP和UDP的区别\"></a>TCP和UDP的区别</h4><ul>\n<li>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</li>\n<li>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</li>\n</ul>\n<h4 id=\"Web-Worker-和-WebSocket\"><a href=\"#Web-Worker-和-WebSocket\" class=\"headerlink\" title=\"Web Worker 和 WebSocket\"></a>Web Worker 和 WebSocket</h4><h5 id=\"worker主线程：-查看详细讲解\"><a href=\"#worker主线程：-查看详细讲解\" class=\"headerlink\" title=\"worker主线程：   查看详细讲解\"></a>worker主线程：   <a href=\"/2014/05/01/web/how-to-use-webworker/\">查看详细讲解</a></h5><p>Web Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。</p>\n<ol>\n<li>通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。</li>\n<li>通过worker.postMessage( data ) 方法来向worker发送数据。</li>\n<li>绑定worker.onmessage方法来接收worker发送过来的数据。</li>\n<li>可以使用 worker.terminate() 来终止一个worker的执行。</li>\n</ol>\n<h5 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h5><p>WebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。</p>\n<h4 id=\"Javascript垃圾回收方法\"><a href=\"#Javascript垃圾回收方法\" class=\"headerlink\" title=\"Javascript垃圾回收方法\"></a>Javascript垃圾回收方法</h4><p><strong><em> 标记清除（mark and sweep） </em></strong><br>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p>\n<p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。</p>\n<p><strong><em> 引用计数(reference counting) </em></strong><br>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。<br>引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p>\n<p>在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，也就是说只要涉及BOM及DOM就会出现循环引用问题。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p>\n<ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h4 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题\"></a>如何解决跨域问题</h4><ol>\n<li><p>JSONP<br>原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。<br>JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createJs</span>(<span class=\"params\">sUrl</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">        oScript.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">        oScript.src = sUrl;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(oScript);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createJs(<span class=\"string\">'jsonp.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    box(&#123;</span><br><span class=\"line\">       <span class=\"string\">'name'</span>: <span class=\"string\">'test'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">box</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">        alert(json.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CORS<br>服务器端对于CORS的支持，主要就是通过设置 <strong><em> Access-Control-Allow-Origin </em></strong>来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。<br>通过修改document.domain来跨子域<br>将子域和主域的document.domain设为同一个主域.<br>前提条件：这两个域名必须属于同一个基础域名! 而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域<br>主域相同的使用document.domain。</p>\n</li>\n<li><p>使用window.name来进行跨域<br>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。</p>\n</li>\n<li><p>使用HTML5中新引进的window.postMessage方法来跨域传送数据<br>还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p>\n</li>\n</ol>\n<h4 id=\"谈谈你对webpack的看法\"><a href=\"#谈谈你对webpack的看法\" class=\"headerlink\" title=\"谈谈你对webpack的看法\"></a>谈谈你对webpack的看法</h4><p>WebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。</p>\n<h6 id=\"webpack的两大特色：\"><a href=\"#webpack的两大特色：\" class=\"headerlink\" title=\"webpack的两大特色：\"></a>webpack的两大特色：</h6><ol>\n<li>code splitting（可以自动完成）</li>\n<li>loader 可以处理各种类型的静态文件，并且支持串联操作<br>webpack 是以commonJS的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li>\n</ol>\n<h6 id=\"webpack特效\"><a href=\"#webpack特效\" class=\"headerlink\" title=\"webpack特效\"></a>webpack特效</h6><p>webpack具有requireJs和browserify的功能，但仍有很多自己的新特性：</p>\n<ul>\n<li>对 CommonJS 、 AMD 、ES6的语法做了兼容</li>\n<li>对js、css、图片等资源文件都支持打包</li>\n<li>串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持</li>\n<li>有独立的配置文件webpack.config.js</li>\n<li>可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间</li>\n<li>支持 SourceUrls 和 SourceMaps，易于调试</li>\n<li>具有强大的Plugin接口，大多是内部插件，使用起来比较灵活</li>\n<li>webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</li>\n</ul>\n<h6 id=\"说说TCP传输的三次握手四次挥手策略\"><a href=\"#说说TCP传输的三次握手四次挥手策略\" class=\"headerlink\" title=\"说说TCP传输的三次握手四次挥手策略\"></a>说说TCP传输的三次握手四次挥手策略</h6><p><strong><em> 三次握手 </em></strong><br>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。</p>\n<ul>\n<li>第一次握手：发送端首先发送一个带SYN标志的数据包给对方。</li>\n<li>第二次握手：接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。</li>\n<li>第三次握手：最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 </li>\n</ul>\n<p>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p>\n<p><strong><em> 断开一个TCP连接则需要“四次挥手”： </em></strong></p>\n<ul>\n<li><p>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p>\n</li>\n<li><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</p>\n</li>\n<li><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p>\n</li>\n<li><p>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p>\n</li>\n</ul>\n<h4 id=\"TCP和UDP的区别\"><a href=\"#TCP和UDP的区别\" class=\"headerlink\" title=\"TCP和UDP的区别\"></a>TCP和UDP的区别</h4><ul>\n<li>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</li>\n<li>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</li>\n</ul>\n<h4 id=\"Web-Worker-和-WebSocket\"><a href=\"#Web-Worker-和-WebSocket\" class=\"headerlink\" title=\"Web Worker 和 WebSocket\"></a>Web Worker 和 WebSocket</h4><h5 id=\"worker主线程：-查看详细讲解\"><a href=\"#worker主线程：-查看详细讲解\" class=\"headerlink\" title=\"worker主线程：   查看详细讲解\"></a>worker主线程：   <a href=\"/2014/05/01/web/how-to-use-webworker/\">查看详细讲解</a></h5><p>Web Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。</p>\n<ol>\n<li>通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。</li>\n<li>通过worker.postMessage( data ) 方法来向worker发送数据。</li>\n<li>绑定worker.onmessage方法来接收worker发送过来的数据。</li>\n<li>可以使用 worker.terminate() 来终止一个worker的执行。</li>\n</ol>\n<h5 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h5><p>WebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。</p>\n<h4 id=\"Javascript垃圾回收方法\"><a href=\"#Javascript垃圾回收方法\" class=\"headerlink\" title=\"Javascript垃圾回收方法\"></a>Javascript垃圾回收方法</h4><p><strong><em> 标记清除（mark and sweep） </em></strong><br>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p>\n<p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。</p>\n<p><strong><em> 引用计数(reference counting) </em></strong><br>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。<br>引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p>\n<p>在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，也就是说只要涉及BOM及DOM就会出现循环引用问题。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"前端面试题整理之高级上机篇","p":"javascript/interview-one","date":"2017-01-08T01:26:33.000Z","_content":"\n## 目录\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more--> \n\n## 问题\n\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/interview-two.md","raw":"---\ntitle: 前端面试题整理之高级上机篇\np: javascript/interview-one\ndate: 2017-01-08 09:26:33\ntags: [Javascript, 面试, 题目]\ncategories: Javascript\n---\n\n## 目录\n\n1. [前端面试题整理之基础问答篇](/2016/01/08/javascript/interview-one/)\n2. [前端面试题整理之高级上机篇](/2017/01/08/javascript/interview-two/)\n3. [前端面试题整理之资深理论篇](/2018/01/08/javascript/interview-three/)\n4. [前端面试题整理之理想篇](/2018/01/08/javascript/interview-four/)\n\n<!--more--> \n\n## 问题\n\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/interview-two","published":1,"updated":"2018-01-08T09:54:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt39001nfme3jrva5gz6","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>\n<a id=\"more\"></a> \n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"/2016/01/08/javascript/interview-one/\">前端面试题整理之基础问答篇</a></li>\n<li><a href=\"/2017/01/08/javascript/interview-two/\">前端面试题整理之高级上机篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-three/\">前端面试题整理之资深理论篇</a></li>\n<li><a href=\"/2018/01/08/javascript/interview-four/\">前端面试题整理之理想篇</a></li>\n</ol>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"必须知道的javascript概念题","p":"javascript/javascript-concepts","date":"2018-02-02T09:00:50.000Z","_content":"\n## 前言\n\n下面是一些 Web 开发中常见的概念\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n1. 原始值和引用值(Value vs. Reference)\n\n理解对象、数组和函数是如何复制和传递到函数中的。了解引用值是被复制了什么，理解原始值是通过复制值来进行复制和传递的。\n\n2. 域(Scope)\n\n理解全局域、函数域以及块级作用域之间的区别。了解变量在哪里是可用的，了解 JavaScript 引擎如何执行变量查找。\n\n3. 提升(Hoisting)\n\n认识到变量和函数的声明会被提升到声明所在的上下文，即在变量的作用域内，不管变量在何处声明，都会被提升到作用域的顶部，但是变量初始化的顺序不变。认识到函数表达式不会被提升。\n\n4. 闭包(Closures)\n\n认识到一个函数会保留对在其内部创建的域的访问，认识到这些可以让我们做什么，例如数据隐藏、内存化以及动态函数生成。\n\n5. this\n\n理解 this 绑定的规则。知道它的工作机制，知道在函数中如何判断它等同于什么，并且认识到为什么它是有用的。\n\n6. new\n\n认识到它如何与面向对象编程产生联系。了解通过 new 调用的函数会发生什么。理解通过使用 new 来自函数 prototype 属性的继承的对象是如何生成的。\n\n7. apply, call, bind\n\n了解这些函数是如何工作的，了解如何使用它们。了解它们对 this 做了什么。\n\n8. 原型和继承(Prototypes & Inheritance)\n\n理解 JavaScript 中的继承通过 [[Prototype]] 链进行工作。理解如何通过函数和对象设置继承，以及 new 是如何帮助我们实现的。了解 __proto__ 和 prototype 属性是什么，以及它们的作用。\n\n9. 异步 JS(Asynchronous JS)\n\n理解事件循环，理解浏览器是如何处理用户输入、Web 请求和一般事件的。知道如何识别并正确实现异步代码。理解 JavaScript 中异步和单线程分别是怎样的。.\n\n10. 高阶函数(Higher Order Functions)\n\n理解这些函数是 JavaScript 中的第一类对象以及这意味着什么，了解从另一个函数返回函数是完全合法的。了解闭包和高阶函数允许我们使用的技术。\n\n## 小结\n\n现在学习 JavaScript 和 Web 开发的人很多，他们都希望能凭此获得一份工作。然而，自学常常会使学习者对 JavaScript 语言本身的理解存在知识盲点。\n\n实际上，令人感到惊讶的是，他们只需要掌握很少的语言知识就能制作复杂的网页，然而这样通常不能很好掌握 JavaScript 的基础知识。\n\n使用基本的技能来实现功能和避免复杂的需求是相当容易的，通过依赖 Stack Overflow，而不理解复制来的代码以创建一个网站也是十分容易。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/javascript-concepts.md","raw":"---\ntitle: 必须知道的javascript概念题\ntags: [javascript,interview, concepts]\np: javascript/javascript-concepts\ndate: 2018-02-02 17:00:50\ncategories: Javascript\n---\n\n## 前言\n\n下面是一些 Web 开发中常见的概念\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n1. 原始值和引用值(Value vs. Reference)\n\n理解对象、数组和函数是如何复制和传递到函数中的。了解引用值是被复制了什么，理解原始值是通过复制值来进行复制和传递的。\n\n2. 域(Scope)\n\n理解全局域、函数域以及块级作用域之间的区别。了解变量在哪里是可用的，了解 JavaScript 引擎如何执行变量查找。\n\n3. 提升(Hoisting)\n\n认识到变量和函数的声明会被提升到声明所在的上下文，即在变量的作用域内，不管变量在何处声明，都会被提升到作用域的顶部，但是变量初始化的顺序不变。认识到函数表达式不会被提升。\n\n4. 闭包(Closures)\n\n认识到一个函数会保留对在其内部创建的域的访问，认识到这些可以让我们做什么，例如数据隐藏、内存化以及动态函数生成。\n\n5. this\n\n理解 this 绑定的规则。知道它的工作机制，知道在函数中如何判断它等同于什么，并且认识到为什么它是有用的。\n\n6. new\n\n认识到它如何与面向对象编程产生联系。了解通过 new 调用的函数会发生什么。理解通过使用 new 来自函数 prototype 属性的继承的对象是如何生成的。\n\n7. apply, call, bind\n\n了解这些函数是如何工作的，了解如何使用它们。了解它们对 this 做了什么。\n\n8. 原型和继承(Prototypes & Inheritance)\n\n理解 JavaScript 中的继承通过 [[Prototype]] 链进行工作。理解如何通过函数和对象设置继承，以及 new 是如何帮助我们实现的。了解 __proto__ 和 prototype 属性是什么，以及它们的作用。\n\n9. 异步 JS(Asynchronous JS)\n\n理解事件循环，理解浏览器是如何处理用户输入、Web 请求和一般事件的。知道如何识别并正确实现异步代码。理解 JavaScript 中异步和单线程分别是怎样的。.\n\n10. 高阶函数(Higher Order Functions)\n\n理解这些函数是 JavaScript 中的第一类对象以及这意味着什么，了解从另一个函数返回函数是完全合法的。了解闭包和高阶函数允许我们使用的技术。\n\n## 小结\n\n现在学习 JavaScript 和 Web 开发的人很多，他们都希望能凭此获得一份工作。然而，自学常常会使学习者对 JavaScript 语言本身的理解存在知识盲点。\n\n实际上，令人感到惊讶的是，他们只需要掌握很少的语言知识就能制作复杂的网页，然而这样通常不能很好掌握 JavaScript 的基础知识。\n\n使用基本的技能来实现功能和避免复杂的需求是相当容易的，通过依赖 Stack Overflow，而不理解复制来的代码以创建一个网站也是十分容易。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/javascript-concepts","published":1,"updated":"2018-02-02T09:06:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3a001pfme3nq8j73j6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>下面是一些 Web 开发中常见的概念</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><ol>\n<li>原始值和引用值(Value vs. Reference)</li>\n</ol>\n<p>理解对象、数组和函数是如何复制和传递到函数中的。了解引用值是被复制了什么，理解原始值是通过复制值来进行复制和传递的。</p>\n<ol>\n<li>域(Scope)</li>\n</ol>\n<p>理解全局域、函数域以及块级作用域之间的区别。了解变量在哪里是可用的，了解 JavaScript 引擎如何执行变量查找。</p>\n<ol>\n<li>提升(Hoisting)</li>\n</ol>\n<p>认识到变量和函数的声明会被提升到声明所在的上下文，即在变量的作用域内，不管变量在何处声明，都会被提升到作用域的顶部，但是变量初始化的顺序不变。认识到函数表达式不会被提升。</p>\n<ol>\n<li>闭包(Closures)</li>\n</ol>\n<p>认识到一个函数会保留对在其内部创建的域的访问，认识到这些可以让我们做什么，例如数据隐藏、内存化以及动态函数生成。</p>\n<ol>\n<li>this</li>\n</ol>\n<p>理解 this 绑定的规则。知道它的工作机制，知道在函数中如何判断它等同于什么，并且认识到为什么它是有用的。</p>\n<ol>\n<li>new</li>\n</ol>\n<p>认识到它如何与面向对象编程产生联系。了解通过 new 调用的函数会发生什么。理解通过使用 new 来自函数 prototype 属性的继承的对象是如何生成的。</p>\n<ol>\n<li>apply, call, bind</li>\n</ol>\n<p>了解这些函数是如何工作的，了解如何使用它们。了解它们对 this 做了什么。</p>\n<ol>\n<li>原型和继承(Prototypes &amp; Inheritance)</li>\n</ol>\n<p>理解 JavaScript 中的继承通过 [[Prototype]] 链进行工作。理解如何通过函数和对象设置继承，以及 new 是如何帮助我们实现的。了解 <strong>proto</strong> 和 prototype 属性是什么，以及它们的作用。</p>\n<ol>\n<li>异步 JS(Asynchronous JS)</li>\n</ol>\n<p>理解事件循环，理解浏览器是如何处理用户输入、Web 请求和一般事件的。知道如何识别并正确实现异步代码。理解 JavaScript 中异步和单线程分别是怎样的。.</p>\n<ol>\n<li>高阶函数(Higher Order Functions)</li>\n</ol>\n<p>理解这些函数是 JavaScript 中的第一类对象以及这意味着什么，了解从另一个函数返回函数是完全合法的。了解闭包和高阶函数允许我们使用的技术。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>现在学习 JavaScript 和 Web 开发的人很多，他们都希望能凭此获得一份工作。然而，自学常常会使学习者对 JavaScript 语言本身的理解存在知识盲点。</p>\n<p>实际上，令人感到惊讶的是，他们只需要掌握很少的语言知识就能制作复杂的网页，然而这样通常不能很好掌握 JavaScript 的基础知识。</p>\n<p>使用基本的技能来实现功能和避免复杂的需求是相当容易的，通过依赖 Stack Overflow，而不理解复制来的代码以创建一个网站也是十分容易。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>下面是一些 Web 开发中常见的概念</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><ol>\n<li>原始值和引用值(Value vs. Reference)</li>\n</ol>\n<p>理解对象、数组和函数是如何复制和传递到函数中的。了解引用值是被复制了什么，理解原始值是通过复制值来进行复制和传递的。</p>\n<ol>\n<li>域(Scope)</li>\n</ol>\n<p>理解全局域、函数域以及块级作用域之间的区别。了解变量在哪里是可用的，了解 JavaScript 引擎如何执行变量查找。</p>\n<ol>\n<li>提升(Hoisting)</li>\n</ol>\n<p>认识到变量和函数的声明会被提升到声明所在的上下文，即在变量的作用域内，不管变量在何处声明，都会被提升到作用域的顶部，但是变量初始化的顺序不变。认识到函数表达式不会被提升。</p>\n<ol>\n<li>闭包(Closures)</li>\n</ol>\n<p>认识到一个函数会保留对在其内部创建的域的访问，认识到这些可以让我们做什么，例如数据隐藏、内存化以及动态函数生成。</p>\n<ol>\n<li>this</li>\n</ol>\n<p>理解 this 绑定的规则。知道它的工作机制，知道在函数中如何判断它等同于什么，并且认识到为什么它是有用的。</p>\n<ol>\n<li>new</li>\n</ol>\n<p>认识到它如何与面向对象编程产生联系。了解通过 new 调用的函数会发生什么。理解通过使用 new 来自函数 prototype 属性的继承的对象是如何生成的。</p>\n<ol>\n<li>apply, call, bind</li>\n</ol>\n<p>了解这些函数是如何工作的，了解如何使用它们。了解它们对 this 做了什么。</p>\n<ol>\n<li>原型和继承(Prototypes &amp; Inheritance)</li>\n</ol>\n<p>理解 JavaScript 中的继承通过 [[Prototype]] 链进行工作。理解如何通过函数和对象设置继承，以及 new 是如何帮助我们实现的。了解 <strong>proto</strong> 和 prototype 属性是什么，以及它们的作用。</p>\n<ol>\n<li>异步 JS(Asynchronous JS)</li>\n</ol>\n<p>理解事件循环，理解浏览器是如何处理用户输入、Web 请求和一般事件的。知道如何识别并正确实现异步代码。理解 JavaScript 中异步和单线程分别是怎样的。.</p>\n<ol>\n<li>高阶函数(Higher Order Functions)</li>\n</ol>\n<p>理解这些函数是 JavaScript 中的第一类对象以及这意味着什么，了解从另一个函数返回函数是完全合法的。了解闭包和高阶函数允许我们使用的技术。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>现在学习 JavaScript 和 Web 开发的人很多，他们都希望能凭此获得一份工作。然而，自学常常会使学习者对 JavaScript 语言本身的理解存在知识盲点。</p>\n<p>实际上，令人感到惊讶的是，他们只需要掌握很少的语言知识就能制作复杂的网页，然而这样通常不能很好掌握 JavaScript 的基础知识。</p>\n<p>使用基本的技能来实现功能和避免复杂的需求是相当容易的，通过依赖 Stack Overflow，而不理解复制来的代码以创建一个网站也是十分容易。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"JavaScript模块化 --- Commonjs、AMD、CMD、ES6 Modules","p":"javascript/modules-one","date":"2015-01-01T12:26:12.000Z","_content":"\n随着前端js代码复杂度的提高，JavaScript模块化这个概念便被提出来，前端社区也不断地实现前端模块化，直到es6对其进行了规范，下面就介绍JavaScript模块化。\n\nJavaScript模块化是如何一步一步地发展起来的，并且也会主要对这些模块化方式做一个简单的比较。\n\n<!--more-->\n\n### 第一阶段：无模块化\n\nJavaScript最初的作用仅仅是验证表单，后来会添加一些动画，但是这些js代码很多在一个文件中就可以完成了，所以，我们只需要在html文件中添加一个script标签。\n\n后来，随着前端复杂度提高，为了能够提高项目代码的可读性、可扩展性等，我们的js文件逐渐多了起来，不再是一个js文件就可以解决的了，而是把每一个js文件当做一个模块。那么，这时的js引入方式是怎样的呢？大概是下面这样：\n\n``` JS\n<script src=\"jquery.js\"></script>\n<script src=\"jquery_scroller.js\"></script>\n<script src=\"main.js\"></script>\n<script src=\"other1.js\"></script>\n<script src=\"other2.js\"></script>\n<script src=\"other3.js\"></script>\n```\n\n即简单的将所有的js文件统统放在一起。但是这些文件的顺序还不能出错，比如jquery需要先引入，才能引入jquery插件，才能在其他的文件中使用jquery。\n\n优点：\n------\n\n相比于使用一个js文件，这种多个js文件实现最简单的模块化的思想是进步的。　\n\n缺点：\n-------\n污染全局作用域。 因为每一个模块都是暴露在全局的，简单的使用，会导致全局变量命名冲突，当然，我们也可以使用命名空间的方式来解决。\n\n对于大型项目，各种js很多，开发人员必须手动解决模块和代码库的依赖关系，后期维护成本较高。\n依赖关系不明显，不利于维护。 比如main.js需要使用jquery，但是，从上面的文件中，我们是看不出来的，如果jquery忘记了，那么就会报错。\n\n### 第二阶段： CommonJS规范\n\nCommonJS就是一个JavaScript模块化的规范，该规范最初是用在服务器端的node的，前端的webpack也是对CommonJS原生支持的。\n\n根据这个规范，每一个文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。\n\nCommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 module.exports 来导出需要暴露的接口。如下所示：\n``` JS\n// a.js\nvar x = 5;\nvar addX = function (value) {\n  return value + x;\n};\nmodule.exports.x = x;\nmodule.exports.addX = addX;\n```\n这里的a.js就是一个CommonJS规范的模块了。 这里的module就代表了这个模块，module的exports属性就是对外暴露的接口，可以对外导出外部可以访问的变量，比如这里的x和addX。\n\nexports 是对 module.exports 的引用。比如我们可以认为在一个模块的顶部有这句代码：\n``` JS\nexports = module.exports\n```\n所以，我们不能直接给exports赋值，比如number、function等。\n\n然后我们就可以在其他模块中引入这个模块使用了：\n``` JS\nvar a = require('./a.js');\nconsole.log(example.x); // 5\nconsole.log(example.addX(1)); // 6\n```\n这里的require就会获取到a.js所暴露的module.exports变量，然后就可以使用其暴露的x和addX了。\n\n优点：\n------------\nCommonJS规范在服务器端率先完成了JavaScript的模块化，解决了依赖、全局变量污染的问题，这也是js运行在服务器端的必要条件。\n\n缺点：\n-------------\n此文主要是浏览器端js的模块化， 由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。\n\n### 第三阶段： AMD规范\n\n之前提到: CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。而AMD规范的实现，就是大名鼎鼎的require.js了。\n\nAMD标准中，定义了下面两个API：\n``` JS\n1. require([module], callback)\n2. define(id, [depends], callback)\n```\n即通过define来定义一个模块，然后使用require来加载一个模块。 并且，require还支持CommonJS的模块导出方式。\n\n定义alert模块：\n``` JS\ndefine(function () {\n    var alertName = function (str) {\n      alert(\"I am \" + str);\n    }\n    var alertAge = function (num) {\n      alert(\"I am \" + num + \" years old\");\n    }\n    return {\n      alertName: alertName,\n      alertAge: alertAge\n    };\n});\n```\n\n引入模块：\n``` JS\nrequire(['alert'], function (alert) {\n  alert.alertName('JohnZhu');\n  alert.alertAge(21);\n});\n```\n但是，在使用require.js的时候，我们必须要提前加载所有的依赖，然后才可以使用，而不是需要使用时再加载。\n\n优点：\n---------\n适合在浏览器环境中异步加载模块。可以并行加载多个模块。\n\n缺点：\n-----------\n提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。\n\n### 第四阶段：CMD规范\n\nCMD规范是阿里的玉伯提出来的，实现js库为sea.js。 它和requirejs非常类似，即一个js文件就是一个模块，但是CMD的加载方式更加优秀，是通过按需加载的方式，而不是必须在模块开始就加载所有的依赖。如下：\n\n``` JS\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n  var Spinning = require('./spinning');\n  exports.doSomething = ...\n  module.exports = ...\n})\n```\n\n优点：\n-----------\n同样实现了浏览器端的模块化加载。\n可以按需加载，依赖就近。\n\n缺点：\n------------\n依赖SPM打包，模块的加载逻辑偏重。\n\n其实，这时我们就可以看出AMD和CMD的区别了，前者是对于依赖的模块提前执行，而后者是延迟执行。 前者推崇依赖前置，而后者推崇依赖就近，即只在需要用到某个模块的时候再require。 如下：\n\n``` JS\n// AMD\ndefine(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好  \n   a.doSomething()    \n   // 此处略去 100 行    \n   b.doSomething()    \n   ...\n});\n// CMD\ndefine(function(require, exports, module) {\n   var a = require('./a')   \n   a.doSomething()   \n   // 此处略去 100 行   \n   var b = require('./b') \n   // 依赖可以就近书写   \n   b.doSomething()\n   // ... \n});\n```\n\n### 第五阶段： ES6模块化\n\n之前的几种模块化方案都是前端社区自己实现的，只是得到了大家的认可和广泛使用，而ES6的模块化方案是真正的规范。 在ES6中，我们可以使用 import 关键字引入模块，通过 export 关键字导出模块，功能较之于前几个方案更为强大，也是我们所推崇的，但是由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的 require。\n\n虽然目前import和require的区别不大，但是还是推荐使用使用es6，因为未来es6必定是主流，对于代码的迁移成本还是非常容易的。 如：\n\n``` JS\nimport store from '../store/index'\nimport {mapState, mapMutations, mapActions} from 'vuex'\nimport axios from '../assets/js/request'\nimport util from '../utils/js/util.js'\n\nexport default {\ncreated () {\n    this.getClassify(); \n    this.RESET_VALUE();\n    console.log('created' ,new Date().getTime());\n}\n``` ","source":"_posts/javascript/modules-one.md","raw":"---\ntitle: JavaScript模块化 --- Commonjs、AMD、CMD、ES6 Modules\np: javascript/modules-one\ndate: 2015-1-1 20:26:12\ntags: [JS,Javascript, commonjs, AMD, CMD, ES6]\ncategories: Javascript\n---\n\n随着前端js代码复杂度的提高，JavaScript模块化这个概念便被提出来，前端社区也不断地实现前端模块化，直到es6对其进行了规范，下面就介绍JavaScript模块化。\n\nJavaScript模块化是如何一步一步地发展起来的，并且也会主要对这些模块化方式做一个简单的比较。\n\n<!--more-->\n\n### 第一阶段：无模块化\n\nJavaScript最初的作用仅仅是验证表单，后来会添加一些动画，但是这些js代码很多在一个文件中就可以完成了，所以，我们只需要在html文件中添加一个script标签。\n\n后来，随着前端复杂度提高，为了能够提高项目代码的可读性、可扩展性等，我们的js文件逐渐多了起来，不再是一个js文件就可以解决的了，而是把每一个js文件当做一个模块。那么，这时的js引入方式是怎样的呢？大概是下面这样：\n\n``` JS\n<script src=\"jquery.js\"></script>\n<script src=\"jquery_scroller.js\"></script>\n<script src=\"main.js\"></script>\n<script src=\"other1.js\"></script>\n<script src=\"other2.js\"></script>\n<script src=\"other3.js\"></script>\n```\n\n即简单的将所有的js文件统统放在一起。但是这些文件的顺序还不能出错，比如jquery需要先引入，才能引入jquery插件，才能在其他的文件中使用jquery。\n\n优点：\n------\n\n相比于使用一个js文件，这种多个js文件实现最简单的模块化的思想是进步的。　\n\n缺点：\n-------\n污染全局作用域。 因为每一个模块都是暴露在全局的，简单的使用，会导致全局变量命名冲突，当然，我们也可以使用命名空间的方式来解决。\n\n对于大型项目，各种js很多，开发人员必须手动解决模块和代码库的依赖关系，后期维护成本较高。\n依赖关系不明显，不利于维护。 比如main.js需要使用jquery，但是，从上面的文件中，我们是看不出来的，如果jquery忘记了，那么就会报错。\n\n### 第二阶段： CommonJS规范\n\nCommonJS就是一个JavaScript模块化的规范，该规范最初是用在服务器端的node的，前端的webpack也是对CommonJS原生支持的。\n\n根据这个规范，每一个文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。\n\nCommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 module.exports 来导出需要暴露的接口。如下所示：\n``` JS\n// a.js\nvar x = 5;\nvar addX = function (value) {\n  return value + x;\n};\nmodule.exports.x = x;\nmodule.exports.addX = addX;\n```\n这里的a.js就是一个CommonJS规范的模块了。 这里的module就代表了这个模块，module的exports属性就是对外暴露的接口，可以对外导出外部可以访问的变量，比如这里的x和addX。\n\nexports 是对 module.exports 的引用。比如我们可以认为在一个模块的顶部有这句代码：\n``` JS\nexports = module.exports\n```\n所以，我们不能直接给exports赋值，比如number、function等。\n\n然后我们就可以在其他模块中引入这个模块使用了：\n``` JS\nvar a = require('./a.js');\nconsole.log(example.x); // 5\nconsole.log(example.addX(1)); // 6\n```\n这里的require就会获取到a.js所暴露的module.exports变量，然后就可以使用其暴露的x和addX了。\n\n优点：\n------------\nCommonJS规范在服务器端率先完成了JavaScript的模块化，解决了依赖、全局变量污染的问题，这也是js运行在服务器端的必要条件。\n\n缺点：\n-------------\n此文主要是浏览器端js的模块化， 由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。\n\n### 第三阶段： AMD规范\n\n之前提到: CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。而AMD规范的实现，就是大名鼎鼎的require.js了。\n\nAMD标准中，定义了下面两个API：\n``` JS\n1. require([module], callback)\n2. define(id, [depends], callback)\n```\n即通过define来定义一个模块，然后使用require来加载一个模块。 并且，require还支持CommonJS的模块导出方式。\n\n定义alert模块：\n``` JS\ndefine(function () {\n    var alertName = function (str) {\n      alert(\"I am \" + str);\n    }\n    var alertAge = function (num) {\n      alert(\"I am \" + num + \" years old\");\n    }\n    return {\n      alertName: alertName,\n      alertAge: alertAge\n    };\n});\n```\n\n引入模块：\n``` JS\nrequire(['alert'], function (alert) {\n  alert.alertName('JohnZhu');\n  alert.alertAge(21);\n});\n```\n但是，在使用require.js的时候，我们必须要提前加载所有的依赖，然后才可以使用，而不是需要使用时再加载。\n\n优点：\n---------\n适合在浏览器环境中异步加载模块。可以并行加载多个模块。\n\n缺点：\n-----------\n提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。\n\n### 第四阶段：CMD规范\n\nCMD规范是阿里的玉伯提出来的，实现js库为sea.js。 它和requirejs非常类似，即一个js文件就是一个模块，但是CMD的加载方式更加优秀，是通过按需加载的方式，而不是必须在模块开始就加载所有的依赖。如下：\n\n``` JS\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n  var Spinning = require('./spinning');\n  exports.doSomething = ...\n  module.exports = ...\n})\n```\n\n优点：\n-----------\n同样实现了浏览器端的模块化加载。\n可以按需加载，依赖就近。\n\n缺点：\n------------\n依赖SPM打包，模块的加载逻辑偏重。\n\n其实，这时我们就可以看出AMD和CMD的区别了，前者是对于依赖的模块提前执行，而后者是延迟执行。 前者推崇依赖前置，而后者推崇依赖就近，即只在需要用到某个模块的时候再require。 如下：\n\n``` JS\n// AMD\ndefine(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好  \n   a.doSomething()    \n   // 此处略去 100 行    \n   b.doSomething()    \n   ...\n});\n// CMD\ndefine(function(require, exports, module) {\n   var a = require('./a')   \n   a.doSomething()   \n   // 此处略去 100 行   \n   var b = require('./b') \n   // 依赖可以就近书写   \n   b.doSomething()\n   // ... \n});\n```\n\n### 第五阶段： ES6模块化\n\n之前的几种模块化方案都是前端社区自己实现的，只是得到了大家的认可和广泛使用，而ES6的模块化方案是真正的规范。 在ES6中，我们可以使用 import 关键字引入模块，通过 export 关键字导出模块，功能较之于前几个方案更为强大，也是我们所推崇的，但是由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的 require。\n\n虽然目前import和require的区别不大，但是还是推荐使用使用es6，因为未来es6必定是主流，对于代码的迁移成本还是非常容易的。 如：\n\n``` JS\nimport store from '../store/index'\nimport {mapState, mapMutations, mapActions} from 'vuex'\nimport axios from '../assets/js/request'\nimport util from '../utils/js/util.js'\n\nexport default {\ncreated () {\n    this.getClassify(); \n    this.RESET_VALUE();\n    console.log('created' ,new Date().getTime());\n}\n``` ","slug":"javascript/modules-one","published":1,"updated":"2018-01-05T03:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3c001sfme3u07qngad","content":"<p>随着前端js代码复杂度的提高，JavaScript模块化这个概念便被提出来，前端社区也不断地实现前端模块化，直到es6对其进行了规范，下面就介绍JavaScript模块化。</p>\n<p>JavaScript模块化是如何一步一步地发展起来的，并且也会主要对这些模块化方式做一个简单的比较。</p>\n<a id=\"more\"></a>\n<h3 id=\"第一阶段：无模块化\"><a href=\"#第一阶段：无模块化\" class=\"headerlink\" title=\"第一阶段：无模块化\"></a>第一阶段：无模块化</h3><p>JavaScript最初的作用仅仅是验证表单，后来会添加一些动画，但是这些js代码很多在一个文件中就可以完成了，所以，我们只需要在html文件中添加一个script标签。</p>\n<p>后来，随着前端复杂度提高，为了能够提高项目代码的可读性、可扩展性等，我们的js文件逐渐多了起来，不再是一个js文件就可以解决的了，而是把每一个js文件当做一个模块。那么，这时的js引入方式是怎样的呢？大概是下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"jquery.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"jquery_scroller.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"main.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"other1.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"other2.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"other3.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>即简单的将所有的js文件统统放在一起。但是这些文件的顺序还不能出错，比如jquery需要先引入，才能引入jquery插件，才能在其他的文件中使用jquery。</p>\n<h2 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>相比于使用一个js文件，这种多个js文件实现最简单的模块化的思想是进步的。　</p>\n<h2 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>污染全局作用域。 因为每一个模块都是暴露在全局的，简单的使用，会导致全局变量命名冲突，当然，我们也可以使用命名空间的方式来解决。</p>\n<p>对于大型项目，各种js很多，开发人员必须手动解决模块和代码库的依赖关系，后期维护成本较高。<br>依赖关系不明显，不利于维护。 比如main.js需要使用jquery，但是，从上面的文件中，我们是看不出来的，如果jquery忘记了，那么就会报错。</p>\n<h3 id=\"第二阶段：-CommonJS规范\"><a href=\"#第二阶段：-CommonJS规范\" class=\"headerlink\" title=\"第二阶段： CommonJS规范\"></a>第二阶段： CommonJS规范</h3><p>CommonJS就是一个JavaScript模块化的规范，该规范最初是用在服务器端的node的，前端的webpack也是对CommonJS原生支持的。</p>\n<p>根据这个规范，每一个文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。</p>\n<p>CommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 module.exports 来导出需要暴露的接口。如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> addX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value + x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.x = x;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.addX = addX;</span><br></pre></td></tr></table></figure></p>\n<p>这里的a.js就是一个CommonJS规范的模块了。 这里的module就代表了这个模块，module的exports属性就是对外暴露的接口，可以对外导出外部可以访问的变量，比如这里的x和addX。</p>\n<p>exports 是对 module.exports 的引用。比如我们可以认为在一个模块的顶部有这句代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure></p>\n<p>所以，我们不能直接给exports赋值，比如number、function等。</p>\n<p>然后我们就可以在其他模块中引入这个模块使用了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example.x); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example.addX(<span class=\"number\">1</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>这里的require就会获取到a.js所暴露的module.exports变量，然后就可以使用其暴露的x和addX了。</p>\n<h2 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>CommonJS规范在服务器端率先完成了JavaScript的模块化，解决了依赖、全局变量污染的问题，这也是js运行在服务器端的必要条件。</p>\n<h2 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>此文主要是浏览器端js的模块化， 由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。</p>\n<h3 id=\"第三阶段：-AMD规范\"><a href=\"#第三阶段：-AMD规范\" class=\"headerlink\" title=\"第三阶段： AMD规范\"></a>第三阶段： AMD规范</h3><p>之前提到: CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。而AMD规范的实现，就是大名鼎鼎的require.js了。</p>\n<p>AMD标准中，定义了下面两个API：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback)</span><br><span class=\"line\"><span class=\"number\">2.</span> define(id, [depends], callback)</span><br></pre></td></tr></table></figure></p>\n<p>即通过define来定义一个模块，然后使用require来加载一个模块。 并且，require还支持CommonJS的模块导出方式。</p>\n<p>定义alert模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alertName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"I am \"</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alertAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"I am \"</span> + num + <span class=\"string\">\" years old\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      alertName: alertName,</span><br><span class=\"line\">      alertAge: alertAge</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>引入模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'alert'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">alert</span>) </span>&#123;</span><br><span class=\"line\">  alert.alertName(<span class=\"string\">'JohnZhu'</span>);</span><br><span class=\"line\">  alert.alertAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>但是，在使用require.js的时候，我们必须要提前加载所有的依赖，然后才可以使用，而不是需要使用时再加载。</p>\n<h2 id=\"优点：-2\"><a href=\"#优点：-2\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>适合在浏览器环境中异步加载模块。可以并行加载多个模块。</p>\n<h2 id=\"缺点：-2\"><a href=\"#缺点：-2\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。</p>\n<h3 id=\"第四阶段：CMD规范\"><a href=\"#第四阶段：CMD规范\" class=\"headerlink\" title=\"第四阶段：CMD规范\"></a>第四阶段：CMD规范</h3><p>CMD规范是阿里的玉伯提出来的，实现js库为sea.js。 它和requirejs非常类似，即一个js文件就是一个模块，但是CMD的加载方式更加优秀，是通过按需加载的方式，而不是必须在模块开始就加载所有的依赖。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Spinning = <span class=\"built_in\">require</span>(<span class=\"string\">'./spinning'</span>);</span><br><span class=\"line\">  exports.doSomething = ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"优点：-3\"><a href=\"#优点：-3\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>同样实现了浏览器端的模块化加载。<br>可以按需加载，依赖就近。</p>\n<h2 id=\"缺点：-3\"><a href=\"#缺点：-3\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>依赖SPM打包，模块的加载逻辑偏重。</p>\n<p>其实，这时我们就可以看出AMD和CMD的区别了，前者是对于依赖的模块提前执行，而后者是延迟执行。 前者推崇依赖前置，而后者推崇依赖就近，即只在需要用到某个模块的时候再require。 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD</span></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖必须一开始就写好  </span></span><br><span class=\"line\">   a.doSomething()    </span><br><span class=\"line\">   <span class=\"comment\">// 此处略去 100 行    </span></span><br><span class=\"line\">   b.doSomething()    </span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)   </span><br><span class=\"line\">   a.doSomething()   </span><br><span class=\"line\">   <span class=\"comment\">// 此处略去 100 行   </span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) </span><br><span class=\"line\">   <span class=\"comment\">// 依赖可以就近书写   </span></span><br><span class=\"line\">   b.doSomething()</span><br><span class=\"line\">   <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五阶段：-ES6模块化\"><a href=\"#第五阶段：-ES6模块化\" class=\"headerlink\" title=\"第五阶段： ES6模块化\"></a>第五阶段： ES6模块化</h3><p>之前的几种模块化方案都是前端社区自己实现的，只是得到了大家的认可和广泛使用，而ES6的模块化方案是真正的规范。 在ES6中，我们可以使用 import 关键字引入模块，通过 export 关键字导出模块，功能较之于前几个方案更为强大，也是我们所推崇的，但是由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的 require。</p>\n<p>虽然目前import和require的区别不大，但是还是推荐使用使用es6，因为未来es6必定是主流，对于代码的迁移成本还是非常容易的。 如：</p>\n<pre><code class=\"JS\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../store/index'</span>\n<span class=\"keyword\">import</span> {mapState, mapMutations, mapActions} <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>\n<span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../assets/js/request'</span>\n<span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">'../utils/js/util.js'</span>\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {\ncreated () {\n    <span class=\"keyword\">this</span>.getClassify(); \n    <span class=\"keyword\">this</span>.RESET_VALUE();\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'created'</span> ,<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>随着前端js代码复杂度的提高，JavaScript模块化这个概念便被提出来，前端社区也不断地实现前端模块化，直到es6对其进行了规范，下面就介绍JavaScript模块化。</p>\n<p>JavaScript模块化是如何一步一步地发展起来的，并且也会主要对这些模块化方式做一个简单的比较。</p>","more":"<h3 id=\"第一阶段：无模块化\"><a href=\"#第一阶段：无模块化\" class=\"headerlink\" title=\"第一阶段：无模块化\"></a>第一阶段：无模块化</h3><p>JavaScript最初的作用仅仅是验证表单，后来会添加一些动画，但是这些js代码很多在一个文件中就可以完成了，所以，我们只需要在html文件中添加一个script标签。</p>\n<p>后来，随着前端复杂度提高，为了能够提高项目代码的可读性、可扩展性等，我们的js文件逐渐多了起来，不再是一个js文件就可以解决的了，而是把每一个js文件当做一个模块。那么，这时的js引入方式是怎样的呢？大概是下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"jquery.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"jquery_scroller.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"main.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"other1.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"other2.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"other3.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>即简单的将所有的js文件统统放在一起。但是这些文件的顺序还不能出错，比如jquery需要先引入，才能引入jquery插件，才能在其他的文件中使用jquery。</p>\n<h2 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>相比于使用一个js文件，这种多个js文件实现最简单的模块化的思想是进步的。　</p>\n<h2 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>污染全局作用域。 因为每一个模块都是暴露在全局的，简单的使用，会导致全局变量命名冲突，当然，我们也可以使用命名空间的方式来解决。</p>\n<p>对于大型项目，各种js很多，开发人员必须手动解决模块和代码库的依赖关系，后期维护成本较高。<br>依赖关系不明显，不利于维护。 比如main.js需要使用jquery，但是，从上面的文件中，我们是看不出来的，如果jquery忘记了，那么就会报错。</p>\n<h3 id=\"第二阶段：-CommonJS规范\"><a href=\"#第二阶段：-CommonJS规范\" class=\"headerlink\" title=\"第二阶段： CommonJS规范\"></a>第二阶段： CommonJS规范</h3><p>CommonJS就是一个JavaScript模块化的规范，该规范最初是用在服务器端的node的，前端的webpack也是对CommonJS原生支持的。</p>\n<p>根据这个规范，每一个文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。</p>\n<p>CommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 module.exports 来导出需要暴露的接口。如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> addX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value + x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.x = x;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.addX = addX;</span><br></pre></td></tr></table></figure></p>\n<p>这里的a.js就是一个CommonJS规范的模块了。 这里的module就代表了这个模块，module的exports属性就是对外暴露的接口，可以对外导出外部可以访问的变量，比如这里的x和addX。</p>\n<p>exports 是对 module.exports 的引用。比如我们可以认为在一个模块的顶部有这句代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure></p>\n<p>所以，我们不能直接给exports赋值，比如number、function等。</p>\n<p>然后我们就可以在其他模块中引入这个模块使用了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example.x); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example.addX(<span class=\"number\">1</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>这里的require就会获取到a.js所暴露的module.exports变量，然后就可以使用其暴露的x和addX了。</p>\n<h2 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>CommonJS规范在服务器端率先完成了JavaScript的模块化，解决了依赖、全局变量污染的问题，这也是js运行在服务器端的必要条件。</p>\n<h2 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>此文主要是浏览器端js的模块化， 由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。</p>\n<h3 id=\"第三阶段：-AMD规范\"><a href=\"#第三阶段：-AMD规范\" class=\"headerlink\" title=\"第三阶段： AMD规范\"></a>第三阶段： AMD规范</h3><p>之前提到: CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。而AMD规范的实现，就是大名鼎鼎的require.js了。</p>\n<p>AMD标准中，定义了下面两个API：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback)</span><br><span class=\"line\"><span class=\"number\">2.</span> define(id, [depends], callback)</span><br></pre></td></tr></table></figure></p>\n<p>即通过define来定义一个模块，然后使用require来加载一个模块。 并且，require还支持CommonJS的模块导出方式。</p>\n<p>定义alert模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alertName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"I am \"</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alertAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"I am \"</span> + num + <span class=\"string\">\" years old\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      alertName: alertName,</span><br><span class=\"line\">      alertAge: alertAge</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>引入模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'alert'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">alert</span>) </span>&#123;</span><br><span class=\"line\">  alert.alertName(<span class=\"string\">'JohnZhu'</span>);</span><br><span class=\"line\">  alert.alertAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>但是，在使用require.js的时候，我们必须要提前加载所有的依赖，然后才可以使用，而不是需要使用时再加载。</p>\n<h2 id=\"优点：-2\"><a href=\"#优点：-2\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>适合在浏览器环境中异步加载模块。可以并行加载多个模块。</p>\n<h2 id=\"缺点：-2\"><a href=\"#缺点：-2\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。</p>\n<h3 id=\"第四阶段：CMD规范\"><a href=\"#第四阶段：CMD规范\" class=\"headerlink\" title=\"第四阶段：CMD规范\"></a>第四阶段：CMD规范</h3><p>CMD规范是阿里的玉伯提出来的，实现js库为sea.js。 它和requirejs非常类似，即一个js文件就是一个模块，但是CMD的加载方式更加优秀，是通过按需加载的方式，而不是必须在模块开始就加载所有的依赖。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Spinning = <span class=\"built_in\">require</span>(<span class=\"string\">'./spinning'</span>);</span><br><span class=\"line\">  exports.doSomething = ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"优点：-3\"><a href=\"#优点：-3\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><p>同样实现了浏览器端的模块化加载。<br>可以按需加载，依赖就近。</p>\n<h2 id=\"缺点：-3\"><a href=\"#缺点：-3\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>依赖SPM打包，模块的加载逻辑偏重。</p>\n<p>其实，这时我们就可以看出AMD和CMD的区别了，前者是对于依赖的模块提前执行，而后者是延迟执行。 前者推崇依赖前置，而后者推崇依赖就近，即只在需要用到某个模块的时候再require。 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD</span></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖必须一开始就写好  </span></span><br><span class=\"line\">   a.doSomething()    </span><br><span class=\"line\">   <span class=\"comment\">// 此处略去 100 行    </span></span><br><span class=\"line\">   b.doSomething()    </span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)   </span><br><span class=\"line\">   a.doSomething()   </span><br><span class=\"line\">   <span class=\"comment\">// 此处略去 100 行   </span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) </span><br><span class=\"line\">   <span class=\"comment\">// 依赖可以就近书写   </span></span><br><span class=\"line\">   b.doSomething()</span><br><span class=\"line\">   <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五阶段：-ES6模块化\"><a href=\"#第五阶段：-ES6模块化\" class=\"headerlink\" title=\"第五阶段： ES6模块化\"></a>第五阶段： ES6模块化</h3><p>之前的几种模块化方案都是前端社区自己实现的，只是得到了大家的认可和广泛使用，而ES6的模块化方案是真正的规范。 在ES6中，我们可以使用 import 关键字引入模块，通过 export 关键字导出模块，功能较之于前几个方案更为强大，也是我们所推崇的，但是由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的 require。</p>\n<p>虽然目前import和require的区别不大，但是还是推荐使用使用es6，因为未来es6必定是主流，对于代码的迁移成本还是非常容易的。 如：</p>\n<pre><code class=\"JS\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../store/index'</span>\n<span class=\"keyword\">import</span> {mapState, mapMutations, mapActions} <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>\n<span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../assets/js/request'</span>\n<span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">'../utils/js/util.js'</span>\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {\ncreated () {\n    <span class=\"keyword\">this</span>.getClassify(); \n    <span class=\"keyword\">this</span>.RESET_VALUE();\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'created'</span> ,<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());\n}\n</code></pre>"},{"title":"JavaScript模块化 --- commonjs与es6的区别","p":"javascript/modules-two","date":"2016-01-01T12:26:12.000Z","_content":"\n## 目的\n\n本文继上次模块化，重点梳理下commonjs与es6的区别。 （部分参考网络资源）\n\n<!--more-->\n\n## commonjs\n\n1. 对于基本数据类型，属于复制，即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。\n2. 对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。\n3. 当使用require命令加载某个模块时，就会运行整个模块的代码。\n4. 当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。\n5. 循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被\"循环加载\"，就只输出已经执行的部分，还未执行的部分不会输出。\n\n## ES6模块\n\nes6模块中的值属于【动态只读引用】\n1. 对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\n2. 对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。\n3. 循环加载时，ES6模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。\n上面说了一些重要区别。现在举一些例子来说明每一点吧\n\n## 举例说明\n\n上面说了一些重要区别。现在举一些例子来说明每一点吧\n\n### commonjs\n\n1. 对于基本数据类型，属于复制。即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。\n\n``` JS\n// b.js\nlet count = 1\nlet plusCount = () => {\n  count++\n}\nsetTimeout(() => {\n  console.log('b.js-1', count)\n}, 1000)\nmodule.exports = {\n  count,\n  plusCount\n}\n\n// a.js\nlet mod = require('./b.js')\nconsole.log('a.js-1', mod.count)\nmod.plusCount()\nconsole.log('a.js-2', mod.count)\nsetTimeout(() => {\n    mod.count = 3\n    console.log('a.js-3', mod.count)\n}, 2000)\n\nnode a.js\na.js-1 1\na.js-2 1\nb.js-1 2  // 1秒后\na.js-3 3  // 2秒后\n```\n以上代码可以看出，b模块export的count变量，是一个复制行为。在plusCount方法调用之后，a模块中的count不受影响。同时，可以在b模块中更改a模块中的值。如果希望能够同步代码，可以export出去一个getter。\n\n``` JS\n// 其他代码相同\nmodule.exports = {\n  get count () {\n    return count\n  },\n  plusCount\n}\n\nnode a.js\na.js-1 1\na.js-2 1\nb.js-1 2  // 1秒后\na.js-3 2  // 2秒后， 由于没有定义setter，因此无法对值进行设置。所以还是返回2\n```\n\n2. 对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。\n\n``` JS\n// b.js\nlet obj = {\n    count: 1\n}\nlet plusCount = () => {\n    obj.count++\n}\nsetTimeout(() => {\n    console.log('b.js-1', obj.count)\n}, 1000)\nsetTimeout(() => {\n    console.log('b.js-2', obj.count)\n}, 3000)\nmodule.exports = {\n    obj,\n    plusCount\n}\n\n// a.js\nvar mod = require('./b.js')\nconsole.log('a.js-1', mod.obj.count)\nmod.plusCount()\nconsole.log('a.js-2', mod.obj.count)\nsetTimeout(() => {\n    mod.obj.count = 3\n    console.log('a.js-3', mod.obj.count)\n}, 2000)\n\nnode a.js\na.js - 1 1\na.js - 2 2\nb.js - 1 2\na.js - 3 3\nb.js - 2 3\n```\n\n以上代码可以看出，对于对象来说属于浅拷贝。当执行a模块时，首先打印obj.count的值为1，然后通过plusCount方法，再次打印时为2。接着在a模块修改count的值为3，此时在b模块的值也为3。\n\n\n3. 当使用require命令加载某个模块时，就会运行整个模块的代码。\n\n4. 当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。\n\n5. 循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被\"循环加载\"，就只输出已经执行的部分，还未执行的部分不会输出。\n\n``` JS\n//其中第3, 4, 5点可以使用同一个例子说明\n\n// b.js\nexports.done = false\nlet a = require('./a.js')\nconsole.log('b.js-1', a.done)\nexports.done = true\nconsole.log('b.js-2', '执行完毕')\n\n// a.js\nexports.done = false\nlet b = require('./b.js')\nconsole.log('a.js-1', b.done)\nexports.done = true\nconsole.log('a.js-2', '执行完毕')\n\n// c.js\nlet a = require('./a.js')\nlet b = require('./b.js')\n\nconsole.log('c.js-1', '执行完毕', a.done, b.done)\n\nnode c.js\nb.js-1 false\nb.js-2 执行完毕\na.js-1 true\na.js-2 执行完毕\nc.js-1 执行完毕 true true\n\n```\n\n仔细说明一下整个过程:\n\n1. 在Node.js中执行c模块。此时遇到require关键字，执行a.js中所有代码。\n2. 在a模块中exports之后，通过require引入了b模块，执行b模块的代码。\n3. 在b模块中exports之后，又require引入了a模块，此时执行a模块的代码。\n4. a模块只执行exports.done = false这条语句。\n5. 回到b模块，打印b.js-1, exports, b.js-2。b模块执行完毕。\n6. 回到a模块，接着打印a.js-1, exports, b.js-2。a模块执行完毕\n7. 回到c模块，接着执行require，需要引入b模块。由于在a模块中已经引入过了，所以直接就可以输出值了。\n8. 结束。\n\n从以上结果和分析过程可以看出，当遇到require命令时，会执行对应的模块代码。当循环引用时，有可能只输出某模块代码的一部分。当引用同一个模块时，不会再次加载，而是获取缓存。\n\n\n\n## 关于作者\n","source":"_posts/javascript/modules-two.md","raw":"---\ntitle: JavaScript模块化 --- commonjs与es6的区别\np: javascript/modules-two\ndate: 2016-1-1 20:26:12\ntags: [JS,Javascript, commonjs, AMD, CMD, ES6]\ncategories: Javascript\n---\n\n## 目的\n\n本文继上次模块化，重点梳理下commonjs与es6的区别。 （部分参考网络资源）\n\n<!--more-->\n\n## commonjs\n\n1. 对于基本数据类型，属于复制，即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。\n2. 对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。\n3. 当使用require命令加载某个模块时，就会运行整个模块的代码。\n4. 当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。\n5. 循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被\"循环加载\"，就只输出已经执行的部分，还未执行的部分不会输出。\n\n## ES6模块\n\nes6模块中的值属于【动态只读引用】\n1. 对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\n2. 对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。\n3. 循环加载时，ES6模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。\n上面说了一些重要区别。现在举一些例子来说明每一点吧\n\n## 举例说明\n\n上面说了一些重要区别。现在举一些例子来说明每一点吧\n\n### commonjs\n\n1. 对于基本数据类型，属于复制。即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。\n\n``` JS\n// b.js\nlet count = 1\nlet plusCount = () => {\n  count++\n}\nsetTimeout(() => {\n  console.log('b.js-1', count)\n}, 1000)\nmodule.exports = {\n  count,\n  plusCount\n}\n\n// a.js\nlet mod = require('./b.js')\nconsole.log('a.js-1', mod.count)\nmod.plusCount()\nconsole.log('a.js-2', mod.count)\nsetTimeout(() => {\n    mod.count = 3\n    console.log('a.js-3', mod.count)\n}, 2000)\n\nnode a.js\na.js-1 1\na.js-2 1\nb.js-1 2  // 1秒后\na.js-3 3  // 2秒后\n```\n以上代码可以看出，b模块export的count变量，是一个复制行为。在plusCount方法调用之后，a模块中的count不受影响。同时，可以在b模块中更改a模块中的值。如果希望能够同步代码，可以export出去一个getter。\n\n``` JS\n// 其他代码相同\nmodule.exports = {\n  get count () {\n    return count\n  },\n  plusCount\n}\n\nnode a.js\na.js-1 1\na.js-2 1\nb.js-1 2  // 1秒后\na.js-3 2  // 2秒后， 由于没有定义setter，因此无法对值进行设置。所以还是返回2\n```\n\n2. 对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。\n\n``` JS\n// b.js\nlet obj = {\n    count: 1\n}\nlet plusCount = () => {\n    obj.count++\n}\nsetTimeout(() => {\n    console.log('b.js-1', obj.count)\n}, 1000)\nsetTimeout(() => {\n    console.log('b.js-2', obj.count)\n}, 3000)\nmodule.exports = {\n    obj,\n    plusCount\n}\n\n// a.js\nvar mod = require('./b.js')\nconsole.log('a.js-1', mod.obj.count)\nmod.plusCount()\nconsole.log('a.js-2', mod.obj.count)\nsetTimeout(() => {\n    mod.obj.count = 3\n    console.log('a.js-3', mod.obj.count)\n}, 2000)\n\nnode a.js\na.js - 1 1\na.js - 2 2\nb.js - 1 2\na.js - 3 3\nb.js - 2 3\n```\n\n以上代码可以看出，对于对象来说属于浅拷贝。当执行a模块时，首先打印obj.count的值为1，然后通过plusCount方法，再次打印时为2。接着在a模块修改count的值为3，此时在b模块的值也为3。\n\n\n3. 当使用require命令加载某个模块时，就会运行整个模块的代码。\n\n4. 当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。\n\n5. 循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被\"循环加载\"，就只输出已经执行的部分，还未执行的部分不会输出。\n\n``` JS\n//其中第3, 4, 5点可以使用同一个例子说明\n\n// b.js\nexports.done = false\nlet a = require('./a.js')\nconsole.log('b.js-1', a.done)\nexports.done = true\nconsole.log('b.js-2', '执行完毕')\n\n// a.js\nexports.done = false\nlet b = require('./b.js')\nconsole.log('a.js-1', b.done)\nexports.done = true\nconsole.log('a.js-2', '执行完毕')\n\n// c.js\nlet a = require('./a.js')\nlet b = require('./b.js')\n\nconsole.log('c.js-1', '执行完毕', a.done, b.done)\n\nnode c.js\nb.js-1 false\nb.js-2 执行完毕\na.js-1 true\na.js-2 执行完毕\nc.js-1 执行完毕 true true\n\n```\n\n仔细说明一下整个过程:\n\n1. 在Node.js中执行c模块。此时遇到require关键字，执行a.js中所有代码。\n2. 在a模块中exports之后，通过require引入了b模块，执行b模块的代码。\n3. 在b模块中exports之后，又require引入了a模块，此时执行a模块的代码。\n4. a模块只执行exports.done = false这条语句。\n5. 回到b模块，打印b.js-1, exports, b.js-2。b模块执行完毕。\n6. 回到a模块，接着打印a.js-1, exports, b.js-2。a模块执行完毕\n7. 回到c模块，接着执行require，需要引入b模块。由于在a模块中已经引入过了，所以直接就可以输出值了。\n8. 结束。\n\n从以上结果和分析过程可以看出，当遇到require命令时，会执行对应的模块代码。当循环引用时，有可能只输出某模块代码的一部分。当引用同一个模块时，不会再次加载，而是获取缓存。\n\n\n\n## 关于作者\n","slug":"javascript/modules-two","published":1,"updated":"2018-01-05T06:45:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3e001vfme3roitppie","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本文继上次模块化，重点梳理下commonjs与es6的区别。 （部分参考网络资源）</p>\n<a id=\"more\"></a>\n<h2 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h2><ol>\n<li>对于基本数据类型，属于复制，即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。</li>\n<li>对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。</li>\n<li>当使用require命令加载某个模块时，就会运行整个模块的代码。</li>\n<li>当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</li>\n<li>循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</li>\n</ol>\n<h2 id=\"ES6模块\"><a href=\"#ES6模块\" class=\"headerlink\" title=\"ES6模块\"></a>ES6模块</h2><p>es6模块中的值属于【动态只读引用】</p>\n<ol>\n<li>对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</li>\n<li>对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。</li>\n<li>循环加载时，ES6模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。<br>上面说了一些重要区别。现在举一些例子来说明每一点吧</li>\n</ol>\n<h2 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h2><p>上面说了一些重要区别。现在举一些例子来说明每一点吧</p>\n<h3 id=\"commonjs-1\"><a href=\"#commonjs-1\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h3><ol>\n<li>对于基本数据类型，属于复制。即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> plusCount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  count++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-1'</span>, count)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  count,</span><br><span class=\"line\">  plusCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-1'</span>, mod.count)</span><br><span class=\"line\">mod.plusCount()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-2'</span>, mod.count)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    mod.count = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-3'</span>, mod.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">node a.js</span><br><span class=\"line\">a.js<span class=\"number\">-1</span> <span class=\"number\">1</span></span><br><span class=\"line\">a.js<span class=\"number\">-2</span> <span class=\"number\">1</span></span><br><span class=\"line\">b.js<span class=\"number\">-1</span> <span class=\"number\">2</span>  <span class=\"comment\">// 1秒后</span></span><br><span class=\"line\">a.js<span class=\"number\">-3</span> <span class=\"number\">3</span>  <span class=\"comment\">// 2秒后</span></span><br></pre></td></tr></table></figure>\n<p>以上代码可以看出，b模块export的count变量，是一个复制行为。在plusCount方法调用之后，a模块中的count不受影响。同时，可以在b模块中更改a模块中的值。如果希望能够同步代码，可以export出去一个getter。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其他代码相同</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  get count () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plusCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">node a.js</span><br><span class=\"line\">a.js<span class=\"number\">-1</span> <span class=\"number\">1</span></span><br><span class=\"line\">a.js<span class=\"number\">-2</span> <span class=\"number\">1</span></span><br><span class=\"line\">b.js<span class=\"number\">-1</span> <span class=\"number\">2</span>  <span class=\"comment\">// 1秒后</span></span><br><span class=\"line\">a.js<span class=\"number\">-3</span> <span class=\"number\">2</span>  <span class=\"comment\">// 2秒后， 由于没有定义setter，因此无法对值进行设置。所以还是返回2</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> plusCount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    obj.count++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-1'</span>, obj.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-2'</span>, obj.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    obj,</span><br><span class=\"line\">    plusCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-1'</span>, mod.obj.count)</span><br><span class=\"line\">mod.plusCount()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-2'</span>, mod.obj.count)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    mod.obj.count = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-3'</span>, mod.obj.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">node a.js</span><br><span class=\"line\">a.js - <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\">a.js - <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\">b.js - <span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\">a.js - <span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\">b.js - <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>以上代码可以看出，对于对象来说属于浅拷贝。当执行a模块时，首先打印obj.count的值为1，然后通过plusCount方法，再次打印时为2。接着在a模块修改count的值为3，此时在b模块的值也为3。</p>\n<ol>\n<li><p>当使用require命令加载某个模块时，就会运行整个模块的代码。</p>\n</li>\n<li><p>当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</p>\n</li>\n<li><p>循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//其中第3, 4, 5点可以使用同一个例子说明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-1'</span>, a.done)</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-2'</span>, <span class=\"string\">'执行完毕'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-1'</span>, b.done)</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-2'</span>, <span class=\"string\">'执行完毕'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'c.js-1'</span>, <span class=\"string\">'执行完毕'</span>, a.done, b.done)</span><br><span class=\"line\"></span><br><span class=\"line\">node c.js</span><br><span class=\"line\">b.js<span class=\"number\">-1</span> <span class=\"literal\">false</span></span><br><span class=\"line\">b.js<span class=\"number\">-2</span> 执行完毕</span><br><span class=\"line\">a.js<span class=\"number\">-1</span> <span class=\"literal\">true</span></span><br><span class=\"line\">a.js<span class=\"number\">-2</span> 执行完毕</span><br><span class=\"line\">c.js<span class=\"number\">-1</span> 执行完毕 <span class=\"literal\">true</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>仔细说明一下整个过程:</p>\n<ol>\n<li>在Node.js中执行c模块。此时遇到require关键字，执行a.js中所有代码。</li>\n<li>在a模块中exports之后，通过require引入了b模块，执行b模块的代码。</li>\n<li>在b模块中exports之后，又require引入了a模块，此时执行a模块的代码。</li>\n<li>a模块只执行exports.done = false这条语句。</li>\n<li>回到b模块，打印b.js-1, exports, b.js-2。b模块执行完毕。</li>\n<li>回到a模块，接着打印a.js-1, exports, b.js-2。a模块执行完毕</li>\n<li>回到c模块，接着执行require，需要引入b模块。由于在a模块中已经引入过了，所以直接就可以输出值了。</li>\n<li>结束。</li>\n</ol>\n<p>从以上结果和分析过程可以看出，当遇到require命令时，会执行对应的模块代码。当循环引用时，有可能只输出某模块代码的一部分。当引用同一个模块时，不会再次加载，而是获取缓存。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2>","site":{"data":{}},"excerpt":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本文继上次模块化，重点梳理下commonjs与es6的区别。 （部分参考网络资源）</p>","more":"<h2 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h2><ol>\n<li>对于基本数据类型，属于复制，即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。</li>\n<li>对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。</li>\n<li>当使用require命令加载某个模块时，就会运行整个模块的代码。</li>\n<li>当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</li>\n<li>循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</li>\n</ol>\n<h2 id=\"ES6模块\"><a href=\"#ES6模块\" class=\"headerlink\" title=\"ES6模块\"></a>ES6模块</h2><p>es6模块中的值属于【动态只读引用】</p>\n<ol>\n<li>对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</li>\n<li>对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。</li>\n<li>循环加载时，ES6模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。<br>上面说了一些重要区别。现在举一些例子来说明每一点吧</li>\n</ol>\n<h2 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h2><p>上面说了一些重要区别。现在举一些例子来说明每一点吧</p>\n<h3 id=\"commonjs-1\"><a href=\"#commonjs-1\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h3><ol>\n<li>对于基本数据类型，属于复制。即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> plusCount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  count++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-1'</span>, count)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  count,</span><br><span class=\"line\">  plusCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-1'</span>, mod.count)</span><br><span class=\"line\">mod.plusCount()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-2'</span>, mod.count)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    mod.count = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-3'</span>, mod.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">node a.js</span><br><span class=\"line\">a.js<span class=\"number\">-1</span> <span class=\"number\">1</span></span><br><span class=\"line\">a.js<span class=\"number\">-2</span> <span class=\"number\">1</span></span><br><span class=\"line\">b.js<span class=\"number\">-1</span> <span class=\"number\">2</span>  <span class=\"comment\">// 1秒后</span></span><br><span class=\"line\">a.js<span class=\"number\">-3</span> <span class=\"number\">3</span>  <span class=\"comment\">// 2秒后</span></span><br></pre></td></tr></table></figure>\n<p>以上代码可以看出，b模块export的count变量，是一个复制行为。在plusCount方法调用之后，a模块中的count不受影响。同时，可以在b模块中更改a模块中的值。如果希望能够同步代码，可以export出去一个getter。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其他代码相同</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  get count () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plusCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">node a.js</span><br><span class=\"line\">a.js<span class=\"number\">-1</span> <span class=\"number\">1</span></span><br><span class=\"line\">a.js<span class=\"number\">-2</span> <span class=\"number\">1</span></span><br><span class=\"line\">b.js<span class=\"number\">-1</span> <span class=\"number\">2</span>  <span class=\"comment\">// 1秒后</span></span><br><span class=\"line\">a.js<span class=\"number\">-3</span> <span class=\"number\">2</span>  <span class=\"comment\">// 2秒后， 由于没有定义setter，因此无法对值进行设置。所以还是返回2</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> plusCount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    obj.count++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-1'</span>, obj.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-2'</span>, obj.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    obj,</span><br><span class=\"line\">    plusCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-1'</span>, mod.obj.count)</span><br><span class=\"line\">mod.plusCount()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-2'</span>, mod.obj.count)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    mod.obj.count = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-3'</span>, mod.obj.count)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">node a.js</span><br><span class=\"line\">a.js - <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\">a.js - <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\">b.js - <span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\">a.js - <span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\">b.js - <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>以上代码可以看出，对于对象来说属于浅拷贝。当执行a模块时，首先打印obj.count的值为1，然后通过plusCount方法，再次打印时为2。接着在a模块修改count的值为3，此时在b模块的值也为3。</p>\n<ol>\n<li><p>当使用require命令加载某个模块时，就会运行整个模块的代码。</p>\n</li>\n<li><p>当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</p>\n</li>\n<li><p>循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//其中第3, 4, 5点可以使用同一个例子说明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-1'</span>, a.done)</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js-2'</span>, <span class=\"string\">'执行完毕'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-1'</span>, b.done)</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js-2'</span>, <span class=\"string\">'执行完毕'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'c.js-1'</span>, <span class=\"string\">'执行完毕'</span>, a.done, b.done)</span><br><span class=\"line\"></span><br><span class=\"line\">node c.js</span><br><span class=\"line\">b.js<span class=\"number\">-1</span> <span class=\"literal\">false</span></span><br><span class=\"line\">b.js<span class=\"number\">-2</span> 执行完毕</span><br><span class=\"line\">a.js<span class=\"number\">-1</span> <span class=\"literal\">true</span></span><br><span class=\"line\">a.js<span class=\"number\">-2</span> 执行完毕</span><br><span class=\"line\">c.js<span class=\"number\">-1</span> 执行完毕 <span class=\"literal\">true</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>仔细说明一下整个过程:</p>\n<ol>\n<li>在Node.js中执行c模块。此时遇到require关键字，执行a.js中所有代码。</li>\n<li>在a模块中exports之后，通过require引入了b模块，执行b模块的代码。</li>\n<li>在b模块中exports之后，又require引入了a模块，此时执行a模块的代码。</li>\n<li>a模块只执行exports.done = false这条语句。</li>\n<li>回到b模块，打印b.js-1, exports, b.js-2。b模块执行完毕。</li>\n<li>回到a模块，接着打印a.js-1, exports, b.js-2。a模块执行完毕</li>\n<li>回到c模块，接着执行require，需要引入b模块。由于在a模块中已经引入过了，所以直接就可以输出值了。</li>\n<li>结束。</li>\n</ol>\n<p>从以上结果和分析过程可以看出，当遇到require命令时，会执行对应的模块代码。当循环引用时，有可能只输出某模块代码的一部分。当引用同一个模块时，不会再次加载，而是获取缓存。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2>"},{"title":"2017年关于JavaScript你需要知道的事情","p":"javascript/news-2017","date":"2017-12-30T04:12:12.000Z","_content":"\n## 前言\n\n2017年关于JavaScript你需要知道的事情\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [行业要闻](#行业要闻)\n    - [发展回顾](#发展回顾)\n    - [开源项目](#开源项目)\n    - [CSS](#css)\n    - [人工智能](#人工智能)\n    - [构建之道](#构建之道)\n    - [状态管理](#状态管理)\n    - [WebAssembly](#webassembly)\n    - [GraphQL](#graphql)\n    - [WebVR/AR](#webvrar)\n    - [测试](#测试)\n    - [教程](#教程)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n\n### 行业要闻\n\n<div>\n    <ol><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html%3Fm%3D1\" target=\"_blank\">Google宣布PWA与原生应用拥有同等待遇和权限</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/necolas/status/829128165314306048\" target=\"_blank\">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UEH\" target=\"_blank\">WebAssembly 已被所有主流浏览器支持</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNX\" target=\"_blank\">斯坦福宣布使用 JavaScript 作为计算机课程的首选语言</a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=http%3A//6me.us/W0k\" target=\"_blank\">2017 年中如果想成为专业的 Web 开发者，应该在 Web 前端、服务端以及 DevOps 领域所需要学习到的技术栈以及进阶路线图</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.polymer-project.org/blog/2017-05-15-time-for-two\" target=\"_blank\">Polymer 2.0发布，最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//microsoft.github.io/reactxp/\" target=\"_blank\">微软开源跨平台开发框架 ReactXP</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=http%3A//news.mit.edu/2017/tim-berners-lee-wins-turing-award-0404\" target=\"_blank\">万维网之父 Tim Berners-Lee 获得 2016 年度图灵奖</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//developer.github.com/v4/\" target=\"_blank\">Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bIZ\" target=\"_blank\">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR </a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWv\" target=\"_blank\">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bjr\" target=\"_blank\">Firefox 55 引入 WebVR 支持</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-graphql-playground-f1e0a018f05d\" target=\"_blank\">GraphQL Playground 发布</a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UAN\" target=\"_blank\">MSDN 将 7700 余份文档重定向到 MDN</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UcV\" target=\"_blank\">Node.js 8 宣布进入 LTS，Node.js 9 发布</a>；</li>\n    </ol>\n    </div>\n\n### 发展回顾\n\n<div>\n    <ol>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//stateofjs.com/2017/\" target=\"_blank\">The State of JavaScript 2017</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U39\" target=\"_blank\">2017 JavaScript 发展回顾</a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript\" target=\"_blank\">JavaScript 完整编年史</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bXD\" target=\"_blank\">TC39，ECMAScript 与 JavaScript 的未来</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Usl\" target=\"_blank\">ESM 的目前实现与未来规划</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bi0\" target=\"_blank\">JavaScript 模块化现状</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.monterail.com/state-of-vuejs-report\" target=\"_blank\">2017 Vue.js 现状报告</a>；</li>\n    </ol>\n</div>    \n\n### 开源项目    \n\n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//elasticlunr.com/\" target=\"_blank\">浏览器端搜索与离线搜索的全文搜索引擎</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNh\" target=\"_blank\">一系列优秀的 React 界面框架</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mozilla/fathom\" target=\"_blank\">Fathom-提取网页中有意义内容的 JavaScript 框架</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gitsummore/nile.js\" target=\"_blank\">基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具</a>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//golden-layout.com/\" target=\"_blank\">golden-layout</a>，一款非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromedalbert/real-world-react\" target=\"_blank\">一系列基于 React 开发的真实环境下的开源应用代码库</a>；</li>\n</ol>\n    \n### CSS\n\n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLZ\" target=\"_blank\">CSS 的现状</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNe\" target=\"_blank\">CSS-in-JavaScript：基于组件的样式组织</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//madebymike.com.au/writing/the-invisible-parts-of-CSS/\" target=\"_blank\">隐藏幕后的 CSS 知识点</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//cssgridgarden.com/\" target=\"_blank\">使用 CSS Grid 打造私家花园</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bTa\" target=\"_blank\">深入解析高性能 CSS 引擎：Quantum CSS（Stylo）</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//mozilladevelopers.github.io/playground/\" target=\"_blank\">Mozilla CSS Grid 教程</a>；</li>\n</ol>\n    \n### 人工智能    \n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/PAIR-code/deeplearnjs\" target=\"_blank\">Google 开源 JavaScript 机器学习库 DeepLearn.js</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2017/08/TensorFire-use-GPU-fast-study%3Futm_source%3Dinfoq%26utm_campaign%3Duser_page%26utm_medium%3Dlink\" target=\"_blank\">TensorFire</a>－基于WebGL的浏览器端深度学习框架；</li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//janhuenermann.com/projects/learning-to-drive\" target=\"_blank\">在浏览器中实现自动驾驶汽车</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U5P\" target=\"_blank\">使用 Node.js 与 OpenCV 实现人脸识别</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bCw\" target=\"_blank\">深入浅出构建简单的 Chess AI</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhQ\" target=\"_blank\">利用机器学习优化网站性能</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNa\" target=\"_blank\">从零开始基于 JavaScript 构建简单神经网络</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tonybeltramelli/pix2code\" target=\"_blank\">pix2code—依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gpujs/gpu.js\" target=\"_blank\">gpu.js</a> 提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2v\" target=\"_blank\">构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人</a>；</u>\n    </li>\n</ol>\n\n### 构建之道\n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4y\" target=\"_blank\">Webpack 与 Rollup：求同存异</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLP\" target=\"_blank\">面向生产环境的前端性能优化清单</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b9A\" target=\"_blank\">使用 Webpack 的 Magic Comment 特性简化代码分割</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bI8\" target=\"_blank\">Webpack import 支持异步导入 CSS</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//toddmotto.com/lazy-loading-angular-code-splitting-webpack\" target=\"_blank\">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//micro-frontends.org/\" target=\"_blank\">微前端：微服务概念的前端实践</a>；</li>\n</ol>\n    \n### 状态管理    \n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4J\" target=\"_blank\">React 中的状态管理架构模式</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//scotch.io/tutorials/state-management-in-vue-getting-started-with-vue\"\n                target=\"_blank\">基于 Vuex 的 Vue 应用状态管理</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJq\" target=\"_blank\">Redux 状态管理之痛点、分析与改良</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLd\" target=\"_blank\">Mobdux：整合 MobX 与 Redux 中优秀的部分</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/USQ\" target=\"_blank\">使用 TypeScript 编写 React 与 Redux 应用</a>；</u>\n    </li>\n</ol>\n    \n### WebAssembly    \n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//blog.openbloc.fr/webassembly-first-steps/\" target=\"_blank\">WebAssembly 初体验：重构简单游戏引擎</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byh\" target=\"_blank\">Rust、WebAssembly 与 Webpack</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mbasso/asm-dom\" target=\"_blank\">asm-dom</a> 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//www.hellorust.com/news/native-wasm-target.html\" target=\"_blank\">Rust 默认可以编译为 WebAssembly</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uua\" target=\"_blank\">WebAssembly 的应用场景</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UZJ\" target=\"_blank\">使用 Rust 开发基于 WebAssembly 的游戏</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UOB\" target=\"_blank\">NectarJS: 将 JavaScript 编译为平台相关的二进制代码</a>；</li>\n</ol>\n    \n### GraphQL    \n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bzs\" target=\"_blank\">为什么我们选择了 GraphQL</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U6S\" target=\"_blank\">GraphQL 技术栈漫游</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bBU\" target=\"_blank\">Apollo Client 2.0 新特性介绍</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b1X\" target=\"_blank\">用强类型语言 GraphQL 增强 React</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2H\" target=\"_blank\">利用 GraphQL 创建同构 Vue.js 应用</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWY\" target=\"_blank\">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bgr\" target=\"_blank\">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816\"\n            target=\"_blank\">Graphcool</a> 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UsY\" target=\"_blank\">基于 Apollo 的组件数据交互</a>；</li>\n</ol>\n    \n### WebVR/AR    \n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bDE\" target=\"_blank\">面向 Web 开发者的 VR 指南</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//uber.github.io/luma.gl/%23/\" target=\"_blank\">luma.gl</a> 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UlM\" target=\"_blank\">Expo AR 简明教程</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>发布。\n        <a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>是高性能的面向 Web 的增强现实的工具库，它在移动端能达到 60fps；</li>\n</ol>\n\n### 测试\n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJ5\" target=\"_blank\">JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byQ\" target=\"_blank\">TDD 与 Vue.js</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//mo.github.io/2017/07/20/javascript-e2e-integration-testing.html\"\n                target=\"_blank\">基于 JavaScript 的 Web 应用的端到端测试工具对比</a>；</u>\n    </li>\n</ol>\n    \n### 教程    \n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhR\" target=\"_blank\">在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/biZ\" target=\"_blank\">理解高阶组件</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bic\" target=\"_blank\">Nuxt.js SSR 与权限验证指南</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//deepstreamhub.com/tutorials/protocols/webrtc-intro/\" target=\"_blank\">WebRTC 实战教程</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/shovanch/fullstack-webdev-path\" target=\"_blank\">全栈 Web 学习路径</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//javascript.info/\" target=\"_blank\">现代 JavaScript 指南</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uuk\" target=\"_blank\">使用 Node.js 构建区块链</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/\"\n            target=\"_blank\">自定义基于 JavaScript 的 16 位虚拟机</a>；</li>\n</ol>\n\n## 小结\n\n[转载文章](https://zhuanlan.zhihu.com/p/32298468)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/news-2017.md","raw":"---\ntitle: 2017年关于JavaScript你需要知道的事情\ntags: [javascript,2017,news]\np: javascript/news-2017\ndate: 2017-12-30 12:12:12\ncategories: Javascript\n---\n\n## 前言\n\n2017年关于JavaScript你需要知道的事情\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [行业要闻](#行业要闻)\n    - [发展回顾](#发展回顾)\n    - [开源项目](#开源项目)\n    - [CSS](#css)\n    - [人工智能](#人工智能)\n    - [构建之道](#构建之道)\n    - [状态管理](#状态管理)\n    - [WebAssembly](#webassembly)\n    - [GraphQL](#graphql)\n    - [WebVR/AR](#webvrar)\n    - [测试](#测试)\n    - [教程](#教程)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n\n### 行业要闻\n\n<div>\n    <ol><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html%3Fm%3D1\" target=\"_blank\">Google宣布PWA与原生应用拥有同等待遇和权限</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/necolas/status/829128165314306048\" target=\"_blank\">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UEH\" target=\"_blank\">WebAssembly 已被所有主流浏览器支持</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNX\" target=\"_blank\">斯坦福宣布使用 JavaScript 作为计算机课程的首选语言</a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=http%3A//6me.us/W0k\" target=\"_blank\">2017 年中如果想成为专业的 Web 开发者，应该在 Web 前端、服务端以及 DevOps 领域所需要学习到的技术栈以及进阶路线图</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.polymer-project.org/blog/2017-05-15-time-for-two\" target=\"_blank\">Polymer 2.0发布，最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//microsoft.github.io/reactxp/\" target=\"_blank\">微软开源跨平台开发框架 ReactXP</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=http%3A//news.mit.edu/2017/tim-berners-lee-wins-turing-award-0404\" target=\"_blank\">万维网之父 Tim Berners-Lee 获得 2016 年度图灵奖</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//developer.github.com/v4/\" target=\"_blank\">Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构</a>；</u>\n        </li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bIZ\" target=\"_blank\">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR </a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWv\" target=\"_blank\">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bjr\" target=\"_blank\">Firefox 55 引入 WebVR 支持</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-graphql-playground-f1e0a018f05d\" target=\"_blank\">GraphQL Playground 发布</a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UAN\" target=\"_blank\">MSDN 将 7700 余份文档重定向到 MDN</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UcV\" target=\"_blank\">Node.js 8 宣布进入 LTS，Node.js 9 发布</a>；</li>\n    </ol>\n    </div>\n\n### 发展回顾\n\n<div>\n    <ol>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//stateofjs.com/2017/\" target=\"_blank\">The State of JavaScript 2017</a>；</li>\n        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U39\" target=\"_blank\">2017 JavaScript 发展回顾</a>；</u>\n        </li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript\" target=\"_blank\">JavaScript 完整编年史</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bXD\" target=\"_blank\">TC39，ECMAScript 与 JavaScript 的未来</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Usl\" target=\"_blank\">ESM 的目前实现与未来规划</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bi0\" target=\"_blank\">JavaScript 模块化现状</a>；</li>\n        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.monterail.com/state-of-vuejs-report\" target=\"_blank\">2017 Vue.js 现状报告</a>；</li>\n    </ol>\n</div>    \n\n### 开源项目    \n\n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//elasticlunr.com/\" target=\"_blank\">浏览器端搜索与离线搜索的全文搜索引擎</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNh\" target=\"_blank\">一系列优秀的 React 界面框架</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mozilla/fathom\" target=\"_blank\">Fathom-提取网页中有意义内容的 JavaScript 框架</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gitsummore/nile.js\" target=\"_blank\">基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具</a>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//golden-layout.com/\" target=\"_blank\">golden-layout</a>，一款非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromedalbert/real-world-react\" target=\"_blank\">一系列基于 React 开发的真实环境下的开源应用代码库</a>；</li>\n</ol>\n    \n### CSS\n\n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLZ\" target=\"_blank\">CSS 的现状</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNe\" target=\"_blank\">CSS-in-JavaScript：基于组件的样式组织</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//madebymike.com.au/writing/the-invisible-parts-of-CSS/\" target=\"_blank\">隐藏幕后的 CSS 知识点</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//cssgridgarden.com/\" target=\"_blank\">使用 CSS Grid 打造私家花园</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bTa\" target=\"_blank\">深入解析高性能 CSS 引擎：Quantum CSS（Stylo）</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//mozilladevelopers.github.io/playground/\" target=\"_blank\">Mozilla CSS Grid 教程</a>；</li>\n</ol>\n    \n### 人工智能    \n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/PAIR-code/deeplearnjs\" target=\"_blank\">Google 开源 JavaScript 机器学习库 DeepLearn.js</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2017/08/TensorFire-use-GPU-fast-study%3Futm_source%3Dinfoq%26utm_campaign%3Duser_page%26utm_medium%3Dlink\" target=\"_blank\">TensorFire</a>－基于WebGL的浏览器端深度学习框架；</li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//janhuenermann.com/projects/learning-to-drive\" target=\"_blank\">在浏览器中实现自动驾驶汽车</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U5P\" target=\"_blank\">使用 Node.js 与 OpenCV 实现人脸识别</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bCw\" target=\"_blank\">深入浅出构建简单的 Chess AI</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhQ\" target=\"_blank\">利用机器学习优化网站性能</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNa\" target=\"_blank\">从零开始基于 JavaScript 构建简单神经网络</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tonybeltramelli/pix2code\" target=\"_blank\">pix2code—依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gpujs/gpu.js\" target=\"_blank\">gpu.js</a> 提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2v\" target=\"_blank\">构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人</a>；</u>\n    </li>\n</ol>\n\n### 构建之道\n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4y\" target=\"_blank\">Webpack 与 Rollup：求同存异</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLP\" target=\"_blank\">面向生产环境的前端性能优化清单</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b9A\" target=\"_blank\">使用 Webpack 的 Magic Comment 特性简化代码分割</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bI8\" target=\"_blank\">Webpack import 支持异步导入 CSS</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//toddmotto.com/lazy-loading-angular-code-splitting-webpack\" target=\"_blank\">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//micro-frontends.org/\" target=\"_blank\">微前端：微服务概念的前端实践</a>；</li>\n</ol>\n    \n### 状态管理    \n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4J\" target=\"_blank\">React 中的状态管理架构模式</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//scotch.io/tutorials/state-management-in-vue-getting-started-with-vue\"\n                target=\"_blank\">基于 Vuex 的 Vue 应用状态管理</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJq\" target=\"_blank\">Redux 状态管理之痛点、分析与改良</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLd\" target=\"_blank\">Mobdux：整合 MobX 与 Redux 中优秀的部分</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/USQ\" target=\"_blank\">使用 TypeScript 编写 React 与 Redux 应用</a>；</u>\n    </li>\n</ol>\n    \n### WebAssembly    \n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//blog.openbloc.fr/webassembly-first-steps/\" target=\"_blank\">WebAssembly 初体验：重构简单游戏引擎</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byh\" target=\"_blank\">Rust、WebAssembly 与 Webpack</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mbasso/asm-dom\" target=\"_blank\">asm-dom</a> 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//www.hellorust.com/news/native-wasm-target.html\" target=\"_blank\">Rust 默认可以编译为 WebAssembly</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uua\" target=\"_blank\">WebAssembly 的应用场景</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UZJ\" target=\"_blank\">使用 Rust 开发基于 WebAssembly 的游戏</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UOB\" target=\"_blank\">NectarJS: 将 JavaScript 编译为平台相关的二进制代码</a>；</li>\n</ol>\n    \n### GraphQL    \n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bzs\" target=\"_blank\">为什么我们选择了 GraphQL</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U6S\" target=\"_blank\">GraphQL 技术栈漫游</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bBU\" target=\"_blank\">Apollo Client 2.0 新特性介绍</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b1X\" target=\"_blank\">用强类型语言 GraphQL 增强 React</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2H\" target=\"_blank\">利用 GraphQL 创建同构 Vue.js 应用</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWY\" target=\"_blank\">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bgr\" target=\"_blank\">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816\"\n            target=\"_blank\">Graphcool</a> 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UsY\" target=\"_blank\">基于 Apollo 的组件数据交互</a>；</li>\n</ol>\n    \n### WebVR/AR    \n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bDE\" target=\"_blank\">面向 Web 开发者的 VR 指南</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=http%3A//uber.github.io/luma.gl/%23/\" target=\"_blank\">luma.gl</a> 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UlM\" target=\"_blank\">Expo AR 简明教程</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>发布。\n        <a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>是高性能的面向 Web 的增强现实的工具库，它在移动端能达到 60fps；</li>\n</ol>\n\n### 测试\n<ol>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJ5\" target=\"_blank\">JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byQ\" target=\"_blank\">TDD 与 Vue.js</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//mo.github.io/2017/07/20/javascript-e2e-integration-testing.html\"\n                target=\"_blank\">基于 JavaScript 的 Web 应用的端到端测试工具对比</a>；</u>\n    </li>\n</ol>\n    \n### 教程    \n<ol>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhR\" target=\"_blank\">在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/biZ\" target=\"_blank\">理解高阶组件</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bic\" target=\"_blank\">Nuxt.js SSR 与权限验证指南</a>；</u>\n    </li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//deepstreamhub.com/tutorials/protocols/webrtc-intro/\" target=\"_blank\">WebRTC 实战教程</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/shovanch/fullstack-webdev-path\" target=\"_blank\">全栈 Web 学习路径</a>；</li>\n    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//javascript.info/\" target=\"_blank\">现代 JavaScript 指南</a>；</u>\n    </li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uuk\" target=\"_blank\">使用 Node.js 构建区块链</a>；</li>\n    <li><a href=\"https://link.zhihu.com/?target=https%3A//francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/\"\n            target=\"_blank\">自定义基于 JavaScript 的 16 位虚拟机</a>；</li>\n</ol>\n\n## 小结\n\n[转载文章](https://zhuanlan.zhihu.com/p/32298468)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/news-2017","published":1,"updated":"2018-01-24T07:07:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3h001zfme39b2u0pzs","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2017年关于JavaScript你需要知道的事情</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#行业要闻\">行业要闻</a></li>\n<li><a href=\"#发展回顾\">发展回顾</a></li>\n<li><a href=\"#开源项目\">开源项目</a></li>\n<li><a href=\"#css\">CSS</a></li>\n<li><a href=\"#人工智能\">人工智能</a></li>\n<li><a href=\"#构建之道\">构建之道</a></li>\n<li><a href=\"#状态管理\">状态管理</a></li>\n<li><a href=\"#webassembly\">WebAssembly</a></li>\n<li><a href=\"#graphql\">GraphQL</a></li>\n<li><a href=\"#webvrar\">WebVR/AR</a></li>\n<li><a href=\"#测试\">测试</a></li>\n<li><a href=\"#教程\">教程</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"行业要闻\"><a href=\"#行业要闻\" class=\"headerlink\" title=\"行业要闻\"></a>行业要闻</h3><div><br>    <ol><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html%3Fm%3D1\" target=\"_blank\">Google宣布PWA与原生应用拥有同等待遇和权限</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/necolas/status/829128165314306048\" target=\"_blank\">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UEH\" target=\"_blank\">WebAssembly 已被所有主流浏览器支持</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNX\" target=\"_blank\">斯坦福宣布使用 JavaScript 作为计算机课程的首选语言</a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=http%3A//6me.us/W0k\" target=\"_blank\">2017 年中如果想成为专业的 Web 开发者，应该在 Web 前端、服务端以及 DevOps 领域所需要学习到的技术栈以及进阶路线图</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.polymer-project.org/blog/2017-05-15-time-for-two\" target=\"_blank\">Polymer 2.0发布，最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//microsoft.github.io/reactxp/\" target=\"_blank\">微软开源跨平台开发框架 ReactXP</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=http%3A//news.mit.edu/2017/tim-berners-lee-wins-turing-award-0404\" target=\"_blank\">万维网之父 Tim Berners-Lee 获得 2016 年度图灵奖</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//developer.github.com/v4/\" target=\"_blank\">Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bIZ\" target=\"_blank\">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR </a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWv\" target=\"_blank\">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bjr\" target=\"_blank\">Firefox 55 引入 WebVR 支持</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-graphql-playground-f1e0a018f05d\" target=\"_blank\">GraphQL Playground 发布</a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UAN\" target=\"_blank\">MSDN 将 7700 余份文档重定向到 MDN</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UcV\" target=\"_blank\">Node.js 8 宣布进入 LTS，Node.js 9 发布</a>；</li><br>    </ol><br>    </div>\n\n<h3 id=\"发展回顾\"><a href=\"#发展回顾\" class=\"headerlink\" title=\"发展回顾\"></a>发展回顾</h3><div><br>    <ol><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//stateofjs.com/2017/\" target=\"_blank\">The State of JavaScript 2017</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U39\" target=\"_blank\">2017 JavaScript 发展回顾</a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript\" target=\"_blank\">JavaScript 完整编年史</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bXD\" target=\"_blank\">TC39，ECMAScript 与 JavaScript 的未来</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Usl\" target=\"_blank\">ESM 的目前实现与未来规划</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bi0\" target=\"_blank\">JavaScript 模块化现状</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.monterail.com/state-of-vuejs-report\" target=\"_blank\">2017 Vue.js 现状报告</a>；</li><br>    </ol><br></div>    \n\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//elasticlunr.com/\" target=\"_blank\">浏览器端搜索与离线搜索的全文搜索引擎</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNh\" target=\"_blank\">一系列优秀的 React 界面框架</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mozilla/fathom\" target=\"_blank\">Fathom-提取网页中有意义内容的 JavaScript 框架</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gitsummore/nile.js\" target=\"_blank\">基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具</a><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//golden-layout.com/\" target=\"_blank\">golden-layout</a>，一款非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromedalbert/real-world-react\" target=\"_blank\">一系列基于 React 开发的真实环境下的开源应用代码库</a>；</li><br></ol>\n\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLZ\" target=\"_blank\">CSS 的现状</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNe\" target=\"_blank\">CSS-in-JavaScript：基于组件的样式组织</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//madebymike.com.au/writing/the-invisible-parts-of-CSS/\" target=\"_blank\">隐藏幕后的 CSS 知识点</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//cssgridgarden.com/\" target=\"_blank\">使用 CSS Grid 打造私家花园</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bTa\" target=\"_blank\">深入解析高性能 CSS 引擎：Quantum CSS（Stylo）</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//mozilladevelopers.github.io/playground/\" target=\"_blank\">Mozilla CSS Grid 教程</a>；</li><br></ol>\n\n<h3 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/PAIR-code/deeplearnjs\" target=\"_blank\">Google 开源 JavaScript 机器学习库 DeepLearn.js</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2017/08/TensorFire-use-GPU-fast-study%3Futm_source%3Dinfoq%26utm_campaign%3Duser_page%26utm_medium%3Dlink\" target=\"_blank\">TensorFire</a>－基于WebGL的浏览器端深度学习框架；</li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//janhuenermann.com/projects/learning-to-drive\" target=\"_blank\">在浏览器中实现自动驾驶汽车</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U5P\" target=\"_blank\">使用 Node.js 与 OpenCV 实现人脸识别</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bCw\" target=\"_blank\">深入浅出构建简单的 Chess AI</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhQ\" target=\"_blank\">利用机器学习优化网站性能</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNa\" target=\"_blank\">从零开始基于 JavaScript 构建简单神经网络</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tonybeltramelli/pix2code\" target=\"_blank\">pix2code—依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gpujs/gpu.js\" target=\"_blank\">gpu.js</a> 提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2v\" target=\"_blank\">构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人</a>；</u><br>    </li><br></ol>\n\n<h3 id=\"构建之道\"><a href=\"#构建之道\" class=\"headerlink\" title=\"构建之道\"></a>构建之道</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4y\" target=\"_blank\">Webpack 与 Rollup：求同存异</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLP\" target=\"_blank\">面向生产环境的前端性能优化清单</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b9A\" target=\"_blank\">使用 Webpack 的 Magic Comment 特性简化代码分割</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bI8\" target=\"_blank\">Webpack import 支持异步导入 CSS</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//toddmotto.com/lazy-loading-angular-code-splitting-webpack\" target=\"_blank\">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//micro-frontends.org/\" target=\"_blank\">微前端：微服务概念的前端实践</a>；</li><br></ol>\n\n<h3 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4J\" target=\"_blank\">React 中的状态管理架构模式</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//scotch.io/tutorials/state-management-in-vue-getting-started-with-vue\" target=\"_blank\">基于 Vuex 的 Vue 应用状态管理</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJq\" target=\"_blank\">Redux 状态管理之痛点、分析与改良</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLd\" target=\"_blank\">Mobdux：整合 MobX 与 Redux 中优秀的部分</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/USQ\" target=\"_blank\">使用 TypeScript 编写 React 与 Redux 应用</a>；</u><br>    </li><br></ol>\n\n<h3 id=\"WebAssembly\"><a href=\"#WebAssembly\" class=\"headerlink\" title=\"WebAssembly\"></a>WebAssembly</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//blog.openbloc.fr/webassembly-first-steps/\" target=\"_blank\">WebAssembly 初体验：重构简单游戏引擎</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byh\" target=\"_blank\">Rust、WebAssembly 与 Webpack</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mbasso/asm-dom\" target=\"_blank\">asm-dom</a> 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//www.hellorust.com/news/native-wasm-target.html\" target=\"_blank\">Rust 默认可以编译为 WebAssembly</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uua\" target=\"_blank\">WebAssembly 的应用场景</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UZJ\" target=\"_blank\">使用 Rust 开发基于 WebAssembly 的游戏</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UOB\" target=\"_blank\">NectarJS: 将 JavaScript 编译为平台相关的二进制代码</a>；</li><br></ol>\n\n<h3 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bzs\" target=\"_blank\">为什么我们选择了 GraphQL</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U6S\" target=\"_blank\">GraphQL 技术栈漫游</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bBU\" target=\"_blank\">Apollo Client 2.0 新特性介绍</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b1X\" target=\"_blank\">用强类型语言 GraphQL 增强 React</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2H\" target=\"_blank\">利用 GraphQL 创建同构 Vue.js 应用</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWY\" target=\"_blank\">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bgr\" target=\"_blank\">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816\" target=\"_blank\">Graphcool</a> 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UsY\" target=\"_blank\">基于 Apollo 的组件数据交互</a>；</li><br></ol>\n\n<h3 id=\"WebVR-AR\"><a href=\"#WebVR-AR\" class=\"headerlink\" title=\"WebVR/AR\"></a>WebVR/AR</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bDE\" target=\"_blank\">面向 Web 开发者的 VR 指南</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//uber.github.io/luma.gl/%23/\" target=\"_blank\">luma.gl</a> 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UlM\" target=\"_blank\">Expo AR 简明教程</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>发布。<br>        <a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>是高性能的面向 Web 的增强现实的工具库，它在移动端能达到 60fps；</li><br></ol>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJ5\" target=\"_blank\">JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byQ\" target=\"_blank\">TDD 与 Vue.js</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//mo.github.io/2017/07/20/javascript-e2e-integration-testing.html\" target=\"_blank\">基于 JavaScript 的 Web 应用的端到端测试工具对比</a>；</u><br>    </li><br></ol>\n\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhR\" target=\"_blank\">在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/biZ\" target=\"_blank\">理解高阶组件</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bic\" target=\"_blank\">Nuxt.js SSR 与权限验证指南</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//deepstreamhub.com/tutorials/protocols/webrtc-intro/\" target=\"_blank\">WebRTC 实战教程</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/shovanch/fullstack-webdev-path\" target=\"_blank\">全栈 Web 学习路径</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//javascript.info/\" target=\"_blank\">现代 JavaScript 指南</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uuk\" target=\"_blank\">使用 Node.js 构建区块链</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/\" target=\"_blank\">自定义基于 JavaScript 的 16 位虚拟机</a>；</li><br></ol>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://zhuanlan.zhihu.com/p/32298468\" target=\"_blank\" rel=\"noopener\">转载文章</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2017年关于JavaScript你需要知道的事情</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#行业要闻\">行业要闻</a></li>\n<li><a href=\"#发展回顾\">发展回顾</a></li>\n<li><a href=\"#开源项目\">开源项目</a></li>\n<li><a href=\"#css\">CSS</a></li>\n<li><a href=\"#人工智能\">人工智能</a></li>\n<li><a href=\"#构建之道\">构建之道</a></li>\n<li><a href=\"#状态管理\">状态管理</a></li>\n<li><a href=\"#webassembly\">WebAssembly</a></li>\n<li><a href=\"#graphql\">GraphQL</a></li>\n<li><a href=\"#webvrar\">WebVR/AR</a></li>\n<li><a href=\"#测试\">测试</a></li>\n<li><a href=\"#教程\">教程</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"行业要闻\"><a href=\"#行业要闻\" class=\"headerlink\" title=\"行业要闻\"></a>行业要闻</h3><div><br>    <ol><li><a href=\"https://link.zhihu.com/?target=https%3A//blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html%3Fm%3D1\" target=\"_blank\">Google宣布PWA与原生应用拥有同等待遇和权限</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/necolas/status/829128165314306048\" target=\"_blank\">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UEH\" target=\"_blank\">WebAssembly 已被所有主流浏览器支持</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNX\" target=\"_blank\">斯坦福宣布使用 JavaScript 作为计算机课程的首选语言</a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=http%3A//6me.us/W0k\" target=\"_blank\">2017 年中如果想成为专业的 Web 开发者，应该在 Web 前端、服务端以及 DevOps 领域所需要学习到的技术栈以及进阶路线图</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.polymer-project.org/blog/2017-05-15-time-for-two\" target=\"_blank\">Polymer 2.0发布，最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//microsoft.github.io/reactxp/\" target=\"_blank\">微软开源跨平台开发框架 ReactXP</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=http%3A//news.mit.edu/2017/tim-berners-lee-wins-turing-award-0404\" target=\"_blank\">万维网之父 Tim Berners-Lee 获得 2016 年度图灵奖</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//developer.github.com/v4/\" target=\"_blank\">Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构</a>；</u><br>        </li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bIZ\" target=\"_blank\">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR </a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWv\" target=\"_blank\">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bjr\" target=\"_blank\">Firefox 55 引入 WebVR 支持</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-graphql-playground-f1e0a018f05d\" target=\"_blank\">GraphQL Playground 发布</a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UAN\" target=\"_blank\">MSDN 将 7700 余份文档重定向到 MDN</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UcV\" target=\"_blank\">Node.js 8 宣布进入 LTS，Node.js 9 发布</a>；</li><br>    </ol><br>    </div>\n\n<h3 id=\"发展回顾\"><a href=\"#发展回顾\" class=\"headerlink\" title=\"发展回顾\"></a>发展回顾</h3><div><br>    <ol><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//stateofjs.com/2017/\" target=\"_blank\">The State of JavaScript 2017</a>；</li><br>        <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U39\" target=\"_blank\">2017 JavaScript 发展回顾</a>；</u><br>        </li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript\" target=\"_blank\">JavaScript 完整编年史</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bXD\" target=\"_blank\">TC39，ECMAScript 与 JavaScript 的未来</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Usl\" target=\"_blank\">ESM 的目前实现与未来规划</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bi0\" target=\"_blank\">JavaScript 模块化现状</a>；</li><br>        <li><a href=\"https://link.zhihu.com/?target=https%3A//www.monterail.com/state-of-vuejs-report\" target=\"_blank\">2017 Vue.js 现状报告</a>；</li><br>    </ol><br></div>    \n\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//elasticlunr.com/\" target=\"_blank\">浏览器端搜索与离线搜索的全文搜索引擎</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNh\" target=\"_blank\">一系列优秀的 React 界面框架</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mozilla/fathom\" target=\"_blank\">Fathom-提取网页中有意义内容的 JavaScript 框架</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gitsummore/nile.js\" target=\"_blank\">基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具</a><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//golden-layout.com/\" target=\"_blank\">golden-layout</a>，一款非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromedalbert/real-world-react\" target=\"_blank\">一系列基于 React 开发的真实环境下的开源应用代码库</a>；</li><br></ol>\n\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLZ\" target=\"_blank\">CSS 的现状</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNe\" target=\"_blank\">CSS-in-JavaScript：基于组件的样式组织</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//madebymike.com.au/writing/the-invisible-parts-of-CSS/\" target=\"_blank\">隐藏幕后的 CSS 知识点</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//cssgridgarden.com/\" target=\"_blank\">使用 CSS Grid 打造私家花园</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bTa\" target=\"_blank\">深入解析高性能 CSS 引擎：Quantum CSS（Stylo）</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//mozilladevelopers.github.io/playground/\" target=\"_blank\">Mozilla CSS Grid 教程</a>；</li><br></ol>\n\n<h3 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/PAIR-code/deeplearnjs\" target=\"_blank\">Google 开源 JavaScript 机器学习库 DeepLearn.js</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2017/08/TensorFire-use-GPU-fast-study%3Futm_source%3Dinfoq%26utm_campaign%3Duser_page%26utm_medium%3Dlink\" target=\"_blank\">TensorFire</a>－基于WebGL的浏览器端深度学习框架；</li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//janhuenermann.com/projects/learning-to-drive\" target=\"_blank\">在浏览器中实现自动驾驶汽车</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U5P\" target=\"_blank\">使用 Node.js 与 OpenCV 实现人脸识别</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bCw\" target=\"_blank\">深入浅出构建简单的 Chess AI</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhQ\" target=\"_blank\">利用机器学习优化网站性能</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bNa\" target=\"_blank\">从零开始基于 JavaScript 构建简单神经网络</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tonybeltramelli/pix2code\" target=\"_blank\">pix2code—依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gpujs/gpu.js\" target=\"_blank\">gpu.js</a> 提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2v\" target=\"_blank\">构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人</a>；</u><br>    </li><br></ol>\n\n<h3 id=\"构建之道\"><a href=\"#构建之道\" class=\"headerlink\" title=\"构建之道\"></a>构建之道</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4y\" target=\"_blank\">Webpack 与 Rollup：求同存异</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLP\" target=\"_blank\">面向生产环境的前端性能优化清单</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b9A\" target=\"_blank\">使用 Webpack 的 Magic Comment 特性简化代码分割</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bI8\" target=\"_blank\">Webpack import 支持异步导入 CSS</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//toddmotto.com/lazy-loading-angular-code-splitting-webpack\" target=\"_blank\">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//micro-frontends.org/\" target=\"_blank\">微前端：微服务概念的前端实践</a>；</li><br></ol>\n\n<h3 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b4J\" target=\"_blank\">React 中的状态管理架构模式</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//scotch.io/tutorials/state-management-in-vue-getting-started-with-vue\" target=\"_blank\">基于 Vuex 的 Vue 应用状态管理</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJq\" target=\"_blank\">Redux 状态管理之痛点、分析与改良</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bLd\" target=\"_blank\">Mobdux：整合 MobX 与 Redux 中优秀的部分</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/USQ\" target=\"_blank\">使用 TypeScript 编写 React 与 Redux 应用</a>；</u><br>    </li><br></ol>\n\n<h3 id=\"WebAssembly\"><a href=\"#WebAssembly\" class=\"headerlink\" title=\"WebAssembly\"></a>WebAssembly</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=http%3A//blog.openbloc.fr/webassembly-first-steps/\" target=\"_blank\">WebAssembly 初体验：重构简单游戏引擎</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byh\" target=\"_blank\">Rust、WebAssembly 与 Webpack</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mbasso/asm-dom\" target=\"_blank\">asm-dom</a> 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//www.hellorust.com/news/native-wasm-target.html\" target=\"_blank\">Rust 默认可以编译为 WebAssembly</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uua\" target=\"_blank\">WebAssembly 的应用场景</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UZJ\" target=\"_blank\">使用 Rust 开发基于 WebAssembly 的游戏</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UOB\" target=\"_blank\">NectarJS: 将 JavaScript 编译为平台相关的二进制代码</a>；</li><br></ol>\n\n<h3 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bzs\" target=\"_blank\">为什么我们选择了 GraphQL</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/U6S\" target=\"_blank\">GraphQL 技术栈漫游</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bBU\" target=\"_blank\">Apollo Client 2.0 新特性介绍</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b1X\" target=\"_blank\">用强类型语言 GraphQL 增强 React</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/b2H\" target=\"_blank\">利用 GraphQL 创建同构 Vue.js 应用</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bWY\" target=\"_blank\">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bgr\" target=\"_blank\">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816\" target=\"_blank\">Graphcool</a> 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UsY\" target=\"_blank\">基于 Apollo 的组件数据交互</a>；</li><br></ol>\n\n<h3 id=\"WebVR-AR\"><a href=\"#WebVR-AR\" class=\"headerlink\" title=\"WebVR/AR\"></a>WebVR/AR</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bDE\" target=\"_blank\">面向 Web 开发者的 VR 指南</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=http%3A//uber.github.io/luma.gl/%23/\" target=\"_blank\">luma.gl</a> 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/UlM\" target=\"_blank\">Expo AR 简明教程</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>发布。<br>        <a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js\" target=\"_blank\">AR.js</a>是高性能的面向 Web 的增强现实的工具库，它在移动端能达到 60fps；</li><br></ol>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bJ5\" target=\"_blank\">JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/byQ\" target=\"_blank\">TDD 与 Vue.js</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//mo.github.io/2017/07/20/javascript-e2e-integration-testing.html\" target=\"_blank\">基于 JavaScript 的 Web 应用的端到端测试工具对比</a>；</u><br>    </li><br></ol>\n\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><ol><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bhR\" target=\"_blank\">在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/biZ\" target=\"_blank\">理解高阶组件</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/bic\" target=\"_blank\">Nuxt.js SSR 与权限验证指南</a>；</u><br>    </li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//deepstreamhub.com/tutorials/protocols/webrtc-intro/\" target=\"_blank\">WebRTC 实战教程</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/shovanch/fullstack-webdev-path\" target=\"_blank\">全栈 Web 学习路径</a>；</li><br>    <li><u><a href=\"https://link.zhihu.com/?target=https%3A//javascript.info/\" target=\"_blank\">现代 JavaScript 指南</a>；</u><br>    </li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//parg.co/Uuk\" target=\"_blank\">使用 Node.js 构建区块链</a>；</li><br>    <li><a href=\"https://link.zhihu.com/?target=https%3A//francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/\" target=\"_blank\">自定义基于 JavaScript 的 16 位虚拟机</a>；</li><br></ol>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://zhuanlan.zhihu.com/p/32298468\" target=\"_blank\" rel=\"noopener\">转载文章</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"WEB开发常见效果插件收藏整理","p":"javascript/plugins-one","date":"2016-11-15T02:18:34.000Z","_content":"\n## 背景\n\nweb开发中常常有轮播图等效果，常见的开源项目很多，做一个整理\n\n<!--more-->\n\n## 内容\n\n### Slider 实现\n多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：\n\n- [swiper](http://www.swiper.com.cn)\n- [iscroll](https://github.com/cubiq/iscroll)\n- [fullpage.js](https://github.com/alvarotrigo/fullPage.js/) \n- [Scrollify](https://github.com/lukehaas/Scrollify)\n- [onepage-scroll](https://github.com/peachananr/onepage-scroll) \n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/plugins-one.md","raw":"---\ntitle: WEB开发常见效果插件收藏整理\np: javascript/plugins-one\ndate: 2016-11-15 10:18:34\ntags: [web, js,javascript,plugins]\ncategories: Javascript\n---\n\n## 背景\n\nweb开发中常常有轮播图等效果，常见的开源项目很多，做一个整理\n\n<!--more-->\n\n## 内容\n\n### Slider 实现\n多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：\n\n- [swiper](http://www.swiper.com.cn)\n- [iscroll](https://github.com/cubiq/iscroll)\n- [fullpage.js](https://github.com/alvarotrigo/fullPage.js/) \n- [Scrollify](https://github.com/lukehaas/Scrollify)\n- [onepage-scroll](https://github.com/peachananr/onepage-scroll) \n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/plugins-one","published":1,"updated":"2018-01-17T06:19:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3j0021fme3rnsdqdsg","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>web开发中常常有轮播图等效果，常见的开源项目很多，做一个整理</p>\n<a id=\"more\"></a>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><h3 id=\"Slider-实现\"><a href=\"#Slider-实现\" class=\"headerlink\" title=\"Slider 实现\"></a>Slider 实现</h3><p>多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：</p>\n<ul>\n<li><a href=\"http://www.swiper.com.cn\" target=\"_blank\" rel=\"noopener\">swiper</a></li>\n<li><a href=\"https://github.com/cubiq/iscroll\" target=\"_blank\" rel=\"noopener\">iscroll</a></li>\n<li><a href=\"https://github.com/alvarotrigo/fullPage.js/\" target=\"_blank\" rel=\"noopener\">fullpage.js</a> </li>\n<li><a href=\"https://github.com/lukehaas/Scrollify\" target=\"_blank\" rel=\"noopener\">Scrollify</a></li>\n<li><a href=\"https://github.com/peachananr/onepage-scroll\" target=\"_blank\" rel=\"noopener\">onepage-scroll</a> </li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>web开发中常常有轮播图等效果，常见的开源项目很多，做一个整理</p>","more":"<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><h3 id=\"Slider-实现\"><a href=\"#Slider-实现\" class=\"headerlink\" title=\"Slider 实现\"></a>Slider 实现</h3><p>多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：</p>\n<ul>\n<li><a href=\"http://www.swiper.com.cn\" target=\"_blank\" rel=\"noopener\">swiper</a></li>\n<li><a href=\"https://github.com/cubiq/iscroll\" target=\"_blank\" rel=\"noopener\">iscroll</a></li>\n<li><a href=\"https://github.com/alvarotrigo/fullPage.js/\" target=\"_blank\" rel=\"noopener\">fullpage.js</a> </li>\n<li><a href=\"https://github.com/lukehaas/Scrollify\" target=\"_blank\" rel=\"noopener\">Scrollify</a></li>\n<li><a href=\"https://github.com/peachananr/onepage-scroll\" target=\"_blank\" rel=\"noopener\">onepage-scroll</a> </li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"React框架之生命周期","p":"javascript/react-lifecycle","date":"2015-11-17T05:53:18.000Z","_content":"\n## 前言\nReact 生命周期\n学习React，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [初始化](#初始化)\n    - [更新](#更新)\n    - [卸载](#卸载)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\nReact 生命周期分为三种状态 1. 初始化 2.更新 3.销毁\n\n![图 react lifecycle](/imgs/javascript/react-lifecycle.jpg)\n\n### 初始化\n1、getDefaultProps()\n设置默认的props，也可以用dufaultProps设置组件的默认属性.\n\n2、getInitialState()\n在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props\n\n3、componentWillMount()\n组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n\n4、 render()\nreact最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n\n5、componentDidMount()\n组件渲染之后调用，只调用一次。\n\n### 更新\n6、componentWillReceiveProps(nextProps)\n组件初始化时不调用，组件接受新的props时调用。\n\n7、shouldComponentUpdate(nextProps, nextState)\nreact性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候\n\n8、componentWillUpdata(nextProps, nextState)\n组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n\n9、render()\n组件渲染\n\n10、componentDidUpdate()\n组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n### 卸载\n11、componentWillUnmount()\n组件将要卸载时调用，一些事件监听和定时器需要在此时清除。\n\n## 小结\n以上就是React 的生命周期，大家可以自行写下code测试一下，在这里我就不贴code 了。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/react-lifecycle.md","raw":"---\ntitle: React框架之生命周期\np: javascript/react-lifecycle\ndate: 2015-11-17 13:53:18\ntags: [react, lifecycle]\ncategories: Javascript\n---\n\n## 前言\nReact 生命周期\n学习React，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [初始化](#初始化)\n    - [更新](#更新)\n    - [卸载](#卸载)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\nReact 生命周期分为三种状态 1. 初始化 2.更新 3.销毁\n\n![图 react lifecycle](/imgs/javascript/react-lifecycle.jpg)\n\n### 初始化\n1、getDefaultProps()\n设置默认的props，也可以用dufaultProps设置组件的默认属性.\n\n2、getInitialState()\n在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props\n\n3、componentWillMount()\n组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n\n4、 render()\nreact最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n\n5、componentDidMount()\n组件渲染之后调用，只调用一次。\n\n### 更新\n6、componentWillReceiveProps(nextProps)\n组件初始化时不调用，组件接受新的props时调用。\n\n7、shouldComponentUpdate(nextProps, nextState)\nreact性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候\n\n8、componentWillUpdata(nextProps, nextState)\n组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n\n9、render()\n组件渲染\n\n10、componentDidUpdate()\n组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n### 卸载\n11、componentWillUnmount()\n组件将要卸载时调用，一些事件监听和定时器需要在此时清除。\n\n## 小结\n以上就是React 的生命周期，大家可以自行写下code测试一下，在这里我就不贴code 了。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/react-lifecycle","published":1,"updated":"2018-01-17T06:19:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3l0025fme3h7hgdx0i","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React 生命周期<br>学习React，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#初始化\">初始化</a></li>\n<li><a href=\"#更新\">更新</a></li>\n<li><a href=\"#卸载\">卸载</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁</p>\n<p><img src=\"/imgs/javascript/react-lifecycle.jpg\" alt=\"图 react lifecycle\"></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>1、getDefaultProps()<br>设置默认的props，也可以用dufaultProps设置组件的默认属性.</p>\n<p>2、getInitialState()<br>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props</p>\n<p>3、componentWillMount()<br>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p>\n<p>4、 render()<br>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p>\n<p>5、componentDidMount()<br>组件渲染之后调用，只调用一次。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>6、componentWillReceiveProps(nextProps)<br>组件初始化时不调用，组件接受新的props时调用。</p>\n<p>7、shouldComponentUpdate(nextProps, nextState)<br>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</p>\n<p>8、componentWillUpdata(nextProps, nextState)<br>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p>\n<p>9、render()<br>组件渲染</p>\n<p>10、componentDidUpdate()<br>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>11、componentWillUnmount()<br>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>以上就是React 的生命周期，大家可以自行写下code测试一下，在这里我就不贴code 了。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React 生命周期<br>学习React，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#初始化\">初始化</a></li>\n<li><a href=\"#更新\">更新</a></li>\n<li><a href=\"#卸载\">卸载</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁</p>\n<p><img src=\"/imgs/javascript/react-lifecycle.jpg\" alt=\"图 react lifecycle\"></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>1、getDefaultProps()<br>设置默认的props，也可以用dufaultProps设置组件的默认属性.</p>\n<p>2、getInitialState()<br>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props</p>\n<p>3、componentWillMount()<br>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p>\n<p>4、 render()<br>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p>\n<p>5、componentDidMount()<br>组件渲染之后调用，只调用一次。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>6、componentWillReceiveProps(nextProps)<br>组件初始化时不调用，组件接受新的props时调用。</p>\n<p>7、shouldComponentUpdate(nextProps, nextState)<br>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</p>\n<p>8、componentWillUpdata(nextProps, nextState)<br>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p>\n<p>9、render()<br>组件渲染</p>\n<p>10、componentDidUpdate()<br>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>11、componentWillUnmount()<br>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>以上就是React 的生命周期，大家可以自行写下code测试一下，在这里我就不贴code 了。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"WEB页面自适应解决方案","p":"javascript/viewport-rem-one","date":"2016-07-15T02:14:46.000Z","_content":"\n## 背景\n\n目录\n1 viewport 缩放方案\n2 rem 布局适配方案\n2.1 动态设置 html 标签 font-size 大小\n2.2 元素大小取值方法\n2.3 rem 布局方案的开发方式\n2.4 字体使用 px 为单位\n3 相关参考\n\n拿到设计稿后，如何进行布局还原？\n\n如果只需要做非精确的响应式设计，那么使用媒体查询来实现就 OK 了。如果需要精确还原设计稿，则一般通过缩放来实现。常见方案有基于 viewport 和基于 rem 的缩放方案。\n\n<!--more-->\n\n### 1 viewport 缩放方案\n\n在移动端，可以通过 viewport 缩放页面大小比率达到目的。\n\n简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：\n\n``` JS\n(function () {\n    var docEl = document.documentElement;\n    var isMobile = window.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);\n\n    function setScale() {\n        var pageScale = 1;\n\n        if (window.top !== window) {\n            return pageScale;\n        }\n\n        var width = docEl.clientWidth || 360;\n        var height = docEl.clientHeight || 640;\n        if (width / height >= 360 / 640) {\n            // 高度优先\n            pageScale = height / 640;\n        } else {\n            pageScale = width / 360;\n        }\n\n        var content = 'width=' + 360 + ', initial-scale=' + pageScale \n          + ', maximum-scale=' + pageScale + ', user-scalable=no';\n        document.getElementById('viewport').setAttribute('content', content);\n\n        window.pageScale = pageScale;\n    }\n\n    if (isMobile) {\n        setScale();\n    } else {\n        docEl.className += ' pc';\n    }\n})()\n```\n\n但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/viewport-rem-one.md","raw":"---\ntitle: WEB页面自适应解决方案\np: javascript/viewport-rem-one\ndate: 2016-07-15 10:14:46\ntags: [web, viewport, media, rem, css, javascript]\ncategories: [h5]\n---\n\n## 背景\n\n目录\n1 viewport 缩放方案\n2 rem 布局适配方案\n2.1 动态设置 html 标签 font-size 大小\n2.2 元素大小取值方法\n2.3 rem 布局方案的开发方式\n2.4 字体使用 px 为单位\n3 相关参考\n\n拿到设计稿后，如何进行布局还原？\n\n如果只需要做非精确的响应式设计，那么使用媒体查询来实现就 OK 了。如果需要精确还原设计稿，则一般通过缩放来实现。常见方案有基于 viewport 和基于 rem 的缩放方案。\n\n<!--more-->\n\n### 1 viewport 缩放方案\n\n在移动端，可以通过 viewport 缩放页面大小比率达到目的。\n\n简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：\n\n``` JS\n(function () {\n    var docEl = document.documentElement;\n    var isMobile = window.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);\n\n    function setScale() {\n        var pageScale = 1;\n\n        if (window.top !== window) {\n            return pageScale;\n        }\n\n        var width = docEl.clientWidth || 360;\n        var height = docEl.clientHeight || 640;\n        if (width / height >= 360 / 640) {\n            // 高度优先\n            pageScale = height / 640;\n        } else {\n            pageScale = width / 360;\n        }\n\n        var content = 'width=' + 360 + ', initial-scale=' + pageScale \n          + ', maximum-scale=' + pageScale + ', user-scalable=no';\n        document.getElementById('viewport').setAttribute('content', content);\n\n        window.pageScale = pageScale;\n    }\n\n    if (isMobile) {\n        setScale();\n    } else {\n        docEl.className += ' pc';\n    }\n})()\n```\n\n但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/viewport-rem-one","published":1,"updated":"2018-01-17T06:14:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3p0028fme3v68y754s","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>目录<br>1 viewport 缩放方案<br>2 rem 布局适配方案<br>2.1 动态设置 html 标签 font-size 大小<br>2.2 元素大小取值方法<br>2.3 rem 布局方案的开发方式<br>2.4 字体使用 px 为单位<br>3 相关参考</p>\n<p>拿到设计稿后，如何进行布局还原？</p>\n<p>如果只需要做非精确的响应式设计，那么使用媒体查询来实现就 OK 了。如果需要精确还原设计稿，则一般通过缩放来实现。常见方案有基于 viewport 和基于 rem 的缩放方案。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-viewport-缩放方案\"><a href=\"#1-viewport-缩放方案\" class=\"headerlink\" title=\"1 viewport 缩放方案\"></a>1 viewport 缩放方案</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p>\n<p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isMobile = <span class=\"built_in\">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setScale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = docEl.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = docEl.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 高度优先</span></span><br><span class=\"line\">            pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pageScale = width / <span class=\"number\">360</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> content = <span class=\"string\">'width='</span> + <span class=\"number\">360</span> + <span class=\"string\">', initial-scale='</span> + pageScale </span><br><span class=\"line\">          + <span class=\"string\">', maximum-scale='</span> + pageScale + <span class=\"string\">', user-scalable=no'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'viewport'</span>).setAttribute(<span class=\"string\">'content'</span>, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageScale = pageScale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMobile) &#123;</span><br><span class=\"line\">        setScale();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        docEl.className += <span class=\"string\">' pc'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>目录<br>1 viewport 缩放方案<br>2 rem 布局适配方案<br>2.1 动态设置 html 标签 font-size 大小<br>2.2 元素大小取值方法<br>2.3 rem 布局方案的开发方式<br>2.4 字体使用 px 为单位<br>3 相关参考</p>\n<p>拿到设计稿后，如何进行布局还原？</p>\n<p>如果只需要做非精确的响应式设计，那么使用媒体查询来实现就 OK 了。如果需要精确还原设计稿，则一般通过缩放来实现。常见方案有基于 viewport 和基于 rem 的缩放方案。</p>","more":"<h3 id=\"1-viewport-缩放方案\"><a href=\"#1-viewport-缩放方案\" class=\"headerlink\" title=\"1 viewport 缩放方案\"></a>1 viewport 缩放方案</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p>\n<p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isMobile = <span class=\"built_in\">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setScale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pageScale = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageScale;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = docEl.clientWidth || <span class=\"number\">360</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = docEl.clientHeight || <span class=\"number\">640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width / height &gt;= <span class=\"number\">360</span> / <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 高度优先</span></span><br><span class=\"line\">            pageScale = height / <span class=\"number\">640</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pageScale = width / <span class=\"number\">360</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> content = <span class=\"string\">'width='</span> + <span class=\"number\">360</span> + <span class=\"string\">', initial-scale='</span> + pageScale </span><br><span class=\"line\">          + <span class=\"string\">', maximum-scale='</span> + pageScale + <span class=\"string\">', user-scalable=no'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'viewport'</span>).setAttribute(<span class=\"string\">'content'</span>, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.pageScale = pageScale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMobile) &#123;</span><br><span class=\"line\">        setScale();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        docEl.className += <span class=\"string\">' pc'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"Vue框架之生命周期","p":"javascript/vue-lifecycle","date":"2016-11-17T06:08:16.000Z","_content":"\n## 前言\nVue 生命周期\n学习Vue，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.\n\n<!--more-->\n\n## 正文\n\n![图 vue lifecycle](/imgs/javascript/vue-lifecycle.png)\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/vue-lifecycle.md","raw":"---\ntitle: Vue框架之生命周期\np: javascript/vue-lifecycle\ndate: 2016-11-17 14:08:16\ntags: [vue, lifecycle]\ncategories: Javascript\n---\n\n## 前言\nVue 生命周期\n学习Vue，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.\n\n<!--more-->\n\n## 正文\n\n![图 vue lifecycle](/imgs/javascript/vue-lifecycle.png)\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/vue-lifecycle","published":1,"updated":"2018-01-17T06:19:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3s002bfme3mas0nl9m","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Vue 生命周期<br>学习Vue，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p><img src=\"/imgs/javascript/vue-lifecycle.png\" alt=\"图 vue lifecycle\"></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Vue 生命周期<br>学习Vue，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p><img src=\"/imgs/javascript/vue-lifecycle.png\" alt=\"图 vue lifecycle\"></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"javascript运行机制原理之event loop","p":"javascript/principle-eventloop","date":"2014-12-02T09:10:53.000Z","_content":"\n## 前言\n\njavascript运行机制原理 eventloop\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [一、为什么JavaScript是单线程？](#一为什么javascript是单线程)\n    - [二、任务队列](#二任务队列)\n    - [三、事件和回调函数](#三事件和回调函数)\n    - [四、Event Loop](#四event-loop)\n    - [五、定时器](#五定时器)\n    - [六、Node.js的Event Loop](#六nodejs的event-loop)\n- [面试题](#面试题)\n- [小结](#小结)\n    - [JavaScript的运行机制](#javascript的运行机制)\n    - [Microtasks Macrotasks](#microtasks-macrotasks)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n### 一、为什么JavaScript是单线程？\nJavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。\nJavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？\n所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。\n为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。\n\n### 二、任务队列\n单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。\n如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。\nJavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。\n于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。\n具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）\n\n    （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n    （2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n    （3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n    （4）主线程不断重复上面的第三步。\n\n下图就是主线程和任务队列的示意图。\n\n![](/imgs/javascript/bg2014100801.jpg)\n\n只要主线程空了，就会去读取\"任务队列\"，这就是JavaScript的运行机制。这个过程会不断重复。\n\n### 三、事件和回调函数\n\"任务队列\"是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在\"任务队列\"中添加一个事件，表示相关的异步任务可以进入\"执行栈\"了。主线程读取\"任务队列\"，就是读取里面有哪些事件。\n\"任务队列\"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入\"任务队列\"，等待主线程读取。\n所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n\"任务队列\"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，\"任务队列\"上第一位的事件就自动进入主线程。但是，由于存在后文提到的\"定时器\"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。\n\n### 四、Event Loop\n主线程从\"任务队列\"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。\n\n为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲[《Help, I'm stuck in an event-loop》](http://vimeo.com/96425312)）。\n\n![](/imgs/javascript/bg2014100802.png)\n\n上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在\"任务队列\"中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取\"任务队列\"，依次执行那些事件所对应的回调函数。\n执行栈中的代码（同步任务），总是在读取\"任务队列\"（异步任务）之前执行。请看下面这个例子。\n\n```JS\n    var req = new XMLHttpRequest();\n    req.open('GET', url);    \n    req.onload = function (){};    \n    req.onerror = function (){};    \n    req.send();\n```\n上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取\"任务队列\"。所以，它与下面的写法等价。\n\n```JS\n    var req = new XMLHttpRequest();\n    req.open('GET', url);\n    req.send();\n    req.onload = function (){};    \n    req.onerror = function (){};   \n```\n也就是说，指定回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取\"任务队列\"。\n\n\n### 五、定时器\n除了放置异步任务的事件，\"任务队列\"还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做\"定时器\"（timer）功能，也就是定时执行的代码。\n定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。\n\nsetTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。\n\n```JS\nconsole.log(1);\nsetTimeout(function(){console.log(2);},1000);\nconsole.log(3);\n```\n上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。\n\n如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。\n\n```JS\nsetTimeout(function(){console.log(1);}, 0);\nconsole.log(2);\n```\n\n上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行\"任务队列\"中的回调函数。\n总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在\"任务队列\"的尾部添加一个事件，因此要等到同步任务和\"任务队列\"现有的事件都处理完，才会得到执行。\nHTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。\n需要注意的是，setTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n\n### 六、Node.js的Event Loop\nNode.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。\n请看下面的示意图（作者[@BusyRich](https://twitter.com/BusyRich/status/494959181871316992))。\n\n![](/imgs/javascript/bg2014100803.png)\n\n根据上图，Node.js的运行机制如下。\n\n    （1）V8引擎解析JavaScript脚本。\n    （2）解析后的代码，调用Node API。\n    （3）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。\n    （4）V8引擎再将结果返回给用户。\n\n除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与\"任务队列\"有关的方法：process.nextTick和setImmediate。它们可以帮助我们加深对\"任务队列\"的理解。\n\nprocess.nextTick方法可以在当前\"执行栈\"的尾部----下一次Event Loop（主线程读取\"任务队列\"）之前----触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate方法则是在当前\"任务队列\"的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子（via StackOverflow）。\n\n```JS\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n```\n\n上面代码中，由于process.nextTick方法指定的回调函数，总是在当前\"执行栈\"的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前\"执行栈\"执行。\n\n现在，再看setImmediate。\n\n```JS\nsetImmediate(function A() {\n  console.log(1);\n  setImmediate(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0);\n```\n\n上面代码中，setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1--TIMEOUT FIRED--2，也可能是TIMEOUT FIRED--1--2。\n令人困惑的是，Node.js文档中称，setImmediate指定的回调函数，总是排在setTimeout前面。实际上，这种情况只发生在递归调用的时候。\n\n```JS\n\nsetImmediate(function (){\n  setImmediate(function A() {\n    console.log(1);\n    setImmediate(function B(){\n        console.log(2);\n    });\n  });\n\n  setTimeout(function timeout() {\n    console.log('TIMEOUT FIRED');\n  }, 0);\n});\n// 1\n// TIMEOUT FIRED\n// 2\n```\n\n上面代码中，setImmediate和setTimeout被封装在一个setImmediate里面，它的运行结果总是1--TIMEOUT FIRED--2，这时函数A一定在timeout前面触发。至于2排在TIMEOUT FIRED的后面（即函数B在timeout后面触发），是因为setImmediate总是将事件注册到下一轮Event Loop，所以函数A和timeout是在同一轮Loop执行，而函数B在下一轮Loop执行。\n\n我们由此得到了process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前\"执行栈\"一次执行完，多个setImmediate可能则需要多次loop才能执行完。事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取\"事件队列\"！\n\n```JS\nprocess.nextTick(function foo() {\n  process.nextTick(foo);\n});\n```\n\n事实上，现在要是你写出递归的process.nextTick，Node.js会抛出一个警告，要求你改成setImmediate。\n另外，由于process.nextTick指定的回调函数是在本次\"事件循环\"触发，而setImmediate指定的是在下次\"事件循环\"触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查\"任务队列\"）。\n\n\n## 面试题\n\n说出下列代码的执行结果：\n\n面试题1\n\n```JS\nsetTimeout(function () {\n    console.log(1)\n}, 0);\n\nnew Promise(function executor(resolve) {\n    resolve();\n}).then(function () {\n    console.log(2);\n});\n\n//打印结果：2，1\n```\n\n面试题2\n\n```JS\n(function test() {\n  setTimeout(function() { console.log(4); }, 0);\n  new Promise(function executor(resolve) {\n    console.log(1);\n    for (var i = 0; i < 10000; i++) {\n      i == 9999 && resolve();\n    }\n    console.log(2);\n  }).then(function() {\n    console.log(5);\n  });\n  console.log(3);\n})()\n//\n//打印结果：1,2,3,5,4\n```\n\n面试题3\n\n```JS\n// 测试代码\nconsole.log('main1');\n\n// 该函数仅在 Node.js 环境下可以使用\nprocess.nextTick(function() {\n    console.log('process.nextTick1');\n});\n\nsetTimeout(function() {\n    console.log('setTimeout');\n    process.nextTick(function() {\n        console.log('process.nextTick2');\n    });\n}, 0);\n\nnew Promise(function(resolve, reject) {\n    console.log('promise');\n    resolve();\n}).then(function() {\n    console.log('promise then');\n});\n\nconsole.log('main2');\n\n// 执行结果\n// main1\n// promise\n// main2\n// process.nextTick1\n// promise then\n// setTimeout\n// process.nextTick2\n\n```\n简单来讲，整体的js代码这个macrotask先执行，同步代码执行完后有microtask执行microtask，没有microtask执行下一个macrotask，如此往复循环至结束\n\n![一步一步执行EventLoop顺序图](/imgs/javascript/eventloop.png)\n\n[Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n\n## 小结\n\n### JavaScript的运行机制\n同步任务（synchronous）和异步任务（asynchronous）\n\n同步任务：\n在主线程上排队执行的任务，前一个任务执行完毕，才能执行后一个任务；\n\n异步任务：\n不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。\n\n总之：\n只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制\n\n### Microtasks Macrotasks\n\n任务队列不止一个，还有 microtasks 和 macrotasks\n\n*** microtasks: ***\n- process.nextTick\n- promise\n- Object.observe\n- MutationObserver\n\n*** macrotasks: ***\n- setTimeout\n- setInterval\n- setImmediate\n- I/O\n- UI rending 渲染  \n\n![两者之间的关系图](/imgs/javascript/macrotask-microtask.jpg)\n\nwhatwg规范：https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\n\n- 一个事件循环(event loop)会有一个或多个任务队列(task queue)\n- task queue 就是 macrotask queue\n- 每一个 event loop 都有一个 microtask queue\n- task queue == macrotask queue != microtask queue\n- 一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue 中\n\n理解了这些定义之后，再看执行原理：\n***\n** 事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。**\n***\n还要注意一点：\n\n    包裹在一个 script 标签中的js代码也是一个 task 确切说是 macrotask。\n\n您没看明白？再分解下：\n\n***\n任务队列分为 macrotasks 和 microtasks，而Promise中的then方法的函数会被推入 microtasks 队列，而setTimeout的任务会被推入 macrotasks 队列。在每一次事件循环中，macrotask 只会提取一个执行，而 microtask 会一直提取，直到 microtasks 队列清空。\n\n注：一般情况下，macrotask queues 我们会直接称为 task queues，只有 microtask queues 才会特别指明。\n\n那么也就是说如果我的某个 microtask 任务又推入了一个任务进入 microtasks 队列，那么在主线程完成该任务之后，仍然会继续运行 microtasks 任务直到任务队列耗尽。\n\n而事件循环每次只会入栈一个 macrotask ，主线程执行完该任务后又会先检查 microtasks 队列并完成里面的所有任务后再执行 macrotask。\n***\n\n\n[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/javascript/principle-eventloop.md","raw":"---\ntitle: javascript运行机制原理之event loop\ntags: [javascript,eventloop]\np: javascript/principle-eventloop\ndate: 2014-12-02 17:10:53\ncategories: Javascript\n---\n\n## 前言\n\njavascript运行机制原理 eventloop\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [一、为什么JavaScript是单线程？](#一为什么javascript是单线程)\n    - [二、任务队列](#二任务队列)\n    - [三、事件和回调函数](#三事件和回调函数)\n    - [四、Event Loop](#四event-loop)\n    - [五、定时器](#五定时器)\n    - [六、Node.js的Event Loop](#六nodejs的event-loop)\n- [面试题](#面试题)\n- [小结](#小结)\n    - [JavaScript的运行机制](#javascript的运行机制)\n    - [Microtasks Macrotasks](#microtasks-macrotasks)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n### 一、为什么JavaScript是单线程？\nJavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。\nJavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？\n所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。\n为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。\n\n### 二、任务队列\n单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。\n如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。\nJavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。\n于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。\n具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）\n\n    （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n    （2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n    （3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n    （4）主线程不断重复上面的第三步。\n\n下图就是主线程和任务队列的示意图。\n\n![](/imgs/javascript/bg2014100801.jpg)\n\n只要主线程空了，就会去读取\"任务队列\"，这就是JavaScript的运行机制。这个过程会不断重复。\n\n### 三、事件和回调函数\n\"任务队列\"是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在\"任务队列\"中添加一个事件，表示相关的异步任务可以进入\"执行栈\"了。主线程读取\"任务队列\"，就是读取里面有哪些事件。\n\"任务队列\"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入\"任务队列\"，等待主线程读取。\n所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n\"任务队列\"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，\"任务队列\"上第一位的事件就自动进入主线程。但是，由于存在后文提到的\"定时器\"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。\n\n### 四、Event Loop\n主线程从\"任务队列\"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。\n\n为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲[《Help, I'm stuck in an event-loop》](http://vimeo.com/96425312)）。\n\n![](/imgs/javascript/bg2014100802.png)\n\n上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在\"任务队列\"中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取\"任务队列\"，依次执行那些事件所对应的回调函数。\n执行栈中的代码（同步任务），总是在读取\"任务队列\"（异步任务）之前执行。请看下面这个例子。\n\n```JS\n    var req = new XMLHttpRequest();\n    req.open('GET', url);    \n    req.onload = function (){};    \n    req.onerror = function (){};    \n    req.send();\n```\n上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取\"任务队列\"。所以，它与下面的写法等价。\n\n```JS\n    var req = new XMLHttpRequest();\n    req.open('GET', url);\n    req.send();\n    req.onload = function (){};    \n    req.onerror = function (){};   \n```\n也就是说，指定回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取\"任务队列\"。\n\n\n### 五、定时器\n除了放置异步任务的事件，\"任务队列\"还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做\"定时器\"（timer）功能，也就是定时执行的代码。\n定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。\n\nsetTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。\n\n```JS\nconsole.log(1);\nsetTimeout(function(){console.log(2);},1000);\nconsole.log(3);\n```\n上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。\n\n如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。\n\n```JS\nsetTimeout(function(){console.log(1);}, 0);\nconsole.log(2);\n```\n\n上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行\"任务队列\"中的回调函数。\n总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在\"任务队列\"的尾部添加一个事件，因此要等到同步任务和\"任务队列\"现有的事件都处理完，才会得到执行。\nHTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。\n需要注意的是，setTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n\n### 六、Node.js的Event Loop\nNode.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。\n请看下面的示意图（作者[@BusyRich](https://twitter.com/BusyRich/status/494959181871316992))。\n\n![](/imgs/javascript/bg2014100803.png)\n\n根据上图，Node.js的运行机制如下。\n\n    （1）V8引擎解析JavaScript脚本。\n    （2）解析后的代码，调用Node API。\n    （3）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。\n    （4）V8引擎再将结果返回给用户。\n\n除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与\"任务队列\"有关的方法：process.nextTick和setImmediate。它们可以帮助我们加深对\"任务队列\"的理解。\n\nprocess.nextTick方法可以在当前\"执行栈\"的尾部----下一次Event Loop（主线程读取\"任务队列\"）之前----触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate方法则是在当前\"任务队列\"的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子（via StackOverflow）。\n\n```JS\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n```\n\n上面代码中，由于process.nextTick方法指定的回调函数，总是在当前\"执行栈\"的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前\"执行栈\"执行。\n\n现在，再看setImmediate。\n\n```JS\nsetImmediate(function A() {\n  console.log(1);\n  setImmediate(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0);\n```\n\n上面代码中，setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1--TIMEOUT FIRED--2，也可能是TIMEOUT FIRED--1--2。\n令人困惑的是，Node.js文档中称，setImmediate指定的回调函数，总是排在setTimeout前面。实际上，这种情况只发生在递归调用的时候。\n\n```JS\n\nsetImmediate(function (){\n  setImmediate(function A() {\n    console.log(1);\n    setImmediate(function B(){\n        console.log(2);\n    });\n  });\n\n  setTimeout(function timeout() {\n    console.log('TIMEOUT FIRED');\n  }, 0);\n});\n// 1\n// TIMEOUT FIRED\n// 2\n```\n\n上面代码中，setImmediate和setTimeout被封装在一个setImmediate里面，它的运行结果总是1--TIMEOUT FIRED--2，这时函数A一定在timeout前面触发。至于2排在TIMEOUT FIRED的后面（即函数B在timeout后面触发），是因为setImmediate总是将事件注册到下一轮Event Loop，所以函数A和timeout是在同一轮Loop执行，而函数B在下一轮Loop执行。\n\n我们由此得到了process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前\"执行栈\"一次执行完，多个setImmediate可能则需要多次loop才能执行完。事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取\"事件队列\"！\n\n```JS\nprocess.nextTick(function foo() {\n  process.nextTick(foo);\n});\n```\n\n事实上，现在要是你写出递归的process.nextTick，Node.js会抛出一个警告，要求你改成setImmediate。\n另外，由于process.nextTick指定的回调函数是在本次\"事件循环\"触发，而setImmediate指定的是在下次\"事件循环\"触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查\"任务队列\"）。\n\n\n## 面试题\n\n说出下列代码的执行结果：\n\n面试题1\n\n```JS\nsetTimeout(function () {\n    console.log(1)\n}, 0);\n\nnew Promise(function executor(resolve) {\n    resolve();\n}).then(function () {\n    console.log(2);\n});\n\n//打印结果：2，1\n```\n\n面试题2\n\n```JS\n(function test() {\n  setTimeout(function() { console.log(4); }, 0);\n  new Promise(function executor(resolve) {\n    console.log(1);\n    for (var i = 0; i < 10000; i++) {\n      i == 9999 && resolve();\n    }\n    console.log(2);\n  }).then(function() {\n    console.log(5);\n  });\n  console.log(3);\n})()\n//\n//打印结果：1,2,3,5,4\n```\n\n面试题3\n\n```JS\n// 测试代码\nconsole.log('main1');\n\n// 该函数仅在 Node.js 环境下可以使用\nprocess.nextTick(function() {\n    console.log('process.nextTick1');\n});\n\nsetTimeout(function() {\n    console.log('setTimeout');\n    process.nextTick(function() {\n        console.log('process.nextTick2');\n    });\n}, 0);\n\nnew Promise(function(resolve, reject) {\n    console.log('promise');\n    resolve();\n}).then(function() {\n    console.log('promise then');\n});\n\nconsole.log('main2');\n\n// 执行结果\n// main1\n// promise\n// main2\n// process.nextTick1\n// promise then\n// setTimeout\n// process.nextTick2\n\n```\n简单来讲，整体的js代码这个macrotask先执行，同步代码执行完后有microtask执行microtask，没有microtask执行下一个macrotask，如此往复循环至结束\n\n![一步一步执行EventLoop顺序图](/imgs/javascript/eventloop.png)\n\n[Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n\n## 小结\n\n### JavaScript的运行机制\n同步任务（synchronous）和异步任务（asynchronous）\n\n同步任务：\n在主线程上排队执行的任务，前一个任务执行完毕，才能执行后一个任务；\n\n异步任务：\n不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。\n\n总之：\n只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制\n\n### Microtasks Macrotasks\n\n任务队列不止一个，还有 microtasks 和 macrotasks\n\n*** microtasks: ***\n- process.nextTick\n- promise\n- Object.observe\n- MutationObserver\n\n*** macrotasks: ***\n- setTimeout\n- setInterval\n- setImmediate\n- I/O\n- UI rending 渲染  \n\n![两者之间的关系图](/imgs/javascript/macrotask-microtask.jpg)\n\nwhatwg规范：https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\n\n- 一个事件循环(event loop)会有一个或多个任务队列(task queue)\n- task queue 就是 macrotask queue\n- 每一个 event loop 都有一个 microtask queue\n- task queue == macrotask queue != microtask queue\n- 一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue 中\n\n理解了这些定义之后，再看执行原理：\n***\n** 事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。**\n***\n还要注意一点：\n\n    包裹在一个 script 标签中的js代码也是一个 task 确切说是 macrotask。\n\n您没看明白？再分解下：\n\n***\n任务队列分为 macrotasks 和 microtasks，而Promise中的then方法的函数会被推入 microtasks 队列，而setTimeout的任务会被推入 macrotasks 队列。在每一次事件循环中，macrotask 只会提取一个执行，而 microtask 会一直提取，直到 microtasks 队列清空。\n\n注：一般情况下，macrotask queues 我们会直接称为 task queues，只有 microtask queues 才会特别指明。\n\n那么也就是说如果我的某个 microtask 任务又推入了一个任务进入 microtasks 队列，那么在主线程完成该任务之后，仍然会继续运行 microtasks 任务直到任务队列耗尽。\n\n而事件循环每次只会入栈一个 macrotask ，主线程执行完该任务后又会先检查 microtasks 队列并完成里面的所有任务后再执行 macrotask。\n***\n\n\n[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"javascript/principle-eventloop","published":1,"updated":"2018-02-05T02:58:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3u002efme3yp3fefx8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>javascript运行机制原理 eventloop</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#一为什么javascript是单线程\">一、为什么JavaScript是单线程？</a></li>\n<li><a href=\"#二任务队列\">二、任务队列</a></li>\n<li><a href=\"#三事件和回调函数\">三、事件和回调函数</a></li>\n<li><a href=\"#四event-loop\">四、Event Loop</a></li>\n<li><a href=\"#五定时器\">五、定时器</a></li>\n<li><a href=\"#六nodejs的event-loop\">六、Node.js的Event Loop</a></li>\n</ul>\n</li>\n<li><a href=\"#面试题\">面试题</a></li>\n<li><a href=\"#小结\">小结</a><ul>\n<li><a href=\"#javascript的运行机制\">JavaScript的运行机制</a></li>\n<li><a href=\"#microtasks-macrotasks\">Microtasks Macrotasks</a></li>\n</ul>\n</li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"一、为什么JavaScript是单线程？\"><a href=\"#一、为什么JavaScript是单线程？\" class=\"headerlink\" title=\"一、为什么JavaScript是单线程？\"></a>一、为什么JavaScript是单线程？</h3><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。<br>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。<br>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>\n<h3 id=\"二、任务队列\"><a href=\"#二、任务队列\" class=\"headerlink\" title=\"二、任务队列\"></a>二、任务队列</h3><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。<br>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。<br>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p>\n<pre><code>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。\n（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n（4）主线程不断重复上面的第三步。\n</code></pre><p>下图就是主线程和任务队列的示意图。</p>\n<p><img src=\"/imgs/javascript/bg2014100801.jpg\" alt=\"\"></p>\n<p>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</p>\n<h3 id=\"三、事件和回调函数\"><a href=\"#三、事件和回调函数\" class=\"headerlink\" title=\"三、事件和回调函数\"></a>三、事件和回调函数</h3><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。<br>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。<br>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。<br>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p>\n<h3 id=\"四、Event-Loop\"><a href=\"#四、Event-Loop\" class=\"headerlink\" title=\"四、Event Loop\"></a>四、Event Loop</h3><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p>\n<p>为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲<a href=\"http://vimeo.com/96425312\" target=\"_blank\" rel=\"noopener\">《Help, I’m stuck in an event-loop》</a>）。</p>\n<p><img src=\"/imgs/javascript/bg2014100802.png\" alt=\"\"></p>\n<p>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。<br>执行栈中的代码（同步任务），总是在读取”任务队列”（异步任务）之前执行。请看下面这个例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">req.open(<span class=\"string\">'GET'</span>, url);    </span><br><span class=\"line\">req.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;    </span><br><span class=\"line\">req.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;    </span><br><span class=\"line\">req.send();</span><br></pre></td></tr></table></figure>\n<p>上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取”任务队列”。所以，它与下面的写法等价。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">req.open(<span class=\"string\">'GET'</span>, url);</span><br><span class=\"line\">req.send();</span><br><span class=\"line\">req.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;    </span><br><span class=\"line\">req.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>也就是说，指定回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取”任务队列”。</p>\n<h3 id=\"五、定时器\"><a href=\"#五、定时器\" class=\"headerlink\" title=\"五、定时器\"></a>五、定时器</h3><p>除了放置异步任务的事件，”任务队列”还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做”定时器”（timer）功能，也就是定时执行的代码。<br>定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。</p>\n<p>setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。</p>\n<p>如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行”任务队列”中的回调函数。<br>总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在”任务队列”的尾部添加一个事件，因此要等到同步任务和”任务队列”现有的事件都处理完，才会得到执行。<br>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。<br>需要注意的是，setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<h3 id=\"六、Node-js的Event-Loop\"><a href=\"#六、Node-js的Event-Loop\" class=\"headerlink\" title=\"六、Node.js的Event Loop\"></a>六、Node.js的Event Loop</h3><p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。<br>请看下面的示意图（作者<a href=\"https://twitter.com/BusyRich/status/494959181871316992\" target=\"_blank\" rel=\"noopener\">@BusyRich</a>)。</p>\n<p><img src=\"/imgs/javascript/bg2014100803.png\" alt=\"\"></p>\n<p>根据上图，Node.js的运行机制如下。</p>\n<pre><code>（1）V8引擎解析JavaScript脚本。\n（2）解析后的代码，调用Node API。\n（3）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。\n（4）V8引擎再将结果返回给用户。\n</code></pre><p>除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与”任务队列”有关的方法：process.nextTick和setImmediate。它们可以帮助我们加深对”任务队列”的理解。</p>\n<p>process.nextTick方法可以在当前”执行栈”的尾部—-下一次Event Loop（主线程读取”任务队列”）之前—-触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate方法则是在当前”任务队列”的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子（via StackOverflow）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'TIMEOUT FIRED'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// TIMEOUT FIRED</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。</p>\n<p>现在，再看setImmediate。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'TIMEOUT FIRED'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1–TIMEOUT FIRED–2，也可能是TIMEOUT FIRED–1–2。<br>令人困惑的是，Node.js文档中称，setImmediate指定的回调函数，总是排在setTimeout前面。实际上，这种情况只发生在递归调用的时候。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'TIMEOUT FIRED'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// TIMEOUT FIRED</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setImmediate和setTimeout被封装在一个setImmediate里面，它的运行结果总是1–TIMEOUT FIRED–2，这时函数A一定在timeout前面触发。至于2排在TIMEOUT FIRED的后面（即函数B在timeout后面触发），是因为setImmediate总是将事件注册到下一轮Event Loop，所以函数A和timeout是在同一轮Loop执行，而函数B在下一轮Loop执行。</p>\n<p>我们由此得到了process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前”执行栈”一次执行完，多个setImmediate可能则需要多次loop才能执行完。事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取”事件队列”！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  process.nextTick(foo);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>事实上，现在要是你写出递归的process.nextTick，Node.js会抛出一个警告，要求你改成setImmediate。<br>另外，由于process.nextTick指定的回调函数是在本次”事件循环”触发，而setImmediate指定的是在下次”事件循环”触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查”任务队列”）。</p>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>说出下列代码的执行结果：</p>\n<p>面试题1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：2，1</span></span><br></pre></td></tr></table></figure>\n<p>面试题2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>); &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">      i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//打印结果：1,2,3,5,4</span></span><br></pre></td></tr></table></figure>\n<p>面试题3</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数仅在 Node.js 环境下可以使用</span></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'process.nextTick1'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'process.nextTick2'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise then'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// main1</span></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// main2</span></span><br><span class=\"line\"><span class=\"comment\">// process.nextTick1</span></span><br><span class=\"line\"><span class=\"comment\">// promise then</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// process.nextTick2</span></span><br></pre></td></tr></table></figure>\n<p>简单来讲，整体的js代码这个macrotask先执行，同步代码执行完后有microtask执行microtask，没有microtask执行下一个macrotask，如此往复循环至结束</p>\n<p><img src=\"/imgs/javascript/eventloop.png\" alt=\"一步一步执行EventLoop顺序图\"></p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"JavaScript的运行机制\"><a href=\"#JavaScript的运行机制\" class=\"headerlink\" title=\"JavaScript的运行机制\"></a>JavaScript的运行机制</h3><p>同步任务（synchronous）和异步任务（asynchronous）</p>\n<p>同步任务：<br>在主线程上排队执行的任务，前一个任务执行完毕，才能执行后一个任务；</p>\n<p>异步任务：<br>不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>\n<p>总之：<br>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制</p>\n<h3 id=\"Microtasks-Macrotasks\"><a href=\"#Microtasks-Macrotasks\" class=\"headerlink\" title=\"Microtasks Macrotasks\"></a>Microtasks Macrotasks</h3><p>任务队列不止一个，还有 microtasks 和 macrotasks</p>\n<p><strong><em> microtasks: </em></strong></p>\n<ul>\n<li>process.nextTick</li>\n<li>promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n<p><strong><em> macrotasks: </em></strong></p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI rending 渲染  </li>\n</ul>\n<p><img src=\"/imgs/javascript/macrotask-microtask.jpg\" alt=\"两者之间的关系图\"></p>\n<p>whatwg规范：<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\" target=\"_blank\" rel=\"noopener\">https://html.spec.whatwg.org/multipage/webappapis.html#task-queue</a></p>\n<ul>\n<li>一个事件循环(event loop)会有一个或多个任务队列(task queue)</li>\n<li>task queue 就是 macrotask queue</li>\n<li>每一个 event loop 都有一个 microtask queue</li>\n<li>task queue == macrotask queue != microtask queue</li>\n<li>一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue 中</li>\n</ul>\n<p>理解了这些定义之后，再看执行原理：</p>\n<hr>\n<p><strong> 事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。</strong></p>\n<hr>\n<p>还要注意一点：</p>\n<pre><code>包裹在一个 script 标签中的js代码也是一个 task 确切说是 macrotask。\n</code></pre><p>您没看明白？再分解下：</p>\n<hr>\n<p>任务队列分为 macrotasks 和 microtasks，而Promise中的then方法的函数会被推入 microtasks 队列，而setTimeout的任务会被推入 macrotasks 队列。在每一次事件循环中，macrotask 只会提取一个执行，而 microtask 会一直提取，直到 microtasks 队列清空。</p>\n<p>注：一般情况下，macrotask queues 我们会直接称为 task queues，只有 microtask queues 才会特别指明。</p>\n<p>那么也就是说如果我的某个 microtask 任务又推入了一个任务进入 microtasks 队列，那么在主线程完成该任务之后，仍然会继续运行 microtasks 任务直到任务队列耗尽。</p>\n<p>而事件循环每次只会入栈一个 macrotask ，主线程执行完该任务后又会先检查 microtasks 队列并完成里面的所有任务后再执行 macrotask。</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>javascript运行机制原理 eventloop</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#一为什么javascript是单线程\">一、为什么JavaScript是单线程？</a></li>\n<li><a href=\"#二任务队列\">二、任务队列</a></li>\n<li><a href=\"#三事件和回调函数\">三、事件和回调函数</a></li>\n<li><a href=\"#四event-loop\">四、Event Loop</a></li>\n<li><a href=\"#五定时器\">五、定时器</a></li>\n<li><a href=\"#六nodejs的event-loop\">六、Node.js的Event Loop</a></li>\n</ul>\n</li>\n<li><a href=\"#面试题\">面试题</a></li>\n<li><a href=\"#小结\">小结</a><ul>\n<li><a href=\"#javascript的运行机制\">JavaScript的运行机制</a></li>\n<li><a href=\"#microtasks-macrotasks\">Microtasks Macrotasks</a></li>\n</ul>\n</li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"一、为什么JavaScript是单线程？\"><a href=\"#一、为什么JavaScript是单线程？\" class=\"headerlink\" title=\"一、为什么JavaScript是单线程？\"></a>一、为什么JavaScript是单线程？</h3><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。<br>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。<br>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>\n<h3 id=\"二、任务队列\"><a href=\"#二、任务队列\" class=\"headerlink\" title=\"二、任务队列\"></a>二、任务队列</h3><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。<br>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。<br>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p>\n<pre><code>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。\n（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n（4）主线程不断重复上面的第三步。\n</code></pre><p>下图就是主线程和任务队列的示意图。</p>\n<p><img src=\"/imgs/javascript/bg2014100801.jpg\" alt=\"\"></p>\n<p>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</p>\n<h3 id=\"三、事件和回调函数\"><a href=\"#三、事件和回调函数\" class=\"headerlink\" title=\"三、事件和回调函数\"></a>三、事件和回调函数</h3><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。<br>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。<br>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。<br>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p>\n<h3 id=\"四、Event-Loop\"><a href=\"#四、Event-Loop\" class=\"headerlink\" title=\"四、Event Loop\"></a>四、Event Loop</h3><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p>\n<p>为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲<a href=\"http://vimeo.com/96425312\" target=\"_blank\" rel=\"noopener\">《Help, I’m stuck in an event-loop》</a>）。</p>\n<p><img src=\"/imgs/javascript/bg2014100802.png\" alt=\"\"></p>\n<p>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。<br>执行栈中的代码（同步任务），总是在读取”任务队列”（异步任务）之前执行。请看下面这个例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">req.open(<span class=\"string\">'GET'</span>, url);    </span><br><span class=\"line\">req.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;    </span><br><span class=\"line\">req.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;    </span><br><span class=\"line\">req.send();</span><br></pre></td></tr></table></figure>\n<p>上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取”任务队列”。所以，它与下面的写法等价。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">req.open(<span class=\"string\">'GET'</span>, url);</span><br><span class=\"line\">req.send();</span><br><span class=\"line\">req.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;    </span><br><span class=\"line\">req.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>也就是说，指定回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取”任务队列”。</p>\n<h3 id=\"五、定时器\"><a href=\"#五、定时器\" class=\"headerlink\" title=\"五、定时器\"></a>五、定时器</h3><p>除了放置异步任务的事件，”任务队列”还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做”定时器”（timer）功能，也就是定时执行的代码。<br>定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。</p>\n<p>setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。</p>\n<p>如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行”任务队列”中的回调函数。<br>总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在”任务队列”的尾部添加一个事件，因此要等到同步任务和”任务队列”现有的事件都处理完，才会得到执行。<br>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。<br>需要注意的是，setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<h3 id=\"六、Node-js的Event-Loop\"><a href=\"#六、Node-js的Event-Loop\" class=\"headerlink\" title=\"六、Node.js的Event Loop\"></a>六、Node.js的Event Loop</h3><p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。<br>请看下面的示意图（作者<a href=\"https://twitter.com/BusyRich/status/494959181871316992\" target=\"_blank\" rel=\"noopener\">@BusyRich</a>)。</p>\n<p><img src=\"/imgs/javascript/bg2014100803.png\" alt=\"\"></p>\n<p>根据上图，Node.js的运行机制如下。</p>\n<pre><code>（1）V8引擎解析JavaScript脚本。\n（2）解析后的代码，调用Node API。\n（3）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。\n（4）V8引擎再将结果返回给用户。\n</code></pre><p>除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与”任务队列”有关的方法：process.nextTick和setImmediate。它们可以帮助我们加深对”任务队列”的理解。</p>\n<p>process.nextTick方法可以在当前”执行栈”的尾部—-下一次Event Loop（主线程读取”任务队列”）之前—-触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate方法则是在当前”任务队列”的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子（via StackOverflow）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'TIMEOUT FIRED'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// TIMEOUT FIRED</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。</p>\n<p>现在，再看setImmediate。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'TIMEOUT FIRED'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1–TIMEOUT FIRED–2，也可能是TIMEOUT FIRED–1–2。<br>令人困惑的是，Node.js文档中称，setImmediate指定的回调函数，总是排在setTimeout前面。实际上，这种情况只发生在递归调用的时候。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'TIMEOUT FIRED'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// TIMEOUT FIRED</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setImmediate和setTimeout被封装在一个setImmediate里面，它的运行结果总是1–TIMEOUT FIRED–2，这时函数A一定在timeout前面触发。至于2排在TIMEOUT FIRED的后面（即函数B在timeout后面触发），是因为setImmediate总是将事件注册到下一轮Event Loop，所以函数A和timeout是在同一轮Loop执行，而函数B在下一轮Loop执行。</p>\n<p>我们由此得到了process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前”执行栈”一次执行完，多个setImmediate可能则需要多次loop才能执行完。事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取”事件队列”！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  process.nextTick(foo);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>事实上，现在要是你写出递归的process.nextTick，Node.js会抛出一个警告，要求你改成setImmediate。<br>另外，由于process.nextTick指定的回调函数是在本次”事件循环”触发，而setImmediate指定的是在下次”事件循环”触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查”任务队列”）。</p>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>说出下列代码的执行结果：</p>\n<p>面试题1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果：2，1</span></span><br></pre></td></tr></table></figure>\n<p>面试题2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>); &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">      i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//打印结果：1,2,3,5,4</span></span><br></pre></td></tr></table></figure>\n<p>面试题3</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数仅在 Node.js 环境下可以使用</span></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'process.nextTick1'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'process.nextTick2'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise then'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// main1</span></span><br><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"comment\">// main2</span></span><br><span class=\"line\"><span class=\"comment\">// process.nextTick1</span></span><br><span class=\"line\"><span class=\"comment\">// promise then</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// process.nextTick2</span></span><br></pre></td></tr></table></figure>\n<p>简单来讲，整体的js代码这个macrotask先执行，同步代码执行完后有microtask执行microtask，没有microtask执行下一个macrotask，如此往复循环至结束</p>\n<p><img src=\"/imgs/javascript/eventloop.png\" alt=\"一步一步执行EventLoop顺序图\"></p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"JavaScript的运行机制\"><a href=\"#JavaScript的运行机制\" class=\"headerlink\" title=\"JavaScript的运行机制\"></a>JavaScript的运行机制</h3><p>同步任务（synchronous）和异步任务（asynchronous）</p>\n<p>同步任务：<br>在主线程上排队执行的任务，前一个任务执行完毕，才能执行后一个任务；</p>\n<p>异步任务：<br>不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>\n<p>总之：<br>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制</p>\n<h3 id=\"Microtasks-Macrotasks\"><a href=\"#Microtasks-Macrotasks\" class=\"headerlink\" title=\"Microtasks Macrotasks\"></a>Microtasks Macrotasks</h3><p>任务队列不止一个，还有 microtasks 和 macrotasks</p>\n<p><strong><em> microtasks: </em></strong></p>\n<ul>\n<li>process.nextTick</li>\n<li>promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n<p><strong><em> macrotasks: </em></strong></p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI rending 渲染  </li>\n</ul>\n<p><img src=\"/imgs/javascript/macrotask-microtask.jpg\" alt=\"两者之间的关系图\"></p>\n<p>whatwg规范：<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\" target=\"_blank\" rel=\"noopener\">https://html.spec.whatwg.org/multipage/webappapis.html#task-queue</a></p>\n<ul>\n<li>一个事件循环(event loop)会有一个或多个任务队列(task queue)</li>\n<li>task queue 就是 macrotask queue</li>\n<li>每一个 event loop 都有一个 microtask queue</li>\n<li>task queue == macrotask queue != microtask queue</li>\n<li>一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue 中</li>\n</ul>\n<p>理解了这些定义之后，再看执行原理：</p>\n<hr>\n<p><strong> 事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。</strong></p>\n<hr>\n<p>还要注意一点：</p>\n<pre><code>包裹在一个 script 标签中的js代码也是一个 task 确切说是 macrotask。\n</code></pre><p>您没看明白？再分解下：</p>\n<hr>\n<p>任务队列分为 macrotasks 和 microtasks，而Promise中的then方法的函数会被推入 microtasks 队列，而setTimeout的任务会被推入 macrotasks 队列。在每一次事件循环中，macrotask 只会提取一个执行，而 microtask 会一直提取，直到 microtasks 队列清空。</p>\n<p>注：一般情况下，macrotask queues 我们会直接称为 task queues，只有 microtask queues 才会特别指明。</p>\n<p>那么也就是说如果我的某个 microtask 任务又推入了一个任务进入 microtasks 队列，那么在主线程完成该任务之后，仍然会继续运行 microtasks 任务直到任务队列耗尽。</p>\n<p>而事件循环每次只会入栈一个 macrotask ，主线程执行完该任务后又会先检查 microtasks 队列并完成里面的所有任务后再执行 macrotask。</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"前端基础教程目录","p":"lesson/fe-start","date":"2017-02-05T00:29:59.000Z","_content":"\n## 前言\n\n本文整理收集前端基础知识教程系列，供自我学习。\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n前端基础进阶（一）：内存空间详细图解 https://www.jianshu.com/p/996671d4dcc4\n前端基础进阶（二）：执行上下文详细图解 https://www.jianshu.com/p/a6d37c77e8db\n前端基础进阶（三）：变量对象详解 https://www.jianshu.com/p/330b1505e41d\n前端基础进阶（四）：详细图解作用域链与闭包 https://www.jianshu.com/p/21a16d44f150\n前端基础进阶（五）：全方位解读this https://www.jianshu.com/p/d647aa6d1ae6\n前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包 https://www.jianshu.com/p/73122bb3d262\n前端基础进阶（七）：函数与函数式编程  https://www.jianshu.com/p/69dede6f7e5f\n前端基础进阶（八）：深入详解函数的柯里化 https://www.jianshu.com/p/5e1899fe7d6b\n前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 https://www.jianshu.com/p/15ac7393bc1f\n前端基础进阶（十）：面向对象实战之封装拖拽对象 https://www.jianshu.com/p/b3dee0e84454\n前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件 https://www.jianshu.com/p/3f97570d22b4\n前端基础进阶（十二）：深入核心，详解事件循环机制 https://www.jianshu.com/p/12b9f73c5a4f\n前端基础进阶（十三）：Promise使用详解 https://www.jianshu.com/p/fe5f173276bd\n前端基础进阶（十四）：ES6基础知识合集 https://www.jianshu.com/p/cfb0893c34f1\n前端基础进阶（十五）：详解 ES6 Modules https://www.jianshu.com/p/b7db6224a4aa\n我想这将是最有价值的react入门与进阶教程 https://www.jianshu.com/p/83bda9cd8c67\n\n\n\n## 小结\n\n[梧桐罗](https://yangbo5207.github.io/wutongluo/)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/lesson/fe-start.md","raw":"---\ntitle: 前端基础教程目录\ntags: [lesson,frontend,javascript,html,css]\np: lesson/fe-start\ndate: 2017-02-05 08:29:59\ncategories: lesson\n---\n\n## 前言\n\n本文整理收集前端基础知识教程系列，供自我学习。\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n\n前端基础进阶（一）：内存空间详细图解 https://www.jianshu.com/p/996671d4dcc4\n前端基础进阶（二）：执行上下文详细图解 https://www.jianshu.com/p/a6d37c77e8db\n前端基础进阶（三）：变量对象详解 https://www.jianshu.com/p/330b1505e41d\n前端基础进阶（四）：详细图解作用域链与闭包 https://www.jianshu.com/p/21a16d44f150\n前端基础进阶（五）：全方位解读this https://www.jianshu.com/p/d647aa6d1ae6\n前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包 https://www.jianshu.com/p/73122bb3d262\n前端基础进阶（七）：函数与函数式编程  https://www.jianshu.com/p/69dede6f7e5f\n前端基础进阶（八）：深入详解函数的柯里化 https://www.jianshu.com/p/5e1899fe7d6b\n前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 https://www.jianshu.com/p/15ac7393bc1f\n前端基础进阶（十）：面向对象实战之封装拖拽对象 https://www.jianshu.com/p/b3dee0e84454\n前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件 https://www.jianshu.com/p/3f97570d22b4\n前端基础进阶（十二）：深入核心，详解事件循环机制 https://www.jianshu.com/p/12b9f73c5a4f\n前端基础进阶（十三）：Promise使用详解 https://www.jianshu.com/p/fe5f173276bd\n前端基础进阶（十四）：ES6基础知识合集 https://www.jianshu.com/p/cfb0893c34f1\n前端基础进阶（十五）：详解 ES6 Modules https://www.jianshu.com/p/b7db6224a4aa\n我想这将是最有价值的react入门与进阶教程 https://www.jianshu.com/p/83bda9cd8c67\n\n\n\n## 小结\n\n[梧桐罗](https://yangbo5207.github.io/wutongluo/)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"lesson/fe-start","published":1,"updated":"2018-02-05T03:02:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3w002hfme3ace61jws","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理收集前端基础知识教程系列，供自我学习。</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>前端基础进阶（一）：内存空间详细图解 <a href=\"https://www.jianshu.com/p/996671d4dcc4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/996671d4dcc4</a><br>前端基础进阶（二）：执行上下文详细图解 <a href=\"https://www.jianshu.com/p/a6d37c77e8db\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a6d37c77e8db</a><br>前端基础进阶（三）：变量对象详解 <a href=\"https://www.jianshu.com/p/330b1505e41d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/330b1505e41d</a><br>前端基础进阶（四）：详细图解作用域链与闭包 <a href=\"https://www.jianshu.com/p/21a16d44f150\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/21a16d44f150</a><br>前端基础进阶（五）：全方位解读this <a href=\"https://www.jianshu.com/p/d647aa6d1ae6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d647aa6d1ae6</a><br>前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包 <a href=\"https://www.jianshu.com/p/73122bb3d262\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/73122bb3d262</a><br>前端基础进阶（七）：函数与函数式编程  <a href=\"https://www.jianshu.com/p/69dede6f7e5f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/69dede6f7e5f</a><br>前端基础进阶（八）：深入详解函数的柯里化 <a href=\"https://www.jianshu.com/p/5e1899fe7d6b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5e1899fe7d6b</a><br>前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 <a href=\"https://www.jianshu.com/p/15ac7393bc1f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/15ac7393bc1f</a><br>前端基础进阶（十）：面向对象实战之封装拖拽对象 <a href=\"https://www.jianshu.com/p/b3dee0e84454\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b3dee0e84454</a><br>前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件 <a href=\"https://www.jianshu.com/p/3f97570d22b4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3f97570d22b4</a><br>前端基础进阶（十二）：深入核心，详解事件循环机制 <a href=\"https://www.jianshu.com/p/12b9f73c5a4f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/12b9f73c5a4f</a><br>前端基础进阶（十三）：Promise使用详解 <a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe5f173276bd</a><br>前端基础进阶（十四）：ES6基础知识合集 <a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cfb0893c34f1</a><br>前端基础进阶（十五）：详解 ES6 Modules <a href=\"https://www.jianshu.com/p/b7db6224a4aa\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b7db6224a4aa</a><br>我想这将是最有价值的react入门与进阶教程 <a href=\"https://www.jianshu.com/p/83bda9cd8c67\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/83bda9cd8c67</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">梧桐罗</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理收集前端基础知识教程系列，供自我学习。</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>前端基础进阶（一）：内存空间详细图解 <a href=\"https://www.jianshu.com/p/996671d4dcc4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/996671d4dcc4</a><br>前端基础进阶（二）：执行上下文详细图解 <a href=\"https://www.jianshu.com/p/a6d37c77e8db\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a6d37c77e8db</a><br>前端基础进阶（三）：变量对象详解 <a href=\"https://www.jianshu.com/p/330b1505e41d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/330b1505e41d</a><br>前端基础进阶（四）：详细图解作用域链与闭包 <a href=\"https://www.jianshu.com/p/21a16d44f150\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/21a16d44f150</a><br>前端基础进阶（五）：全方位解读this <a href=\"https://www.jianshu.com/p/d647aa6d1ae6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d647aa6d1ae6</a><br>前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包 <a href=\"https://www.jianshu.com/p/73122bb3d262\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/73122bb3d262</a><br>前端基础进阶（七）：函数与函数式编程  <a href=\"https://www.jianshu.com/p/69dede6f7e5f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/69dede6f7e5f</a><br>前端基础进阶（八）：深入详解函数的柯里化 <a href=\"https://www.jianshu.com/p/5e1899fe7d6b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5e1899fe7d6b</a><br>前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 <a href=\"https://www.jianshu.com/p/15ac7393bc1f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/15ac7393bc1f</a><br>前端基础进阶（十）：面向对象实战之封装拖拽对象 <a href=\"https://www.jianshu.com/p/b3dee0e84454\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b3dee0e84454</a><br>前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件 <a href=\"https://www.jianshu.com/p/3f97570d22b4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3f97570d22b4</a><br>前端基础进阶（十二）：深入核心，详解事件循环机制 <a href=\"https://www.jianshu.com/p/12b9f73c5a4f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/12b9f73c5a4f</a><br>前端基础进阶（十三）：Promise使用详解 <a href=\"https://www.jianshu.com/p/fe5f173276bd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe5f173276bd</a><br>前端基础进阶（十四）：ES6基础知识合集 <a href=\"https://www.jianshu.com/p/cfb0893c34f1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cfb0893c34f1</a><br>前端基础进阶（十五）：详解 ES6 Modules <a href=\"https://www.jianshu.com/p/b7db6224a4aa\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b7db6224a4aa</a><br>我想这将是最有价值的react入门与进阶教程 <a href=\"https://www.jianshu.com/p/83bda9cd8c67\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/83bda9cd8c67</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">梧桐罗</a></p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"网络资源之前端","p":"links/fe","date":"2016-02-05T00:43:16.000Z","_content":"\n## 前言\n\n本文重点整理收藏网络资源链接\n\n<!--more-->\n\n## 正文\n\n### 个人博客组\n\n[梧桐罗-前端基础进阶](https://yangbo5207.github.io/wutongluo/)\n[志文工作室](https://lzw.me/cate/art/ued)\n[Jake Archibald](https://jakearchibald.com/)\n\n## 小结\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/links/fe.md","raw":"---\ntitle: 网络资源之前端\ntags: []\np: links/fe\ndate: 2016-02-05 08:43:16\ncategories: links\n---\n\n## 前言\n\n本文重点整理收藏网络资源链接\n\n<!--more-->\n\n## 正文\n\n### 个人博客组\n\n[梧桐罗-前端基础进阶](https://yangbo5207.github.io/wutongluo/)\n[志文工作室](https://lzw.me/cate/art/ued)\n[Jake Archibald](https://jakearchibald.com/)\n\n## 小结\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"links/fe","published":1,"updated":"2018-02-05T03:02:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3x002kfme3epf5802n","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文重点整理收藏网络资源链接</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"个人博客组\"><a href=\"#个人博客组\" class=\"headerlink\" title=\"个人博客组\"></a>个人博客组</h3><p><a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">梧桐罗-前端基础进阶</a><br><a href=\"https://lzw.me/cate/art/ued\" target=\"_blank\" rel=\"noopener\">志文工作室</a><br><a href=\"https://jakearchibald.com/\" target=\"_blank\" rel=\"noopener\">Jake Archibald</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文重点整理收藏网络资源链接</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"个人博客组\"><a href=\"#个人博客组\" class=\"headerlink\" title=\"个人博客组\"></a>个人博客组</h3><p><a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">梧桐罗-前端基础进阶</a><br><a href=\"https://lzw.me/cate/art/ued\" target=\"_blank\" rel=\"noopener\">志文工作室</a><br><a href=\"https://jakearchibald.com/\" target=\"_blank\" rel=\"noopener\">Jake Archibald</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"MAC OSX 配置PATH变量","p":"macos/setting-path","date":"2018-01-10T15:13:28.000Z","_content":"\n## 背景\n\n本文主要阐述macos设置环境变量的问题, \nmac 一般使用bash作为默认shell\n\nMac系统的环境变量，加载顺序为：\n    /etc/profile \n    /etc/paths \n    ~/.bash_profile \n    ~/.bash_login \n    ~/.profile \n    ~/.bashrc\n\n当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。\n\n<!--more-->\n\n## 详细介绍\n\n以下在MAC OSX Yosemite 10.10上测试可用\n在terminal中查看PATH变量的值\n\n    echo $PATH\n\n返回结果长成这个样子:(每个路径被冒号分割)\n\n    /Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin\n\n临时会话中修改PATH变量\n\n如果只是想在当前terminal的会话中临时修改PATH变量则可以\n\n    PATH=/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n\n持久修改PATH变量\n\n转到home目录 Home目录在哪里？ 在home目录中创建一个文件 .bash_profile\n\n    nano .bash_profile\n\n随后在其中加入\n\n    export PATH=/Users/Alex/.composer/vendor/bin:${PATH}\n\n重启terminal窗口后，再看看PATH变量就应该变了\n\n    echo $PATH\n\n    /Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n\n\n## 常用mac os命令\n\nMAC OS查看端口占用情况及杀死进程\n终端命令\nsudo lsof -i :9000\n\n然后根据PID杀进程：\nsudo kill -9 716\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/macos/setting-path.md","raw":"---\ntitle: MAC OSX 配置PATH变量\np: macos/setting-path\ndate: 2018-01-10 23:13:28\ntags: [macos,path]\ncategories: [macos]\n---\n\n## 背景\n\n本文主要阐述macos设置环境变量的问题, \nmac 一般使用bash作为默认shell\n\nMac系统的环境变量，加载顺序为：\n    /etc/profile \n    /etc/paths \n    ~/.bash_profile \n    ~/.bash_login \n    ~/.profile \n    ~/.bashrc\n\n当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。\n\n<!--more-->\n\n## 详细介绍\n\n以下在MAC OSX Yosemite 10.10上测试可用\n在terminal中查看PATH变量的值\n\n    echo $PATH\n\n返回结果长成这个样子:(每个路径被冒号分割)\n\n    /Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin\n\n临时会话中修改PATH变量\n\n如果只是想在当前terminal的会话中临时修改PATH变量则可以\n\n    PATH=/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n\n持久修改PATH变量\n\n转到home目录 Home目录在哪里？ 在home目录中创建一个文件 .bash_profile\n\n    nano .bash_profile\n\n随后在其中加入\n\n    export PATH=/Users/Alex/.composer/vendor/bin:${PATH}\n\n重启terminal窗口后，再看看PATH变量就应该变了\n\n    echo $PATH\n\n    /Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n\n\n## 常用mac os命令\n\nMAC OS查看端口占用情况及杀死进程\n终端命令\nsudo lsof -i :9000\n\n然后根据PID杀进程：\nsudo kill -9 716\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"macos/setting-path","published":1,"updated":"2018-01-23T02:31:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt3z002nfme34dqpkb6q","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文主要阐述macos设置环境变量的问题,<br>mac 一般使用bash作为默认shell</p>\n<p>Mac系统的环境变量，加载顺序为：<br>    /etc/profile<br>    /etc/paths<br>    ~/.bash_profile<br>    ~/.bash_login<br>    ~/.profile<br>    ~/.bashrc</p>\n<p>当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。</p>\n<a id=\"more\"></a>\n<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><p>以下在MAC OSX Yosemite 10.10上测试可用<br>在terminal中查看PATH变量的值</p>\n<pre><code>echo $PATH\n</code></pre><p>返回结果长成这个样子:(每个路径被冒号分割)</p>\n<pre><code>/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin\n</code></pre><p>临时会话中修改PATH变量</p>\n<p>如果只是想在当前terminal的会话中临时修改PATH变量则可以</p>\n<pre><code>PATH=/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n</code></pre><p>持久修改PATH变量</p>\n<p>转到home目录 Home目录在哪里？ 在home目录中创建一个文件 .bash_profile</p>\n<pre><code>nano .bash_profile\n</code></pre><p>随后在其中加入</p>\n<pre><code>export PATH=/Users/Alex/.composer/vendor/bin:${PATH}\n</code></pre><p>重启terminal窗口后，再看看PATH变量就应该变了</p>\n<pre><code>echo $PATH\n\n/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n</code></pre><h2 id=\"常用mac-os命令\"><a href=\"#常用mac-os命令\" class=\"headerlink\" title=\"常用mac os命令\"></a>常用mac os命令</h2><p>MAC OS查看端口占用情况及杀死进程<br>终端命令<br>sudo lsof -i :9000</p>\n<p>然后根据PID杀进程：<br>sudo kill -9 716</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文主要阐述macos设置环境变量的问题,<br>mac 一般使用bash作为默认shell</p>\n<p>Mac系统的环境变量，加载顺序为：<br>    /etc/profile<br>    /etc/paths<br>    ~/.bash_profile<br>    ~/.bash_login<br>    ~/.profile<br>    ~/.bashrc</p>\n<p>当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。</p>","more":"<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><p>以下在MAC OSX Yosemite 10.10上测试可用<br>在terminal中查看PATH变量的值</p>\n<pre><code>echo $PATH\n</code></pre><p>返回结果长成这个样子:(每个路径被冒号分割)</p>\n<pre><code>/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin\n</code></pre><p>临时会话中修改PATH变量</p>\n<p>如果只是想在当前terminal的会话中临时修改PATH变量则可以</p>\n<pre><code>PATH=/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n</code></pre><p>持久修改PATH变量</p>\n<p>转到home目录 Home目录在哪里？ 在home目录中创建一个文件 .bash_profile</p>\n<pre><code>nano .bash_profile\n</code></pre><p>随后在其中加入</p>\n<pre><code>export PATH=/Users/Alex/.composer/vendor/bin:${PATH}\n</code></pre><p>重启terminal窗口后，再看看PATH变量就应该变了</p>\n<pre><code>echo $PATH\n\n/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin\n</code></pre><h2 id=\"常用mac-os命令\"><a href=\"#常用mac-os命令\" class=\"headerlink\" title=\"常用mac os命令\"></a>常用mac os命令</h2><p>MAC OS查看端口占用情况及杀死进程<br>终端命令<br>sudo lsof -i :9000</p>\n<p>然后根据PID杀进程：<br>sudo kill -9 716</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"postgresql安装环境","p":"sql/postgresql-one","date":"2018-01-11T04:17:01.000Z","_content":"\n## 背景\n\n\n\n\n<!--more-->\n\n## 正文\n\n``` shell\nPeterMacBook:bin peter$ psql help\npsql: could not connect to server: No such file or directory\n\tIs the server running locally and accepting\n\tconnections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?\n\n\nPeterMacBook:bin peter$ ps -ef | grep postmaster\n  501 46892 46159   0 12:01下午 ttys001    0:00.00 grep postmaster\n\n\nPeterMacBook:10.1 peter$ brew services start postgres\n==> Tapping homebrew/services\nCloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 14 (delta 0), reused 9 (delta 0), pack-reused 0\nUnpacking objects: 100% (14/14), done.\nChecking connectivity... done.\nTapped 0 formulae (42 files, 55.2KB)\n==> Successfully started `postgresql` (label: homebrew.mxcl.postgresql)\nPeterMacBook:10.1 peter$ \n  \nPeterMacBook:10.1 peter$ ps -ef|grep psql\n  501 47471 46159   0 12:19下午 ttys001    0:00.00 grep psql\n\n```\n\n## 解决方案\n``` shell\nbrew services start postgresql\nbrew services stop postgresql\n```\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/sql/postgresql-one.md","raw":"---\ntitle: postgresql安装环境\np: sql/postgresql-one\ndate: 2018-01-11 12:17:01\ntags: [sql,postgresql,pg]\ncategories: SQL\n---\n\n## 背景\n\n\n\n\n<!--more-->\n\n## 正文\n\n``` shell\nPeterMacBook:bin peter$ psql help\npsql: could not connect to server: No such file or directory\n\tIs the server running locally and accepting\n\tconnections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?\n\n\nPeterMacBook:bin peter$ ps -ef | grep postmaster\n  501 46892 46159   0 12:01下午 ttys001    0:00.00 grep postmaster\n\n\nPeterMacBook:10.1 peter$ brew services start postgres\n==> Tapping homebrew/services\nCloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 14 (delta 0), reused 9 (delta 0), pack-reused 0\nUnpacking objects: 100% (14/14), done.\nChecking connectivity... done.\nTapped 0 formulae (42 files, 55.2KB)\n==> Successfully started `postgresql` (label: homebrew.mxcl.postgresql)\nPeterMacBook:10.1 peter$ \n  \nPeterMacBook:10.1 peter$ ps -ef|grep psql\n  501 47471 46159   0 12:19下午 ttys001    0:00.00 grep psql\n\n```\n\n## 解决方案\n``` shell\nbrew services start postgresql\nbrew services stop postgresql\n```\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"sql/postgresql-one","published":1,"updated":"2018-01-11T04:21:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt40002pfme30aqwvsws","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PeterMacBook:bin peter$ psql help</span><br><span class=\"line\">psql: could not connect to server: No such file or directory</span><br><span class=\"line\">\tIs the server running locally and accepting</span><br><span class=\"line\">\tconnections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PeterMacBook:bin peter$ ps -ef | grep postmaster</span><br><span class=\"line\">  501 46892 46159   0 12:01下午 ttys001    0:00.00 grep postmaster</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PeterMacBook:10.1 peter$ brew services start postgres</span><br><span class=\"line\">==&gt; Tapping homebrew/services</span><br><span class=\"line\">Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...</span><br><span class=\"line\">remote: Counting objects: 14, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (10/10), done.</span><br><span class=\"line\">remote: Total 14 (delta 0), reused 9 (delta 0), pack-reused 0</span><br><span class=\"line\">Unpacking objects: 100% (14/14), done.</span><br><span class=\"line\">Checking connectivity... done.</span><br><span class=\"line\">Tapped 0 formulae (42 files, 55.2KB)</span><br><span class=\"line\">==&gt; Successfully started `postgresql` (label: homebrew.mxcl.postgresql)</span><br><span class=\"line\">PeterMacBook:10.1 peter$ </span><br><span class=\"line\">  </span><br><span class=\"line\">PeterMacBook:10.1 peter$ ps -ef|grep psql</span><br><span class=\"line\">  501 47471 46159   0 12:19下午 ttys001    0:00.00 grep psql</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start postgresql</span><br><span class=\"line\">brew services stop postgresql</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PeterMacBook:bin peter$ psql help</span><br><span class=\"line\">psql: could not connect to server: No such file or directory</span><br><span class=\"line\">\tIs the server running locally and accepting</span><br><span class=\"line\">\tconnections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PeterMacBook:bin peter$ ps -ef | grep postmaster</span><br><span class=\"line\">  501 46892 46159   0 12:01下午 ttys001    0:00.00 grep postmaster</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PeterMacBook:10.1 peter$ brew services start postgres</span><br><span class=\"line\">==&gt; Tapping homebrew/services</span><br><span class=\"line\">Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...</span><br><span class=\"line\">remote: Counting objects: 14, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (10/10), done.</span><br><span class=\"line\">remote: Total 14 (delta 0), reused 9 (delta 0), pack-reused 0</span><br><span class=\"line\">Unpacking objects: 100% (14/14), done.</span><br><span class=\"line\">Checking connectivity... done.</span><br><span class=\"line\">Tapped 0 formulae (42 files, 55.2KB)</span><br><span class=\"line\">==&gt; Successfully started `postgresql` (label: homebrew.mxcl.postgresql)</span><br><span class=\"line\">PeterMacBook:10.1 peter$ </span><br><span class=\"line\">  </span><br><span class=\"line\">PeterMacBook:10.1 peter$ ps -ef|grep psql</span><br><span class=\"line\">  501 47471 46159   0 12:19下午 ttys001    0:00.00 grep psql</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start postgresql</span><br><span class=\"line\">brew services stop postgresql</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"小程序开发之入门基础知识","p":"miniapp/how-to-study","date":"2018-02-08T01:07:52.000Z","_content":"\n## 前言\n\n公司开始大力推广微信小程序，由于有过小程序的开发经验，自当起到带头作用，承担起学习引入人的作用。\n本文主要是适合基础无前端开发经验人群，有意向开发微信小程序的伙伴阅读。\n所有内容来自互联网和自我读后感，有任何差错，请忽略....\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [01. 小程序之入门篇](#01-小程序之入门篇)\n    - [02. 小程序之目录结构](#02-小程序之目录结构)\n    - [03. 小程序之生命周期](#03-小程序之生命周期)\n    - [04. 小程序之数据绑定](#04-小程序之数据绑定)\n    - [05. 小程序之触控事件](#05-小程序之触控事件)\n    - [06. 小程序之基础组件篇之视图容器](#06-小程序之基础组件篇之视图容器)\n    - [07. 小程序之基础组件篇之基础内容](#07-小程序之基础组件篇之基础内容)\n    - [08. 小程序之基础组件篇之表单组件](#08-小程序之基础组件篇之表单组件)\n    - [09. 小程序之基础组件篇之导航组件](#09-小程序之基础组件篇之导航组件)\n    - [10. 小程序之其它组件](#10-小程序之其它组件)\n    - [11. 小程序之拓展篇之调试工具](#11-小程序之拓展篇之调试工具)\n    - [12. 小程序之拓展篇之样式库weui-wxss](#12-小程序之拓展篇之样式库weui-wxss)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n其实入门教程系列，再好也比不了[官方文档](https://mp.weixin.qq.com/)，写的很全，向导也很到位，但是就当写读后感，再提炼下吧。\n\n心急吃不了豆腐，但是，还是先尝试Hello World开发吧。\n\n\n### 01. 小程序之入门篇\n\n*** 环境搭建 ***\n首先跳入[简易教程](https://mp.weixin.qq.com/debug/wxadoc/dev/index.html)，根据向导走一遍流程，我们通过开发者工具快速创建了一个 QuickStart 项目，这里完全靠官方文档走一遍，是不是很轻松？\n\n\n*** 项目配置 ***\n接下来，我们讲一讲小程序的代码构成要素： [官方资料](https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/file.html)\n\n![配置文件图](/imgs/miniapp/miniapp-fileintro.png)\n\n*** JSON配置 ***\n这里主要有 \n- app.json\n- project.config.json\n- page.json\n\n*** app.json *** 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。\n其他配置项细节可以参考文档 [小程序的配置 app.json](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html)\n\n![app.json配置项列表](/imgs/miniapp/miniapp-app-config.png)\n\n*** 工具配置 project.config.json *** 其他配置项细节可以参考文档 [开发者工具的配置](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/edit.html#%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n\n*** 页面配置 page.json *** 其他配置项细节可以参考文档 [小程序的配置 page.json](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html)\n\n*****************************\n\n### 02. 小程序之目录结构\n\n框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。\n\n- JSON配置\n- WXML模版\n- WXSS样式\n- JS逻辑交互\n\nMVVM\n![MVVM](/imgs/miniapp/miniapp-mvvm1.png)\n\n*****************************\n\n\n### 03. 小程序之生命周期\n\n小程序生命周期\n- APP生命周期\n- 页面生命周期\n*****************************\n*** APP生命周期示例 ***\n\n``` JS \nApp({\n  onLaunch: function(options) {\n    // Do something initial when launch.\n  },\n  onShow: function(options) {\n      // Do something when show.\n  },\n  onHide: function() {\n      // Do something when hide.\n  },\n  onError: function(msg) {\n    console.log(msg)\n  },\n  globalData: 'I am global data'\n})\n```\n*****************************\n*** 页面生命周期示例 ***\n\n``` JS\n//index.js  \nPage({\n  data: {\n    text: \"This is page data.\"\n  },\n  onLoad: function(options) {\n    // Do some initialize when page load.\n  },\n  onReady: function() {\n    // Do something when page ready.\n  },\n  onShow: function() {\n    // Do something when page show.\n  },\n  onHide: function() {\n    // Do something when page hide.\n  },\n  onUnload: function() {\n    // Do something when page close.\n  },\n  onPullDownRefresh: function() {\n    // Do something when pull down.\n  },\n  onReachBottom: function() {\n    // Do something when page reach bottom.\n  },\n  onShareAppMessage: function () {\n   // return custom share data when user share.\n  },\n  onPageScroll: function() {\n    // Do something when page scroll\n  },\n  onTabItemTap(item) {\n    console.log(item.index)\n    console.log(item.pagePath)\n    console.log(item.text)\n  },\n  // Event handler.\n  viewTap: function() {\n    this.setData({\n      text: 'Set some data for updating view.'\n    }, function() {\n      // this is setData callback\n    })\n  },\n  customData: {\n    hi: 'MINA'\n  }\n})\n```\n*****************************\n\n### 04. 小程序之数据绑定\n\n*** 数据传值 ***\n\n- 页面内\n- 页面与页面之间\n- 父组件与子组件之间\n\n*****************************\n\n![视图驱动视图更新](/imgs/miniapp/miniapp-mvvm2.png)\n\n简单的讲，对象状态化，只要对象状态发送变化，就通知页面更新视图元素。 通过以下三个步骤实现：\n\n- 识别哪个UI元素被绑定了相应的对象。\n- 监视对象状态的变化。\n- 将所有变化传播到绑定的视图上。\n\n  注意数据流向是单向的，即视图变化不会影响对象状态。\n\n以下将展示小程序提供的更加多元化的复杂的数据绑定方式。\n``` JS\nindex.wxml\n<!--数据绑定--内容-->\n<view>{{message}}</view>\n\n<!--数据绑定--组件属性-->\n<view id=\"item-{{id}}\">组件属性id-{{id}}</view>\n\n<!--数据绑定---控制属性-->\n<view wx:if=\"{{condition}}\">控制属性{{condition}}</view>\n\n<!--数据绑定---三元运算-->\n<view hidden=\"{{flag ? true : false}}\">Hidden--{{flag}}</view>\n\n<!--数据绑定---算数运算-->\n<view>{{a + b}} + {{c}} + d</view>\n\n<!--数据绑定---逻辑判断-->\n<view wx:if=\"{{length > 5}}\">6</view>\n\n<!--数据绑定---字符串运算-->\n<view>{{\"Hello  \" + name}}</view>\n\n<!--数据绑定---数组组合-->\n<view wx:for=\"{{[zero, 1, 2, 3, 4, 5, 6]}}\">{{item}}</view>\n\n<!--数据绑定---对象-->\n<!--最终组合成的对象是{for: 1, bar: 2}-->\n<template is=\"objectCombine\" data=\"{{for: x, bar: y}}\"></template>\n\n<!--数据绑定---扩展运算符 ... 来将一个对象展开-->\n<!--最终组合成的对象是{a: 1, b: 2, c: 3, d: 4, e: 5}-->\n<template is=\"objectCombine\" data=\"{{...obj1, ...obj2, e: 5}}\"></template>\n\n<!--数据绑定---对象的 key 和 value 相同-->\n<!--最终组合成的对象是{foo: 'my-foo', bar:'my-bar'}-->\n<template is=\"objectCombine\" data=\"{{foo, bar}}\"></template>\n```\n\n对应的逻辑层代码如下:\n\n``` JS\nindex.js\nPage({\n  data:{\n    //内容\n    message:'Hello MINA!',\n    //组件属性\n    id: 0,\n    //控制属性\n    condition: true,\n    //三元运算\n    flag:false,\n    //算数运算\n    a: 1,\n    b: 2,\n    c: 3,\n    //逻辑判断\n    length: 6,\n    //字符串运算\n    name: 'MINA',\n    //数组组合\n    zero: 0,\n    //对象\n    x: 0,\n    y: 1,\n    //对象展开\n    obj1: {\n        a: 1,\n        b: 2\n    },\n    obj2: {\n        c: 3,\n        d: 4\n    },\n    e: 5,\n    //对象key和value相同\n    foo: 'my-foo',\n    bar: 'my-bar'\n  },\n})\n```\n\n所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态。调用this.setData（）方法实现视图的部分渲染。如下图：\n![视图-对象](/imgs/miniapp/miniapp-view-object.png)\n\n### 05. 小程序之触控事件\n主要是页面交互事件的处理\n[官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html)\n\n### 06. 小程序之基础组件篇之视图容器\n\n视图容器组件主要有：\n- view\n- scroll-view\n- swiper\n- movable-view\n- cover-view\n\n[官方文档之视图容器](https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html)\n\n*** WXML模版 ***\nWXML(WeiXin Markup Language), [语法介绍](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/)\n\n视图层\n- 数据绑定\n- 条件渲染\n- 列表渲染\n- 事件\n\n*** WXSS样式 ***\n小程序布局\n\n*** CSS盒子布局 ***\n布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。\n它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n![css盒子模型](/imgs/css/css-box.png)\n\n*** 弹性盒子Flex布局 ***\nFlex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 \n[Flex布局示例](https://github.com/taoqianbao/tqb-miniapp-flex)\n\n*** Tips:CSS样式的优先级 ***\n选择器的优先权:\n（外部样式）External style sheet <（内部样式）Internal style sheet <（内联样式）Inline style\n\n计算规则：\n1.  内联样式表的权值最高 1000\n2.  ID 选择器的权值为 100\n3.  Class 类选择器的权值为 10\n4.  HTML 标签选择器的权值为 1\n\nTips:\nCSS 优先级法则:\n    A  选择器都有一个权值，权值越大越优先；\n    B  当权值相等时，后出现的样式表设置要优于先出现的样式表设置；\n    C  创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；\n    D  继承的CSS 样式不如后来指定的CSS 样式；\n    E  在同一组属性设置中标有“!important”规则的优先级最大\n\n**************************\n\n\n### 07. 小程序之基础组件篇之基础内容\n基础组件：icon,text,rich-text,progress\n[官方文档之基础内容篇](https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html)\n\n### 08. 小程序之基础组件篇之表单组件\n表单组件：button,checkbox,form,input,label,picker,picker-view,radio,slider,switch,textarea\n[官方文档之表单组件篇](https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html)\n\n### 09. 小程序之基础组件篇之导航组件\n[官方文档之页面导航](https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html)\n\n[官方文档之页面路由](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html)\n\n页面路由\n在小程序中所有页面的路由全部由框架进行管理。\n\n主要了解的概念：\n- 页面栈\n- getCurrentPages()\n- 路由方式：\n\n[页面路由示例代码下载](https://github.com/taoqianbao/tqb-miniapp-guide-route)\n![示例图](/imgs/miniapp/miniapp-route-demo.png)\n\nTips:\n- navigateTo, redirectTo 只能打开非 tabBar 页面。\n- switchTab 只能打开 tabBar 页面。\n- reLaunch 可以打开任意页面。\n- 页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。\n- 调用页面路由带的参数可以在目标页面的onLoad中获取。\n\n\n### 10. 小程序之其它组件\n主要有：媒体组件、地图、画布、其它开放能力\n\n\n### 11. 小程序之拓展篇之调试工具\n如何调试小程序，在开发过程中至关重要，下面图就是：\n\n主要有三种调试工具：\n1. 小程序开发工具\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug1.png)\n\n2. 手机端调试窗口：\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug2.jpeg)\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug3.jpeg)\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug4.jpeg)\n\n3. 抓包工具 charles等 \n\n*****************************\n### 12. 小程序之拓展篇之样式库weui-wxss\n[样式框架](https://github.com/Tencent/weui-wxss)\n\n\n*****************************\n\n\n## 小结\n到此，您对项目还有哪些问题吗？\n\n以下是整理的资源:\n\n[官方开发文档](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n - [页面路由官网资料](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html)\n\n\n学习资料\n - [样式优选级](http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html)\n - [flex布局语法](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool)\n - [flex布局实战](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n\n\n[开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html)\n\n示例代码\n - [页面路由示例代码下载](https://github.com/taoqianbao/tqb-miniapp-guide-route)\n - [页面布局示例代码下载](https://github.com/taoqianbao/tqb-miniapp-flex)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/miniapp/how-to-study.md","raw":"---\ntitle: 小程序开发之入门基础知识\ntags: [小程序]\np: miniapp/how-to-study\ndate: 2018-02-08 09:07:52\ncategories: 小程序\n---\n\n## 前言\n\n公司开始大力推广微信小程序，由于有过小程序的开发经验，自当起到带头作用，承担起学习引入人的作用。\n本文主要是适合基础无前端开发经验人群，有意向开发微信小程序的伙伴阅读。\n所有内容来自互联网和自我读后感，有任何差错，请忽略....\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n    - [01. 小程序之入门篇](#01-小程序之入门篇)\n    - [02. 小程序之目录结构](#02-小程序之目录结构)\n    - [03. 小程序之生命周期](#03-小程序之生命周期)\n    - [04. 小程序之数据绑定](#04-小程序之数据绑定)\n    - [05. 小程序之触控事件](#05-小程序之触控事件)\n    - [06. 小程序之基础组件篇之视图容器](#06-小程序之基础组件篇之视图容器)\n    - [07. 小程序之基础组件篇之基础内容](#07-小程序之基础组件篇之基础内容)\n    - [08. 小程序之基础组件篇之表单组件](#08-小程序之基础组件篇之表单组件)\n    - [09. 小程序之基础组件篇之导航组件](#09-小程序之基础组件篇之导航组件)\n    - [10. 小程序之其它组件](#10-小程序之其它组件)\n    - [11. 小程序之拓展篇之调试工具](#11-小程序之拓展篇之调试工具)\n    - [12. 小程序之拓展篇之样式库weui-wxss](#12-小程序之拓展篇之样式库weui-wxss)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n其实入门教程系列，再好也比不了[官方文档](https://mp.weixin.qq.com/)，写的很全，向导也很到位，但是就当写读后感，再提炼下吧。\n\n心急吃不了豆腐，但是，还是先尝试Hello World开发吧。\n\n\n### 01. 小程序之入门篇\n\n*** 环境搭建 ***\n首先跳入[简易教程](https://mp.weixin.qq.com/debug/wxadoc/dev/index.html)，根据向导走一遍流程，我们通过开发者工具快速创建了一个 QuickStart 项目，这里完全靠官方文档走一遍，是不是很轻松？\n\n\n*** 项目配置 ***\n接下来，我们讲一讲小程序的代码构成要素： [官方资料](https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/file.html)\n\n![配置文件图](/imgs/miniapp/miniapp-fileintro.png)\n\n*** JSON配置 ***\n这里主要有 \n- app.json\n- project.config.json\n- page.json\n\n*** app.json *** 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。\n其他配置项细节可以参考文档 [小程序的配置 app.json](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html)\n\n![app.json配置项列表](/imgs/miniapp/miniapp-app-config.png)\n\n*** 工具配置 project.config.json *** 其他配置项细节可以参考文档 [开发者工具的配置](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/edit.html#%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n\n*** 页面配置 page.json *** 其他配置项细节可以参考文档 [小程序的配置 page.json](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html)\n\n*****************************\n\n### 02. 小程序之目录结构\n\n框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。\n\n- JSON配置\n- WXML模版\n- WXSS样式\n- JS逻辑交互\n\nMVVM\n![MVVM](/imgs/miniapp/miniapp-mvvm1.png)\n\n*****************************\n\n\n### 03. 小程序之生命周期\n\n小程序生命周期\n- APP生命周期\n- 页面生命周期\n*****************************\n*** APP生命周期示例 ***\n\n``` JS \nApp({\n  onLaunch: function(options) {\n    // Do something initial when launch.\n  },\n  onShow: function(options) {\n      // Do something when show.\n  },\n  onHide: function() {\n      // Do something when hide.\n  },\n  onError: function(msg) {\n    console.log(msg)\n  },\n  globalData: 'I am global data'\n})\n```\n*****************************\n*** 页面生命周期示例 ***\n\n``` JS\n//index.js  \nPage({\n  data: {\n    text: \"This is page data.\"\n  },\n  onLoad: function(options) {\n    // Do some initialize when page load.\n  },\n  onReady: function() {\n    // Do something when page ready.\n  },\n  onShow: function() {\n    // Do something when page show.\n  },\n  onHide: function() {\n    // Do something when page hide.\n  },\n  onUnload: function() {\n    // Do something when page close.\n  },\n  onPullDownRefresh: function() {\n    // Do something when pull down.\n  },\n  onReachBottom: function() {\n    // Do something when page reach bottom.\n  },\n  onShareAppMessage: function () {\n   // return custom share data when user share.\n  },\n  onPageScroll: function() {\n    // Do something when page scroll\n  },\n  onTabItemTap(item) {\n    console.log(item.index)\n    console.log(item.pagePath)\n    console.log(item.text)\n  },\n  // Event handler.\n  viewTap: function() {\n    this.setData({\n      text: 'Set some data for updating view.'\n    }, function() {\n      // this is setData callback\n    })\n  },\n  customData: {\n    hi: 'MINA'\n  }\n})\n```\n*****************************\n\n### 04. 小程序之数据绑定\n\n*** 数据传值 ***\n\n- 页面内\n- 页面与页面之间\n- 父组件与子组件之间\n\n*****************************\n\n![视图驱动视图更新](/imgs/miniapp/miniapp-mvvm2.png)\n\n简单的讲，对象状态化，只要对象状态发送变化，就通知页面更新视图元素。 通过以下三个步骤实现：\n\n- 识别哪个UI元素被绑定了相应的对象。\n- 监视对象状态的变化。\n- 将所有变化传播到绑定的视图上。\n\n  注意数据流向是单向的，即视图变化不会影响对象状态。\n\n以下将展示小程序提供的更加多元化的复杂的数据绑定方式。\n``` JS\nindex.wxml\n<!--数据绑定--内容-->\n<view>{{message}}</view>\n\n<!--数据绑定--组件属性-->\n<view id=\"item-{{id}}\">组件属性id-{{id}}</view>\n\n<!--数据绑定---控制属性-->\n<view wx:if=\"{{condition}}\">控制属性{{condition}}</view>\n\n<!--数据绑定---三元运算-->\n<view hidden=\"{{flag ? true : false}}\">Hidden--{{flag}}</view>\n\n<!--数据绑定---算数运算-->\n<view>{{a + b}} + {{c}} + d</view>\n\n<!--数据绑定---逻辑判断-->\n<view wx:if=\"{{length > 5}}\">6</view>\n\n<!--数据绑定---字符串运算-->\n<view>{{\"Hello  \" + name}}</view>\n\n<!--数据绑定---数组组合-->\n<view wx:for=\"{{[zero, 1, 2, 3, 4, 5, 6]}}\">{{item}}</view>\n\n<!--数据绑定---对象-->\n<!--最终组合成的对象是{for: 1, bar: 2}-->\n<template is=\"objectCombine\" data=\"{{for: x, bar: y}}\"></template>\n\n<!--数据绑定---扩展运算符 ... 来将一个对象展开-->\n<!--最终组合成的对象是{a: 1, b: 2, c: 3, d: 4, e: 5}-->\n<template is=\"objectCombine\" data=\"{{...obj1, ...obj2, e: 5}}\"></template>\n\n<!--数据绑定---对象的 key 和 value 相同-->\n<!--最终组合成的对象是{foo: 'my-foo', bar:'my-bar'}-->\n<template is=\"objectCombine\" data=\"{{foo, bar}}\"></template>\n```\n\n对应的逻辑层代码如下:\n\n``` JS\nindex.js\nPage({\n  data:{\n    //内容\n    message:'Hello MINA!',\n    //组件属性\n    id: 0,\n    //控制属性\n    condition: true,\n    //三元运算\n    flag:false,\n    //算数运算\n    a: 1,\n    b: 2,\n    c: 3,\n    //逻辑判断\n    length: 6,\n    //字符串运算\n    name: 'MINA',\n    //数组组合\n    zero: 0,\n    //对象\n    x: 0,\n    y: 1,\n    //对象展开\n    obj1: {\n        a: 1,\n        b: 2\n    },\n    obj2: {\n        c: 3,\n        d: 4\n    },\n    e: 5,\n    //对象key和value相同\n    foo: 'my-foo',\n    bar: 'my-bar'\n  },\n})\n```\n\n所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态。调用this.setData（）方法实现视图的部分渲染。如下图：\n![视图-对象](/imgs/miniapp/miniapp-view-object.png)\n\n### 05. 小程序之触控事件\n主要是页面交互事件的处理\n[官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html)\n\n### 06. 小程序之基础组件篇之视图容器\n\n视图容器组件主要有：\n- view\n- scroll-view\n- swiper\n- movable-view\n- cover-view\n\n[官方文档之视图容器](https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html)\n\n*** WXML模版 ***\nWXML(WeiXin Markup Language), [语法介绍](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/)\n\n视图层\n- 数据绑定\n- 条件渲染\n- 列表渲染\n- 事件\n\n*** WXSS样式 ***\n小程序布局\n\n*** CSS盒子布局 ***\n布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。\n它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n![css盒子模型](/imgs/css/css-box.png)\n\n*** 弹性盒子Flex布局 ***\nFlex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 \n[Flex布局示例](https://github.com/taoqianbao/tqb-miniapp-flex)\n\n*** Tips:CSS样式的优先级 ***\n选择器的优先权:\n（外部样式）External style sheet <（内部样式）Internal style sheet <（内联样式）Inline style\n\n计算规则：\n1.  内联样式表的权值最高 1000\n2.  ID 选择器的权值为 100\n3.  Class 类选择器的权值为 10\n4.  HTML 标签选择器的权值为 1\n\nTips:\nCSS 优先级法则:\n    A  选择器都有一个权值，权值越大越优先；\n    B  当权值相等时，后出现的样式表设置要优于先出现的样式表设置；\n    C  创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；\n    D  继承的CSS 样式不如后来指定的CSS 样式；\n    E  在同一组属性设置中标有“!important”规则的优先级最大\n\n**************************\n\n\n### 07. 小程序之基础组件篇之基础内容\n基础组件：icon,text,rich-text,progress\n[官方文档之基础内容篇](https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html)\n\n### 08. 小程序之基础组件篇之表单组件\n表单组件：button,checkbox,form,input,label,picker,picker-view,radio,slider,switch,textarea\n[官方文档之表单组件篇](https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html)\n\n### 09. 小程序之基础组件篇之导航组件\n[官方文档之页面导航](https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html)\n\n[官方文档之页面路由](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html)\n\n页面路由\n在小程序中所有页面的路由全部由框架进行管理。\n\n主要了解的概念：\n- 页面栈\n- getCurrentPages()\n- 路由方式：\n\n[页面路由示例代码下载](https://github.com/taoqianbao/tqb-miniapp-guide-route)\n![示例图](/imgs/miniapp/miniapp-route-demo.png)\n\nTips:\n- navigateTo, redirectTo 只能打开非 tabBar 页面。\n- switchTab 只能打开 tabBar 页面。\n- reLaunch 可以打开任意页面。\n- 页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。\n- 调用页面路由带的参数可以在目标页面的onLoad中获取。\n\n\n### 10. 小程序之其它组件\n主要有：媒体组件、地图、画布、其它开放能力\n\n\n### 11. 小程序之拓展篇之调试工具\n如何调试小程序，在开发过程中至关重要，下面图就是：\n\n主要有三种调试工具：\n1. 小程序开发工具\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug1.png)\n\n2. 手机端调试窗口：\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug2.jpeg)\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug3.jpeg)\n![小程序开发工具调试窗口](/imgs/miniapp/miniapp-debug4.jpeg)\n\n3. 抓包工具 charles等 \n\n*****************************\n### 12. 小程序之拓展篇之样式库weui-wxss\n[样式框架](https://github.com/Tencent/weui-wxss)\n\n\n*****************************\n\n\n## 小结\n到此，您对项目还有哪些问题吗？\n\n以下是整理的资源:\n\n[官方开发文档](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n - [页面路由官网资料](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html)\n\n\n学习资料\n - [样式优选级](http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html)\n - [flex布局语法](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool)\n - [flex布局实战](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n\n\n[开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html)\n\n示例代码\n - [页面路由示例代码下载](https://github.com/taoqianbao/tqb-miniapp-guide-route)\n - [页面布局示例代码下载](https://github.com/taoqianbao/tqb-miniapp-flex)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"miniapp/how-to-study","published":1,"updated":"2018-02-09T01:41:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt43002tfme3at2vrzvo","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>公司开始大力推广微信小程序，由于有过小程序的开发经验，自当起到带头作用，承担起学习引入人的作用。<br>本文主要是适合基础无前端开发经验人群，有意向开发微信小程序的伙伴阅读。<br>所有内容来自互联网和自我读后感，有任何差错，请忽略….</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#01-小程序之入门篇\">01. 小程序之入门篇</a></li>\n<li><a href=\"#02-小程序之目录结构\">02. 小程序之目录结构</a></li>\n<li><a href=\"#03-小程序之生命周期\">03. 小程序之生命周期</a></li>\n<li><a href=\"#04-小程序之数据绑定\">04. 小程序之数据绑定</a></li>\n<li><a href=\"#05-小程序之触控事件\">05. 小程序之触控事件</a></li>\n<li><a href=\"#06-小程序之基础组件篇之视图容器\">06. 小程序之基础组件篇之视图容器</a></li>\n<li><a href=\"#07-小程序之基础组件篇之基础内容\">07. 小程序之基础组件篇之基础内容</a></li>\n<li><a href=\"#08-小程序之基础组件篇之表单组件\">08. 小程序之基础组件篇之表单组件</a></li>\n<li><a href=\"#09-小程序之基础组件篇之导航组件\">09. 小程序之基础组件篇之导航组件</a></li>\n<li><a href=\"#10-小程序之其它组件\">10. 小程序之其它组件</a></li>\n<li><a href=\"#11-小程序之拓展篇之调试工具\">11. 小程序之拓展篇之调试工具</a></li>\n<li><a href=\"#12-小程序之拓展篇之样式库weui-wxss\">12. 小程序之拓展篇之样式库weui-wxss</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>其实入门教程系列，再好也比不了<a href=\"https://mp.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，写的很全，向导也很到位，但是就当写读后感，再提炼下吧。</p>\n<p>心急吃不了豆腐，但是，还是先尝试Hello World开发吧。</p>\n<h3 id=\"01-小程序之入门篇\"><a href=\"#01-小程序之入门篇\" class=\"headerlink\" title=\"01. 小程序之入门篇\"></a>01. 小程序之入门篇</h3><p><strong><em> 环境搭建 </em></strong><br>首先跳入<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/index.html\" target=\"_blank\" rel=\"noopener\">简易教程</a>，根据向导走一遍流程，我们通过开发者工具快速创建了一个 QuickStart 项目，这里完全靠官方文档走一遍，是不是很轻松？</p>\n<p><strong><em> 项目配置 </em></strong><br>接下来，我们讲一讲小程序的代码构成要素： <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/file.html\" target=\"_blank\" rel=\"noopener\">官方资料</a></p>\n<p><img src=\"/imgs/miniapp/miniapp-fileintro.png\" alt=\"配置文件图\"></p>\n<p><strong><em> JSON配置 </em></strong><br>这里主要有 </p>\n<ul>\n<li>app.json</li>\n<li>project.config.json</li>\n<li>page.json</li>\n</ul>\n<p><strong><em> app.json </em></strong> 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。<br>其他配置项细节可以参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html\" target=\"_blank\" rel=\"noopener\">小程序的配置 app.json</a></p>\n<p><img src=\"/imgs/miniapp/miniapp-app-config.png\" alt=\"app.json配置项列表\"></p>\n<p><strong><em> 工具配置 project.config.json </em></strong> 其他配置项细节可以参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/edit.html#%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">开发者工具的配置</a></p>\n<p><strong><em> 页面配置 page.json </em></strong> 其他配置项细节可以参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html\" target=\"_blank\" rel=\"noopener\">小程序的配置 page.json</a></p>\n<hr>\n<h3 id=\"02-小程序之目录结构\"><a href=\"#02-小程序之目录结构\" class=\"headerlink\" title=\"02. 小程序之目录结构\"></a>02. 小程序之目录结构</h3><p>框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。</p>\n<ul>\n<li>JSON配置</li>\n<li>WXML模版</li>\n<li>WXSS样式</li>\n<li>JS逻辑交互</li>\n</ul>\n<p>MVVM<br><img src=\"/imgs/miniapp/miniapp-mvvm1.png\" alt=\"MVVM\"></p>\n<hr>\n<h3 id=\"03-小程序之生命周期\"><a href=\"#03-小程序之生命周期\" class=\"headerlink\" title=\"03. 小程序之生命周期\"></a>03. 小程序之生命周期</h3><p>小程序生命周期</p>\n<ul>\n<li>APP生命周期</li>\n<li>页面生命周期</li>\n</ul>\n<hr>\n<p><strong><em> APP生命周期示例 </em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something initial when launch.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Do something when show.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onHide: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Do something when hide.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  globalData: <span class=\"string\">'I am global data'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong><em> 页面生命周期示例 </em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js  </span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"This is page data.\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do some initialize when page load.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onReady: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page ready.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page show.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onHide: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page hide.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onUnload: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page close.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onPullDownRefresh: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when pull down.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onReachBottom: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page reach bottom.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShareAppMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// return custom share data when user share.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onPageScroll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page scroll</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onTabItemTap(item) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.index)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.pagePath)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.text)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// Event handler.</span></span><br><span class=\"line\">  viewTap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">      text: <span class=\"string\">'Set some data for updating view.'</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// this is setData callback</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  customData: &#123;</span><br><span class=\"line\">    hi: <span class=\"string\">'MINA'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"04-小程序之数据绑定\"><a href=\"#04-小程序之数据绑定\" class=\"headerlink\" title=\"04. 小程序之数据绑定\"></a>04. 小程序之数据绑定</h3><p><strong><em> 数据传值 </em></strong></p>\n<ul>\n<li>页面内</li>\n<li>页面与页面之间</li>\n<li>父组件与子组件之间</li>\n</ul>\n<hr>\n<p><img src=\"/imgs/miniapp/miniapp-mvvm2.png\" alt=\"视图驱动视图更新\"></p>\n<p>简单的讲，对象状态化，只要对象状态发送变化，就通知页面更新视图元素。 通过以下三个步骤实现：</p>\n<ul>\n<li>识别哪个UI元素被绑定了相应的对象。</li>\n<li>监视对象状态的变化。</li>\n<li><p>将所有变化传播到绑定的视图上。</p>\n<p>注意数据流向是单向的，即视图变化不会影响对象状态。</p>\n</li>\n</ul>\n<p>以下将展示小程序提供的更加多元化的复杂的数据绑定方式。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.wxml</span><br><span class=\"line\">&lt;!--数据绑定--内容--&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;message&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定--组件属性--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view id=\"item-&#123;&#123;id&#125;&#125;\"&gt;组件属性id-&#123;&#123;id&#125;&#125;&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---控制属性--&gt;</span><br><span class=\"line\">&lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;condition&#125;&#125;\"</span>&gt;控制属性&#123;&#123;condition&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定---三元运算--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view hidden=\"&#123;&#123;flag ? true : false&#125;&#125;\"&gt;Hidden--&#123;&#123;flag&#125;&#125;&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---算数运算--&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定---逻辑判断--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:if=\"&#123;&#123;length &gt; 5&#125;&#125;\"&gt;6&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---字符串运算--&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;<span class=\"string\">\"Hello  \"</span> + name&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定---数组组合--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:for=\"&#123;&#123;[zero, 1, 2, 3, 4, 5, 6]&#125;&#125;\"&gt;&#123;&#123;item&#125;&#125;&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---对象--&gt;</span><br><span class=\"line\">&lt;!--最终组合成的对象是&#123;<span class=\"attr\">for</span>: <span class=\"number\">1</span>, <span class=\"attr\">bar</span>: <span class=\"number\">2</span>&#125;--&gt;</span><br><span class=\"line\">&lt;template is=<span class=\"string\">\"objectCombine\"</span> data=<span class=\"string\">\"&#123;&#123;for: x, bar: y&#125;&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---扩展运算符 ... 来将一个对象展开--&gt;</span><br><span class=\"line\">&lt;!--最终组合成的对象是&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span>, <span class=\"attr\">e</span>: <span class=\"number\">5</span>&#125;--&gt;</span><br><span class=\"line\">&lt;template is=<span class=\"string\">\"objectCombine\"</span> data=<span class=\"string\">\"&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---对象的 key 和 value 相同--&gt;</span><br><span class=\"line\">&lt;!--最终组合成的对象是&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'my-foo'</span>, <span class=\"attr\">bar</span>:<span class=\"string\">'my-bar'</span>&#125;--&gt;</span><br><span class=\"line\">&lt;template is=<span class=\"string\">\"objectCombine\"</span> data=<span class=\"string\">\"&#123;&#123;foo, bar&#125;&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>对应的逻辑层代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//内容</span></span><br><span class=\"line\">    message:<span class=\"string\">'Hello MINA!'</span>,</span><br><span class=\"line\">    <span class=\"comment\">//组件属性</span></span><br><span class=\"line\">    id: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//控制属性</span></span><br><span class=\"line\">    condition: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">//三元运算</span></span><br><span class=\"line\">    flag:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">//算数运算</span></span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"comment\">//逻辑判断</span></span><br><span class=\"line\">    length: <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"comment\">//字符串运算</span></span><br><span class=\"line\">    name: <span class=\"string\">'MINA'</span>,</span><br><span class=\"line\">    <span class=\"comment\">//数组组合</span></span><br><span class=\"line\">    zero: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//对象</span></span><br><span class=\"line\">    x: <span class=\"number\">0</span>,</span><br><span class=\"line\">    y: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">//对象展开</span></span><br><span class=\"line\">    obj1: &#123;</span><br><span class=\"line\">        a: <span class=\"number\">1</span>,</span><br><span class=\"line\">        b: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    obj2: &#123;</span><br><span class=\"line\">        c: <span class=\"number\">3</span>,</span><br><span class=\"line\">        d: <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"comment\">//对象key和value相同</span></span><br><span class=\"line\">    foo: <span class=\"string\">'my-foo'</span>,</span><br><span class=\"line\">    bar: <span class=\"string\">'my-bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态。调用this.setData（）方法实现视图的部分渲染。如下图：<br><img src=\"/imgs/miniapp/miniapp-view-object.png\" alt=\"视图-对象\"></p>\n<h3 id=\"05-小程序之触控事件\"><a href=\"#05-小程序之触控事件\" class=\"headerlink\" title=\"05. 小程序之触控事件\"></a>05. 小程序之触控事件</h3><p>主要是页面交互事件的处理<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"06-小程序之基础组件篇之视图容器\"><a href=\"#06-小程序之基础组件篇之视图容器\" class=\"headerlink\" title=\"06. 小程序之基础组件篇之视图容器\"></a>06. 小程序之基础组件篇之视图容器</h3><p>视图容器组件主要有：</p>\n<ul>\n<li>view</li>\n<li>scroll-view</li>\n<li>swiper</li>\n<li>movable-view</li>\n<li>cover-view</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html\" target=\"_blank\" rel=\"noopener\">官方文档之视图容器</a></p>\n<p><strong><em> WXML模版 </em></strong><br>WXML(WeiXin Markup Language), <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/\" target=\"_blank\" rel=\"noopener\">语法介绍</a></p>\n<p>视图层</p>\n<ul>\n<li>数据绑定</li>\n<li>条件渲染</li>\n<li>列表渲染</li>\n<li>事件</li>\n</ul>\n<p><strong><em> WXSS样式 </em></strong><br>小程序布局</p>\n<p><strong><em> CSS盒子布局 </em></strong><br>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。<br>它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p><img src=\"/imgs/css/css-box.png\" alt=\"css盒子模型\"></p>\n<p><strong><em> 弹性盒子Flex布局 </em></strong><br>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br><a href=\"https://github.com/taoqianbao/tqb-miniapp-flex\" target=\"_blank\" rel=\"noopener\">Flex布局示例</a></p>\n<p><strong><em> Tips:CSS样式的优先级 </em></strong><br>选择器的优先权:<br>（外部样式）External style sheet &lt;（内部样式）Internal style sheet &lt;（内联样式）Inline style</p>\n<p>计算规则：</p>\n<ol>\n<li>内联样式表的权值最高 1000</li>\n<li>ID 选择器的权值为 100</li>\n<li>Class 类选择器的权值为 10</li>\n<li>HTML 标签选择器的权值为 1</li>\n</ol>\n<p>Tips:<br>CSS 优先级法则:<br>    A  选择器都有一个权值，权值越大越优先；<br>    B  当权值相等时，后出现的样式表设置要优于先出现的样式表设置；<br>    C  创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；<br>    D  继承的CSS 样式不如后来指定的CSS 样式；<br>    E  在同一组属性设置中标有“!important”规则的优先级最大</p>\n<hr>\n<h3 id=\"07-小程序之基础组件篇之基础内容\"><a href=\"#07-小程序之基础组件篇之基础内容\" class=\"headerlink\" title=\"07. 小程序之基础组件篇之基础内容\"></a>07. 小程序之基础组件篇之基础内容</h3><p>基础组件：icon,text,rich-text,progress<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html\" target=\"_blank\" rel=\"noopener\">官方文档之基础内容篇</a></p>\n<h3 id=\"08-小程序之基础组件篇之表单组件\"><a href=\"#08-小程序之基础组件篇之表单组件\" class=\"headerlink\" title=\"08. 小程序之基础组件篇之表单组件\"></a>08. 小程序之基础组件篇之表单组件</h3><p>表单组件：button,checkbox,form,input,label,picker,picker-view,radio,slider,switch,textarea<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html\" target=\"_blank\" rel=\"noopener\">官方文档之表单组件篇</a></p>\n<h3 id=\"09-小程序之基础组件篇之导航组件\"><a href=\"#09-小程序之基础组件篇之导航组件\" class=\"headerlink\" title=\"09. 小程序之基础组件篇之导航组件\"></a>09. 小程序之基础组件篇之导航组件</h3><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html\" target=\"_blank\" rel=\"noopener\">官方文档之页面导航</a></p>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html\" target=\"_blank\" rel=\"noopener\">官方文档之页面路由</a></p>\n<p>页面路由<br>在小程序中所有页面的路由全部由框架进行管理。</p>\n<p>主要了解的概念：</p>\n<ul>\n<li>页面栈</li>\n<li>getCurrentPages()</li>\n<li>路由方式：</li>\n</ul>\n<p><a href=\"https://github.com/taoqianbao/tqb-miniapp-guide-route\" target=\"_blank\" rel=\"noopener\">页面路由示例代码下载</a><br><img src=\"/imgs/miniapp/miniapp-route-demo.png\" alt=\"示例图\"></p>\n<p>Tips:</p>\n<ul>\n<li>navigateTo, redirectTo 只能打开非 tabBar 页面。</li>\n<li>switchTab 只能打开 tabBar 页面。</li>\n<li>reLaunch 可以打开任意页面。</li>\n<li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li>\n<li>调用页面路由带的参数可以在目标页面的onLoad中获取。</li>\n</ul>\n<h3 id=\"10-小程序之其它组件\"><a href=\"#10-小程序之其它组件\" class=\"headerlink\" title=\"10. 小程序之其它组件\"></a>10. 小程序之其它组件</h3><p>主要有：媒体组件、地图、画布、其它开放能力</p>\n<h3 id=\"11-小程序之拓展篇之调试工具\"><a href=\"#11-小程序之拓展篇之调试工具\" class=\"headerlink\" title=\"11. 小程序之拓展篇之调试工具\"></a>11. 小程序之拓展篇之调试工具</h3><p>如何调试小程序，在开发过程中至关重要，下面图就是：</p>\n<p>主要有三种调试工具：</p>\n<ol>\n<li><p>小程序开发工具<br><img src=\"/imgs/miniapp/miniapp-debug1.png\" alt=\"小程序开发工具调试窗口\"></p>\n</li>\n<li><p>手机端调试窗口：<br><img src=\"/imgs/miniapp/miniapp-debug2.jpeg\" alt=\"小程序开发工具调试窗口\"><br><img src=\"/imgs/miniapp/miniapp-debug3.jpeg\" alt=\"小程序开发工具调试窗口\"><br><img src=\"/imgs/miniapp/miniapp-debug4.jpeg\" alt=\"小程序开发工具调试窗口\"></p>\n</li>\n<li><p>抓包工具 charles等 </p>\n</li>\n</ol>\n<hr>\n<h3 id=\"12-小程序之拓展篇之样式库weui-wxss\"><a href=\"#12-小程序之拓展篇之样式库weui-wxss\" class=\"headerlink\" title=\"12. 小程序之拓展篇之样式库weui-wxss\"></a>12. 小程序之拓展篇之样式库weui-wxss</h3><p><a href=\"https://github.com/Tencent/weui-wxss\" target=\"_blank\" rel=\"noopener\">样式框架</a></p>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>到此，您对项目还有哪些问题吗？</p>\n<p>以下是整理的资源:</p>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"noopener\">官方开发文档</a></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html\" target=\"_blank\" rel=\"noopener\">页面路由官网资料</a></li>\n</ul>\n<p>学习资料</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html\" target=\"_blank\" rel=\"noopener\">样式优选级</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">flex布局语法</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex布局实战</a></li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html\" target=\"_blank\" rel=\"noopener\">开发者工具</a></p>\n<p>示例代码</p>\n<ul>\n<li><a href=\"https://github.com/taoqianbao/tqb-miniapp-guide-route\" target=\"_blank\" rel=\"noopener\">页面路由示例代码下载</a></li>\n<li><a href=\"https://github.com/taoqianbao/tqb-miniapp-flex\" target=\"_blank\" rel=\"noopener\">页面布局示例代码下载</a></li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>公司开始大力推广微信小程序，由于有过小程序的开发经验，自当起到带头作用，承担起学习引入人的作用。<br>本文主要是适合基础无前端开发经验人群，有意向开发微信小程序的伙伴阅读。<br>所有内容来自互联网和自我读后感，有任何差错，请忽略….</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><ul>\n<li><a href=\"#01-小程序之入门篇\">01. 小程序之入门篇</a></li>\n<li><a href=\"#02-小程序之目录结构\">02. 小程序之目录结构</a></li>\n<li><a href=\"#03-小程序之生命周期\">03. 小程序之生命周期</a></li>\n<li><a href=\"#04-小程序之数据绑定\">04. 小程序之数据绑定</a></li>\n<li><a href=\"#05-小程序之触控事件\">05. 小程序之触控事件</a></li>\n<li><a href=\"#06-小程序之基础组件篇之视图容器\">06. 小程序之基础组件篇之视图容器</a></li>\n<li><a href=\"#07-小程序之基础组件篇之基础内容\">07. 小程序之基础组件篇之基础内容</a></li>\n<li><a href=\"#08-小程序之基础组件篇之表单组件\">08. 小程序之基础组件篇之表单组件</a></li>\n<li><a href=\"#09-小程序之基础组件篇之导航组件\">09. 小程序之基础组件篇之导航组件</a></li>\n<li><a href=\"#10-小程序之其它组件\">10. 小程序之其它组件</a></li>\n<li><a href=\"#11-小程序之拓展篇之调试工具\">11. 小程序之拓展篇之调试工具</a></li>\n<li><a href=\"#12-小程序之拓展篇之样式库weui-wxss\">12. 小程序之拓展篇之样式库weui-wxss</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>其实入门教程系列，再好也比不了<a href=\"https://mp.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，写的很全，向导也很到位，但是就当写读后感，再提炼下吧。</p>\n<p>心急吃不了豆腐，但是，还是先尝试Hello World开发吧。</p>\n<h3 id=\"01-小程序之入门篇\"><a href=\"#01-小程序之入门篇\" class=\"headerlink\" title=\"01. 小程序之入门篇\"></a>01. 小程序之入门篇</h3><p><strong><em> 环境搭建 </em></strong><br>首先跳入<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/index.html\" target=\"_blank\" rel=\"noopener\">简易教程</a>，根据向导走一遍流程，我们通过开发者工具快速创建了一个 QuickStart 项目，这里完全靠官方文档走一遍，是不是很轻松？</p>\n<p><strong><em> 项目配置 </em></strong><br>接下来，我们讲一讲小程序的代码构成要素： <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/file.html\" target=\"_blank\" rel=\"noopener\">官方资料</a></p>\n<p><img src=\"/imgs/miniapp/miniapp-fileintro.png\" alt=\"配置文件图\"></p>\n<p><strong><em> JSON配置 </em></strong><br>这里主要有 </p>\n<ul>\n<li>app.json</li>\n<li>project.config.json</li>\n<li>page.json</li>\n</ul>\n<p><strong><em> app.json </em></strong> 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。<br>其他配置项细节可以参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html\" target=\"_blank\" rel=\"noopener\">小程序的配置 app.json</a></p>\n<p><img src=\"/imgs/miniapp/miniapp-app-config.png\" alt=\"app.json配置项列表\"></p>\n<p><strong><em> 工具配置 project.config.json </em></strong> 其他配置项细节可以参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/edit.html#%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">开发者工具的配置</a></p>\n<p><strong><em> 页面配置 page.json </em></strong> 其他配置项细节可以参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html\" target=\"_blank\" rel=\"noopener\">小程序的配置 page.json</a></p>\n<hr>\n<h3 id=\"02-小程序之目录结构\"><a href=\"#02-小程序之目录结构\" class=\"headerlink\" title=\"02. 小程序之目录结构\"></a>02. 小程序之目录结构</h3><p>框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。</p>\n<ul>\n<li>JSON配置</li>\n<li>WXML模版</li>\n<li>WXSS样式</li>\n<li>JS逻辑交互</li>\n</ul>\n<p>MVVM<br><img src=\"/imgs/miniapp/miniapp-mvvm1.png\" alt=\"MVVM\"></p>\n<hr>\n<h3 id=\"03-小程序之生命周期\"><a href=\"#03-小程序之生命周期\" class=\"headerlink\" title=\"03. 小程序之生命周期\"></a>03. 小程序之生命周期</h3><p>小程序生命周期</p>\n<ul>\n<li>APP生命周期</li>\n<li>页面生命周期</li>\n</ul>\n<hr>\n<p><strong><em> APP生命周期示例 </em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something initial when launch.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Do something when show.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onHide: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Do something when hide.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  globalData: <span class=\"string\">'I am global data'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong><em> 页面生命周期示例 </em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js  </span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"This is page data.\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do some initialize when page load.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onReady: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page ready.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page show.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onHide: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page hide.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onUnload: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page close.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onPullDownRefresh: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when pull down.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onReachBottom: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page reach bottom.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShareAppMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// return custom share data when user share.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onPageScroll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something when page scroll</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onTabItemTap(item) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.index)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.pagePath)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item.text)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// Event handler.</span></span><br><span class=\"line\">  viewTap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">      text: <span class=\"string\">'Set some data for updating view.'</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// this is setData callback</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  customData: &#123;</span><br><span class=\"line\">    hi: <span class=\"string\">'MINA'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"04-小程序之数据绑定\"><a href=\"#04-小程序之数据绑定\" class=\"headerlink\" title=\"04. 小程序之数据绑定\"></a>04. 小程序之数据绑定</h3><p><strong><em> 数据传值 </em></strong></p>\n<ul>\n<li>页面内</li>\n<li>页面与页面之间</li>\n<li>父组件与子组件之间</li>\n</ul>\n<hr>\n<p><img src=\"/imgs/miniapp/miniapp-mvvm2.png\" alt=\"视图驱动视图更新\"></p>\n<p>简单的讲，对象状态化，只要对象状态发送变化，就通知页面更新视图元素。 通过以下三个步骤实现：</p>\n<ul>\n<li>识别哪个UI元素被绑定了相应的对象。</li>\n<li>监视对象状态的变化。</li>\n<li><p>将所有变化传播到绑定的视图上。</p>\n<p>注意数据流向是单向的，即视图变化不会影响对象状态。</p>\n</li>\n</ul>\n<p>以下将展示小程序提供的更加多元化的复杂的数据绑定方式。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.wxml</span><br><span class=\"line\">&lt;!--数据绑定--内容--&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;message&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定--组件属性--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view id=\"item-&#123;&#123;id&#125;&#125;\"&gt;组件属性id-&#123;&#123;id&#125;&#125;&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---控制属性--&gt;</span><br><span class=\"line\">&lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;condition&#125;&#125;\"</span>&gt;控制属性&#123;&#123;condition&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定---三元运算--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view hidden=\"&#123;&#123;flag ? true : false&#125;&#125;\"&gt;Hidden--&#123;&#123;flag&#125;&#125;&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---算数运算--&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定---逻辑判断--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:if=\"&#123;&#123;length &gt; 5&#125;&#125;\"&gt;6&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---字符串运算--&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;<span class=\"string\">\"Hello  \"</span> + name&#125;&#125;&lt;<span class=\"regexp\">/view&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--数据绑定---数组组合--&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:for=\"&#123;&#123;[zero, 1, 2, 3, 4, 5, 6]&#125;&#125;\"&gt;&#123;&#123;item&#125;&#125;&lt;/</span>view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---对象--&gt;</span><br><span class=\"line\">&lt;!--最终组合成的对象是&#123;<span class=\"attr\">for</span>: <span class=\"number\">1</span>, <span class=\"attr\">bar</span>: <span class=\"number\">2</span>&#125;--&gt;</span><br><span class=\"line\">&lt;template is=<span class=\"string\">\"objectCombine\"</span> data=<span class=\"string\">\"&#123;&#123;for: x, bar: y&#125;&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---扩展运算符 ... 来将一个对象展开--&gt;</span><br><span class=\"line\">&lt;!--最终组合成的对象是&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span>, <span class=\"attr\">e</span>: <span class=\"number\">5</span>&#125;--&gt;</span><br><span class=\"line\">&lt;template is=<span class=\"string\">\"objectCombine\"</span> data=<span class=\"string\">\"&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据绑定---对象的 key 和 value 相同--&gt;</span><br><span class=\"line\">&lt;!--最终组合成的对象是&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'my-foo'</span>, <span class=\"attr\">bar</span>:<span class=\"string\">'my-bar'</span>&#125;--&gt;</span><br><span class=\"line\">&lt;template is=<span class=\"string\">\"objectCombine\"</span> data=<span class=\"string\">\"&#123;&#123;foo, bar&#125;&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>对应的逻辑层代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//内容</span></span><br><span class=\"line\">    message:<span class=\"string\">'Hello MINA!'</span>,</span><br><span class=\"line\">    <span class=\"comment\">//组件属性</span></span><br><span class=\"line\">    id: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//控制属性</span></span><br><span class=\"line\">    condition: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">//三元运算</span></span><br><span class=\"line\">    flag:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">//算数运算</span></span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"comment\">//逻辑判断</span></span><br><span class=\"line\">    length: <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"comment\">//字符串运算</span></span><br><span class=\"line\">    name: <span class=\"string\">'MINA'</span>,</span><br><span class=\"line\">    <span class=\"comment\">//数组组合</span></span><br><span class=\"line\">    zero: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//对象</span></span><br><span class=\"line\">    x: <span class=\"number\">0</span>,</span><br><span class=\"line\">    y: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">//对象展开</span></span><br><span class=\"line\">    obj1: &#123;</span><br><span class=\"line\">        a: <span class=\"number\">1</span>,</span><br><span class=\"line\">        b: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    obj2: &#123;</span><br><span class=\"line\">        c: <span class=\"number\">3</span>,</span><br><span class=\"line\">        d: <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"comment\">//对象key和value相同</span></span><br><span class=\"line\">    foo: <span class=\"string\">'my-foo'</span>,</span><br><span class=\"line\">    bar: <span class=\"string\">'my-bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态。调用this.setData（）方法实现视图的部分渲染。如下图：<br><img src=\"/imgs/miniapp/miniapp-view-object.png\" alt=\"视图-对象\"></p>\n<h3 id=\"05-小程序之触控事件\"><a href=\"#05-小程序之触控事件\" class=\"headerlink\" title=\"05. 小程序之触控事件\"></a>05. 小程序之触控事件</h3><p>主要是页面交互事件的处理<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"06-小程序之基础组件篇之视图容器\"><a href=\"#06-小程序之基础组件篇之视图容器\" class=\"headerlink\" title=\"06. 小程序之基础组件篇之视图容器\"></a>06. 小程序之基础组件篇之视图容器</h3><p>视图容器组件主要有：</p>\n<ul>\n<li>view</li>\n<li>scroll-view</li>\n<li>swiper</li>\n<li>movable-view</li>\n<li>cover-view</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html\" target=\"_blank\" rel=\"noopener\">官方文档之视图容器</a></p>\n<p><strong><em> WXML模版 </em></strong><br>WXML(WeiXin Markup Language), <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/\" target=\"_blank\" rel=\"noopener\">语法介绍</a></p>\n<p>视图层</p>\n<ul>\n<li>数据绑定</li>\n<li>条件渲染</li>\n<li>列表渲染</li>\n<li>事件</li>\n</ul>\n<p><strong><em> WXSS样式 </em></strong><br>小程序布局</p>\n<p><strong><em> CSS盒子布局 </em></strong><br>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。<br>它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p><img src=\"/imgs/css/css-box.png\" alt=\"css盒子模型\"></p>\n<p><strong><em> 弹性盒子Flex布局 </em></strong><br>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br><a href=\"https://github.com/taoqianbao/tqb-miniapp-flex\" target=\"_blank\" rel=\"noopener\">Flex布局示例</a></p>\n<p><strong><em> Tips:CSS样式的优先级 </em></strong><br>选择器的优先权:<br>（外部样式）External style sheet &lt;（内部样式）Internal style sheet &lt;（内联样式）Inline style</p>\n<p>计算规则：</p>\n<ol>\n<li>内联样式表的权值最高 1000</li>\n<li>ID 选择器的权值为 100</li>\n<li>Class 类选择器的权值为 10</li>\n<li>HTML 标签选择器的权值为 1</li>\n</ol>\n<p>Tips:<br>CSS 优先级法则:<br>    A  选择器都有一个权值，权值越大越优先；<br>    B  当权值相等时，后出现的样式表设置要优于先出现的样式表设置；<br>    C  创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；<br>    D  继承的CSS 样式不如后来指定的CSS 样式；<br>    E  在同一组属性设置中标有“!important”规则的优先级最大</p>\n<hr>\n<h3 id=\"07-小程序之基础组件篇之基础内容\"><a href=\"#07-小程序之基础组件篇之基础内容\" class=\"headerlink\" title=\"07. 小程序之基础组件篇之基础内容\"></a>07. 小程序之基础组件篇之基础内容</h3><p>基础组件：icon,text,rich-text,progress<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html\" target=\"_blank\" rel=\"noopener\">官方文档之基础内容篇</a></p>\n<h3 id=\"08-小程序之基础组件篇之表单组件\"><a href=\"#08-小程序之基础组件篇之表单组件\" class=\"headerlink\" title=\"08. 小程序之基础组件篇之表单组件\"></a>08. 小程序之基础组件篇之表单组件</h3><p>表单组件：button,checkbox,form,input,label,picker,picker-view,radio,slider,switch,textarea<br><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html\" target=\"_blank\" rel=\"noopener\">官方文档之表单组件篇</a></p>\n<h3 id=\"09-小程序之基础组件篇之导航组件\"><a href=\"#09-小程序之基础组件篇之导航组件\" class=\"headerlink\" title=\"09. 小程序之基础组件篇之导航组件\"></a>09. 小程序之基础组件篇之导航组件</h3><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html\" target=\"_blank\" rel=\"noopener\">官方文档之页面导航</a></p>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html\" target=\"_blank\" rel=\"noopener\">官方文档之页面路由</a></p>\n<p>页面路由<br>在小程序中所有页面的路由全部由框架进行管理。</p>\n<p>主要了解的概念：</p>\n<ul>\n<li>页面栈</li>\n<li>getCurrentPages()</li>\n<li>路由方式：</li>\n</ul>\n<p><a href=\"https://github.com/taoqianbao/tqb-miniapp-guide-route\" target=\"_blank\" rel=\"noopener\">页面路由示例代码下载</a><br><img src=\"/imgs/miniapp/miniapp-route-demo.png\" alt=\"示例图\"></p>\n<p>Tips:</p>\n<ul>\n<li>navigateTo, redirectTo 只能打开非 tabBar 页面。</li>\n<li>switchTab 只能打开 tabBar 页面。</li>\n<li>reLaunch 可以打开任意页面。</li>\n<li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li>\n<li>调用页面路由带的参数可以在目标页面的onLoad中获取。</li>\n</ul>\n<h3 id=\"10-小程序之其它组件\"><a href=\"#10-小程序之其它组件\" class=\"headerlink\" title=\"10. 小程序之其它组件\"></a>10. 小程序之其它组件</h3><p>主要有：媒体组件、地图、画布、其它开放能力</p>\n<h3 id=\"11-小程序之拓展篇之调试工具\"><a href=\"#11-小程序之拓展篇之调试工具\" class=\"headerlink\" title=\"11. 小程序之拓展篇之调试工具\"></a>11. 小程序之拓展篇之调试工具</h3><p>如何调试小程序，在开发过程中至关重要，下面图就是：</p>\n<p>主要有三种调试工具：</p>\n<ol>\n<li><p>小程序开发工具<br><img src=\"/imgs/miniapp/miniapp-debug1.png\" alt=\"小程序开发工具调试窗口\"></p>\n</li>\n<li><p>手机端调试窗口：<br><img src=\"/imgs/miniapp/miniapp-debug2.jpeg\" alt=\"小程序开发工具调试窗口\"><br><img src=\"/imgs/miniapp/miniapp-debug3.jpeg\" alt=\"小程序开发工具调试窗口\"><br><img src=\"/imgs/miniapp/miniapp-debug4.jpeg\" alt=\"小程序开发工具调试窗口\"></p>\n</li>\n<li><p>抓包工具 charles等 </p>\n</li>\n</ol>\n<hr>\n<h3 id=\"12-小程序之拓展篇之样式库weui-wxss\"><a href=\"#12-小程序之拓展篇之样式库weui-wxss\" class=\"headerlink\" title=\"12. 小程序之拓展篇之样式库weui-wxss\"></a>12. 小程序之拓展篇之样式库weui-wxss</h3><p><a href=\"https://github.com/Tencent/weui-wxss\" target=\"_blank\" rel=\"noopener\">样式框架</a></p>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>到此，您对项目还有哪些问题吗？</p>\n<p>以下是整理的资源:</p>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"noopener\">官方开发文档</a></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html\" target=\"_blank\" rel=\"noopener\">页面路由官网资料</a></li>\n</ul>\n<p>学习资料</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html\" target=\"_blank\" rel=\"noopener\">样式优选级</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">flex布局语法</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex布局实战</a></li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html\" target=\"_blank\" rel=\"noopener\">开发者工具</a></p>\n<p>示例代码</p>\n<ul>\n<li><a href=\"https://github.com/taoqianbao/tqb-miniapp-guide-route\" target=\"_blank\" rel=\"noopener\">页面路由示例代码下载</a></li>\n<li><a href=\"https://github.com/taoqianbao/tqb-miniapp-flex\" target=\"_blank\" rel=\"noopener\">页面布局示例代码下载</a></li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"关于Web Worker的知识点","p":"web/how-to-use-webworker","date":"2014-05-01T09:04:10.000Z","_content":"\n## 背景\nweb worker 是运行在后台的 JavaScript，不会影响页面的性能。\n\n*** 什么是 Web Worker？ *** \n当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。\nweb worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。\n\n通过使用Web Worker， 我们可以在浏览器后台运行Javascript， 而不占用浏览器自身线程。\nWeb Worker可以提高应用的总体性能，并且提升用户体验。如果你想在自己的Web应用中使用Web Worker， 不妨来了解一下有关Web Worker的基础知识点。\n\n<!--more-->\n\n### 1. Web Worker 可以让你在后台运行Javascript\n一般来说Javascript和页面的UI会共用一个线程，所以当点击一个按钮开始运行Javascript后，在这段代码运行完毕之前，页面是无法响应用户操作的，换句话来说就是被“冻结”了。而这段代码可以交给Web Worker在后台运行，那么页面在Javascript运行期间依然可以响应用户操作。后台会启动一个worker线程来执行这段代码，用户可以创建多个worker线程。所以你可以在前台做一些小规模分布式计算之类的工作，不过Web Worker有以下一些使用限制：\n\n+ Web Worker无法访问DOM节点；\n+ Web Worker无法访问全局变量或是全局函数；\n+ Web Worker无法调用alert()或者confirm之类的函数；\n+ Web Worker无法访问window、document之类的浏览器全局变量；\n\n不过Web Worker中的Javascript依然可以使用setTimeout(),setInterval()之类的函数，也可以使用XMLHttpRequest对象来做Ajax通信。\n\n### 2. 有两种Web Worker\nWeb workers可分为两种类型：专用线程dedicated web worker，以及共享线程shared web worker。 \nDedicated web worker随当前页面的关闭而结束；这意味着Dedicated web worker只能被创建它的页面访问。与之相对应的Shared web worker可以被多个页面访问。\n在Javascript代码中，“Work”类型代表Dedicated web worker，而“SharedWorker”类型代表Shared web worker。\n\n在绝大多数情况下，使用Dedicated web worker就足够了，因为一般来说在web worker中运行的代码是专为当前页面服务的。而在一些特定情况下，web worker可能运行的是更为普遍性的代码，可以为多个页面服务。在这种情况下，我们会创建一个共享线程的Shared web worker，它可以被与之相关联的多个页面访问，只有当所有关联的的页面都关闭的时候，该Shared web worker才会结束。相对Dedicated web worker，shared web worker稍微复杂些。\n\n### 3. “Worker”对象代表Dedicated Web Worker\n现在来看如何使用Dedicated web worker。下面的例子中用到了jQuery以及Modernizr作为Javascript库，然后往HTML页面中加入以下代码：\n``` JS\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"script/modernizr.js\"></script>\n    <script type=\"text/javascript\" src=\"script/jquery-2.0.0.js\"></script>\n    <script type=\"text/javascript\">\n    $(document).ready(function() {\n        if (!Modernizr.webworker) {\n            alert(\"This browser doesn't support Web Worker!\");\n            return;\n        }\n        $(\"#btnStart\").click(function() {\n            var worker = new Worker(\"script/lengthytask.js\");\n            worker.addEventListener(\"message\", function(evt) {\n                alert(evt.data);\n            }, false);\n            worker.postMessage(10000)\n        });\n    });\n    </script>\n</head>\n<body>\n    <form>\n        <input type=\"button\" id=\"btnStart\" value=\"Start Processing\" />\n    </form>\n</body>\n</html>\n```\n这个HTML页面中有个按钮，点击后会运行一个Javascript文件。上面的代码中首先检测当前浏览器是否支持Web Worker，不支持的话，就跳出提醒信息。\n按钮的点击事件中创建了Worker对象，并给它指定了Javascript脚本文件——lengthytask.js(稍后会有代码)，并且给Worker对象绑定了一个“message”事件。该事件会在后台代码（lengthytask.js）向页面返回数据时触发。“message”事件可以通过event.data来获取后台代码传回的数据。最后，postMessage方法正式执行lengthytask.js，该方法还可以向后台代码传递参数， 后台代码同样通过message事件获取该参数。\n\n下面是lengthytask.js主要包含的代码：\n\n``` JS\naddEventListener(\"message\", function(evt) {\n    var date = new Date();\n    var currentDate = null;\n    do {\n        currentDate = new Date();\n    } while (currentDate - date < evt.data);\n    postMessage(currentDate);\n}, false);\n```\n以上代码在后台监听message时间，并获取页面传来的参数：10000；这里实际上是一个计时函数：在message事件被触发10000毫秒之后，把结果（currentDate）传给页面。\n所以当点击“Start Processing”按钮，页面会在10秒钟后把当时的时刻alert出来。在这10秒钟内页面依然可以响应鼠标键盘事件。\n\n### 4. “SharedWorker”对象代表Shared Web Worker\n前面的代码使用的是dedicated web worker。 这一节会用shared web worker代替dedicated web worker，来区别两者的不同。下面是同一个例子的shared web worker版本：\n``` JS\naddEventListener(\"message\", function(evt) {\n    var date = new Date();\n    var currentDate = null;\n    do {\n        currentDate = new Date();\n    } while (currentDate - date < evt.data);\n    postMessage(currentDate);\n}, false);\n```\n请注意加黑的代码，这里创建了一个SharedWorker对象，并把message事件绑定在shared worker的port对象上；同样由port对象发起postMessage， 开始执行后台代码sharedlengthytask.js。\n下面是sharedlengthytask.js的主要代码：\n``` JS\nvar port;\naddEventListener(\"connect\", function(evt) {\n    port = evt.ports[0];\n    port.addEventListener(\"message\", function(evt) {\n        var date = new Date();\n        var currentDate = null;\n        do {\n            currentDate = new Date();\n        } while (currentDate - date < evt.data);\n        port.postMessage(currentDate);\n    }, false);\n    port.start();\n}, false);\n```\n使用SharedWorker对象的后台代码需要绑定connect和message事件， connect事件会在页面上的port被start时触发。之后的message事件的回调函数与之前的基本相同，最后port调用postMessage方法把结果传回给页面。\n\n### 5. Web Worker使用XMLHttpRequest与服务端通信\n有些情况下，web worker还需要与服务器进行交互。比如页面可能需要处理来自数据库中的信息，我们就需要使用Ajax技术与服务器交互，下面代码包含了web worker如何从服务端获取数据：\n``` JS\naddEventListener(\"message\", function(evt) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"lengthytaskhandler.ashx\");\n    xhr.onload = function() {\n        postMessage(xhr.responseText);\n    };\n    xhr.send();\n}, false);\n```\n上面的代码向服务端的asp.net服务lengthytaskhandler.ashx发出GET请求。并注册了获取数据后的onload事件。下面的代码是服务端的lengthytaskhandler.ashx:\n``` C#\nnamespace WebWorkerDemo {\n    public class LengthyTaskHandler: IHttpHandler {\n        public void ProcessRequest(HttpContext context) {\n            System.Threading.Thread.Sleep(10000);\n            context.Response.ContentType = \"text/plain\";\n            content.Response.Write(\"Processing successful!\");\n        }\n        public bool IsReusable {\n            get {\n                return false;\n            }\n        }\n    }\n}\n```\n如你所见，ProcessRequest模拟了一个长时间运行的任务，并返回了“Processing successful！”的消息。\n\n### 6. 通过Error事件捕捉错误信息\n当我们把越来越复杂的逻辑加到Web Worker里时，错误处理机制是必不可少的。而Web Worker恰恰提供了error事件，供开发者捕捉错误信息。下面的代码展示了如何绑定error事件：\n``` JS\n$(\"#btnStart\").click(function() {\n    var worker = new Worker(\"scripts/lengthytask.js\");\n    worker.addEventListener(\"error\", function(evt) {\n        alert(\"Line #\" + evt.lineno + \" - \" + evt.message + \" in \" + evt.filename);\n    }, false);\n    worker.postMessage(10000);\n});\n```\n如上可见， Worker对象可以绑定error事件；而且evt对象中包含错误所在的代码文件（evt.filename）、错误所在的代码行数（evt.lineno）、以及错误信息（evt.message）。\n\n### 7. 通过terminate()方法终止Web Worker\n有些情况下，我们可能需要强制终止执行中的Web Worker。Worker对象提供了terminate()来终止自身执行任务，被终止的Worker对象不能被重启或重用，我们只能新建另一个Worker实例来执行新的任务。\n\n## 兼容性\n\n### 浏览器支持\n所有主流浏览器均支持 web worker，除了 Internet Explorer。\n\n### 如何检测 Web Worker 支持\n在创建 web worker 之前，请检测用户的浏览器是否支持它：\n``` JS\nif (typeof(Worker) !== \"undefined\") {\n    // Yes! Web worker support!\n    // Some code.....\n} else {\n    // Sorry! No Web Worker support..\n}\n```\n\n## 完整的 Web Worker 实例代码\n\n``` JS\n//demo_workers.js\nvar i=0;\nfunction timedCount()\n{\n    i=i+1;\n    postMessage(i);\n    setTimeout(\"timedCount()\",500);\n}\ntimedCount();\n```\n我们已经看到了 .js 文件中的 Worker 代码。下面是 HTML 页面的代码：\n``` html\n<!DOCTYPE html>\n<html>\n<body>\n    <p>\n    \tCount numbers: <output id=\"result\"></output>\n    </p>\n    <button onclick=\"startWorker()\">Start Worker</button>\n    <button onclick=\"stopWorker()\">Stop Worker</button>\n    <br />\n    <br />\n    <script>\n    var w;\n\n    function startWorker() {\n        if (typeof(Worker) !== \"undefined\") {\n            if (typeof(w) == \"undefined\") {\n                w = new Worker(\"demo_workers.js\");\n            }\n            w.onmessage = function(event) {\n                document.getElementById(\"result\").innerHTML = event.data;\n            };\n        } else {\n            document.getElementById(\"result\").innerHTML = \"Sorry, your browser does not support Web Workers...\";\n        }\n    }\n\n    function stopWorker() {\n        w.terminate();\n    }\n    </script>\n</body>\n</html>\n```\n\n## 总结\n\nWeb Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。另外，本文还介绍了Web Worker的错误处理机制，以及使用Ajax与服务端交互。\n\n## 文献\n\n1. [点击查看转转原文](http://www.developer.com/lang/jscript/7-things-you-need-to-know-about-web-workers.html)\n\n2. [参考W3C](http://www.w3school.com.cn/html5/html_5_webworkers.asp)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/web/how-to-use-webworker.md","raw":"---\ntitle: 关于Web Worker的知识点\np: web/how-to-use-webworker\ndate: 2014-05-01 17:04:10\ntags: [web, worker]\ncategories: WEB\n---\n\n## 背景\nweb worker 是运行在后台的 JavaScript，不会影响页面的性能。\n\n*** 什么是 Web Worker？ *** \n当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。\nweb worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。\n\n通过使用Web Worker， 我们可以在浏览器后台运行Javascript， 而不占用浏览器自身线程。\nWeb Worker可以提高应用的总体性能，并且提升用户体验。如果你想在自己的Web应用中使用Web Worker， 不妨来了解一下有关Web Worker的基础知识点。\n\n<!--more-->\n\n### 1. Web Worker 可以让你在后台运行Javascript\n一般来说Javascript和页面的UI会共用一个线程，所以当点击一个按钮开始运行Javascript后，在这段代码运行完毕之前，页面是无法响应用户操作的，换句话来说就是被“冻结”了。而这段代码可以交给Web Worker在后台运行，那么页面在Javascript运行期间依然可以响应用户操作。后台会启动一个worker线程来执行这段代码，用户可以创建多个worker线程。所以你可以在前台做一些小规模分布式计算之类的工作，不过Web Worker有以下一些使用限制：\n\n+ Web Worker无法访问DOM节点；\n+ Web Worker无法访问全局变量或是全局函数；\n+ Web Worker无法调用alert()或者confirm之类的函数；\n+ Web Worker无法访问window、document之类的浏览器全局变量；\n\n不过Web Worker中的Javascript依然可以使用setTimeout(),setInterval()之类的函数，也可以使用XMLHttpRequest对象来做Ajax通信。\n\n### 2. 有两种Web Worker\nWeb workers可分为两种类型：专用线程dedicated web worker，以及共享线程shared web worker。 \nDedicated web worker随当前页面的关闭而结束；这意味着Dedicated web worker只能被创建它的页面访问。与之相对应的Shared web worker可以被多个页面访问。\n在Javascript代码中，“Work”类型代表Dedicated web worker，而“SharedWorker”类型代表Shared web worker。\n\n在绝大多数情况下，使用Dedicated web worker就足够了，因为一般来说在web worker中运行的代码是专为当前页面服务的。而在一些特定情况下，web worker可能运行的是更为普遍性的代码，可以为多个页面服务。在这种情况下，我们会创建一个共享线程的Shared web worker，它可以被与之相关联的多个页面访问，只有当所有关联的的页面都关闭的时候，该Shared web worker才会结束。相对Dedicated web worker，shared web worker稍微复杂些。\n\n### 3. “Worker”对象代表Dedicated Web Worker\n现在来看如何使用Dedicated web worker。下面的例子中用到了jQuery以及Modernizr作为Javascript库，然后往HTML页面中加入以下代码：\n``` JS\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"script/modernizr.js\"></script>\n    <script type=\"text/javascript\" src=\"script/jquery-2.0.0.js\"></script>\n    <script type=\"text/javascript\">\n    $(document).ready(function() {\n        if (!Modernizr.webworker) {\n            alert(\"This browser doesn't support Web Worker!\");\n            return;\n        }\n        $(\"#btnStart\").click(function() {\n            var worker = new Worker(\"script/lengthytask.js\");\n            worker.addEventListener(\"message\", function(evt) {\n                alert(evt.data);\n            }, false);\n            worker.postMessage(10000)\n        });\n    });\n    </script>\n</head>\n<body>\n    <form>\n        <input type=\"button\" id=\"btnStart\" value=\"Start Processing\" />\n    </form>\n</body>\n</html>\n```\n这个HTML页面中有个按钮，点击后会运行一个Javascript文件。上面的代码中首先检测当前浏览器是否支持Web Worker，不支持的话，就跳出提醒信息。\n按钮的点击事件中创建了Worker对象，并给它指定了Javascript脚本文件——lengthytask.js(稍后会有代码)，并且给Worker对象绑定了一个“message”事件。该事件会在后台代码（lengthytask.js）向页面返回数据时触发。“message”事件可以通过event.data来获取后台代码传回的数据。最后，postMessage方法正式执行lengthytask.js，该方法还可以向后台代码传递参数， 后台代码同样通过message事件获取该参数。\n\n下面是lengthytask.js主要包含的代码：\n\n``` JS\naddEventListener(\"message\", function(evt) {\n    var date = new Date();\n    var currentDate = null;\n    do {\n        currentDate = new Date();\n    } while (currentDate - date < evt.data);\n    postMessage(currentDate);\n}, false);\n```\n以上代码在后台监听message时间，并获取页面传来的参数：10000；这里实际上是一个计时函数：在message事件被触发10000毫秒之后，把结果（currentDate）传给页面。\n所以当点击“Start Processing”按钮，页面会在10秒钟后把当时的时刻alert出来。在这10秒钟内页面依然可以响应鼠标键盘事件。\n\n### 4. “SharedWorker”对象代表Shared Web Worker\n前面的代码使用的是dedicated web worker。 这一节会用shared web worker代替dedicated web worker，来区别两者的不同。下面是同一个例子的shared web worker版本：\n``` JS\naddEventListener(\"message\", function(evt) {\n    var date = new Date();\n    var currentDate = null;\n    do {\n        currentDate = new Date();\n    } while (currentDate - date < evt.data);\n    postMessage(currentDate);\n}, false);\n```\n请注意加黑的代码，这里创建了一个SharedWorker对象，并把message事件绑定在shared worker的port对象上；同样由port对象发起postMessage， 开始执行后台代码sharedlengthytask.js。\n下面是sharedlengthytask.js的主要代码：\n``` JS\nvar port;\naddEventListener(\"connect\", function(evt) {\n    port = evt.ports[0];\n    port.addEventListener(\"message\", function(evt) {\n        var date = new Date();\n        var currentDate = null;\n        do {\n            currentDate = new Date();\n        } while (currentDate - date < evt.data);\n        port.postMessage(currentDate);\n    }, false);\n    port.start();\n}, false);\n```\n使用SharedWorker对象的后台代码需要绑定connect和message事件， connect事件会在页面上的port被start时触发。之后的message事件的回调函数与之前的基本相同，最后port调用postMessage方法把结果传回给页面。\n\n### 5. Web Worker使用XMLHttpRequest与服务端通信\n有些情况下，web worker还需要与服务器进行交互。比如页面可能需要处理来自数据库中的信息，我们就需要使用Ajax技术与服务器交互，下面代码包含了web worker如何从服务端获取数据：\n``` JS\naddEventListener(\"message\", function(evt) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"lengthytaskhandler.ashx\");\n    xhr.onload = function() {\n        postMessage(xhr.responseText);\n    };\n    xhr.send();\n}, false);\n```\n上面的代码向服务端的asp.net服务lengthytaskhandler.ashx发出GET请求。并注册了获取数据后的onload事件。下面的代码是服务端的lengthytaskhandler.ashx:\n``` C#\nnamespace WebWorkerDemo {\n    public class LengthyTaskHandler: IHttpHandler {\n        public void ProcessRequest(HttpContext context) {\n            System.Threading.Thread.Sleep(10000);\n            context.Response.ContentType = \"text/plain\";\n            content.Response.Write(\"Processing successful!\");\n        }\n        public bool IsReusable {\n            get {\n                return false;\n            }\n        }\n    }\n}\n```\n如你所见，ProcessRequest模拟了一个长时间运行的任务，并返回了“Processing successful！”的消息。\n\n### 6. 通过Error事件捕捉错误信息\n当我们把越来越复杂的逻辑加到Web Worker里时，错误处理机制是必不可少的。而Web Worker恰恰提供了error事件，供开发者捕捉错误信息。下面的代码展示了如何绑定error事件：\n``` JS\n$(\"#btnStart\").click(function() {\n    var worker = new Worker(\"scripts/lengthytask.js\");\n    worker.addEventListener(\"error\", function(evt) {\n        alert(\"Line #\" + evt.lineno + \" - \" + evt.message + \" in \" + evt.filename);\n    }, false);\n    worker.postMessage(10000);\n});\n```\n如上可见， Worker对象可以绑定error事件；而且evt对象中包含错误所在的代码文件（evt.filename）、错误所在的代码行数（evt.lineno）、以及错误信息（evt.message）。\n\n### 7. 通过terminate()方法终止Web Worker\n有些情况下，我们可能需要强制终止执行中的Web Worker。Worker对象提供了terminate()来终止自身执行任务，被终止的Worker对象不能被重启或重用，我们只能新建另一个Worker实例来执行新的任务。\n\n## 兼容性\n\n### 浏览器支持\n所有主流浏览器均支持 web worker，除了 Internet Explorer。\n\n### 如何检测 Web Worker 支持\n在创建 web worker 之前，请检测用户的浏览器是否支持它：\n``` JS\nif (typeof(Worker) !== \"undefined\") {\n    // Yes! Web worker support!\n    // Some code.....\n} else {\n    // Sorry! No Web Worker support..\n}\n```\n\n## 完整的 Web Worker 实例代码\n\n``` JS\n//demo_workers.js\nvar i=0;\nfunction timedCount()\n{\n    i=i+1;\n    postMessage(i);\n    setTimeout(\"timedCount()\",500);\n}\ntimedCount();\n```\n我们已经看到了 .js 文件中的 Worker 代码。下面是 HTML 页面的代码：\n``` html\n<!DOCTYPE html>\n<html>\n<body>\n    <p>\n    \tCount numbers: <output id=\"result\"></output>\n    </p>\n    <button onclick=\"startWorker()\">Start Worker</button>\n    <button onclick=\"stopWorker()\">Stop Worker</button>\n    <br />\n    <br />\n    <script>\n    var w;\n\n    function startWorker() {\n        if (typeof(Worker) !== \"undefined\") {\n            if (typeof(w) == \"undefined\") {\n                w = new Worker(\"demo_workers.js\");\n            }\n            w.onmessage = function(event) {\n                document.getElementById(\"result\").innerHTML = event.data;\n            };\n        } else {\n            document.getElementById(\"result\").innerHTML = \"Sorry, your browser does not support Web Workers...\";\n        }\n    }\n\n    function stopWorker() {\n        w.terminate();\n    }\n    </script>\n</body>\n</html>\n```\n\n## 总结\n\nWeb Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。另外，本文还介绍了Web Worker的错误处理机制，以及使用Ajax与服务端交互。\n\n## 文献\n\n1. [点击查看转转原文](http://www.developer.com/lang/jscript/7-things-you-need-to-know-about-web-workers.html)\n\n2. [参考W3C](http://www.w3school.com.cn/html5/html_5_webworkers.asp)\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"web/how-to-use-webworker","published":1,"updated":"2018-01-17T07:25:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt45002vfme3guwqd1wb","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>web worker 是运行在后台的 JavaScript，不会影响页面的性能。</p>\n<p><strong><em> 什么是 Web Worker？ </em></strong><br>当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。<br>web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p>\n<p>通过使用Web Worker， 我们可以在浏览器后台运行Javascript， 而不占用浏览器自身线程。<br>Web Worker可以提高应用的总体性能，并且提升用户体验。如果你想在自己的Web应用中使用Web Worker， 不妨来了解一下有关Web Worker的基础知识点。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-Web-Worker-可以让你在后台运行Javascript\"><a href=\"#1-Web-Worker-可以让你在后台运行Javascript\" class=\"headerlink\" title=\"1. Web Worker 可以让你在后台运行Javascript\"></a>1. Web Worker 可以让你在后台运行Javascript</h3><p>一般来说Javascript和页面的UI会共用一个线程，所以当点击一个按钮开始运行Javascript后，在这段代码运行完毕之前，页面是无法响应用户操作的，换句话来说就是被“冻结”了。而这段代码可以交给Web Worker在后台运行，那么页面在Javascript运行期间依然可以响应用户操作。后台会启动一个worker线程来执行这段代码，用户可以创建多个worker线程。所以你可以在前台做一些小规模分布式计算之类的工作，不过Web Worker有以下一些使用限制：</p>\n<ul>\n<li>Web Worker无法访问DOM节点；</li>\n<li>Web Worker无法访问全局变量或是全局函数；</li>\n<li>Web Worker无法调用alert()或者confirm之类的函数；</li>\n<li>Web Worker无法访问window、document之类的浏览器全局变量；</li>\n</ul>\n<p>不过Web Worker中的Javascript依然可以使用setTimeout(),setInterval()之类的函数，也可以使用XMLHttpRequest对象来做Ajax通信。</p>\n<h3 id=\"2-有两种Web-Worker\"><a href=\"#2-有两种Web-Worker\" class=\"headerlink\" title=\"2. 有两种Web Worker\"></a>2. 有两种Web Worker</h3><p>Web workers可分为两种类型：专用线程dedicated web worker，以及共享线程shared web worker。<br>Dedicated web worker随当前页面的关闭而结束；这意味着Dedicated web worker只能被创建它的页面访问。与之相对应的Shared web worker可以被多个页面访问。<br>在Javascript代码中，“Work”类型代表Dedicated web worker，而“SharedWorker”类型代表Shared web worker。</p>\n<p>在绝大多数情况下，使用Dedicated web worker就足够了，因为一般来说在web worker中运行的代码是专为当前页面服务的。而在一些特定情况下，web worker可能运行的是更为普遍性的代码，可以为多个页面服务。在这种情况下，我们会创建一个共享线程的Shared web worker，它可以被与之相关联的多个页面访问，只有当所有关联的的页面都关闭的时候，该Shared web worker才会结束。相对Dedicated web worker，shared web worker稍微复杂些。</p>\n<h3 id=\"3-“Worker”对象代表Dedicated-Web-Worker\"><a href=\"#3-“Worker”对象代表Dedicated-Web-Worker\" class=\"headerlink\" title=\"3. “Worker”对象代表Dedicated Web Worker\"></a>3. “Worker”对象代表Dedicated Web Worker</h3><p>现在来看如何使用Dedicated web worker。下面的例子中用到了jQuery以及Modernizr作为Javascript库，然后往HTML页面中加入以下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"script/modernizr.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"script/jquery-2.0.0.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modernizr.webworker) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"This browser doesn't support Web Worker!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">\"#btnStart\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"script/lengthytask.js\"</span>);</span><br><span class=\"line\">            worker.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">                alert(evt.data);</span><br><span class=\"line\">            &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            worker.postMessage(<span class=\"number\">10000</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"button\"</span> id=<span class=\"string\">\"btnStart\"</span> value=<span class=\"string\">\"Start Processing\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这个HTML页面中有个按钮，点击后会运行一个Javascript文件。上面的代码中首先检测当前浏览器是否支持Web Worker，不支持的话，就跳出提醒信息。<br>按钮的点击事件中创建了Worker对象，并给它指定了Javascript脚本文件——lengthytask.js(稍后会有代码)，并且给Worker对象绑定了一个“message”事件。该事件会在后台代码（lengthytask.js）向页面返回数据时触发。“message”事件可以通过event.data来获取后台代码传回的数据。最后，postMessage方法正式执行lengthytask.js，该方法还可以向后台代码传递参数， 后台代码同样通过message事件获取该参数。</p>\n<p>下面是lengthytask.js主要包含的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentDate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (currentDate - date &lt; evt.data);</span><br><span class=\"line\">    postMessage(currentDate);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码在后台监听message时间，并获取页面传来的参数：10000；这里实际上是一个计时函数：在message事件被触发10000毫秒之后，把结果（currentDate）传给页面。<br>所以当点击“Start Processing”按钮，页面会在10秒钟后把当时的时刻alert出来。在这10秒钟内页面依然可以响应鼠标键盘事件。</p>\n<h3 id=\"4-“SharedWorker”对象代表Shared-Web-Worker\"><a href=\"#4-“SharedWorker”对象代表Shared-Web-Worker\" class=\"headerlink\" title=\"4. “SharedWorker”对象代表Shared Web Worker\"></a>4. “SharedWorker”对象代表Shared Web Worker</h3><p>前面的代码使用的是dedicated web worker。 这一节会用shared web worker代替dedicated web worker，来区别两者的不同。下面是同一个例子的shared web worker版本：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentDate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (currentDate - date &lt; evt.data);</span><br><span class=\"line\">    postMessage(currentDate);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>请注意加黑的代码，这里创建了一个SharedWorker对象，并把message事件绑定在shared worker的port对象上；同样由port对象发起postMessage， 开始执行后台代码sharedlengthytask.js。<br>下面是sharedlengthytask.js的主要代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> port;</span><br><span class=\"line\">addEventListener(<span class=\"string\">\"connect\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    port = evt.ports[<span class=\"number\">0</span>];</span><br><span class=\"line\">    port.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentDate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (currentDate - date &lt; evt.data);</span><br><span class=\"line\">        port.postMessage(currentDate);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    port.start();</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用SharedWorker对象的后台代码需要绑定connect和message事件， connect事件会在页面上的port被start时触发。之后的message事件的回调函数与之前的基本相同，最后port调用postMessage方法把结果传回给页面。</p>\n<h3 id=\"5-Web-Worker使用XMLHttpRequest与服务端通信\"><a href=\"#5-Web-Worker使用XMLHttpRequest与服务端通信\" class=\"headerlink\" title=\"5. Web Worker使用XMLHttpRequest与服务端通信\"></a>5. Web Worker使用XMLHttpRequest与服务端通信</h3><p>有些情况下，web worker还需要与服务器进行交互。比如页面可能需要处理来自数据库中的信息，我们就需要使用Ajax技术与服务器交互，下面代码包含了web worker如何从服务端获取数据：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"lengthytaskhandler.ashx\"</span>);</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        postMessage(xhr.responseText);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码向服务端的asp.net服务lengthytaskhandler.ashx发出GET请求。并注册了获取数据后的onload事件。下面的代码是服务端的lengthytaskhandler.ashx:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace WebWorkerDemo &#123;</span><br><span class=\"line\">    public class LengthyTaskHandler: IHttpHandler &#123;</span><br><span class=\"line\">        public void ProcessRequest(HttpContext context) &#123;</span><br><span class=\"line\">            System.Threading.Thread.Sleep(10000);</span><br><span class=\"line\">            context.Response.ContentType = &quot;text/plain&quot;;</span><br><span class=\"line\">            content.Response.Write(&quot;Processing successful!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public bool IsReusable &#123;</span><br><span class=\"line\">            get &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如你所见，ProcessRequest模拟了一个长时间运行的任务，并返回了“Processing successful！”的消息。</p>\n<h3 id=\"6-通过Error事件捕捉错误信息\"><a href=\"#6-通过Error事件捕捉错误信息\" class=\"headerlink\" title=\"6. 通过Error事件捕捉错误信息\"></a>6. 通过Error事件捕捉错误信息</h3><p>当我们把越来越复杂的逻辑加到Web Worker里时，错误处理机制是必不可少的。而Web Worker恰恰提供了error事件，供开发者捕捉错误信息。下面的代码展示了如何绑定error事件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btnStart\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"scripts/lengthytask.js\"</span>);</span><br><span class=\"line\">    worker.addEventListener(<span class=\"string\">\"error\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Line #\"</span> + evt.lineno + <span class=\"string\">\" - \"</span> + evt.message + <span class=\"string\">\" in \"</span> + evt.filename);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    worker.postMessage(<span class=\"number\">10000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如上可见， Worker对象可以绑定error事件；而且evt对象中包含错误所在的代码文件（evt.filename）、错误所在的代码行数（evt.lineno）、以及错误信息（evt.message）。</p>\n<h3 id=\"7-通过terminate-方法终止Web-Worker\"><a href=\"#7-通过terminate-方法终止Web-Worker\" class=\"headerlink\" title=\"7. 通过terminate()方法终止Web Worker\"></a>7. 通过terminate()方法终止Web Worker</h3><p>有些情况下，我们可能需要强制终止执行中的Web Worker。Worker对象提供了terminate()来终止自身执行任务，被终止的Worker对象不能被重启或重用，我们只能新建另一个Worker实例来执行新的任务。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><p>所有主流浏览器均支持 web worker，除了 Internet Explorer。</p>\n<h3 id=\"如何检测-Web-Worker-支持\"><a href=\"#如何检测-Web-Worker-支持\" class=\"headerlink\" title=\"如何检测 Web Worker 支持\"></a>如何检测 Web Worker 支持</h3><p>在创建 web worker 之前，请检测用户的浏览器是否支持它：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Yes! Web worker support!</span></span><br><span class=\"line\">    <span class=\"comment\">// Some code.....</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Sorry! No Web Worker support..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完整的-Web-Worker-实例代码\"><a href=\"#完整的-Web-Worker-实例代码\" class=\"headerlink\" title=\"完整的 Web Worker 实例代码\"></a>完整的 Web Worker 实例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo_workers.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timedCount</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    i=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    postMessage(i);</span><br><span class=\"line\">    setTimeout(<span class=\"string\">\"timedCount()\"</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timedCount();</span><br></pre></td></tr></table></figure>\n<p>我们已经看到了 .js 文件中的 Worker 代码。下面是 HTML 页面的代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    \tCount numbers: <span class=\"tag\">&lt;<span class=\"name\">output</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">output</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"startWorker()\"</span>&gt;</span>Start Worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"stopWorker()\"</span>&gt;</span>Stop Worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> w;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startWorker</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(w) == <span class=\"string\">\"undefined\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                w = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"demo_workers.js\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            w.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>).innerHTML = event.data;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>).innerHTML = <span class=\"string\">\"Sorry, your browser does not support Web Workers...\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopWorker</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        w.terminate();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Web Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。另外，本文还介绍了Web Worker的错误处理机制，以及使用Ajax与服务端交互。</p>\n<h2 id=\"文献\"><a href=\"#文献\" class=\"headerlink\" title=\"文献\"></a>文献</h2><ol>\n<li><p><a href=\"http://www.developer.com/lang/jscript/7-things-you-need-to-know-about-web-workers.html\" target=\"_blank\" rel=\"noopener\">点击查看转转原文</a></p>\n</li>\n<li><p><a href=\"http://www.w3school.com.cn/html5/html_5_webworkers.asp\" target=\"_blank\" rel=\"noopener\">参考W3C</a></p>\n</li>\n</ol>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>web worker 是运行在后台的 JavaScript，不会影响页面的性能。</p>\n<p><strong><em> 什么是 Web Worker？ </em></strong><br>当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。<br>web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p>\n<p>通过使用Web Worker， 我们可以在浏览器后台运行Javascript， 而不占用浏览器自身线程。<br>Web Worker可以提高应用的总体性能，并且提升用户体验。如果你想在自己的Web应用中使用Web Worker， 不妨来了解一下有关Web Worker的基础知识点。</p>","more":"<h3 id=\"1-Web-Worker-可以让你在后台运行Javascript\"><a href=\"#1-Web-Worker-可以让你在后台运行Javascript\" class=\"headerlink\" title=\"1. Web Worker 可以让你在后台运行Javascript\"></a>1. Web Worker 可以让你在后台运行Javascript</h3><p>一般来说Javascript和页面的UI会共用一个线程，所以当点击一个按钮开始运行Javascript后，在这段代码运行完毕之前，页面是无法响应用户操作的，换句话来说就是被“冻结”了。而这段代码可以交给Web Worker在后台运行，那么页面在Javascript运行期间依然可以响应用户操作。后台会启动一个worker线程来执行这段代码，用户可以创建多个worker线程。所以你可以在前台做一些小规模分布式计算之类的工作，不过Web Worker有以下一些使用限制：</p>\n<ul>\n<li>Web Worker无法访问DOM节点；</li>\n<li>Web Worker无法访问全局变量或是全局函数；</li>\n<li>Web Worker无法调用alert()或者confirm之类的函数；</li>\n<li>Web Worker无法访问window、document之类的浏览器全局变量；</li>\n</ul>\n<p>不过Web Worker中的Javascript依然可以使用setTimeout(),setInterval()之类的函数，也可以使用XMLHttpRequest对象来做Ajax通信。</p>\n<h3 id=\"2-有两种Web-Worker\"><a href=\"#2-有两种Web-Worker\" class=\"headerlink\" title=\"2. 有两种Web Worker\"></a>2. 有两种Web Worker</h3><p>Web workers可分为两种类型：专用线程dedicated web worker，以及共享线程shared web worker。<br>Dedicated web worker随当前页面的关闭而结束；这意味着Dedicated web worker只能被创建它的页面访问。与之相对应的Shared web worker可以被多个页面访问。<br>在Javascript代码中，“Work”类型代表Dedicated web worker，而“SharedWorker”类型代表Shared web worker。</p>\n<p>在绝大多数情况下，使用Dedicated web worker就足够了，因为一般来说在web worker中运行的代码是专为当前页面服务的。而在一些特定情况下，web worker可能运行的是更为普遍性的代码，可以为多个页面服务。在这种情况下，我们会创建一个共享线程的Shared web worker，它可以被与之相关联的多个页面访问，只有当所有关联的的页面都关闭的时候，该Shared web worker才会结束。相对Dedicated web worker，shared web worker稍微复杂些。</p>\n<h3 id=\"3-“Worker”对象代表Dedicated-Web-Worker\"><a href=\"#3-“Worker”对象代表Dedicated-Web-Worker\" class=\"headerlink\" title=\"3. “Worker”对象代表Dedicated Web Worker\"></a>3. “Worker”对象代表Dedicated Web Worker</h3><p>现在来看如何使用Dedicated web worker。下面的例子中用到了jQuery以及Modernizr作为Javascript库，然后往HTML页面中加入以下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"script/modernizr.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"script/jquery-2.0.0.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modernizr.webworker) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"This browser doesn't support Web Worker!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">\"#btnStart\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"script/lengthytask.js\"</span>);</span><br><span class=\"line\">            worker.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">                alert(evt.data);</span><br><span class=\"line\">            &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            worker.postMessage(<span class=\"number\">10000</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"button\"</span> id=<span class=\"string\">\"btnStart\"</span> value=<span class=\"string\">\"Start Processing\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这个HTML页面中有个按钮，点击后会运行一个Javascript文件。上面的代码中首先检测当前浏览器是否支持Web Worker，不支持的话，就跳出提醒信息。<br>按钮的点击事件中创建了Worker对象，并给它指定了Javascript脚本文件——lengthytask.js(稍后会有代码)，并且给Worker对象绑定了一个“message”事件。该事件会在后台代码（lengthytask.js）向页面返回数据时触发。“message”事件可以通过event.data来获取后台代码传回的数据。最后，postMessage方法正式执行lengthytask.js，该方法还可以向后台代码传递参数， 后台代码同样通过message事件获取该参数。</p>\n<p>下面是lengthytask.js主要包含的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentDate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (currentDate - date &lt; evt.data);</span><br><span class=\"line\">    postMessage(currentDate);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码在后台监听message时间，并获取页面传来的参数：10000；这里实际上是一个计时函数：在message事件被触发10000毫秒之后，把结果（currentDate）传给页面。<br>所以当点击“Start Processing”按钮，页面会在10秒钟后把当时的时刻alert出来。在这10秒钟内页面依然可以响应鼠标键盘事件。</p>\n<h3 id=\"4-“SharedWorker”对象代表Shared-Web-Worker\"><a href=\"#4-“SharedWorker”对象代表Shared-Web-Worker\" class=\"headerlink\" title=\"4. “SharedWorker”对象代表Shared Web Worker\"></a>4. “SharedWorker”对象代表Shared Web Worker</h3><p>前面的代码使用的是dedicated web worker。 这一节会用shared web worker代替dedicated web worker，来区别两者的不同。下面是同一个例子的shared web worker版本：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentDate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (currentDate - date &lt; evt.data);</span><br><span class=\"line\">    postMessage(currentDate);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>请注意加黑的代码，这里创建了一个SharedWorker对象，并把message事件绑定在shared worker的port对象上；同样由port对象发起postMessage， 开始执行后台代码sharedlengthytask.js。<br>下面是sharedlengthytask.js的主要代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> port;</span><br><span class=\"line\">addEventListener(<span class=\"string\">\"connect\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    port = evt.ports[<span class=\"number\">0</span>];</span><br><span class=\"line\">    port.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentDate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            currentDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (currentDate - date &lt; evt.data);</span><br><span class=\"line\">        port.postMessage(currentDate);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    port.start();</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用SharedWorker对象的后台代码需要绑定connect和message事件， connect事件会在页面上的port被start时触发。之后的message事件的回调函数与之前的基本相同，最后port调用postMessage方法把结果传回给页面。</p>\n<h3 id=\"5-Web-Worker使用XMLHttpRequest与服务端通信\"><a href=\"#5-Web-Worker使用XMLHttpRequest与服务端通信\" class=\"headerlink\" title=\"5. Web Worker使用XMLHttpRequest与服务端通信\"></a>5. Web Worker使用XMLHttpRequest与服务端通信</h3><p>有些情况下，web worker还需要与服务器进行交互。比如页面可能需要处理来自数据库中的信息，我们就需要使用Ajax技术与服务器交互，下面代码包含了web worker如何从服务端获取数据：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"lengthytaskhandler.ashx\"</span>);</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        postMessage(xhr.responseText);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码向服务端的asp.net服务lengthytaskhandler.ashx发出GET请求。并注册了获取数据后的onload事件。下面的代码是服务端的lengthytaskhandler.ashx:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace WebWorkerDemo &#123;</span><br><span class=\"line\">    public class LengthyTaskHandler: IHttpHandler &#123;</span><br><span class=\"line\">        public void ProcessRequest(HttpContext context) &#123;</span><br><span class=\"line\">            System.Threading.Thread.Sleep(10000);</span><br><span class=\"line\">            context.Response.ContentType = &quot;text/plain&quot;;</span><br><span class=\"line\">            content.Response.Write(&quot;Processing successful!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public bool IsReusable &#123;</span><br><span class=\"line\">            get &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如你所见，ProcessRequest模拟了一个长时间运行的任务，并返回了“Processing successful！”的消息。</p>\n<h3 id=\"6-通过Error事件捕捉错误信息\"><a href=\"#6-通过Error事件捕捉错误信息\" class=\"headerlink\" title=\"6. 通过Error事件捕捉错误信息\"></a>6. 通过Error事件捕捉错误信息</h3><p>当我们把越来越复杂的逻辑加到Web Worker里时，错误处理机制是必不可少的。而Web Worker恰恰提供了error事件，供开发者捕捉错误信息。下面的代码展示了如何绑定error事件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btnStart\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"scripts/lengthytask.js\"</span>);</span><br><span class=\"line\">    worker.addEventListener(<span class=\"string\">\"error\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Line #\"</span> + evt.lineno + <span class=\"string\">\" - \"</span> + evt.message + <span class=\"string\">\" in \"</span> + evt.filename);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    worker.postMessage(<span class=\"number\">10000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如上可见， Worker对象可以绑定error事件；而且evt对象中包含错误所在的代码文件（evt.filename）、错误所在的代码行数（evt.lineno）、以及错误信息（evt.message）。</p>\n<h3 id=\"7-通过terminate-方法终止Web-Worker\"><a href=\"#7-通过terminate-方法终止Web-Worker\" class=\"headerlink\" title=\"7. 通过terminate()方法终止Web Worker\"></a>7. 通过terminate()方法终止Web Worker</h3><p>有些情况下，我们可能需要强制终止执行中的Web Worker。Worker对象提供了terminate()来终止自身执行任务，被终止的Worker对象不能被重启或重用，我们只能新建另一个Worker实例来执行新的任务。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><p>所有主流浏览器均支持 web worker，除了 Internet Explorer。</p>\n<h3 id=\"如何检测-Web-Worker-支持\"><a href=\"#如何检测-Web-Worker-支持\" class=\"headerlink\" title=\"如何检测 Web Worker 支持\"></a>如何检测 Web Worker 支持</h3><p>在创建 web worker 之前，请检测用户的浏览器是否支持它：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Yes! Web worker support!</span></span><br><span class=\"line\">    <span class=\"comment\">// Some code.....</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Sorry! No Web Worker support..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完整的-Web-Worker-实例代码\"><a href=\"#完整的-Web-Worker-实例代码\" class=\"headerlink\" title=\"完整的 Web Worker 实例代码\"></a>完整的 Web Worker 实例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo_workers.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timedCount</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    i=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    postMessage(i);</span><br><span class=\"line\">    setTimeout(<span class=\"string\">\"timedCount()\"</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timedCount();</span><br></pre></td></tr></table></figure>\n<p>我们已经看到了 .js 文件中的 Worker 代码。下面是 HTML 页面的代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    \tCount numbers: <span class=\"tag\">&lt;<span class=\"name\">output</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">output</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"startWorker()\"</span>&gt;</span>Start Worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"stopWorker()\"</span>&gt;</span>Stop Worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> w;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startWorker</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(w) == <span class=\"string\">\"undefined\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                w = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"demo_workers.js\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            w.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>).innerHTML = event.data;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>).innerHTML = <span class=\"string\">\"Sorry, your browser does not support Web Workers...\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopWorker</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        w.terminate();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Web Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。另外，本文还介绍了Web Worker的错误处理机制，以及使用Ajax与服务端交互。</p>\n<h2 id=\"文献\"><a href=\"#文献\" class=\"headerlink\" title=\"文献\"></a>文献</h2><ol>\n<li><p><a href=\"http://www.developer.com/lang/jscript/7-things-you-need-to-know-about-web-workers.html\" target=\"_blank\" rel=\"noopener\">点击查看转转原文</a></p>\n</li>\n<li><p><a href=\"http://www.w3school.com.cn/html5/html_5_webworkers.asp\" target=\"_blank\" rel=\"noopener\">参考W3C</a></p>\n</li>\n</ol>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"WEB性能优化问题","p":"web/performance-one","date":"2014-01-09T00:21:49.000Z","_content":"\n## 背景\n\n谈谈前端性能优化问题 \n\n<!--more-->\n\n+ 代码层面：避免使用css表达式，避免使用高级选择器，通配选择器。\n+ 缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等\n+ 请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。\n+ 请求带宽：压缩文件，开启GZIP，\n\n#### 代码层面的优化\n    用hash-table来优化查找\n    少用全局变量\n    用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能\n    用setTimeout来避免页面失去响应\n    缓存DOM节点查找的结果\n    避免使用CSS Expression\n    避免全局查询\n    避免使用with(with会创建自己的作用域，会增加作用域链长度)\n    多个变量声明合并\n    避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率\n    尽量避免在HTML标签中写Style属性\n\n#### 移动端性能优化\n    尽量使用css3动画，开启硬件加速。\n    适当使用touch事件代替click事件。\n    避免使用css3渐变阴影效果。\n    可以用transform: translateZ(0)来开启硬件加速。\n    不滥用Float。Float在渲染时计算量比较大，尽量减少使用\n    不滥用Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。\n    合理使用requestAnimationFrame动画代替setTimeout\n    CSS中的属性（CSS3 transitions、CSS3 3D\ntransforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加\n    PC端的在移动端同样适用\n\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/web/performance-one.md","raw":"---\ntitle: WEB性能优化问题\np: web/performance-one\ndate: 2014-01-09 08:21:49\ntags: [web,performance,性能,优化]\ncategories: WEB\n---\n\n## 背景\n\n谈谈前端性能优化问题 \n\n<!--more-->\n\n+ 代码层面：避免使用css表达式，避免使用高级选择器，通配选择器。\n+ 缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等\n+ 请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。\n+ 请求带宽：压缩文件，开启GZIP，\n\n#### 代码层面的优化\n    用hash-table来优化查找\n    少用全局变量\n    用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能\n    用setTimeout来避免页面失去响应\n    缓存DOM节点查找的结果\n    避免使用CSS Expression\n    避免全局查询\n    避免使用with(with会创建自己的作用域，会增加作用域链长度)\n    多个变量声明合并\n    避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率\n    尽量避免在HTML标签中写Style属性\n\n#### 移动端性能优化\n    尽量使用css3动画，开启硬件加速。\n    适当使用touch事件代替click事件。\n    避免使用css3渐变阴影效果。\n    可以用transform: translateZ(0)来开启硬件加速。\n    不滥用Float。Float在渲染时计算量比较大，尽量减少使用\n    不滥用Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。\n    合理使用requestAnimationFrame动画代替setTimeout\n    CSS中的属性（CSS3 transitions、CSS3 3D\ntransforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加\n    PC端的在移动端同样适用\n\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"web/performance-one","published":1,"updated":"2018-01-17T07:11:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt47002zfme3yuqk5f1r","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>谈谈前端性能优化问题 </p>\n<a id=\"more\"></a>\n<ul>\n<li>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器。</li>\n<li>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</li>\n<li>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</li>\n<li>请求带宽：压缩文件，开启GZIP，</li>\n</ul>\n<h4 id=\"代码层面的优化\"><a href=\"#代码层面的优化\" class=\"headerlink\" title=\"代码层面的优化\"></a>代码层面的优化</h4><pre><code>用hash-table来优化查找\n少用全局变量\n用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能\n用setTimeout来避免页面失去响应\n缓存DOM节点查找的结果\n避免使用CSS Expression\n避免全局查询\n避免使用with(with会创建自己的作用域，会增加作用域链长度)\n多个变量声明合并\n避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率\n尽量避免在HTML标签中写Style属性\n</code></pre><h4 id=\"移动端性能优化\"><a href=\"#移动端性能优化\" class=\"headerlink\" title=\"移动端性能优化\"></a>移动端性能优化</h4><pre><code>尽量使用css3动画，开启硬件加速。\n适当使用touch事件代替click事件。\n避免使用css3渐变阴影效果。\n可以用transform: translateZ(0)来开启硬件加速。\n不滥用Float。Float在渲染时计算量比较大，尽量减少使用\n不滥用Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。\n合理使用requestAnimationFrame动画代替setTimeout\nCSS中的属性（CSS3 transitions、CSS3 3D\n</code></pre><p>transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加<br>    PC端的在移动端同样适用</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>谈谈前端性能优化问题 </p>","more":"<ul>\n<li>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器。</li>\n<li>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</li>\n<li>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</li>\n<li>请求带宽：压缩文件，开启GZIP，</li>\n</ul>\n<h4 id=\"代码层面的优化\"><a href=\"#代码层面的优化\" class=\"headerlink\" title=\"代码层面的优化\"></a>代码层面的优化</h4><pre><code>用hash-table来优化查找\n少用全局变量\n用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能\n用setTimeout来避免页面失去响应\n缓存DOM节点查找的结果\n避免使用CSS Expression\n避免全局查询\n避免使用with(with会创建自己的作用域，会增加作用域链长度)\n多个变量声明合并\n避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率\n尽量避免在HTML标签中写Style属性\n</code></pre><h4 id=\"移动端性能优化\"><a href=\"#移动端性能优化\" class=\"headerlink\" title=\"移动端性能优化\"></a>移动端性能优化</h4><pre><code>尽量使用css3动画，开启硬件加速。\n适当使用touch事件代替click事件。\n避免使用css3渐变阴影效果。\n可以用transform: translateZ(0)来开启硬件加速。\n不滥用Float。Float在渲染时计算量比较大，尽量减少使用\n不滥用Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。\n合理使用requestAnimationFrame动画代替setTimeout\nCSS中的属性（CSS3 transitions、CSS3 3D\n</code></pre><p>transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加<br>    PC端的在移动端同样适用</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"WEB性能优化之图片预加载","p":"web/performance-preload-images","date":"2015-11-17T07:10:52.000Z","_content":"\n## 前言\n优化网络图片预加载方法\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n        - [并行下载的好处](#并行下载的好处)\n        - [对预加载图片而言并非为一件好事](#对预加载图片而言并非为一件好事)\n        - [一种更好的预加载方式](#一种更好的预加载方式)\n        - [避免过早预加载](#避免过早预加载)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n利用浏览器多线程下载的原理， 预加载一组图片的一个通用的标准方式。\n简化形式如下：\n``` JS\n/* 'images' is an array with image metadata including a 'url' property */\nfor (var i = 0; i < images.length; ++i) {\n    var img = new Image();\n    img.src = images[‘url’];\n}\n```\n这段代码遍历包含图片元数据的对象数组，为每个对象创建一个HTML Image对象，并为src属性设置url。一旦Image对象设置了src值，浏览器就会向服务器发起请求，并缓存返回的图片。\n\n需要注意的是，浏览器请求是异步的。也就是说这段代码会遍历数组，每张图片几乎同时发起请求，并不需要等待服务器返回结果后顺序发起请求。对于现代浏览器而言，这段代码尝试并行下载4～8个张图片（当然如果来自不同域，会更多）。\n\n#### 并行下载的好处\n网站通常会有一些资源，浏览器必须先下载后才能显式页面。HTML本身，一两个CSS文档，一些小的图片元素，字体，偶尔会有一些不可避免的JavaScript文件（需要在页面可以绘制前执行）。每一个文件通常都相当小，但是每个请求与服务器的往返都会导致延迟开销。虽然这种延迟通常很小，每个文档的延迟都是毫秒级的，但是如果浏览器需要等待一个请求完成后才能发起另一个请求的话，这些毫秒将依次累加，并迅速增至秒级，用户必须要等待这么长时间后才能浏览页面内容。如果可以同时发起所有请求，那么整体而言延迟时间会降低为一次的往返时延，从而使页面加载时间减少几秒钟。这并不会加快每个文档的实际下载速度，你仍受特定带宽的限制，所以4～8个的并行请求使下载速度降低4～8倍。但是总体下载速度的确加快了，因为你避免了连续的延迟开销。因为浏览器必须在下载了关键元素后才能绘制页面，避免顺序延迟时间累加意味着更快的页面绘制。\n\n#### 对预加载图片而言并非为一件好事\n并行下载对于初始页面元素是非常有用的，因为浏览器在渲染页面前必须要先下载这些元素。一个CSS文件先于另一个CSS下载对于浏览器而言并无差别，因为浏览器需要两个文件都要下载后才能做其他事情。gallery里的图片预加载并非这种情况，你可以足够自信的预测哪个文件需要优先下载，你需要优先处理它，即使预加载的总体时间会稍长。\n\n我网站的gallery的分析数据非常直观。虽然从一张图片切换至另一张图片的方式有多种，缩略图和上一张与下一张链接，90%的点击是在下一张链接上。几乎所有情况下，页面加载完成后的最关键因素是gallery里的下一张图片文件。如果使用标准的预加载方式，你无法控制这张图片何时加载。浏览器尝试加载gallery里的每张图片，以浏览器的最大并发请求组。这种技术很好的减少了gallery的总体加载时间，但也意味着加载最重要图片（下一张图片）的时间显著增长，因为它需要与其他并发请求竞争带宽。在相对缓慢的1.5Mbps DSL连接情况下，加载一张350K的图片需要2秒钟，浏览者有可能必须要等到4～6张图片加载完成后才能看到这种图片。也就是说gallery里的下一张图片可见前有一个潜在的12～15s的等待时间。有利的一面是这4～6张其他图片现在会被缓存起来，但是让用户盯着加载图片12秒钟，我们可能已经失去了这些用户。如果你以非「宽度连接」的方式测试你的网站的话，你可能会惊讶的发现，你的预加载器使你的网站对一些用户变得更糟。\n\n#### 一种更好的预加载方式\n一旦理解了浏览者的行为，就可以设计一个预加载器，为大多数浏览者提供更好的体验。因为我知道几乎所有的浏览者是顺序浏览我的gallery，那么对我而言最好的策略是以相同的顺序加载图片。加载所有图片的总体时间可能会稍微长一些，因为我们会导致延迟开销累加，但此时的整体加载时间相对于页面的初始加载时间，并不是如此重要，因为在用户可以使用网站前，并不需要加载完所有的图片。我们只需要加载用户现在想看到的图片，javaScript如下：\n\n``` JS\nfunction preload(imageArray, index) {\n    index = index || 0;\n    if (imageArray && imageArray.length > index) {\n        var img = new Image();\n        img.onload = function() {\n            preload(imageArray, index + 1);\n        }\n        img.src = images[index][‘serving_url’];\n    }\n}\n/* images is an array with image metadata */\npreload(images);\n```\n注意：代码已做简化，生产环境代码会针对不同设备请求不同尺寸图片，并且会考虑用户进入gallery时非第一张图片的场景。\n\n处理数组中第一张图片(index 0)，添加onload事件处理函数，然后请求图片。只有当这张图片加载完成后，才会调用onload事件处理函数，然后为下一张图片做相同的操作，直到所有图片加载完成。\n\n#### 避免过早预加载\n在用户请求一个页面和浏览器可渲染这个页面之间会发生很多事情。这段时间内，你的用户只能坐在哪里看着一个空白页面。如果你珍惜你的用户，你应努力缩短这个时间。要做到这一点，需要尽可能快的传输浏览器所需的渲染页面的最少数据。你的预加载器不应参与其中。\n\n至少对我而言，预加载代码最好放在window onload处理函数内，如果使用jQuery的：\n\n``` JS\n$(window).load(function() {\n    /* Preload code goes here */\n});\n```\n\n## 小结\n预加载分 并行预加载（普通预加载） 和 串行预加载 （优化预加载）方式。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/web/performance-preload-images.md","raw":"---\ntitle: WEB性能优化之图片预加载\np: web/performance-preload-images\ndate: 2015-11-17 15:10:52\ntags: [web,preload,performance]\ncategories: WEB\n---\n\n## 前言\n优化网络图片预加载方法\n\n<!-- TOC -->\n\n- [前言](#前言)\n- [正文](#正文)\n        - [并行下载的好处](#并行下载的好处)\n        - [对预加载图片而言并非为一件好事](#对预加载图片而言并非为一件好事)\n        - [一种更好的预加载方式](#一种更好的预加载方式)\n        - [避免过早预加载](#避免过早预加载)\n- [小结](#小结)\n- [关于作者](#关于作者)\n\n<!-- /TOC -->\n\n<!--more-->\n\n## 正文\n利用浏览器多线程下载的原理， 预加载一组图片的一个通用的标准方式。\n简化形式如下：\n``` JS\n/* 'images' is an array with image metadata including a 'url' property */\nfor (var i = 0; i < images.length; ++i) {\n    var img = new Image();\n    img.src = images[‘url’];\n}\n```\n这段代码遍历包含图片元数据的对象数组，为每个对象创建一个HTML Image对象，并为src属性设置url。一旦Image对象设置了src值，浏览器就会向服务器发起请求，并缓存返回的图片。\n\n需要注意的是，浏览器请求是异步的。也就是说这段代码会遍历数组，每张图片几乎同时发起请求，并不需要等待服务器返回结果后顺序发起请求。对于现代浏览器而言，这段代码尝试并行下载4～8个张图片（当然如果来自不同域，会更多）。\n\n#### 并行下载的好处\n网站通常会有一些资源，浏览器必须先下载后才能显式页面。HTML本身，一两个CSS文档，一些小的图片元素，字体，偶尔会有一些不可避免的JavaScript文件（需要在页面可以绘制前执行）。每一个文件通常都相当小，但是每个请求与服务器的往返都会导致延迟开销。虽然这种延迟通常很小，每个文档的延迟都是毫秒级的，但是如果浏览器需要等待一个请求完成后才能发起另一个请求的话，这些毫秒将依次累加，并迅速增至秒级，用户必须要等待这么长时间后才能浏览页面内容。如果可以同时发起所有请求，那么整体而言延迟时间会降低为一次的往返时延，从而使页面加载时间减少几秒钟。这并不会加快每个文档的实际下载速度，你仍受特定带宽的限制，所以4～8个的并行请求使下载速度降低4～8倍。但是总体下载速度的确加快了，因为你避免了连续的延迟开销。因为浏览器必须在下载了关键元素后才能绘制页面，避免顺序延迟时间累加意味着更快的页面绘制。\n\n#### 对预加载图片而言并非为一件好事\n并行下载对于初始页面元素是非常有用的，因为浏览器在渲染页面前必须要先下载这些元素。一个CSS文件先于另一个CSS下载对于浏览器而言并无差别，因为浏览器需要两个文件都要下载后才能做其他事情。gallery里的图片预加载并非这种情况，你可以足够自信的预测哪个文件需要优先下载，你需要优先处理它，即使预加载的总体时间会稍长。\n\n我网站的gallery的分析数据非常直观。虽然从一张图片切换至另一张图片的方式有多种，缩略图和上一张与下一张链接，90%的点击是在下一张链接上。几乎所有情况下，页面加载完成后的最关键因素是gallery里的下一张图片文件。如果使用标准的预加载方式，你无法控制这张图片何时加载。浏览器尝试加载gallery里的每张图片，以浏览器的最大并发请求组。这种技术很好的减少了gallery的总体加载时间，但也意味着加载最重要图片（下一张图片）的时间显著增长，因为它需要与其他并发请求竞争带宽。在相对缓慢的1.5Mbps DSL连接情况下，加载一张350K的图片需要2秒钟，浏览者有可能必须要等到4～6张图片加载完成后才能看到这种图片。也就是说gallery里的下一张图片可见前有一个潜在的12～15s的等待时间。有利的一面是这4～6张其他图片现在会被缓存起来，但是让用户盯着加载图片12秒钟，我们可能已经失去了这些用户。如果你以非「宽度连接」的方式测试你的网站的话，你可能会惊讶的发现，你的预加载器使你的网站对一些用户变得更糟。\n\n#### 一种更好的预加载方式\n一旦理解了浏览者的行为，就可以设计一个预加载器，为大多数浏览者提供更好的体验。因为我知道几乎所有的浏览者是顺序浏览我的gallery，那么对我而言最好的策略是以相同的顺序加载图片。加载所有图片的总体时间可能会稍微长一些，因为我们会导致延迟开销累加，但此时的整体加载时间相对于页面的初始加载时间，并不是如此重要，因为在用户可以使用网站前，并不需要加载完所有的图片。我们只需要加载用户现在想看到的图片，javaScript如下：\n\n``` JS\nfunction preload(imageArray, index) {\n    index = index || 0;\n    if (imageArray && imageArray.length > index) {\n        var img = new Image();\n        img.onload = function() {\n            preload(imageArray, index + 1);\n        }\n        img.src = images[index][‘serving_url’];\n    }\n}\n/* images is an array with image metadata */\npreload(images);\n```\n注意：代码已做简化，生产环境代码会针对不同设备请求不同尺寸图片，并且会考虑用户进入gallery时非第一张图片的场景。\n\n处理数组中第一张图片(index 0)，添加onload事件处理函数，然后请求图片。只有当这张图片加载完成后，才会调用onload事件处理函数，然后为下一张图片做相同的操作，直到所有图片加载完成。\n\n#### 避免过早预加载\n在用户请求一个页面和浏览器可渲染这个页面之间会发生很多事情。这段时间内，你的用户只能坐在哪里看着一个空白页面。如果你珍惜你的用户，你应努力缩短这个时间。要做到这一点，需要尽可能快的传输浏览器所需的渲染页面的最少数据。你的预加载器不应参与其中。\n\n至少对我而言，预加载代码最好放在window onload处理函数内，如果使用jQuery的：\n\n``` JS\n$(window).load(function() {\n    /* Preload code goes here */\n});\n```\n\n## 小结\n预加载分 并行预加载（普通预加载） 和 串行预加载 （优化预加载）方式。\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"web/performance-preload-images","published":1,"updated":"2018-01-17T07:40:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt4j0032fme30qhh9kui","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>优化网络图片预加载方法</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><pre><code>- [并行下载的好处](#并行下载的好处)\n- [对预加载图片而言并非为一件好事](#对预加载图片而言并非为一件好事)\n- [一种更好的预加载方式](#一种更好的预加载方式)\n- [避免过早预加载](#避免过早预加载)\n</code></pre></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>利用浏览器多线程下载的原理， 预加载一组图片的一个通用的标准方式。<br>简化形式如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 'images' is an array with image metadata including a 'url' property */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; images.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.src = images[‘url’];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码遍历包含图片元数据的对象数组，为每个对象创建一个HTML Image对象，并为src属性设置url。一旦Image对象设置了src值，浏览器就会向服务器发起请求，并缓存返回的图片。</p>\n<p>需要注意的是，浏览器请求是异步的。也就是说这段代码会遍历数组，每张图片几乎同时发起请求，并不需要等待服务器返回结果后顺序发起请求。对于现代浏览器而言，这段代码尝试并行下载4～8个张图片（当然如果来自不同域，会更多）。</p>\n<h4 id=\"并行下载的好处\"><a href=\"#并行下载的好处\" class=\"headerlink\" title=\"并行下载的好处\"></a>并行下载的好处</h4><p>网站通常会有一些资源，浏览器必须先下载后才能显式页面。HTML本身，一两个CSS文档，一些小的图片元素，字体，偶尔会有一些不可避免的JavaScript文件（需要在页面可以绘制前执行）。每一个文件通常都相当小，但是每个请求与服务器的往返都会导致延迟开销。虽然这种延迟通常很小，每个文档的延迟都是毫秒级的，但是如果浏览器需要等待一个请求完成后才能发起另一个请求的话，这些毫秒将依次累加，并迅速增至秒级，用户必须要等待这么长时间后才能浏览页面内容。如果可以同时发起所有请求，那么整体而言延迟时间会降低为一次的往返时延，从而使页面加载时间减少几秒钟。这并不会加快每个文档的实际下载速度，你仍受特定带宽的限制，所以4～8个的并行请求使下载速度降低4～8倍。但是总体下载速度的确加快了，因为你避免了连续的延迟开销。因为浏览器必须在下载了关键元素后才能绘制页面，避免顺序延迟时间累加意味着更快的页面绘制。</p>\n<h4 id=\"对预加载图片而言并非为一件好事\"><a href=\"#对预加载图片而言并非为一件好事\" class=\"headerlink\" title=\"对预加载图片而言并非为一件好事\"></a>对预加载图片而言并非为一件好事</h4><p>并行下载对于初始页面元素是非常有用的，因为浏览器在渲染页面前必须要先下载这些元素。一个CSS文件先于另一个CSS下载对于浏览器而言并无差别，因为浏览器需要两个文件都要下载后才能做其他事情。gallery里的图片预加载并非这种情况，你可以足够自信的预测哪个文件需要优先下载，你需要优先处理它，即使预加载的总体时间会稍长。</p>\n<p>我网站的gallery的分析数据非常直观。虽然从一张图片切换至另一张图片的方式有多种，缩略图和上一张与下一张链接，90%的点击是在下一张链接上。几乎所有情况下，页面加载完成后的最关键因素是gallery里的下一张图片文件。如果使用标准的预加载方式，你无法控制这张图片何时加载。浏览器尝试加载gallery里的每张图片，以浏览器的最大并发请求组。这种技术很好的减少了gallery的总体加载时间，但也意味着加载最重要图片（下一张图片）的时间显著增长，因为它需要与其他并发请求竞争带宽。在相对缓慢的1.5Mbps DSL连接情况下，加载一张350K的图片需要2秒钟，浏览者有可能必须要等到4～6张图片加载完成后才能看到这种图片。也就是说gallery里的下一张图片可见前有一个潜在的12～15s的等待时间。有利的一面是这4～6张其他图片现在会被缓存起来，但是让用户盯着加载图片12秒钟，我们可能已经失去了这些用户。如果你以非「宽度连接」的方式测试你的网站的话，你可能会惊讶的发现，你的预加载器使你的网站对一些用户变得更糟。</p>\n<h4 id=\"一种更好的预加载方式\"><a href=\"#一种更好的预加载方式\" class=\"headerlink\" title=\"一种更好的预加载方式\"></a>一种更好的预加载方式</h4><p>一旦理解了浏览者的行为，就可以设计一个预加载器，为大多数浏览者提供更好的体验。因为我知道几乎所有的浏览者是顺序浏览我的gallery，那么对我而言最好的策略是以相同的顺序加载图片。加载所有图片的总体时间可能会稍微长一些，因为我们会导致延迟开销累加，但此时的整体加载时间相对于页面的初始加载时间，并不是如此重要，因为在用户可以使用网站前，并不需要加载完所有的图片。我们只需要加载用户现在想看到的图片，javaScript如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preload</span>(<span class=\"params\">imageArray, index</span>) </span>&#123;</span><br><span class=\"line\">    index = index || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imageArray &amp;&amp; imageArray.length &gt; index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            preload(imageArray, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = images[index][‘serving_url’];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* images is an array with image metadata */</span></span><br><span class=\"line\">preload(images);</span><br></pre></td></tr></table></figure>\n<p>注意：代码已做简化，生产环境代码会针对不同设备请求不同尺寸图片，并且会考虑用户进入gallery时非第一张图片的场景。</p>\n<p>处理数组中第一张图片(index 0)，添加onload事件处理函数，然后请求图片。只有当这张图片加载完成后，才会调用onload事件处理函数，然后为下一张图片做相同的操作，直到所有图片加载完成。</p>\n<h4 id=\"避免过早预加载\"><a href=\"#避免过早预加载\" class=\"headerlink\" title=\"避免过早预加载\"></a>避免过早预加载</h4><p>在用户请求一个页面和浏览器可渲染这个页面之间会发生很多事情。这段时间内，你的用户只能坐在哪里看着一个空白页面。如果你珍惜你的用户，你应努力缩短这个时间。要做到这一点，需要尽可能快的传输浏览器所需的渲染页面的最少数据。你的预加载器不应参与其中。</p>\n<p>至少对我而言，预加载代码最好放在window onload处理函数内，如果使用jQuery的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">window</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Preload code goes here */</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>预加载分 并行预加载（普通预加载） 和 串行预加载 （优化预加载）方式。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>优化网络图片预加载方法</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#正文\">正文</a><pre><code>- [并行下载的好处](#并行下载的好处)\n- [对预加载图片而言并非为一件好事](#对预加载图片而言并非为一件好事)\n- [一种更好的预加载方式](#一种更好的预加载方式)\n- [避免过早预加载](#避免过早预加载)\n</code></pre></li>\n<li><a href=\"#小结\">小结</a></li>\n<li><a href=\"#关于作者\">关于作者</a></li>\n</ul>\n<!-- /TOC -->","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>利用浏览器多线程下载的原理， 预加载一组图片的一个通用的标准方式。<br>简化形式如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 'images' is an array with image metadata including a 'url' property */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; images.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    img.src = images[‘url’];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码遍历包含图片元数据的对象数组，为每个对象创建一个HTML Image对象，并为src属性设置url。一旦Image对象设置了src值，浏览器就会向服务器发起请求，并缓存返回的图片。</p>\n<p>需要注意的是，浏览器请求是异步的。也就是说这段代码会遍历数组，每张图片几乎同时发起请求，并不需要等待服务器返回结果后顺序发起请求。对于现代浏览器而言，这段代码尝试并行下载4～8个张图片（当然如果来自不同域，会更多）。</p>\n<h4 id=\"并行下载的好处\"><a href=\"#并行下载的好处\" class=\"headerlink\" title=\"并行下载的好处\"></a>并行下载的好处</h4><p>网站通常会有一些资源，浏览器必须先下载后才能显式页面。HTML本身，一两个CSS文档，一些小的图片元素，字体，偶尔会有一些不可避免的JavaScript文件（需要在页面可以绘制前执行）。每一个文件通常都相当小，但是每个请求与服务器的往返都会导致延迟开销。虽然这种延迟通常很小，每个文档的延迟都是毫秒级的，但是如果浏览器需要等待一个请求完成后才能发起另一个请求的话，这些毫秒将依次累加，并迅速增至秒级，用户必须要等待这么长时间后才能浏览页面内容。如果可以同时发起所有请求，那么整体而言延迟时间会降低为一次的往返时延，从而使页面加载时间减少几秒钟。这并不会加快每个文档的实际下载速度，你仍受特定带宽的限制，所以4～8个的并行请求使下载速度降低4～8倍。但是总体下载速度的确加快了，因为你避免了连续的延迟开销。因为浏览器必须在下载了关键元素后才能绘制页面，避免顺序延迟时间累加意味着更快的页面绘制。</p>\n<h4 id=\"对预加载图片而言并非为一件好事\"><a href=\"#对预加载图片而言并非为一件好事\" class=\"headerlink\" title=\"对预加载图片而言并非为一件好事\"></a>对预加载图片而言并非为一件好事</h4><p>并行下载对于初始页面元素是非常有用的，因为浏览器在渲染页面前必须要先下载这些元素。一个CSS文件先于另一个CSS下载对于浏览器而言并无差别，因为浏览器需要两个文件都要下载后才能做其他事情。gallery里的图片预加载并非这种情况，你可以足够自信的预测哪个文件需要优先下载，你需要优先处理它，即使预加载的总体时间会稍长。</p>\n<p>我网站的gallery的分析数据非常直观。虽然从一张图片切换至另一张图片的方式有多种，缩略图和上一张与下一张链接，90%的点击是在下一张链接上。几乎所有情况下，页面加载完成后的最关键因素是gallery里的下一张图片文件。如果使用标准的预加载方式，你无法控制这张图片何时加载。浏览器尝试加载gallery里的每张图片，以浏览器的最大并发请求组。这种技术很好的减少了gallery的总体加载时间，但也意味着加载最重要图片（下一张图片）的时间显著增长，因为它需要与其他并发请求竞争带宽。在相对缓慢的1.5Mbps DSL连接情况下，加载一张350K的图片需要2秒钟，浏览者有可能必须要等到4～6张图片加载完成后才能看到这种图片。也就是说gallery里的下一张图片可见前有一个潜在的12～15s的等待时间。有利的一面是这4～6张其他图片现在会被缓存起来，但是让用户盯着加载图片12秒钟，我们可能已经失去了这些用户。如果你以非「宽度连接」的方式测试你的网站的话，你可能会惊讶的发现，你的预加载器使你的网站对一些用户变得更糟。</p>\n<h4 id=\"一种更好的预加载方式\"><a href=\"#一种更好的预加载方式\" class=\"headerlink\" title=\"一种更好的预加载方式\"></a>一种更好的预加载方式</h4><p>一旦理解了浏览者的行为，就可以设计一个预加载器，为大多数浏览者提供更好的体验。因为我知道几乎所有的浏览者是顺序浏览我的gallery，那么对我而言最好的策略是以相同的顺序加载图片。加载所有图片的总体时间可能会稍微长一些，因为我们会导致延迟开销累加，但此时的整体加载时间相对于页面的初始加载时间，并不是如此重要，因为在用户可以使用网站前，并不需要加载完所有的图片。我们只需要加载用户现在想看到的图片，javaScript如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preload</span>(<span class=\"params\">imageArray, index</span>) </span>&#123;</span><br><span class=\"line\">    index = index || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imageArray &amp;&amp; imageArray.length &gt; index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            preload(imageArray, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = images[index][‘serving_url’];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* images is an array with image metadata */</span></span><br><span class=\"line\">preload(images);</span><br></pre></td></tr></table></figure>\n<p>注意：代码已做简化，生产环境代码会针对不同设备请求不同尺寸图片，并且会考虑用户进入gallery时非第一张图片的场景。</p>\n<p>处理数组中第一张图片(index 0)，添加onload事件处理函数，然后请求图片。只有当这张图片加载完成后，才会调用onload事件处理函数，然后为下一张图片做相同的操作，直到所有图片加载完成。</p>\n<h4 id=\"避免过早预加载\"><a href=\"#避免过早预加载\" class=\"headerlink\" title=\"避免过早预加载\"></a>避免过早预加载</h4><p>在用户请求一个页面和浏览器可渲染这个页面之间会发生很多事情。这段时间内，你的用户只能坐在哪里看着一个空白页面。如果你珍惜你的用户，你应努力缩短这个时间。要做到这一点，需要尽可能快的传输浏览器所需的渲染页面的最少数据。你的预加载器不应参与其中。</p>\n<p>至少对我而言，预加载代码最好放在window onload处理函数内，如果使用jQuery的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">window</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Preload code goes here */</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>预加载分 并行预加载（普通预加载） 和 串行预加载 （优化预加载）方式。</p>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"},{"title":"常见WEB开发中的安全问题及防护原理","p":"web/security-one","date":"2015-06-08T08:50:38.000Z","_content":"\n## 背景\n常见WEB开发中的安全问题及防护原理\n\n## 目录\n\n### sql注入原理\n### XSS原理及防护\n### XSS与CSRF有什么区别吗？\n### CSRF的防御\n\n<!--more-->\n\n## 详细介绍\n\n### sql注入原理\n就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\n总的来说有以下几点：\n1. 永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双\"-\"进行转换等。\n2. 永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。\n3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n4. 不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。\n\n\n### XSS原理及防范\nXss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。\n\n#### XSS防范方法\n+ 首先代码里对用户输入的地方和变量都需要仔细检查长度和对”<”,”>”,”;”,”’”等字符做过滤；\n+ 其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。\n+ 其次，避免直接在cookie 中泄露用户隐私，例如email、密码等等。\n+ 再次，通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。\n+ 如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie。\n+ 最后，尽量采用POST 而非GET 提交表单\n\n### XSS与CSRF有什么区别吗？\nXSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。\n\n要完成一次CSRF攻击，受害者必须依次完成两个步骤：\n+ 登录受信任网站A，并在本地生成Cookie。\n+ 在不登出A的情况下，访问危险网站B。\n\n### CSRF的防御\n+ 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。\n+ 通过验证码的方法\n\n\n\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","source":"_posts/web/security-one.md","raw":"---\ntitle: 常见WEB开发中的安全问题及防护原理\np: web/security-one\ndate: 2015-06-08 16:50:38\ntags: [security,web]\ncategories: WEB\n---\n\n## 背景\n常见WEB开发中的安全问题及防护原理\n\n## 目录\n\n### sql注入原理\n### XSS原理及防护\n### XSS与CSRF有什么区别吗？\n### CSRF的防御\n\n<!--more-->\n\n## 详细介绍\n\n### sql注入原理\n就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\n总的来说有以下几点：\n1. 永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双\"-\"进行转换等。\n2. 永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。\n3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n4. 不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。\n\n\n### XSS原理及防范\nXss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。\n\n#### XSS防范方法\n+ 首先代码里对用户输入的地方和变量都需要仔细检查长度和对”<”,”>”,”;”,”’”等字符做过滤；\n+ 其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。\n+ 其次，避免直接在cookie 中泄露用户隐私，例如email、密码等等。\n+ 再次，通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。\n+ 如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie。\n+ 最后，尽量采用POST 而非GET 提交表单\n\n### XSS与CSRF有什么区别吗？\nXSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。\n\n要完成一次CSRF攻击，受害者必须依次完成两个步骤：\n+ 登录受信任网站A，并在本地生成Cookie。\n+ 在不登出A的情况下，访问危险网站B。\n\n### CSRF的防御\n+ 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。\n+ 通过验证码的方法\n\n\n\n\n\n\n## 关于作者\n** 珠峰\nWEB开发与管理相结合，注重技术与应用结合。现居上海。 \n","slug":"web/security-one","published":1,"updated":"2018-01-10T14:16:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdf9zt4l0037fme3vstdmkm1","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>常见WEB开发中的安全问题及防护原理</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h3 id=\"sql注入原理\"><a href=\"#sql注入原理\" class=\"headerlink\" title=\"sql注入原理\"></a>sql注入原理</h3><h3 id=\"XSS原理及防护\"><a href=\"#XSS原理及防护\" class=\"headerlink\" title=\"XSS原理及防护\"></a>XSS原理及防护</h3><h3 id=\"XSS与CSRF有什么区别吗？\"><a href=\"#XSS与CSRF有什么区别吗？\" class=\"headerlink\" title=\"XSS与CSRF有什么区别吗？\"></a>XSS与CSRF有什么区别吗？</h3><h3 id=\"CSRF的防御\"><a href=\"#CSRF的防御\" class=\"headerlink\" title=\"CSRF的防御\"></a>CSRF的防御</h3><a id=\"more\"></a>\n<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><h3 id=\"sql注入原理-1\"><a href=\"#sql注入原理-1\" class=\"headerlink\" title=\"sql注入原理\"></a>sql注入原理</h3><p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。<br>总的来说有以下几点：</p>\n<ol>\n<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</li>\n<li>永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</li>\n<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>\n<li>不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。</li>\n</ol>\n<h3 id=\"XSS原理及防范\"><a href=\"#XSS原理及防范\" class=\"headerlink\" title=\"XSS原理及防范\"></a>XSS原理及防范</h3><p>Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</p>\n<h4 id=\"XSS防范方法\"><a href=\"#XSS防范方法\" class=\"headerlink\" title=\"XSS防范方法\"></a>XSS防范方法</h4><ul>\n<li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；</li>\n<li>其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。</li>\n<li>其次，避免直接在cookie 中泄露用户隐私，例如email、密码等等。</li>\n<li>再次，通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。</li>\n<li>如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie。</li>\n<li>最后，尽量采用POST 而非GET 提交表单</li>\n</ul>\n<h3 id=\"XSS与CSRF有什么区别吗？-1\"><a href=\"#XSS与CSRF有什么区别吗？-1\" class=\"headerlink\" title=\"XSS与CSRF有什么区别吗？\"></a>XSS与CSRF有什么区别吗？</h3><p>XSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。</p>\n<p>要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>\n<ul>\n<li>登录受信任网站A，并在本地生成Cookie。</li>\n<li>在不登出A的情况下，访问危险网站B。</li>\n</ul>\n<h3 id=\"CSRF的防御-1\"><a href=\"#CSRF的防御-1\" class=\"headerlink\" title=\"CSRF的防御\"></a>CSRF的防御</h3><ul>\n<li>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</li>\n<li>通过验证码的方法</li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>常见WEB开发中的安全问题及防护原理</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h3 id=\"sql注入原理\"><a href=\"#sql注入原理\" class=\"headerlink\" title=\"sql注入原理\"></a>sql注入原理</h3><h3 id=\"XSS原理及防护\"><a href=\"#XSS原理及防护\" class=\"headerlink\" title=\"XSS原理及防护\"></a>XSS原理及防护</h3><h3 id=\"XSS与CSRF有什么区别吗？\"><a href=\"#XSS与CSRF有什么区别吗？\" class=\"headerlink\" title=\"XSS与CSRF有什么区别吗？\"></a>XSS与CSRF有什么区别吗？</h3><h3 id=\"CSRF的防御\"><a href=\"#CSRF的防御\" class=\"headerlink\" title=\"CSRF的防御\"></a>CSRF的防御</h3>","more":"<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><h3 id=\"sql注入原理-1\"><a href=\"#sql注入原理-1\" class=\"headerlink\" title=\"sql注入原理\"></a>sql注入原理</h3><p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。<br>总的来说有以下几点：</p>\n<ol>\n<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</li>\n<li>永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</li>\n<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>\n<li>不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。</li>\n</ol>\n<h3 id=\"XSS原理及防范\"><a href=\"#XSS原理及防范\" class=\"headerlink\" title=\"XSS原理及防范\"></a>XSS原理及防范</h3><p>Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</p>\n<h4 id=\"XSS防范方法\"><a href=\"#XSS防范方法\" class=\"headerlink\" title=\"XSS防范方法\"></a>XSS防范方法</h4><ul>\n<li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；</li>\n<li>其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。</li>\n<li>其次，避免直接在cookie 中泄露用户隐私，例如email、密码等等。</li>\n<li>再次，通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。</li>\n<li>如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie。</li>\n<li>最后，尽量采用POST 而非GET 提交表单</li>\n</ul>\n<h3 id=\"XSS与CSRF有什么区别吗？-1\"><a href=\"#XSS与CSRF有什么区别吗？-1\" class=\"headerlink\" title=\"XSS与CSRF有什么区别吗？\"></a>XSS与CSRF有什么区别吗？</h3><p>XSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。</p>\n<p>要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>\n<ul>\n<li>登录受信任网站A，并在本地生成Cookie。</li>\n<li>在不登出A的情况下，访问危险网站B。</li>\n</ul>\n<h3 id=\"CSRF的防御-1\"><a href=\"#CSRF的防御-1\" class=\"headerlink\" title=\"CSRF的防御\"></a>CSRF的防御</h3><ul>\n<li>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</li>\n<li>通过验证码的方法</li>\n</ul>\n<h2 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdf9zt1h0002fme3iqhg9750","category_id":"cjdf9zt1m0004fme3oye9lfuc","_id":"cjdf9zt24000efme3qkismyfr"},{"post_id":"cjdf9zt1j0003fme3ekig31xs","category_id":"cjdf9zt1w0009fme3r28u7381","_id":"cjdf9zt2c000lfme3k2z6z0wv"},{"post_id":"cjdf9zt1q0006fme3ge4hxobi","category_id":"cjdf9zt1m0004fme3oye9lfuc","_id":"cjdf9zt2i000pfme3ruqmvcrz"},{"post_id":"cjdf9zt1t0007fme3eglkzst0","category_id":"cjdf9zt2c000kfme33idws1yq","_id":"cjdf9zt2n000ufme3sd45uzlz"},{"post_id":"cjdf9zt1v0008fme3poxwpo9m","category_id":"cjdf9zt2i000qfme3r6wlv3iz","_id":"cjdf9zt2r0011fme33ccb1u5g"},{"post_id":"cjdf9zt1z000cfme3zf3i2uzz","category_id":"cjdf9zt2n000vfme3e3zudg98","_id":"cjdf9zt300019fme3472stifh"},{"post_id":"cjdf9zt22000dfme3pe11yb58","category_id":"cjdf9zt2i000qfme3r6wlv3iz","_id":"cjdf9zt35001efme3hd45di5w"},{"post_id":"cjdf9zt28000hfme3xshbc74l","category_id":"cjdf9zt2c000kfme33idws1yq","_id":"cjdf9zt38001jfme3i6cfoyrg"},{"post_id":"cjdf9zt2a000jfme33d27opu1","category_id":"cjdf9zt35001dfme36mv04c6q","_id":"cjdf9zt3c001qfme3dozsbor0"},{"post_id":"cjdf9zt2d000nfme3em6kqj9t","category_id":"cjdf9zt38001kfme3ge8ct7zm","_id":"cjdf9zt3g001wfme3yhcjgr2n"},{"post_id":"cjdf9zt3c001sfme3u07qngad","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3k0022fme3yvoezwaf"},{"post_id":"cjdf9zt2f000ofme3q5ugkq58","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3o0026fme3oeves2a0"},{"post_id":"cjdf9zt3e001vfme3roitppie","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3s0029fme3bey1joeu"},{"post_id":"cjdf9zt3h001zfme39b2u0pzs","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3t002cfme3lor1away"},{"post_id":"cjdf9zt2j000sfme3wjudn6t1","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3v002ffme3qnafz6gc"},{"post_id":"cjdf9zt3j0021fme3rnsdqdsg","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3x002ifme3j4nnwkle"},{"post_id":"cjdf9zt3l0025fme3h7hgdx0i","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt3y002lfme3zo2tcruf"},{"post_id":"cjdf9zt2l000tfme36namzl0m","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt40002ofme3ba1vz1ea"},{"post_id":"cjdf9zt3p0028fme3v68y754s","category_id":"cjdf9zt2i000qfme3r6wlv3iz","_id":"cjdf9zt42002qfme3p9ihxo8n"},{"post_id":"cjdf9zt3s002bfme3mas0nl9m","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt44002ufme3jft6n3u2"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt46002wfme3sbs6xzok"},{"post_id":"cjdf9zt3u002efme3yp3fefx8","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt490030fme36l5s7c6q"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4k0033fme3t55cjz89"},{"post_id":"cjdf9zt2r0012fme3tewvftsc","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4m0038fme3wmm7nbs2"},{"post_id":"cjdf9zt2u0016fme36rvsn8ze","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4n003afme3rgsjjwae"},{"post_id":"cjdf9zt2x0017fme3486ft8km","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4o003efme3fzem7mwj"},{"post_id":"cjdf9zt30001bfme37iqfylyw","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4o003hfme3s5wye8gv"},{"post_id":"cjdf9zt33001cfme33htf347c","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4p003mfme3rpdy0axe"},{"post_id":"cjdf9zt35001gfme31ejyj8mq","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4q003qfme31l8fqnxa"},{"post_id":"cjdf9zt37001ifme3z92c169m","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4s003ufme3ro3ph58q"},{"post_id":"cjdf9zt39001nfme3jrva5gz6","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4s003zfme3renyqwqi"},{"post_id":"cjdf9zt3a001pfme3nq8j73j6","category_id":"cjdf9zt3c001rfme3sy2cjccw","_id":"cjdf9zt4t0042fme3viq5i657"},{"post_id":"cjdf9zt3w002hfme3ace61jws","category_id":"cjdf9zt4s003yfme3higa9849","_id":"cjdf9zt4t0045fme3xfv45j0i"},{"post_id":"cjdf9zt3x002kfme3epf5802n","category_id":"cjdf9zt4t0043fme3q955vku7","_id":"cjdf9zt4t0048fme3nd4bmclk"},{"post_id":"cjdf9zt3z002nfme34dqpkb6q","category_id":"cjdf9zt4t0046fme3y372kq85","_id":"cjdf9zt4u004cfme3zr7p8t89"},{"post_id":"cjdf9zt40002pfme30aqwvsws","category_id":"cjdf9zt4t0049fme3z0h97ja9","_id":"cjdf9zt4v004hfme32z3k1lv7"},{"post_id":"cjdf9zt43002tfme3at2vrzvo","category_id":"cjdf9zt4u004dfme3nyxe322f","_id":"cjdf9zt4w004kfme3cv4ughn4"},{"post_id":"cjdf9zt45002vfme3guwqd1wb","category_id":"cjdf9zt4v004ifme32cujoj88","_id":"cjdf9zt4w004ofme351l20d7i"},{"post_id":"cjdf9zt47002zfme3yuqk5f1r","category_id":"cjdf9zt4v004ifme32cujoj88","_id":"cjdf9zt4y004rfme3cleauk4g"},{"post_id":"cjdf9zt4j0032fme30qhh9kui","category_id":"cjdf9zt4v004ifme32cujoj88","_id":"cjdf9zt4y004tfme31o6aqwyj"},{"post_id":"cjdf9zt4l0037fme3vstdmkm1","category_id":"cjdf9zt4v004ifme32cujoj88","_id":"cjdf9zt4y004vfme3prgeed35"}],"PostTag":[{"post_id":"cjdf9zt1h0002fme3iqhg9750","tag_id":"cjdf9zt1q0005fme3wfpde1k1","_id":"cjdf9zt1y000bfme3psebqckz"},{"post_id":"cjdf9zt1j0003fme3ekig31xs","tag_id":"cjdf9zt1x000afme3hqfof2bj","_id":"cjdf9zt2a000ifme3vjbupniv"},{"post_id":"cjdf9zt1q0006fme3ge4hxobi","tag_id":"cjdf9zt1q0005fme3wfpde1k1","_id":"cjdf9zt2p000yfme3m28zpzw5"},{"post_id":"cjdf9zt1q0006fme3ge4hxobi","tag_id":"cjdf9zt2c000mfme3yti0ql4k","_id":"cjdf9zt2r0010fme3zhw6zry9"},{"post_id":"cjdf9zt1q0006fme3ge4hxobi","tag_id":"cjdf9zt2i000rfme39xfvd8wz","_id":"cjdf9zt2t0015fme34g9sezjj"},{"post_id":"cjdf9zt1t0007fme3eglkzst0","tag_id":"cjdf9zt2n000wfme35fjlycig","_id":"cjdf9zt37001hfme3c5sbnx3u"},{"post_id":"cjdf9zt1t0007fme3eglkzst0","tag_id":"cjdf9zt2s0014fme3cy14c47h","_id":"cjdf9zt38001lfme3zv579tqv"},{"post_id":"cjdf9zt1t0007fme3eglkzst0","tag_id":"cjdf9zt30001afme3618jekva","_id":"cjdf9zt3a001ofme3mv61ws7t"},{"post_id":"cjdf9zt1v0008fme3poxwpo9m","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt3e001ufme3zknvh3vc"},{"post_id":"cjdf9zt1v0008fme3poxwpo9m","tag_id":"cjdf9zt39001mfme3hixa6yii","_id":"cjdf9zt3h001yfme30zc4zxov"},{"post_id":"cjdf9zt1z000cfme3zf3i2uzz","tag_id":"cjdf9zt3e001tfme37fs8ot14","_id":"cjdf9zt3k0023fme3ulieuzx2"},{"post_id":"cjdf9zt22000dfme3pe11yb58","tag_id":"cjdf9zt39001mfme3hixa6yii","_id":"cjdf9zt490031fme3hyalr92m"},{"post_id":"cjdf9zt22000dfme3pe11yb58","tag_id":"cjdf9zt3o0027fme3vir0bxvd","_id":"cjdf9zt4k0034fme3en8y4ste"},{"post_id":"cjdf9zt22000dfme3pe11yb58","tag_id":"cjdf9zt3u002dfme3p3ivki1m","_id":"cjdf9zt4m0039fme3kmtemirc"},{"post_id":"cjdf9zt22000dfme3pe11yb58","tag_id":"cjdf9zt3x002jfme3p13olmb8","_id":"cjdf9zt4n003bfme351yea8ec"},{"post_id":"cjdf9zt22000dfme3pe11yb58","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt4o003ffme3s350a096"},{"post_id":"cjdf9zt28000hfme3xshbc74l","tag_id":"cjdf9zt39001mfme3hixa6yii","_id":"cjdf9zt4p003jfme3z9lsji76"},{"post_id":"cjdf9zt28000hfme3xshbc74l","tag_id":"cjdf9zt4k0035fme350tke4ip","_id":"cjdf9zt4p003kfme3mux33hst"},{"post_id":"cjdf9zt28000hfme3xshbc74l","tag_id":"cjdf9zt4n003cfme31cfbjyvh","_id":"cjdf9zt4q003ofme3rnvo28aa"},{"post_id":"cjdf9zt2a000jfme33d27opu1","tag_id":"cjdf9zt4o003ifme3h4fbl06b","_id":"cjdf9zt4r003sfme3214rlo6c"},{"post_id":"cjdf9zt2a000jfme33d27opu1","tag_id":"cjdf9zt4q003nfme30ywpuljo","_id":"cjdf9zt4s003vfme3y04meswc"},{"post_id":"cjdf9zt2d000nfme3em6kqj9t","tag_id":"cjdf9zt4r003rfme37bnt5v45","_id":"cjdf9zt4s003xfme3y87kbqem"},{"post_id":"cjdf9zt2f000ofme3q5ugkq58","tag_id":"cjdf9zt4s003wfme3w1j2tf32","_id":"cjdf9zt4t0041fme3oxdms6f0"},{"post_id":"cjdf9zt2j000sfme3wjudn6t1","tag_id":"cjdf9zt4s0040fme31i2gh7s8","_id":"cjdf9zt4u004bfme3h95dm5ro"},{"post_id":"cjdf9zt2j000sfme3wjudn6t1","tag_id":"cjdf9zt4t0044fme39nppyo8a","_id":"cjdf9zt4u004efme3nzj5ai4y"},{"post_id":"cjdf9zt2j000sfme3wjudn6t1","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt4v004gfme30i8j4acn"},{"post_id":"cjdf9zt2l000tfme36namzl0m","tag_id":"cjdf9zt4u004afme3v3e2jffm","_id":"cjdf9zt4y004wfme33z7qcox5"},{"post_id":"cjdf9zt2l000tfme36namzl0m","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt4y004xfme3egcm98d4"},{"post_id":"cjdf9zt2l000tfme36namzl0m","tag_id":"cjdf9zt4w004jfme3jj85atub","_id":"cjdf9zt4z004zfme3c9y48gsp"},{"post_id":"cjdf9zt2l000tfme36namzl0m","tag_id":"cjdf9zt4w004mfme373e8tnre","_id":"cjdf9zt4z0050fme33j9z22ig"},{"post_id":"cjdf9zt2l000tfme36namzl0m","tag_id":"cjdf9zt2s0014fme3cy14c47h","_id":"cjdf9zt4z0052fme3iy1fxx8s"},{"post_id":"cjdf9zt2l000tfme36namzl0m","tag_id":"cjdf9zt4y004sfme3lkr04zmy","_id":"cjdf9zt4z0053fme320zfls3z"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","tag_id":"cjdf9zt4u004afme3v3e2jffm","_id":"cjdf9zt500058fme3foq70nui"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt500059fme3rwjvsocz"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","tag_id":"cjdf9zt4w004jfme3jj85atub","_id":"cjdf9zt50005bfme3hrxh6m1g"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","tag_id":"cjdf9zt4w004mfme373e8tnre","_id":"cjdf9zt50005cfme39nhx752l"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","tag_id":"cjdf9zt2s0014fme3cy14c47h","_id":"cjdf9zt50005efme3lifbvttj"},{"post_id":"cjdf9zt2n000xfme32hgfqdze","tag_id":"cjdf9zt4y004sfme3lkr04zmy","_id":"cjdf9zt50005ffme3dv9xuons"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","tag_id":"cjdf9zt4u004afme3v3e2jffm","_id":"cjdf9zt51005kfme3viv8ojjl"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt52005lfme3zh5hg6sh"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","tag_id":"cjdf9zt4w004jfme3jj85atub","_id":"cjdf9zt52005nfme3qr1i2shj"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","tag_id":"cjdf9zt4w004mfme373e8tnre","_id":"cjdf9zt52005ofme3shb1pj2g"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","tag_id":"cjdf9zt2s0014fme3cy14c47h","_id":"cjdf9zt52005qfme3uhh0gnwn"},{"post_id":"cjdf9zt2q000zfme3x3ud69lw","tag_id":"cjdf9zt4y004sfme3lkr04zmy","_id":"cjdf9zt52005rfme34spnoaeu"},{"post_id":"cjdf9zt2r0012fme3tewvftsc","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt52005tfme3iaok0ftk"},{"post_id":"cjdf9zt2r0012fme3tewvftsc","tag_id":"cjdf9zt52005mfme3q3q5vje7","_id":"cjdf9zt52005ufme3hj7kigct"},{"post_id":"cjdf9zt2u0016fme36rvsn8ze","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt53005yfme3lhspo6ru"},{"post_id":"cjdf9zt2u0016fme36rvsn8ze","tag_id":"cjdf9zt52005sfme3lcjbwl60","_id":"cjdf9zt53005zfme3xkz6005l"},{"post_id":"cjdf9zt2u0016fme36rvsn8ze","tag_id":"cjdf9zt52005vfme3xgyv72wc","_id":"cjdf9zt530061fme3qr93stig"},{"post_id":"cjdf9zt2u0016fme36rvsn8ze","tag_id":"cjdf9zt52005wfme3juqct85s","_id":"cjdf9zt530062fme3wv6rqjoq"},{"post_id":"cjdf9zt2x0017fme3486ft8km","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt540065fme3m2ki0paq"},{"post_id":"cjdf9zt2x0017fme3486ft8km","tag_id":"cjdf9zt530060fme38plr1lft","_id":"cjdf9zt540066fme3f5sfi60q"},{"post_id":"cjdf9zt2x0017fme3486ft8km","tag_id":"cjdf9zt530063fme3bftqtv21","_id":"cjdf9zt540068fme36hmpqsh7"},{"post_id":"cjdf9zt30001bfme37iqfylyw","tag_id":"cjdf9zt540064fme3eqr13tr8","_id":"cjdf9zt55006bfme3bp9pnc1q"},{"post_id":"cjdf9zt30001bfme37iqfylyw","tag_id":"cjdf9zt540067fme30t6svud1","_id":"cjdf9zt55006cfme3tq13bebk"},{"post_id":"cjdf9zt30001bfme37iqfylyw","tag_id":"cjdf9zt540069fme3ykum6vwd","_id":"cjdf9zt55006efme3lmo9aup6"},{"post_id":"cjdf9zt33001cfme33htf347c","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt55006hfme3qmr9g9gf"},{"post_id":"cjdf9zt33001cfme33htf347c","tag_id":"cjdf9zt55006dfme3mge2hgnk","_id":"cjdf9zt56006ifme3vt8y1k49"},{"post_id":"cjdf9zt33001cfme33htf347c","tag_id":"cjdf9zt55006ffme3inh20dle","_id":"cjdf9zt56006kfme3vjeo7wyo"},{"post_id":"cjdf9zt35001gfme31ejyj8mq","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt57006nfme3ol3g222q"},{"post_id":"cjdf9zt35001gfme31ejyj8mq","tag_id":"cjdf9zt540064fme3eqr13tr8","_id":"cjdf9zt58006ofme3qxq68gk4"},{"post_id":"cjdf9zt35001gfme31ejyj8mq","tag_id":"cjdf9zt56006lfme3p7gtkpuy","_id":"cjdf9zt58006qfme3egtgn6jl"},{"post_id":"cjdf9zt37001ifme3z92c169m","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt5a006tfme3kqdyt33m"},{"post_id":"cjdf9zt37001ifme3z92c169m","tag_id":"cjdf9zt540064fme3eqr13tr8","_id":"cjdf9zt5a006ufme31m5qux7a"},{"post_id":"cjdf9zt37001ifme3z92c169m","tag_id":"cjdf9zt56006lfme3p7gtkpuy","_id":"cjdf9zt5a006wfme35jf54b0q"},{"post_id":"cjdf9zt39001nfme3jrva5gz6","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt5c006zfme3dtm70mao"},{"post_id":"cjdf9zt39001nfme3jrva5gz6","tag_id":"cjdf9zt540064fme3eqr13tr8","_id":"cjdf9zt5c0070fme3hg45brjk"},{"post_id":"cjdf9zt39001nfme3jrva5gz6","tag_id":"cjdf9zt56006lfme3p7gtkpuy","_id":"cjdf9zt5c0072fme30ug50ihv"},{"post_id":"cjdf9zt3a001pfme3nq8j73j6","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt5d0075fme3agpilnzk"},{"post_id":"cjdf9zt3a001pfme3nq8j73j6","tag_id":"cjdf9zt5c0071fme33nhgnztc","_id":"cjdf9zt5d0076fme3kxss01c4"},{"post_id":"cjdf9zt3a001pfme3nq8j73j6","tag_id":"cjdf9zt5c0073fme3j7zo5l66","_id":"cjdf9zt5d0078fme3gowryqoq"},{"post_id":"cjdf9zt3c001sfme3u07qngad","tag_id":"cjdf9zt4u004afme3v3e2jffm","_id":"cjdf9zt5f007efme33fvbrt51"},{"post_id":"cjdf9zt3c001sfme3u07qngad","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt5f007ffme3geqx62tz"},{"post_id":"cjdf9zt3c001sfme3u07qngad","tag_id":"cjdf9zt5e0079fme3ujvx9xrn","_id":"cjdf9zt5f007hfme3qufbdm9y"},{"post_id":"cjdf9zt3c001sfme3u07qngad","tag_id":"cjdf9zt5e007afme3z6kmkwqa","_id":"cjdf9zt5f007ifme38ih2q9n4"},{"post_id":"cjdf9zt3c001sfme3u07qngad","tag_id":"cjdf9zt5e007bfme3p9al7omy","_id":"cjdf9zt5g007kfme3vavg81qw"},{"post_id":"cjdf9zt3c001sfme3u07qngad","tag_id":"cjdf9zt5e007cfme3xehg9ejs","_id":"cjdf9zt5g007lfme3shr4jb14"},{"post_id":"cjdf9zt3e001vfme3roitppie","tag_id":"cjdf9zt4u004afme3v3e2jffm","_id":"cjdf9zt5i007qfme3i0u4zdke"},{"post_id":"cjdf9zt3e001vfme3roitppie","tag_id":"cjdf9zt4v004ffme31h8m8mqh","_id":"cjdf9zt5i007rfme3500mw9oh"},{"post_id":"cjdf9zt3e001vfme3roitppie","tag_id":"cjdf9zt5e0079fme3ujvx9xrn","_id":"cjdf9zt5i007tfme3rf7gdh6l"},{"post_id":"cjdf9zt3e001vfme3roitppie","tag_id":"cjdf9zt5e007afme3z6kmkwqa","_id":"cjdf9zt5i007ufme3nqcrs4cs"},{"post_id":"cjdf9zt3e001vfme3roitppie","tag_id":"cjdf9zt5e007bfme3p9al7omy","_id":"cjdf9zt5j007wfme31dhpktqk"},{"post_id":"cjdf9zt3e001vfme3roitppie","tag_id":"cjdf9zt5e007cfme3xehg9ejs","_id":"cjdf9zt5j007xfme3e2t1dz80"},{"post_id":"cjdf9zt3h001zfme39b2u0pzs","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt5j007zfme3530i8zox"},{"post_id":"cjdf9zt3h001zfme39b2u0pzs","tag_id":"cjdf9zt5i007sfme327kcaadr","_id":"cjdf9zt5j0080fme3pn4gavbp"},{"post_id":"cjdf9zt3h001zfme39b2u0pzs","tag_id":"cjdf9zt5j007vfme365az2v9d","_id":"cjdf9zt5k0082fme3k7aagacf"},{"post_id":"cjdf9zt3j0021fme3rnsdqdsg","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt5l0085fme3tyn2efxb"},{"post_id":"cjdf9zt3j0021fme3rnsdqdsg","tag_id":"cjdf9zt52005vfme3xgyv72wc","_id":"cjdf9zt5l0086fme32tmhbm7u"},{"post_id":"cjdf9zt3j0021fme3rnsdqdsg","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt5l0088fme3rf3eko3o"},{"post_id":"cjdf9zt3j0021fme3rnsdqdsg","tag_id":"cjdf9zt5k0083fme3w82ctffa","_id":"cjdf9zt5l0089fme347q9229h"},{"post_id":"cjdf9zt3l0025fme3h7hgdx0i","tag_id":"cjdf9zt5k0084fme3m2gqp9w7","_id":"cjdf9zt5l008bfme3du591261"},{"post_id":"cjdf9zt3l0025fme3h7hgdx0i","tag_id":"cjdf9zt5l0087fme32ftpegsc","_id":"cjdf9zt5l008cfme34pnnzf09"},{"post_id":"cjdf9zt3p0028fme3v68y754s","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt5n008ifme3byop3wq2"},{"post_id":"cjdf9zt3p0028fme3v68y754s","tag_id":"cjdf9zt5l008afme3on62gfjv","_id":"cjdf9zt5n008jfme3e582ahpe"},{"post_id":"cjdf9zt3p0028fme3v68y754s","tag_id":"cjdf9zt4n003cfme31cfbjyvh","_id":"cjdf9zt5n008lfme3e6we61yh"},{"post_id":"cjdf9zt3p0028fme3v68y754s","tag_id":"cjdf9zt5m008efme35jkkt42b","_id":"cjdf9zt5n008mfme3q2mmb8xf"},{"post_id":"cjdf9zt3p0028fme3v68y754s","tag_id":"cjdf9zt3x002jfme3p13olmb8","_id":"cjdf9zt5o008ofme3zrnup8g5"},{"post_id":"cjdf9zt3p0028fme3v68y754s","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt5o008pfme3zhlmeth7"},{"post_id":"cjdf9zt3s002bfme3mas0nl9m","tag_id":"cjdf9zt5n008hfme3jw8jtiq9","_id":"cjdf9zt5o008rfme3j7q1uj6y"},{"post_id":"cjdf9zt3s002bfme3mas0nl9m","tag_id":"cjdf9zt5l0087fme32ftpegsc","_id":"cjdf9zt5o008sfme3m8gt6b9w"},{"post_id":"cjdf9zt3u002efme3yp3fefx8","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt5p008ufme3as77rpyd"},{"post_id":"cjdf9zt3u002efme3yp3fefx8","tag_id":"cjdf9zt5o008qfme3wyl3pjfm","_id":"cjdf9zt5p008vfme30aidduz4"},{"post_id":"cjdf9zt3w002hfme3ace61jws","tag_id":"cjdf9zt5o008tfme3xfcz7olh","_id":"cjdf9zt5r0091fme3ig5cqbtr"},{"post_id":"cjdf9zt3w002hfme3ace61jws","tag_id":"cjdf9zt5p008wfme3svri34am","_id":"cjdf9zt5r0092fme3aovuygs3"},{"post_id":"cjdf9zt3w002hfme3ace61jws","tag_id":"cjdf9zt42002rfme33subx0he","_id":"cjdf9zt5r0094fme3gm6xj194"},{"post_id":"cjdf9zt3w002hfme3ace61jws","tag_id":"cjdf9zt5p008yfme3n6omsbld","_id":"cjdf9zt5r0095fme3sa47rtuf"},{"post_id":"cjdf9zt3w002hfme3ace61jws","tag_id":"cjdf9zt3x002jfme3p13olmb8","_id":"cjdf9zt5r0097fme3355xjt2l"},{"post_id":"cjdf9zt3z002nfme34dqpkb6q","tag_id":"cjdf9zt5q0090fme32qy73nxu","_id":"cjdf9zt5s0098fme3dpta1evv"},{"post_id":"cjdf9zt3z002nfme34dqpkb6q","tag_id":"cjdf9zt5r0093fme3ftkm6chu","_id":"cjdf9zt5s009afme3qopumcl3"},{"post_id":"cjdf9zt40002pfme30aqwvsws","tag_id":"cjdf9zt5r0096fme3pg42cbfx","_id":"cjdf9zt5t009dfme3g7r74l7e"},{"post_id":"cjdf9zt40002pfme30aqwvsws","tag_id":"cjdf9zt5s0099fme3rwv1xljn","_id":"cjdf9zt5t009efme3nq5prw61"},{"post_id":"cjdf9zt40002pfme30aqwvsws","tag_id":"cjdf9zt5s009bfme3w42zm7xk","_id":"cjdf9zt5t009gfme373erc86i"},{"post_id":"cjdf9zt43002tfme3at2vrzvo","tag_id":"cjdf9zt5t009cfme3nopx9q77","_id":"cjdf9zt5t009hfme3ojd4pf2c"},{"post_id":"cjdf9zt45002vfme3guwqd1wb","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt5u009jfme3yeksc6d8"},{"post_id":"cjdf9zt45002vfme3guwqd1wb","tag_id":"cjdf9zt5t009ffme3zv5aotnx","_id":"cjdf9zt5u009kfme3w9lw90q8"},{"post_id":"cjdf9zt47002zfme3yuqk5f1r","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt5u009ofme366sxzuwm"},{"post_id":"cjdf9zt47002zfme3yuqk5f1r","tag_id":"cjdf9zt5t009ifme3e772lhlw","_id":"cjdf9zt5v009pfme3ddmb6p09"},{"post_id":"cjdf9zt47002zfme3yuqk5f1r","tag_id":"cjdf9zt5u009lfme3io74dgq2","_id":"cjdf9zt5v009rfme3cu9evimr"},{"post_id":"cjdf9zt47002zfme3yuqk5f1r","tag_id":"cjdf9zt5u009mfme33w82hqt6","_id":"cjdf9zt5v009sfme3ydr69bfb"},{"post_id":"cjdf9zt4j0032fme30qhh9kui","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt5v009ufme3c1mjxwgk"},{"post_id":"cjdf9zt4j0032fme30qhh9kui","tag_id":"cjdf9zt5u009nfme333gfaiqu","_id":"cjdf9zt5v009vfme3a23fjkav"},{"post_id":"cjdf9zt4j0032fme30qhh9kui","tag_id":"cjdf9zt5t009ifme3e772lhlw","_id":"cjdf9zt5v009wfme37cwcj4vc"},{"post_id":"cjdf9zt4l0037fme3vstdmkm1","tag_id":"cjdf9zt5v009tfme33zvc5peu","_id":"cjdf9zt5v009xfme36xqo5p4r"},{"post_id":"cjdf9zt4l0037fme3vstdmkm1","tag_id":"cjdf9zt35001ffme3yhckqyom","_id":"cjdf9zt5v009yfme3jbe800c7"}],"Tag":[{"name":"CSS","_id":"cjdf9zt1q0005fme3wfpde1k1"},{"name":"C#","_id":"cjdf9zt1x000afme3hqfof2bj"},{"name":"position","_id":"cjdf9zt2c000mfme3yti0ql4k"},{"name":"sticky","_id":"cjdf9zt2i000rfme39xfvd8wz"},{"name":"ARIA","_id":"cjdf9zt2n000wfme35fjlycig"},{"name":"H5","_id":"cjdf9zt2s0014fme3cy14c47h"},{"name":"HTML5","_id":"cjdf9zt30001afme3618jekva"},{"name":"web","_id":"cjdf9zt35001ffme3yhckqyom"},{"name":"h5","_id":"cjdf9zt39001mfme3hixa6yii"},{"name":"git","_id":"cjdf9zt3e001tfme37fs8ot14"},{"name":"project","_id":"cjdf9zt3o0027fme3vir0bxvd"},{"name":"note","_id":"cjdf9zt3u002dfme3p3ivki1m"},{"name":"css","_id":"cjdf9zt3x002jfme3p13olmb8"},{"name":"javascript","_id":"cjdf9zt42002rfme33subx0he"},{"name":"flex","_id":"cjdf9zt4k0035fme350tke4ip"},{"name":"media","_id":"cjdf9zt4n003cfme31cfbjyvh"},{"name":"备份","_id":"cjdf9zt4o003ifme3h4fbl06b"},{"name":"策略","_id":"cjdf9zt4q003nfme30ywpuljo"},{"name":"ITPMP","_id":"cjdf9zt4r003rfme37bnt5v45"},{"name":"代码段","_id":"cjdf9zt4s003wfme3w1j2tf32"},{"name":"package","_id":"cjdf9zt4s0040fme31i2gh7s8"},{"name":"gulp","_id":"cjdf9zt4t0044fme39nppyo8a"},{"name":"JS","_id":"cjdf9zt4u004afme3v3e2jffm"},{"name":"Javascript","_id":"cjdf9zt4v004ffme31h8m8mqh"},{"name":"OOP","_id":"cjdf9zt4w004jfme3jj85atub"},{"name":"OOJ","_id":"cjdf9zt4w004mfme373e8tnre"},{"name":"WEB","_id":"cjdf9zt4y004sfme3lkr04zmy"},{"name":"dialog","_id":"cjdf9zt52005mfme3q3q5vje7"},{"name":"queue","_id":"cjdf9zt52005sfme3lcjbwl60"},{"name":"js","_id":"cjdf9zt52005vfme3xgyv72wc"},{"name":"snippet","_id":"cjdf9zt52005wfme3juqct85s"},{"name":"async","_id":"cjdf9zt530060fme38plr1lft"},{"name":"defer","_id":"cjdf9zt530063fme3bftqtv21"},{"name":"面试","_id":"cjdf9zt540064fme3eqr13tr8"},{"name":"理想","_id":"cjdf9zt540067fme30t6svud1"},{"name":"问题","_id":"cjdf9zt540069fme3ykum6vwd"},{"name":"call","_id":"cjdf9zt55006dfme3mge2hgnk"},{"name":"apply","_id":"cjdf9zt55006ffme3inh20dle"},{"name":"题目","_id":"cjdf9zt56006lfme3p7gtkpuy"},{"name":"interview","_id":"cjdf9zt5c0071fme33nhgnztc"},{"name":"concepts","_id":"cjdf9zt5c0073fme3j7zo5l66"},{"name":"commonjs","_id":"cjdf9zt5e0079fme3ujvx9xrn"},{"name":"AMD","_id":"cjdf9zt5e007afme3z6kmkwqa"},{"name":"CMD","_id":"cjdf9zt5e007bfme3p9al7omy"},{"name":"ES6","_id":"cjdf9zt5e007cfme3xehg9ejs"},{"name":"2017","_id":"cjdf9zt5i007sfme327kcaadr"},{"name":"news","_id":"cjdf9zt5j007vfme365az2v9d"},{"name":"plugins","_id":"cjdf9zt5k0083fme3w82ctffa"},{"name":"react","_id":"cjdf9zt5k0084fme3m2gqp9w7"},{"name":"lifecycle","_id":"cjdf9zt5l0087fme32ftpegsc"},{"name":"viewport","_id":"cjdf9zt5l008afme3on62gfjv"},{"name":"rem","_id":"cjdf9zt5m008efme35jkkt42b"},{"name":"vue","_id":"cjdf9zt5n008hfme3jw8jtiq9"},{"name":"eventloop","_id":"cjdf9zt5o008qfme3wyl3pjfm"},{"name":"lesson","_id":"cjdf9zt5o008tfme3xfcz7olh"},{"name":"frontend","_id":"cjdf9zt5p008wfme3svri34am"},{"name":"html","_id":"cjdf9zt5p008yfme3n6omsbld"},{"name":"macos","_id":"cjdf9zt5q0090fme32qy73nxu"},{"name":"path","_id":"cjdf9zt5r0093fme3ftkm6chu"},{"name":"sql","_id":"cjdf9zt5r0096fme3pg42cbfx"},{"name":"postgresql","_id":"cjdf9zt5s0099fme3rwv1xljn"},{"name":"pg","_id":"cjdf9zt5s009bfme3w42zm7xk"},{"name":"小程序","_id":"cjdf9zt5t009cfme3nopx9q77"},{"name":"worker","_id":"cjdf9zt5t009ffme3zv5aotnx"},{"name":"performance","_id":"cjdf9zt5t009ifme3e772lhlw"},{"name":"性能","_id":"cjdf9zt5u009lfme3io74dgq2"},{"name":"优化","_id":"cjdf9zt5u009mfme33w82hqt6"},{"name":"preload","_id":"cjdf9zt5u009nfme333gfaiqu"},{"name":"security","_id":"cjdf9zt5v009tfme33zvc5peu"}]}}