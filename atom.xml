<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>致力于拯救世界的IT农民工</title>
  
  <subtitle>朱胜峰的网络事件</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://taoqianbao.github.io/"/>
  <updated>2018-05-29T01:02:56.000Z</updated>
  <id>http://taoqianbao.github.io/</id>
  
  <author>
    <name>Peter Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react dva框架 的 路由与页面跳转方法</title>
    <link href="http://taoqianbao.github.io/2018/05/29/react/react-dva-router-md/"/>
    <id>http://taoqianbao.github.io/2018/05/29/react/react-dva-router-md/</id>
    <published>2018-05-29T01:00:46.000Z</published>
    <updated>2018-05-29T01:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一、 link 跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line">&lt;Link to=&#123;</span><br><span class="line">     &#123; </span><br><span class="line">         pathname:<span class="string">"/ant"</span>, </span><br><span class="line">         query:&#123;<span class="attr">foo</span>: <span class="string">'foo'</span>, <span class="attr">boo</span>:<span class="string">'boo'</span>&#125;,  </span><br><span class="line">         state:&#123;<span class="attr">data</span>:<span class="string">'hello'</span>&#125;   </span><br><span class="line">     &#125; </span><br><span class="line">&#125; &gt;</span><br></pre></td></tr></table></figure><p>二、点击路由跳转 在effects 里面使用yield put</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 onClick=&#123;testClick&#125;&gt;test&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">const testClick = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp"> dispatch(&#123;</span></span><br><span class="line"><span class="regexp">    type: 'test/</span>redirect<span class="string">',</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">effects: &#123;</span></span><br><span class="line"><span class="string">    // 路由跳转</span></span><br><span class="line"><span class="string">    * redirect (&#123; payload &#125;, &#123; put &#125;) &#123;</span></span><br><span class="line"><span class="string">      yield put(routerRedux.push('</span>/products<span class="string">', &#123;name: '</span>dkvirus<span class="string">'&#125;));</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="react" scheme="http://taoqianbao.github.io/categories/react/"/>
    
    
      <category term="react" scheme="http://taoqianbao.github.io/tags/react/"/>
    
      <category term="dva" scheme="http://taoqianbao.github.io/tags/dva/"/>
    
      <category term="react-router" scheme="http://taoqianbao.github.io/tags/react-router/"/>
    
      <category term="dva-router" scheme="http://taoqianbao.github.io/tags/dva-router/"/>
    
  </entry>
  
  <entry>
    <title>npm更新和nodejs更新</title>
    <link href="http://taoqianbao.github.io/2018/03/27/nodejs/nodejs-upgrade/"/>
    <id>http://taoqianbao.github.io/2018/03/27/nodejs/nodejs-upgrade/</id>
    <published>2018-03-27T01:14:30.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>npm更新和nodejs更新</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>更新你已经安装的NPM库，这个很简单，只需要运行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g</span><br></pre></td></tr></table></figure></p><p>更新Nodejs自身。一直依赖我都是下载最新版的源码，然后make install，及其繁琐。其实只需要运行以下2个命令即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n </span><br><span class="line">n latest</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;npm更新和nodejs更新&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;更新你已经安装的NPM库，这个很简单，只需要运行。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm update -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更新Nodejs自身。一直依赖我都是下载最新版的源码，然后make install，及其繁琐。其实只需要运行以下2个命令即可：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g n &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://taoqianbao.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://taoqianbao.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>教你如何在Git Commit时输出漂亮的文档</title>
    <link href="http://taoqianbao.github.io/2018/03/06/git/git-cz/"/>
    <id>http://taoqianbao.github.io/2018/03/06/git/git-cz/</id>
    <published>2018-03-06T07:18:16.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家有没有观察过那些在Github上Star数位居前列的项目，它们无一例外的都拥有完善的文档体系和高覆盖的测试用例。要做到完善没有规范肯定是不行的，代码要有代码的规范，协作要有协作的规范。我们今天要说的主题就是关于Git中记录Commit Message的参考规范。</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#commit规范">Commit规范</a></li><li><a href="#commit-message-格式">Commit Message 格式</a></li><li><a href="#实践利器">实践利器</a></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Commit规范"><a href="#Commit规范" class="headerlink" title="Commit规范"></a>Commit规范</h3><p>顺着思路，这一步应该给方案了，方案就是上图AngularJS项目中用到的Git Commit Guidelines。</p><h3 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h3><p><type>(<scope>): <subject><br>&lt;空行&gt;</subject></scope></type></p><p><body><br>&lt;空行&gt;</body></p><footer><p>上面是一次Commit后Message格式规范，分成标题，内容详情，结尾三个部分，各有各的用处，没有多余项。</p><p>头部即首行，是可以直接在页面中预览的部分，入上面图中所示，一共有三个部分<type>，<scope>，<subject>，含义分别如下</subject></scope></type></p><p><strong><em> Type: </em></strong></p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li><li>Scope</li></ul><p>用来说明本次Commit影响的范围，即简要说明修改会涉及的部分。这个本来是选填项，但从AngularJS实际项目中可以看出基本上也成了必填项了。</p><p><strong><em> Subject </em></strong></p><p>用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循下面三条:</p><p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</p><p>首字母不要大写</p><p>结尾不用句号(.)</p><p><strong><em> Body </em></strong></p><p><body>里的内容是对上面subject里内容的展开，在此做更加详尽的描述，内容里应该包含修改动机和修改前后的对比。</body></p><p><strong><em> Footer </em></strong><br>footer里的主要放置不兼容变更和Issue关闭的信息</p><p><strong><em> Revert </em></strong></p><p>此外如果需要撤销之前的Commit，那么本次Commit Message中必须以revert：开头，后面紧跟前面描述的Header部分，格式不变。并且，Body部分的格式也是固定的，必须要记录撤销前Commit的SHA值。</p><h3 id="实践利器"><a href="#实践利器" class="headerlink" title="实践利器"></a>实践利器</h3><p>上面就是AngularJS目前的Commit规范，相信第一次接触的话不免会有些头大，这时如果有什么能Step by Step的提醒或者可视化的演示就好了。OK，你来对地儿了，现在就来说说如何把规范变为可执行的具体步骤！</p><p><strong><em> 安装利器Commitiz </em></strong> </p><p>为了让我们能把这些规范应用到实际使用中，我们要借助于Commitizen这个Node工具，它会在我们Commit的过程中更具规范的内容来引导我们如何一步一步实施规范。当然，规范这种东西就没有唯一的，各家有各家的不同，这一点当然也被该工具想到了，你也可以自定义一份自己的规范，以插件的形式让Commitizen来根据自家规范提醒你。</p><p><strong><em> 安装 </em></strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen</span><br></pre></td></tr></table></figure></p><p><strong><em> 配置 </em></strong> </p><p>上一步我们在全局范围内安装了commitizen，之后我们就可以在Git仓库中配置我们的Commit规范了。打开项目执行如下命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure><p>上面的cz-conventional-changelog就是AngularJS的规范，其它的规范你可以自行到官网上找找看，不行就自己花时间拟定一份吧。此命令帮你完成了下载cz-conventional-changelog规范，配置package.json(添加依赖和配置应用规范)，想看具体改动打开package.json即可。</p><p><strong><em> 使用 </em></strong> </p><p>至此就算完整的安装完了，之后在需要git commit的地方更换成git cz指令即可呼出Commit的交互界面，来step by step的提醒你上面规范的各处该怎么填，是在不明在自己建一个项目练习几次就好了。顺手贴张动图，没看到文末的同学可惜了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p></footer>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不知道大家有没有观察过那些在Github上Star数位居前列的项目，它们无一例外的都拥有完善的文档体系和高覆盖的测试用例。要做到完善没有规范肯定是不行的，代码要有代码的规范，协作要有协作的规范。我们今天要说的主题就是关于Git中记录Commit Message的参考规范。&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#commit规范&quot;&gt;Commit规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#commit-message-格式&quot;&gt;Commit Message 格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#实践利器&quot;&gt;实践利器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="git" scheme="http://taoqianbao.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://taoqianbao.github.io/tags/git/"/>
    
      <category term="commit" scheme="http://taoqianbao.github.io/tags/commit/"/>
    
      <category term="giz-cz" scheme="http://taoqianbao.github.io/tags/giz-cz/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://taoqianbao.github.io/2018/02/24/javascript/es6-start/"/>
    <id>http://taoqianbao.github.io/2018/02/24/javascript/es6-start/</id>
    <published>2018-02-24T09:39:43.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做项目之前，需要搭建一个舒适的开发环境。选择es6不仅是为了尝鲜，更是为了跟上潮流，强迫自己学习新语法，最大化的利用好语言的优势。</p><ol><li>最小／最方便搭建的开发环境</li><li>自动编译／打包</li><li>测试</li></ol><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本阶段先完成第一部分，即搭建一个es6的开发环境，需要监控文件变化，自动重启。解决方案就是nodemon+babel。</p><p>nodemon和babel的介绍</p><p>nodemon是一个nodejs应用的自动监控工具，会监听文件修改，自动重启。</p><p>nodemon官网</p><p>Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.<br>babel是一个javascript编译器，可以将es6或者更新的js语言版本转换成es5或者更低，从而达到语法兼容的目的。</p><p>Babel · The compiler for writing next generation JavaScript</p><p>具体搭建步骤</p><ol><li>全局安装两个必要的cli工具<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nodemon babel-cli</span><br></pre></td></tr></table></figure></li></ol><p>其中i是install的简写。</p><ol><li>初始化package.json<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li></ol><p>初始化完成后会得到一个package.json文件</p><ol><li>安装两个babel插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-preset-es2015 babel-preset-stage-0</span><br></pre></td></tr></table></figure></li></ol><p>-D 是 –save-dev的简写</p><p>用babel-preset-stage-0是为了支持async/await，这个是es7的语法，但是考虑到这是异步的较好解决方案，项目中会用到，因此加上了。</p><ol><li><p>写.babelrc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-0"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加dev script命令</p></li></ol><p>修改package.json中的scripts字段为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"nodemon --exec babel-node index.js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><ol><li>创建index.js文件</li></ol><p>这里为了测试async/await，贴一段经典代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">123</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testAsync = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">await</span> f();</span><br><span class="line">  <span class="built_in">console</span>.log(t);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">testAsync();</span><br></pre></td></tr></table></figure></p><p>至此一个最简单的es6开发环境完成了，创建好index.js文件，运行使用以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>输出如下图<br><img src="https://pic4.zhimg.com/v2-ee0e0dd7145e908444870a665163983e_r.jpg" alt="pic"></p><p>至此已经完成了第一部分：最小／最方便搭建的开发环境的搭建，至于后面两部分，等有需求了再升级当前环境。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做项目之前，需要搭建一个舒适的开发环境。选择es6不仅是为了尝鲜，更是为了跟上潮流，强迫自己学习新语法，最大化的利用好语言的优势。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最小／最方便搭建的开发环境&lt;/li&gt;
&lt;li&gt;自动编译／打包&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全栈开发之NODEJS服务区搭建向导</title>
    <link href="http://taoqianbao.github.io/2018/02/12/web/how-to-install-node-envs/"/>
    <id>http://taoqianbao.github.io/2018/02/12/web/how-to-install-node-envs/</id>
    <published>2018-02-12T04:12:16.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现阶段要开发小程序，搭建服务器环境，所以本文主要用于安装服务器环境。</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#环境要求">环境要求</a></li><li><a href="#安装-nginx">安装 Nginx</a></li><li><a href="#安装nodejs">安装Node.js</a></li><li><a href="#开启-sftp">开启 SFTP</a></li><li><a href="#配置-nginx-和-https">配置 Nginx 和 HTTPS</a></li><li><a href="#部署代码">部署代码</a></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>服务器系统：CentOS 7.3 64位<br>数据库：MySQL 5.7</p><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>Node.js 是单进程的，我们可以通过多开 Node.js 并配合 Nginx 来实现多进程 Node.js 负载均衡，并且一些静态文件我们也可以直接通过 Nginx 代理，提高性能。其中第一步就是安装 Nginx。</p><p>通过 SSH 连接上云服务器，直接使用包管理工具 yum 安装 Nginx 即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure><p>安装完成之后会显示 Complete!，可以通过如下命令检查 Nginx 是否安装成功：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><p>这个命令会显示 Nginx 的版本号，如果显示如下信息，则安装成功：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# nginx -v</span><br><span class="line">nginx version: nginx/<span class="number">1.12</span><span class="number">.2</span></span><br><span class="line">[root@VM_0_11_centos ~]#</span><br></pre></td></tr></table></figure></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>本文演示Demo 需要 7.6 以上版本的 Node.js 才能运行，目前最新版本为 8.x，yum 本身不提供 Node.js 的源，所以首先我们得切换源：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https:<span class="comment">//rpm.nodesource.com/setup_8.x | sudo bash -</span></span><br></pre></td></tr></table></figure></p><p>接着就可以直接通过 yum 安装了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure></p><p>同理，我们可以通过如下命令验证 Node.js 是否安装成功：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><p>该命令会返回当前 Node.js 的版本号，如果你看到了版本号大于 7.6，则 Node.js 安装成功：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# node -v</span><br><span class="line">v8<span class="number">.9</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></p><h3 id="开启-SFTP"><a href="#开启-SFTP" class="headerlink" title="开启 SFTP"></a>开启 SFTP</h3><p>SFTP 是一种安全的文件传输协议，我们可以通过 SFTP 把本地的文件上传到服务器上，通过以下命令检查 sftp 状态：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd status</span><br></pre></td></tr></table></figure></p><p>看到输出的信息中有 active (running) 则表示 sshd 进程已经开启，可以通过 sftp 连接：</p><p><img src="/imgs/web/service-sshd-status.png" alt="service sshd status"></p><p>接下来可以通过 FileZilla、Transmit 等 FTP 工具连接上服务器。</p><h3 id="配置-Nginx-和-HTTPS"><a href="#配置-Nginx-和-HTTPS" class="headerlink" title="配置 Nginx 和 HTTPS"></a>配置 Nginx 和 HTTPS</h3><p>完成以上准备工作，就要开始配置 Nginx 和 HTTPS 了，首先需要申请一个 SSL 证书，可以到腾讯云申请免费的 <a href="https://console.cloud.tencent.com/ssl/apply" target="_blank" rel="noopener">SSL 证书</a>，申请成功之后下载证书，并把压缩包中 Nginx 目录下的证书文件通过 SFTP 上传到服务器的 /data/release/nginx 目录，如果没有这个目录则新建：</p><p><img src="/imgs/web/SFTP.png" alt="sftp tools"></p><p>上传完证书以后，可以开始配置 Nginx，进入服务器的 /etc/nginx/conf.d 目录，新建一个 weapp.conf 文件，将文件拷贝到本地，打开编辑，写入如下配置（请将配置里 wx.ijason.cc 修改为你自己的域名，包括证书文件）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">upstream app_weapp &#123;</span><br><span class="line">    server localhost:<span class="number">5757</span>;</span><br><span class="line">    keepalive <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      <span class="number">80</span>;</span><br><span class="line">    server_name wx.ijason.cc;</span><br><span class="line"></span><br><span class="line">    rewrite ^(.*)$ https:<span class="comment">//$server_name$1 permanent;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      <span class="number">443</span>;</span><br><span class="line">    server_name wx.ijason.cc;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line"></span><br><span class="line">    ssl_certificate           /data/release/nginx/<span class="number">1</span>_wx.ijason.cc_bundle.crt;</span><br><span class="line">    ssl_certificate_key       /data/release/nginx/<span class="number">2</span>_wx.ijason.cc.key;</span><br><span class="line">    ssl_session_timeout       <span class="number">5</span>m;</span><br><span class="line">    ssl_protocols             TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">    ssl_ciphers               ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;</span><br><span class="line">    ssl_session_cache         shared:SSL:<span class="number">50</span>m;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//app_weapp;</span></span><br><span class="line">        proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection <span class="string">'upgrade'</span>;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完将这个文件上传到服务器上，然后在 ssh 中输入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p><p>如果显示如下信息，则配置成功：</p><p><img src="/imgs/web/nginx-test.png" alt="ngix test"></p><p>配置成功之后，输入 nginx 回车，即可启动 Nginx。</p><p>此时通过配置的域名访问服务器，会显示 Nginx 详情页：</p><p><img src="/imgs/web/nginx-index.png" alt="nginx index page"></p><p>如果访问 <a href="http://你的域名/weapp/a" target="_blank" rel="noopener">http://你的域名/weapp/a</a> 会自动跳转到 HTTPS 上，并显示 502 Bad Gateway，则表示配置成功：</p><p><img src="/imgs/web/nginx-502.png" alt="nginx index page"></p><h3 id="部署代码"><a href="#部署代码" class="headerlink" title="部署代码"></a>部署代码</h3><p>新建一个 <a href="https://github.com/koajs/koa" target="_blank" rel="noopener">KOA</a> 项目<br>接着将 编译后的代码 目录下的所有文件都上传到 /data/release/weapp 目录下：<br><img src="/imgs/web/sftp-filelist.png" alt="sftp file list"></p><p>使用 SSH 切换到代码目录：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/releaes/weapp</span><br></pre></td></tr></table></figure></p><p>输入以下命令切换 npm 源到腾讯云镜像，防止官方镜像下载失败：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http:<span class="comment">//mirrors.tencentyun.com/npm/</span></span><br></pre></td></tr></table></figure></p><p>接着安装全局依赖：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure></p><p>然后安装本地依赖：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>接着执行如下代码启动 Node.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure></p><p>完成</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现阶段要开发小程序，搭建服务器环境，所以本文主要用于安装服务器环境。&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#环境要求&quot;&gt;环境要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装-nginx&quot;&gt;安装 Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装nodejs&quot;&gt;安装Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#开启-sftp&quot;&gt;开启 SFTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#配置-nginx-和-https&quot;&gt;配置 Nginx 和 HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#部署代码&quot;&gt;部署代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="web" scheme="http://taoqianbao.github.io/categories/web/"/>
    
    
      <category term="nodejs" scheme="http://taoqianbao.github.io/tags/nodejs/"/>
    
      <category term="全栈" scheme="http://taoqianbao.github.io/tags/%E5%85%A8%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发之入门基础知识</title>
    <link href="http://taoqianbao.github.io/2018/02/08/miniapp/how-to-study/"/>
    <id>http://taoqianbao.github.io/2018/02/08/miniapp/how-to-study/</id>
    <published>2018-02-08T01:07:52.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司开始大力推广微信小程序，由于有过小程序的开发经验，自当起到带头作用，承担起学习引入人的作用。<br>本文主要是适合基础无前端开发经验人群，有意向开发微信小程序的伙伴阅读。<br>所有内容来自互联网和自我读后感，有任何差错，请忽略….</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#01-小程序之入门篇">01. 小程序之入门篇</a></li><li><a href="#02-小程序之目录结构">02. 小程序之目录结构</a></li><li><a href="#03-小程序之生命周期">03. 小程序之生命周期</a></li><li><a href="#04-小程序之数据绑定">04. 小程序之数据绑定</a></li><li><a href="#05-小程序之触控事件">05. 小程序之触控事件</a></li><li><a href="#06-小程序之基础组件篇之视图容器">06. 小程序之基础组件篇之视图容器</a></li><li><a href="#07-小程序之基础组件篇之基础内容">07. 小程序之基础组件篇之基础内容</a></li><li><a href="#08-小程序之基础组件篇之表单组件">08. 小程序之基础组件篇之表单组件</a></li><li><a href="#09-小程序之基础组件篇之导航组件">09. 小程序之基础组件篇之导航组件</a></li><li><a href="#10-小程序之其它组件">10. 小程序之其它组件</a></li><li><a href="#11-小程序之拓展篇之调试工具">11. 小程序之拓展篇之调试工具</a></li><li><a href="#12-小程序之拓展篇之样式库weui-wxss">12. 小程序之拓展篇之样式库weui-wxss</a></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>其实入门教程系列，再好也比不了<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">官方文档</a>，写的很全，向导也很到位，但是就当写读后感，再提炼下吧。</p><p>心急吃不了豆腐，但是，还是先尝试Hello World开发吧。</p><h3 id="01-小程序之入门篇"><a href="#01-小程序之入门篇" class="headerlink" title="01. 小程序之入门篇"></a>01. 小程序之入门篇</h3><p><strong><em> 环境搭建 </em></strong><br>首先跳入<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="noopener">简易教程</a>，根据向导走一遍流程，我们通过开发者工具快速创建了一个 QuickStart 项目，这里完全靠官方文档走一遍，是不是很轻松？</p><p><strong><em> 项目配置 </em></strong><br>接下来，我们讲一讲小程序的代码构成要素： <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/quickstart/basic/file.html" target="_blank" rel="noopener">官方资料</a></p><p><img src="/imgs/miniapp/miniapp-fileintro.png" alt="配置文件图"></p><p><strong><em> JSON配置 </em></strong><br>这里主要有 </p><ul><li>app.json</li><li>project.config.json</li><li>page.json</li></ul><p><strong><em> app.json </em></strong> 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。<br>其他配置项细节可以参考文档 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="noopener">小程序的配置 app.json</a></p><p><img src="/imgs/miniapp/miniapp-app-config.png" alt="app.json配置项列表"></p><p><strong><em> 工具配置 project.config.json </em></strong> 其他配置项细节可以参考文档 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/edit.html#%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">开发者工具的配置</a></p><p><strong><em> 页面配置 page.json </em></strong> 其他配置项细节可以参考文档 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="noopener">小程序的配置 page.json</a></p><hr><h3 id="02-小程序之目录结构"><a href="#02-小程序之目录结构" class="headerlink" title="02. 小程序之目录结构"></a>02. 小程序之目录结构</h3><p>框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。</p><ul><li>JSON配置</li><li>WXML模版</li><li>WXSS样式</li><li>JS逻辑交互</li></ul><p>MVVM<br><img src="/imgs/miniapp/miniapp-mvvm1.png" alt="MVVM"></p><hr><h3 id="03-小程序之生命周期"><a href="#03-小程序之生命周期" class="headerlink" title="03. 小程序之生命周期"></a>03. 小程序之生命周期</h3><p>小程序生命周期</p><ul><li>APP生命周期</li><li>页面生命周期</li></ul><hr><p><strong><em> APP生命周期示例 </em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something initial when launch.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do something when show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do something when hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: <span class="string">'I am global data'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p><strong><em> 页面生命周期示例 </em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js  </span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">"This is page data."</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do some initialize when page load.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page ready.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page close.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when pull down.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page reach bottom.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// return custom share data when user share.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPageScroll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page scroll</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onTabItemTap(item) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.index)</span><br><span class="line">    <span class="built_in">console</span>.log(item.pagePath)</span><br><span class="line">    <span class="built_in">console</span>.log(item.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Event handler.</span></span><br><span class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      text: <span class="string">'Set some data for updating view.'</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this is setData callback</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  customData: &#123;</span><br><span class="line">    hi: <span class="string">'MINA'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="04-小程序之数据绑定"><a href="#04-小程序之数据绑定" class="headerlink" title="04. 小程序之数据绑定"></a>04. 小程序之数据绑定</h3><p><strong><em> 数据传值 </em></strong></p><ul><li>页面内</li><li>页面与页面之间</li><li>父组件与子组件之间</li></ul><hr><p><img src="/imgs/miniapp/miniapp-mvvm2.png" alt="视图驱动视图更新"></p><p>简单的讲，对象状态化，只要对象状态发送变化，就通知页面更新视图元素。 通过以下三个步骤实现：</p><ul><li>识别哪个UI元素被绑定了相应的对象。</li><li>监视对象状态的变化。</li><li><p>将所有变化传播到绑定的视图上。</p><p>注意数据流向是单向的，即视图变化不会影响对象状态。</p></li></ul><p>以下将展示小程序提供的更加多元化的复杂的数据绑定方式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">index.wxml</span><br><span class="line">&lt;!--数据绑定--内容--&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--数据绑定--组件属性--&gt;</span></span><br><span class="line"><span class="regexp">&lt;view id="item-&#123;&#123;id&#125;&#125;"&gt;组件属性id-&#123;&#123;id&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据绑定---控制属性--&gt;</span><br><span class="line">&lt;view wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;condition&#125;&#125;"</span>&gt;控制属性&#123;&#123;condition&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--数据绑定---三元运算--&gt;</span></span><br><span class="line"><span class="regexp">&lt;view hidden="&#123;&#123;flag ? true : false&#125;&#125;"&gt;Hidden--&#123;&#123;flag&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据绑定---算数运算--&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--数据绑定---逻辑判断--&gt;</span></span><br><span class="line"><span class="regexp">&lt;view wx:if="&#123;&#123;length &gt; 5&#125;&#125;"&gt;6&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据绑定---字符串运算--&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;<span class="string">"Hello  "</span> + name&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--数据绑定---数组组合--&gt;</span></span><br><span class="line"><span class="regexp">&lt;view wx:for="&#123;&#123;[zero, 1, 2, 3, 4, 5, 6]&#125;&#125;"&gt;&#123;&#123;item&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据绑定---对象--&gt;</span><br><span class="line">&lt;!--最终组合成的对象是&#123;<span class="attr">for</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>&#125;--&gt;</span><br><span class="line">&lt;template is=<span class="string">"objectCombine"</span> data=<span class="string">"&#123;&#123;for: x, bar: y&#125;&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--数据绑定---扩展运算符 ... 来将一个对象展开--&gt;</span><br><span class="line">&lt;!--最终组合成的对象是&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span>, <span class="attr">e</span>: <span class="number">5</span>&#125;--&gt;</span><br><span class="line">&lt;template is=<span class="string">"objectCombine"</span> data=<span class="string">"&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--数据绑定---对象的 key 和 value 相同--&gt;</span><br><span class="line">&lt;!--最终组合成的对象是&#123;<span class="attr">foo</span>: <span class="string">'my-foo'</span>, <span class="attr">bar</span>:<span class="string">'my-bar'</span>&#125;--&gt;</span><br><span class="line">&lt;template is=<span class="string">"objectCombine"</span> data=<span class="string">"&#123;&#123;foo, bar&#125;&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>对应的逻辑层代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    <span class="comment">//内容</span></span><br><span class="line">    message:<span class="string">'Hello MINA!'</span>,</span><br><span class="line">    <span class="comment">//组件属性</span></span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">//控制属性</span></span><br><span class="line">    condition: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//三元运算</span></span><br><span class="line">    flag:<span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//算数运算</span></span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    <span class="comment">//逻辑判断</span></span><br><span class="line">    length: <span class="number">6</span>,</span><br><span class="line">    <span class="comment">//字符串运算</span></span><br><span class="line">    name: <span class="string">'MINA'</span>,</span><br><span class="line">    <span class="comment">//数组组合</span></span><br><span class="line">    zero: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//对象展开</span></span><br><span class="line">    obj1: &#123;</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        b: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    obj2: &#123;</span><br><span class="line">        c: <span class="number">3</span>,</span><br><span class="line">        d: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    e: <span class="number">5</span>,</span><br><span class="line">    <span class="comment">//对象key和value相同</span></span><br><span class="line">    foo: <span class="string">'my-foo'</span>,</span><br><span class="line">    bar: <span class="string">'my-bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态。调用this.setData（）方法实现视图的部分渲染。如下图：<br><img src="/imgs/miniapp/miniapp-view-object.png" alt="视图-对象"></p><h3 id="05-小程序之触控事件"><a href="#05-小程序之触控事件" class="headerlink" title="05. 小程序之触控事件"></a>05. 小程序之触控事件</h3><p>主要是页面交互事件的处理<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="06-小程序之基础组件篇之视图容器"><a href="#06-小程序之基础组件篇之视图容器" class="headerlink" title="06. 小程序之基础组件篇之视图容器"></a>06. 小程序之基础组件篇之视图容器</h3><p>视图容器组件主要有：</p><ul><li>view</li><li>scroll-view</li><li>swiper</li><li>movable-view</li><li>cover-view</li></ul><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html" target="_blank" rel="noopener">官方文档之视图容器</a></p><p><strong><em> WXML模版 </em></strong><br>WXML(WeiXin Markup Language), <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/" target="_blank" rel="noopener">语法介绍</a></p><p>视图层</p><ul><li>数据绑定</li><li>条件渲染</li><li>列表渲染</li><li>事件</li></ul><hr><p><strong><em> WXSS样式 </em></strong></p><ul><li>1、尺寸单位</li><li>2、样式引入</li><li>3、选择器</li><li>4、小程序布局</li></ul><p><strong><em> 1、尺寸单位 </em></strong><br>WXSS支持的单位有px、rem和rpx，其中rem和rpx可以针对屏幕容器进行适配，px则为固定尺寸。<br>其中1rpx=0.5px，在WXSS和WXML中定义的rpx单位最终会转换为在手机端可以识别的rem单位。</p><p>建议：开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。</p><p>所以工程师拿到750的设计稿，在PS中量取的容器大小，可以直接定义为rpx，不需要进行2倍尺寸的换算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">view &#123;</span><br><span class="line">  font-size:<span class="number">26</span>rpx;</span><br><span class="line">  width:<span class="number">400</span>rpx;</span><br><span class="line">  height:<span class="number">400</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  备注：rpx的单位不光在样式中会自适应，写在WXML的style里也会根据屏幕自适应。</p><p><strong><em> 2、样式引入 </em></strong><br>看到很多文章说小程序不支持样式的@import，其实官方公布的第一个正式开发者工具就已经支持了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"../wxss/common.wxss"</span>;</span><br></pre></td></tr></table></figure><p><strong><em> 3、选择器 </em></strong></p><p>小程序支持的选择器在官方公布的文档中包括:<br>.class、#id、 element、element,element、::after(注意是双冒号)、::before 这6种选择器。<br>经过测试，小程序对于:first-child、:last-child、.class-a .class-b{}，甚至更多层级的嵌套都是支持的。<br>不过官方并不推荐级联的这种写法，因为考虑到后面切Native的扩展可能，会没办法支持级联选择。<br>所以保险起见，不建议.class-a .class-b{}这种级联的写法，以免后期工具过滤导致页面错乱。</p><p><strong><em> Tips:CSS样式的优先级 </em></strong><br>选择器的优先权:<br>（外部样式）External style sheet &lt;（内部样式）Internal style sheet &lt;（内联样式）Inline style</p><p>计算规则：</p><ol><li>内联样式表的权值最高 1000</li><li>ID 选择器的权值为 100</li><li>Class 类选择器的权值为 10</li><li>HTML 标签选择器的权值为 1</li></ol><p>Tips:<br>CSS 优先级法则:<br>    A  选择器都有一个权值，权值越大越优先；<br>    B  当权值相等时，后出现的样式表设置要优于先出现的样式表设置；<br>    C  创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；<br>    D  继承的CSS 样式不如后来指定的CSS 样式；<br>    E  在同一组属性设置中标有“!important”规则的优先级最大</p><hr><p><strong><em> 4、小程序布局 </em></strong></p><p><strong><em> CSS盒子布局 </em></strong><br>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。<br>它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p><img src="/imgs/css/css-box.png" alt="css盒子模型"></p><p><strong><em> 弹性盒子Flex布局 </em></strong><br>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br><a href="https://github.com/taoqianbao/tqb-miniapp-flex" target="_blank" rel="noopener">Flex布局示例</a></p><p><strong><em> 5、注意点 </em></strong></p><ul><li>WXSS中是不能引入本地资源的, 只能使用线上资源（模拟器是可以，但是别信），可以使用base64。</li><li>app.wxss 和每个 page 的wxss 的覆盖关系是: 如果有同名 rule 的话，page 会覆盖 app 的，不是merge是覆盖</li><li>WXSS的 rule 是不支持集联的。(兼容考虑)</li></ul><hr><h3 id="07-小程序之基础组件篇之基础内容"><a href="#07-小程序之基础组件篇之基础内容" class="headerlink" title="07. 小程序之基础组件篇之基础内容"></a>07. 小程序之基础组件篇之基础内容</h3><p>基础组件：icon,text,rich-text,progress<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html" target="_blank" rel="noopener">官方文档之基础内容篇</a></p><h3 id="08-小程序之基础组件篇之表单组件"><a href="#08-小程序之基础组件篇之表单组件" class="headerlink" title="08. 小程序之基础组件篇之表单组件"></a>08. 小程序之基础组件篇之表单组件</h3><p>表单组件：button,checkbox,form,input,label,picker,picker-view,radio,slider,switch,textarea<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html" target="_blank" rel="noopener">官方文档之表单组件篇</a></p><h3 id="09-小程序之基础组件篇之导航组件"><a href="#09-小程序之基础组件篇之导航组件" class="headerlink" title="09. 小程序之基础组件篇之导航组件"></a>09. 小程序之基础组件篇之导航组件</h3><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html" target="_blank" rel="noopener">官方文档之页面导航</a></p><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html" target="_blank" rel="noopener">官方文档之页面路由</a></p><p>页面路由<br>在小程序中所有页面的路由全部由框架进行管理。</p><p>主要了解的概念：</p><ul><li>页面栈</li><li>getCurrentPages()</li><li>路由方式：</li></ul><p><a href="https://github.com/taoqianbao/tqb-miniapp-guide" target="_blank" rel="noopener">页面路由示例代码下载</a><br><img src="/imgs/miniapp/miniapp-route-demo.png" alt="示例图"></p><p>Tips:</p><ul><li>navigateTo, redirectTo 只能打开非 tabBar 页面。</li><li>switchTab 只能打开 tabBar 页面。</li><li>reLaunch 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的onLoad中获取。</li></ul><h3 id="10-小程序之其它组件"><a href="#10-小程序之其它组件" class="headerlink" title="10. 小程序之其它组件"></a>10. 小程序之其它组件</h3><p>主要有：媒体组件、地图、画布、其它开放能力</p><h3 id="11-小程序之拓展篇之调试工具"><a href="#11-小程序之拓展篇之调试工具" class="headerlink" title="11. 小程序之拓展篇之调试工具"></a>11. 小程序之拓展篇之调试工具</h3><p>如何调试小程序，在开发过程中至关重要，下面图就是：<br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/debug.html" target="_blank" rel="noopener">官方文档调试篇</a></p><p>主要有三种调试工具：</p><ol><li><p>小程序开发工具<br><img src="/imgs/miniapp/miniapp-debug1.png" alt="小程序开发工具调试窗口"></p></li><li><p>手机端调试窗口：<br><img src="/imgs/miniapp/miniapp-debug2.jpeg" alt="小程序开发工具调试窗口"><br><img src="/imgs/miniapp/miniapp-debug3.jpeg" alt="小程序开发工具调试窗口"><br><img src="/imgs/miniapp/miniapp-debug4.jpeg" alt="小程序开发工具调试窗口"></p></li><li><p>抓包工具 charles等 </p></li></ol><hr><h3 id="12-小程序之拓展篇之样式库weui-wxss"><a href="#12-小程序之拓展篇之样式库weui-wxss" class="headerlink" title="12. 小程序之拓展篇之样式库weui-wxss"></a>12. 小程序之拓展篇之样式库weui-wxss</h3><p><a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">样式框架</a></p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此，您对项目还有哪些问题吗？</p><p>以下是整理的资源:</p><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="noopener">官方开发文档</a></p><ul><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html" target="_blank" rel="noopener">开发者工具</a></li><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html" target="_blank" rel="noopener">页面路由官网资料</a></li><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/debug.html" target="_blank" rel="noopener">官方文档调试篇</a></li></ul><p>学习资料</p><ul><li><a href="http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html" target="_blank" rel="noopener">样式优选级</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">flex布局语法</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">flex布局实战</a></li></ul><p>示例代码</p><ul><li><a href="https://github.com/taoqianbao/tqb-miniapp-guide" target="_blank" rel="noopener">页面路由示例代码下载</a></li><li><a href="https://github.com/taoqianbao/tqb-miniapp-flex" target="_blank" rel="noopener">页面布局示例代码下载</a></li></ul><p>前端基础</p><ul><li><a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">CSS样式</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference" target="_blank" rel="noopener">CSS</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;公司开始大力推广微信小程序，由于有过小程序的开发经验，自当起到带头作用，承担起学习引入人的作用。&lt;br&gt;本文主要是适合基础无前端开发经验人群，有意向开发微信小程序的伙伴阅读。&lt;br&gt;所有内容来自互联网和自我读后感，有任何差错，请忽略….&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#01-小程序之入门篇&quot;&gt;01. 小程序之入门篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#02-小程序之目录结构&quot;&gt;02. 小程序之目录结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#03-小程序之生命周期&quot;&gt;03. 小程序之生命周期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#04-小程序之数据绑定&quot;&gt;04. 小程序之数据绑定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#05-小程序之触控事件&quot;&gt;05. 小程序之触控事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#06-小程序之基础组件篇之视图容器&quot;&gt;06. 小程序之基础组件篇之视图容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#07-小程序之基础组件篇之基础内容&quot;&gt;07. 小程序之基础组件篇之基础内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#08-小程序之基础组件篇之表单组件&quot;&gt;08. 小程序之基础组件篇之表单组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#09-小程序之基础组件篇之导航组件&quot;&gt;09. 小程序之基础组件篇之导航组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#10-小程序之其它组件&quot;&gt;10. 小程序之其它组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#11-小程序之拓展篇之调试工具&quot;&gt;11. 小程序之拓展篇之调试工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-小程序之拓展篇之样式库weui-wxss&quot;&gt;12. 小程序之拓展篇之样式库weui-wxss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://taoqianbao.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://taoqianbao.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>必须知道的javascript概念题</title>
    <link href="http://taoqianbao.github.io/2018/02/02/javascript/javascript-concepts/"/>
    <id>http://taoqianbao.github.io/2018/02/02/javascript/javascript-concepts/</id>
    <published>2018-02-02T09:00:50.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下面是一些 Web 开发中常见的概念</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol><li>原始值和引用值(Value vs. Reference)</li></ol><p>理解对象、数组和函数是如何复制和传递到函数中的。了解引用值是被复制了什么，理解原始值是通过复制值来进行复制和传递的。</p><ol><li>域(Scope)</li></ol><p>理解全局域、函数域以及块级作用域之间的区别。了解变量在哪里是可用的，了解 JavaScript 引擎如何执行变量查找。</p><ol><li>提升(Hoisting)</li></ol><p>认识到变量和函数的声明会被提升到声明所在的上下文，即在变量的作用域内，不管变量在何处声明，都会被提升到作用域的顶部，但是变量初始化的顺序不变。认识到函数表达式不会被提升。</p><ol><li>闭包(Closures)</li></ol><p>认识到一个函数会保留对在其内部创建的域的访问，认识到这些可以让我们做什么，例如数据隐藏、内存化以及动态函数生成。</p><ol><li>this</li></ol><p>理解 this 绑定的规则。知道它的工作机制，知道在函数中如何判断它等同于什么，并且认识到为什么它是有用的。</p><ol><li>new</li></ol><p>认识到它如何与面向对象编程产生联系。了解通过 new 调用的函数会发生什么。理解通过使用 new 来自函数 prototype 属性的继承的对象是如何生成的。</p><ol><li>apply, call, bind</li></ol><p>了解这些函数是如何工作的，了解如何使用它们。了解它们对 this 做了什么。</p><ol><li>原型和继承(Prototypes &amp; Inheritance)</li></ol><p>理解 JavaScript 中的继承通过 [[Prototype]] 链进行工作。理解如何通过函数和对象设置继承，以及 new 是如何帮助我们实现的。了解 <strong>proto</strong> 和 prototype 属性是什么，以及它们的作用。</p><ol><li>异步 JS(Asynchronous JS)</li></ol><p>理解事件循环，理解浏览器是如何处理用户输入、Web 请求和一般事件的。知道如何识别并正确实现异步代码。理解 JavaScript 中异步和单线程分别是怎样的。.</p><ol><li>高阶函数(Higher Order Functions)</li></ol><p>理解这些函数是 JavaScript 中的第一类对象以及这意味着什么，了解从另一个函数返回函数是完全合法的。了解闭包和高阶函数允许我们使用的技术。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在学习 JavaScript 和 Web 开发的人很多，他们都希望能凭此获得一份工作。然而，自学常常会使学习者对 JavaScript 语言本身的理解存在知识盲点。</p><p>实际上，令人感到惊讶的是，他们只需要掌握很少的语言知识就能制作复杂的网页，然而这样通常不能很好掌握 JavaScript 的基础知识。</p><p>使用基本的技能来实现功能和避免复杂的需求是相当容易的，通过依赖 Stack Overflow，而不理解复制来的代码以创建一个网站也是十分容易。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;下面是一些 Web 开发中常见的概念&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="interview" scheme="http://taoqianbao.github.io/tags/interview/"/>
    
      <category term="concepts" scheme="http://taoqianbao.github.io/tags/concepts/"/>
    
  </entry>
  
  <entry>
    <title>前端技术文章导航整理</title>
    <link href="http://taoqianbao.github.io/2018/01/18/h5/links-fe/"/>
    <id>http://taoqianbao.github.io/2018/01/18/h5/links-fe/</id>
    <published>2018-01-18T04:09:54.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><ul><li><a href="http://www.oschina.net/news/92218/npm-state-of-javascript-frameworks-2017-part-1" target="_blank" rel="noopener">npm 发布 2017 JavaScript 框架报告：React 占主导地位</a></li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="h5" scheme="http://taoqianbao.github.io/categories/h5/"/>
    
    
      <category term="web" scheme="http://taoqianbao.github.io/tags/web/"/>
    
      <category term="h5" scheme="http://taoqianbao.github.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 ARIA role</title>
    <link href="http://taoqianbao.github.io/2018/01/17/h5/aria-role/"/>
    <id>http://taoqianbao.github.io/2018/01/17/h5/aria-role/</id>
    <published>2018-01-17T07:55:17.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>HTML5 aria-* and role</p><p>　　在video-js的demo中看到了很多aria-<em>，不知道干嘛的。google一下，发现aria的意思是**</em> Accessible Rich Internet Application <em>*</em>。 Accessible一般是为不方便的人士提供的功能，比如windows的放大镜，语音朗读，高对比度主题等。</p><p>　　主要内容是说明并演示了HTML5针对html tag增加的属性：role 和 aria-*。</p><p>　　role的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role=“button”，辅助工具就可以认出这实际上是个button。</p><p>　　ARIA Roles</p><p>　　Use the ARIA role attribute to indicate that a generic tag is playing the role of a standard widget like a button.</p><p>　　而aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;div role=<span class="string">"checkbox"</span> aria-checked=<span class="string">"checked"</span>$amp;&gt;amp;$lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>　　辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。</p><p>　　Add ARIA for screen readers</p><p>　　ARIA attributes provides semantic information to screen readers that is normally conveyed visually.</p><p>　　Note that using ARIA does not automatically implement the standard widget behavior, you’ll still need to add focus management and keyboard navigation yourself.</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://www.w3.org/TR/aria-in-html/" target="_blank" rel="noopener">https://www.w3.org/TR/aria-in-html/</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！&lt;/p&gt;
    
    </summary>
    
      <category term="H5" scheme="http://taoqianbao.github.io/categories/H5/"/>
    
    
      <category term="ARIA" scheme="http://taoqianbao.github.io/tags/ARIA/"/>
    
      <category term="H5" scheme="http://taoqianbao.github.io/tags/H5/"/>
    
      <category term="HTML5" scheme="http://taoqianbao.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>postgresql安装环境</title>
    <link href="http://taoqianbao.github.io/2018/01/11/sql/postgresql-one/"/>
    <id>http://taoqianbao.github.io/2018/01/11/sql/postgresql-one/</id>
    <published>2018-01-11T04:17:01.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PeterMacBook:bin peter$ psql help</span><br><span class="line">psql: could not connect to server: No such file or directory</span><br><span class="line">Is the server running locally and accepting</span><br><span class="line">connections on Unix domain socket "/tmp/.s.PGSQL.5432"?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PeterMacBook:bin peter$ ps -ef | grep postmaster</span><br><span class="line">  501 46892 46159   0 12:01下午 ttys001    0:00.00 grep postmaster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PeterMacBook:10.1 peter$ brew services start postgres</span><br><span class="line">==&gt; Tapping homebrew/services</span><br><span class="line">Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...</span><br><span class="line">remote: Counting objects: 14, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 14 (delta 0), reused 9 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (14/14), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Tapped 0 formulae (42 files, 55.2KB)</span><br><span class="line">==&gt; Successfully started `postgresql` (label: homebrew.mxcl.postgresql)</span><br><span class="line">PeterMacBook:10.1 peter$ </span><br><span class="line">  </span><br><span class="line">PeterMacBook:10.1 peter$ ps -ef|grep psql</span><br><span class="line">  501 47471 46159   0 12:19下午 ttys001    0:00.00 grep psql</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew services start postgresql</span><br><span class="line">brew services stop postgresql</span><br></pre></td></tr></table></figure><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://taoqianbao.github.io/categories/SQL/"/>
    
    
      <category term="sql" scheme="http://taoqianbao.github.io/tags/sql/"/>
    
      <category term="postgresql" scheme="http://taoqianbao.github.io/tags/postgresql/"/>
    
      <category term="pg" scheme="http://taoqianbao.github.io/tags/pg/"/>
    
  </entry>
  
  <entry>
    <title>MAC OSX 配置PATH变量</title>
    <link href="http://taoqianbao.github.io/2018/01/10/macos/setting-path/"/>
    <id>http://taoqianbao.github.io/2018/01/10/macos/setting-path/</id>
    <published>2018-01-10T15:13:28.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文主要阐述macos设置环境变量的问题,<br>mac 一般使用bash作为默认shell</p><p>Mac系统的环境变量，加载顺序为：<br>    /etc/profile<br>    /etc/paths<br>    ~/.bash_profile<br>    ~/.bash_login<br>    ~/.profile<br>    ~/.bashrc</p><p>当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。</p><a id="more"></a><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><p>以下在MAC OSX Yosemite 10.10上测试可用<br>在terminal中查看PATH变量的值</p><pre><code>echo $PATH</code></pre><p>返回结果长成这个样子:(每个路径被冒号分割)</p><pre><code>/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin</code></pre><p>临时会话中修改PATH变量</p><p>如果只是想在当前terminal的会话中临时修改PATH变量则可以</p><pre><code>PATH=/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin</code></pre><p>持久修改PATH变量</p><p>转到home目录 Home目录在哪里？ 在home目录中创建一个文件 .bash_profile</p><pre><code>nano .bash_profile</code></pre><p>随后在其中加入</p><pre><code>export PATH=/Users/Alex/.composer/vendor/bin:${PATH}</code></pre><p>重启terminal窗口后，再看看PATH变量就应该变了</p><pre><code>echo $PATH/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin</code></pre><h2 id="常用mac-os命令"><a href="#常用mac-os命令" class="headerlink" title="常用mac os命令"></a>常用mac os命令</h2><p>MAC OS查看端口占用情况及杀死进程<br>终端命令<br>sudo lsof -i :9000</p><p>然后根据PID杀进程：<br>sudo kill -9 716</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本文主要阐述macos设置环境变量的问题,&lt;br&gt;mac 一般使用bash作为默认shell&lt;/p&gt;
&lt;p&gt;Mac系统的环境变量，加载顺序为：&lt;br&gt;    /etc/profile&lt;br&gt;    /etc/paths&lt;br&gt;    ~/.bash_profile&lt;br&gt;    ~/.bash_login&lt;br&gt;    ~/.profile&lt;br&gt;    ~/.bashrc&lt;/p&gt;
&lt;p&gt;当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。&lt;/p&gt;
    
    </summary>
    
      <category term="macos" scheme="http://taoqianbao.github.io/categories/macos/"/>
    
    
      <category term="macos" scheme="http://taoqianbao.github.io/tags/macos/"/>
    
      <category term="path" scheme="http://taoqianbao.github.io/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理之理想篇</title>
    <link href="http://taoqianbao.github.io/2018/01/08/javascript/interview-four/"/>
    <id>http://taoqianbao.github.io/2018/01/08/javascript/interview-four/</id>
    <published>2018-01-08T09:52:38.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p><ol><li><a href="/2016/01/08/javascript/interview-one/">前端面试题整理之基础问答篇</a></li><li><a href="/2017/01/08/javascript/interview-two/">前端面试题整理之高级上机篇</a></li><li><a href="/2018/01/08/javascript/interview-three/">前端面试题整理之资深理论篇</a></li><li><a href="/2018/01/08/javascript/interview-four/">前端面试题整理之理想篇</a></li></ol><a id="more"></a><h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><h3 id="你觉得前端工程的价值体现在哪"><a href="#你觉得前端工程的价值体现在哪" class="headerlink" title="你觉得前端工程的价值体现在哪?"></a>你觉得前端工程的价值体现在哪?</h3><p>1.为简化用户使用提供技术支持（交互部分）<br>2.为多个浏览器兼容性提供支持<br>3.为提高用户浏览速度（浏览器性能）提供支持<br>4.为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持<br>5.为展示数据提供支持（数据接口）</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2016/01/08/javascript/interview-one/&quot;&gt;前端面试题整理之基础问答篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/javascript/interview-two/&quot;&gt;前端面试题整理之高级上机篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-three/&quot;&gt;前端面试题整理之资深理论篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-four/&quot;&gt;前端面试题整理之理想篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="面试" scheme="http://taoqianbao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理想" scheme="http://taoqianbao.github.io/tags/%E7%90%86%E6%83%B3/"/>
    
      <category term="问题" scheme="http://taoqianbao.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS的一些知识点总结</title>
    <link href="http://taoqianbao.github.io/2018/01/07/css/hello-world/"/>
    <id>http://taoqianbao.github.io/2018/01/07/css/hello-world/</id>
    <published>2018-01-07T09:14:11.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h2 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#关于作者&quot; class=&quot;headerlink&quot; title=&quot;关于作者&quot;&gt;&lt;/a&gt;关于作者&lt;/h
      
    
    </summary>
    
      <category term="CSS" scheme="http://taoqianbao.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://taoqianbao.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>软考笔记之系统集成项目管理工程师-Lesson1</title>
    <link href="http://taoqianbao.github.io/2018/01/04/itpmp/lesson1/"/>
    <id>http://taoqianbao.github.io/2018/01/04/itpmp/lesson1/</id>
    <published>2018-01-04T09:35:09.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本章节目的是自学考取 系统集成项目管理工程师 - System integrated project management engineer 为目的，读书笔记</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>很多朋友需要两个月时间拿下软考中“系统集成项目管理工程师”的考试，笔者通过两个月每天五小时的复习，顺利通过了考试，相信你也可以。这两个月需要对自己狠一点，丝毫不要放松。</p><a id="more"></a><p>以下内容转载自2016年</p><h2 id="一、弄清重点"><a href="#一、弄清重点" class="headerlink" title="一、弄清重点"></a>一、弄清重点</h2><h2 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h2><p>计算题是下午的必考试题，分值约在15-20分，保证计算题不丢分，下午过关不会有问题。计算题主要集中在进度和成本2个方面，详细的介绍请看本公众号文章“一起复习系统集成项目管理工程师考试——计算题1”，另发送“中项”可获取笔者准备的相关复习资料。</p><h2 id="必考题"><a href="#必考题" class="headerlink" title="必考题"></a>必考题</h2><p>必考知识点主要包括：软件集成的特点、监理的职责、资质管理、楼宇布线工程、软件开发技术、计算机及网络基础知识、机房工程知识、计算机术语的英文等。</p><h2 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h2><p>变更管理的基本过程、典型的信息系统项目的生命周期模型（瀑布、V、原型化、螺旋、迭代）、项目进度管理关键路径（前导图法PDM、箭线图法ADM、活动时间期望值=(乐观+4个正常+悲观/6)）、项目成本管理（CV,SV,CPI,SPI,EAC,ETC,成本超支时采取什么措施？进度落后时采取什么措施？）</p><h2 id="二、心法"><a href="#二、心法" class="headerlink" title="二、心法"></a>二、心法</h2><p>时间紧，所以大部头的教程无法逐页细看了。我在做题时，遇到无法理解的地方，就去教程相应章节找找答案，看看定义和公式，仅此而已。更详细的心法请看本公众号文章“通过系统集成项目管理工程师考试——我是这样做到的 ”，以下为建议的复习计划，供大家参考：</p><h2 id="建立解题思路"><a href="#建立解题思路" class="headerlink" title="建立解题思路"></a>建立解题思路</h2><p>有清晰解题思路的朋友可以跳过此小点。如果对解题思路没有把握的，建议看看“真题解析”相关教程，主要是学习正规的解题思路。我当时看了2套真题解析就建立了解题思路，并对考点有了基本的了解，做到了“分清主次”“见题不慌”。此阶段估计会耗时半个月时间。</p><h2 id="练习历年真题"><a href="#练习历年真题" class="headerlink" title="练习历年真题"></a>练习历年真题</h2><p>找出2009年以来的10套真题，扎扎实实做一遍，重点部分一定要理解，不懂就主动翻看教程。对于易错的题目，作好标记，用于第二遍复习，一看就会做的题目下次不必再看。对于自己不熟悉易忘的知识点，可以总结成文档，打印出来，没事就拿出来看。此阶段估计耗时一个月，最难熬，笔者有时会做题到凌晨2点。</p><h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><p>通过前2个阶段的扎实准备，此时相信你对这个考试的框架比较熟悉，更重要的是你对自己的弱项在哪里做到了然于胸了。剩下的半个月着重看自己做错的题目，看自己记录的重要知识点，将经典计算题再做一遍，看看那些公式。笔者当时连公交车、WC时间、吃饭时间都用来看打印的小抄。</p><h2 id="轻装上阵"><a href="#轻装上阵" class="headerlink" title="轻装上阵"></a>轻装上阵</h2><p>靠前一两天就放松一下，认认考场路线，准备考试用具，备好身份证、准考证。考前一晚早些休息，次日轻装上阵迎接考试。考试过程中把握“先易后难”，遇难莫慌，慌了就深呼吸，英语差的朋友对于最后五道英语题可以采取“4A1B”这样的答案……</p><h2 id="三、分数分布"><a href="#三、分数分布" class="headerlink" title="三、分数分布"></a>三、分数分布</h2><ol><li>专业英语5分</li><li>项目管理知识37分</li><li>法律法规及相关标准11分</li><li>信息系统工程监理5分</li><li>软件工程知识5分</li><li>计算机技术知识与网络知识7分</li><li>信息系统建设5分</li></ol><h2 id="四、关于中项考试"><a href="#四、关于中项考试" class="headerlink" title="四、关于中项考试"></a>四、关于中项考试</h2><p>考试时间软考考试分为上半年和下半年,每年5月份和11月份。科目单次时间为2小时。<br>考试题型考试分为上午和下午,上午75道选择题,下午5个问答题,各75分,同时通过45分者为合格。<br>考试时,考前一周打印准考证,注意,该准考证只能在规定的时间内打印,防止当天丢掉,最好将准考证电子档存在邮箱里,以防丢失时,及时打印。特别注意,考试通过后,去领取证书的时候,需携带准考证、身份证领取方可领取。</p>]]></content>
    
    <summary type="html">
    
      系统集成项目管理工程师
    
    </summary>
    
      <category term="ITPMP" scheme="http://taoqianbao.github.io/categories/ITPMP/"/>
    
    
      <category term="ITPMP" scheme="http://taoqianbao.github.io/tags/ITPMP/"/>
    
  </entry>
  
  <entry>
    <title>2017年关于JavaScript你需要知道的事情</title>
    <link href="http://taoqianbao.github.io/2017/12/30/javascript/news-2017/"/>
    <id>http://taoqianbao.github.io/2017/12/30/javascript/news-2017/</id>
    <published>2017-12-30T04:12:12.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2017年关于JavaScript你需要知道的事情</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#行业要闻">行业要闻</a></li><li><a href="#发展回顾">发展回顾</a></li><li><a href="#开源项目">开源项目</a></li><li><a href="#css">CSS</a></li><li><a href="#人工智能">人工智能</a></li><li><a href="#构建之道">构建之道</a></li><li><a href="#状态管理">状态管理</a></li><li><a href="#webassembly">WebAssembly</a></li><li><a href="#graphql">GraphQL</a></li><li><a href="#webvrar">WebVR/AR</a></li><li><a href="#测试">测试</a></li><li><a href="#教程">教程</a></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="行业要闻"><a href="#行业要闻" class="headerlink" title="行业要闻"></a>行业要闻</h3><div><br>    <ol><li><a href="https://link.zhihu.com/?target=https%3A//blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html%3Fm%3D1" target="_blank">Google宣布PWA与原生应用拥有同等待遇和权限</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//twitter.com/necolas/status/829128165314306048" target="_blank">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/UEH" target="_blank">WebAssembly 已被所有主流浏览器支持</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNX" target="_blank">斯坦福宣布使用 JavaScript 作为计算机课程的首选语言</a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=http%3A//6me.us/W0k" target="_blank">2017 年中如果想成为专业的 Web 开发者，应该在 Web 前端、服务端以及 DevOps 领域所需要学习到的技术栈以及进阶路线图</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//www.polymer-project.org/blog/2017-05-15-time-for-two" target="_blank">Polymer 2.0发布，最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//microsoft.github.io/reactxp/" target="_blank">微软开源跨平台开发框架 ReactXP</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=http%3A//news.mit.edu/2017/tim-berners-lee-wins-turing-award-0404" target="_blank">万维网之父 Tim Berners-Lee 获得 2016 年度图灵奖</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//developer.github.com/v4/" target="_blank">Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bIZ" target="_blank">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR </a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bWv" target="_blank">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bjr" target="_blank">Firefox 55 引入 WebVR 支持</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-graphql-playground-f1e0a018f05d" target="_blank">GraphQL Playground 发布</a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UAN" target="_blank">MSDN 将 7700 余份文档重定向到 MDN</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UcV" target="_blank">Node.js 8 宣布进入 LTS，Node.js 9 发布</a>；</li><br>    </ol><br>    </div><h3 id="发展回顾"><a href="#发展回顾" class="headerlink" title="发展回顾"></a>发展回顾</h3><div><br>    <ol><br>        <li><a href="https://link.zhihu.com/?target=https%3A//stateofjs.com/2017/" target="_blank">The State of JavaScript 2017</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/U39" target="_blank">2017 JavaScript 发展回顾</a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript" target="_blank">JavaScript 完整编年史</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bXD" target="_blank">TC39，ECMAScript 与 JavaScript 的未来</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/Usl" target="_blank">ESM 的目前实现与未来规划</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bi0" target="_blank">JavaScript 模块化现状</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//www.monterail.com/state-of-vuejs-report" target="_blank">2017 Vue.js 现状报告</a>；</li><br>    </ol><br></div>    <h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=http%3A//elasticlunr.com/" target="_blank">浏览器端搜索与离线搜索的全文搜索引擎</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNh" target="_blank">一系列优秀的 React 界面框架</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/mozilla/fathom" target="_blank">Fathom-提取网页中有意义内容的 JavaScript 框架</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/gitsummore/nile.js" target="_blank">基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具</a><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//golden-layout.com/" target="_blank">golden-layout</a>，一款非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/jeromedalbert/real-world-react" target="_blank">一系列基于 React 开发的真实环境下的开源应用代码库</a>；</li><br></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bLZ" target="_blank">CSS 的现状</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNe" target="_blank">CSS-in-JavaScript：基于组件的样式组织</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//madebymike.com.au/writing/the-invisible-parts-of-CSS/" target="_blank">隐藏幕后的 CSS 知识点</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=http%3A//cssgridgarden.com/" target="_blank">使用 CSS Grid 打造私家花园</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bTa" target="_blank">深入解析高性能 CSS 引擎：Quantum CSS（Stylo）</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//mozilladevelopers.github.io/playground/" target="_blank">Mozilla CSS Grid 教程</a>；</li><br></ol><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/PAIR-code/deeplearnjs" target="_blank">Google 开源 JavaScript 机器学习库 DeepLearn.js</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2017/08/TensorFire-use-GPU-fast-study%3Futm_source%3Dinfoq%26utm_campaign%3Duser_page%26utm_medium%3Dlink" target="_blank">TensorFire</a>－基于WebGL的浏览器端深度学习框架；</li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//janhuenermann.com/projects/learning-to-drive" target="_blank">在浏览器中实现自动驾驶汽车</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/U5P" target="_blank">使用 Node.js 与 OpenCV 实现人脸识别</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bCw" target="_blank">深入浅出构建简单的 Chess AI</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bhQ" target="_blank">利用机器学习优化网站性能</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNa" target="_blank">从零开始基于 JavaScript 构建简单神经网络</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/tonybeltramelli/pix2code" target="_blank">pix2code—依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/gpujs/gpu.js" target="_blank">gpu.js</a> 提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b2v" target="_blank">构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人</a>；</u><br>    </li><br></ol><h3 id="构建之道"><a href="#构建之道" class="headerlink" title="构建之道"></a>构建之道</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b4y" target="_blank">Webpack 与 Rollup：求同存异</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bLP" target="_blank">面向生产环境的前端性能优化清单</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b9A" target="_blank">使用 Webpack 的 Magic Comment 特性简化代码分割</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bI8" target="_blank">Webpack import 支持异步导入 CSS</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//toddmotto.com/lazy-loading-angular-code-splitting-webpack" target="_blank">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//micro-frontends.org/" target="_blank">微前端：微服务概念的前端实践</a>；</li><br></ol><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b4J" target="_blank">React 中的状态管理架构模式</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//scotch.io/tutorials/state-management-in-vue-getting-started-with-vue" target="_blank">基于 Vuex 的 Vue 应用状态管理</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bJq" target="_blank">Redux 状态管理之痛点、分析与改良</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bLd" target="_blank">Mobdux：整合 MobX 与 Redux 中优秀的部分</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/USQ" target="_blank">使用 TypeScript 编写 React 与 Redux 应用</a>；</u><br>    </li><br></ol><h3 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=http%3A//blog.openbloc.fr/webassembly-first-steps/" target="_blank">WebAssembly 初体验：重构简单游戏引擎</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/byh" target="_blank">Rust、WebAssembly 与 Webpack</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/mbasso/asm-dom" target="_blank">asm-dom</a> 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//www.hellorust.com/news/native-wasm-target.html" target="_blank">Rust 默认可以编译为 WebAssembly</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/Uua" target="_blank">WebAssembly 的应用场景</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/UZJ" target="_blank">使用 Rust 开发基于 WebAssembly 的游戏</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UOB" target="_blank">NectarJS: 将 JavaScript 编译为平台相关的二进制代码</a>；</li><br></ol><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bzs" target="_blank">为什么我们选择了 GraphQL</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/U6S" target="_blank">GraphQL 技术栈漫游</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bBU" target="_blank">Apollo Client 2.0 新特性介绍</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b1X" target="_blank">用强类型语言 GraphQL 增强 React</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/b2H" target="_blank">利用 GraphQL 创建同构 Vue.js 应用</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bWY" target="_blank">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bgr" target="_blank">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816" target="_blank">Graphcool</a> 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UsY" target="_blank">基于 Apollo 的组件数据交互</a>；</li><br></ol><h3 id="WebVR-AR"><a href="#WebVR-AR" class="headerlink" title="WebVR/AR"></a>WebVR/AR</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bDE" target="_blank">面向 Web 开发者的 VR 指南</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//uber.github.io/luma.gl/%23/" target="_blank">luma.gl</a> 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UlM" target="_blank">Expo AR 简明教程</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js" target="_blank">AR.js</a>发布。<br>        <a href="https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js" target="_blank">AR.js</a>是高性能的面向 Web 的增强现实的工具库，它在移动端能达到 60fps；</li><br></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bJ5" target="_blank">JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/byQ" target="_blank">TDD 与 Vue.js</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//mo.github.io/2017/07/20/javascript-e2e-integration-testing.html" target="_blank">基于 JavaScript 的 Web 应用的端到端测试工具对比</a>；</u><br>    </li><br></ol><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bhR" target="_blank">在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/biZ" target="_blank">理解高阶组件</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bic" target="_blank">Nuxt.js SSR 与权限验证指南</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//deepstreamhub.com/tutorials/protocols/webrtc-intro/" target="_blank">WebRTC 实战教程</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/shovanch/fullstack-webdev-path" target="_blank">全栈 Web 学习路径</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//javascript.info/" target="_blank">现代 JavaScript 指南</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/Uuk" target="_blank">使用 Node.js 构建区块链</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/" target="_blank">自定义基于 JavaScript 的 16 位虚拟机</a>；</li><br></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://zhuanlan.zhihu.com/p/32298468" target="_blank" rel="noopener">转载文章</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2017年关于JavaScript你需要知道的事情&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#行业要闻&quot;&gt;行业要闻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#发展回顾&quot;&gt;发展回顾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#开源项目&quot;&gt;开源项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#人工智能&quot;&gt;人工智能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#构建之道&quot;&gt;构建之道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#状态管理&quot;&gt;状态管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webassembly&quot;&gt;WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#graphql&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webvrar&quot;&gt;WebVR/AR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#测试&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#教程&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="2017" scheme="http://taoqianbao.github.io/tags/2017/"/>
    
      <category term="news" scheme="http://taoqianbao.github.io/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Git使用基础教程</title>
    <link href="http://taoqianbao.github.io/2017/12/27/git/how-to-use-git/"/>
    <id>http://taoqianbao.github.io/2017/12/27/git/how-to-use-git/</id>
    <published>2017-12-27T12:45:44.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>一：Git是什么?<br>二：SVN与Git的最主要的区别?<br>三：在windows上如何安装Git?<br>四：如何操作？<br>五：远程仓库<br>六：创建与合并分支<br>七：bug分支<br>八：多人协作</p><a id="more"></a><h3 id="一：Git是什么？"><a href="#一：Git是什么？" class="headerlink" title="一：Git是什么？"></a>一：Git是什么？</h3><p>Git是目前世界上最先进的分布式版本控制系统。<br>工作原理 / 流程：</p><p><img src="http://img.mukewang.com/59c31e4400013bc911720340.png" alt=""></p><p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p><h3 id="二：SVN与Git的最主要的区别？"><a href="#二：SVN与Git的最主要的区别？" class="headerlink" title="二：SVN与Git的最主要的区别？"></a>二：SVN与Git的最主要的区别？</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="三、在windows上如何安装Git？"><a href="#三、在windows上如何安装Git？" class="headerlink" title="三、在windows上如何安装Git？"></a>三、在windows上如何安装Git？</h3><p>msysgit是 windows版的Git,如下：</p><p><img src="http://img.mukewang.com/59c1cfa400019aee02460029.jpg" alt=""></p><p>需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”,如下：</p><p><img src="http://img.mukewang.com/59c1cfd20001c2d602530073.jpg" alt=""></p><p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p><p><img src="http://img.mukewang.com/59c1cfe70001462e06680380.jpg" alt=""></p><p>安装完成后，还需要最后一步设置，在命令行输入如下：</p><p><img src="http://img.mukewang.com/59c1d041000110d906460213.jpg" alt=""></p><p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><p>注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p><h3 id="四：如何操作？"><a href="#四：如何操作？" class="headerlink" title="四：如何操作？"></a>四：如何操作？</h3><h4 id="一：创建版本库。"><a href="#一：创建版本库。" class="headerlink" title="一：创建版本库。"></a>一：创建版本库。</h4><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><p>所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p><p><img src="http://img.mukewang.com/59c1d1060001909005780268.png" alt=""></p><p>pwd 命令是用于显示当前的目录。</p><p>通过命令 git init 把这个目录变成git可以管理的仓库，如下：</p><p><img src="http://img.mukewang.com/59c1d12b0001b08305270077.png" alt=""></p><p>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p><p><img src="http://img.mukewang.com/59c1d143000112df06120173.png" alt=""></p><p>把文件添加到版本库中。</p><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p><h2 id="下面先看下demo如下演示："><a href="#下面先看下demo如下演示：" class="headerlink" title="下面先看下demo如下演示："></a>下面先看下demo如下演示：</h2><p>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p><p>第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：</p><p><img src="http://img.mukewang.com/59c1d2080001e4bb04490080.png" alt=""></p><p>如果和上面一样，没有任何提示，说明已经添加成功了。</p><p>第二步：用命令 git commit告诉Git，把文件提交到仓库。</p><p><img src="http://img.mukewang.com/59c1d2200001f05b04930121.png" alt=""></p><p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：</p><p><img src="http://img.mukewang.com/59c1d2340001a87904690107.png" alt=""></p><p>说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：</p><p><img src="http://img.mukewang.com/59c1d2500001634606170171.png" alt=""></p><p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。<br>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：<br>git diff readme.txt 如下：</p><p><img src="http://img.mukewang.com/59c1d2cb00010a0304960202.png" alt=""></p><p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p><p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。</p><p>如下：<br><img src="http://img.mukewang.com/59c1d2ff00015a9606180342.png" alt=""></p><h3 id="二：版本回退："><a href="#二：版本回退：" class="headerlink" title="二：版本回退："></a>二：版本回退：</h3><p>如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p><p>内容为33333333333333.继续执行命令如下：</p><p><img src="http://img.mukewang.com/59c1d32b00012ba604570139.png" alt=""></p><p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p><p><img src="http://img.mukewang.com/59c1d34e0001a1ac06050304.png" alt=""></p><p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：</p><p><img src="http://img.mukewang.com/59c1d3fc00013ad206040097.png" alt=""></p><p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p><p><img src="http://img.mukewang.com/59c1d4140001a0c404490165.png" alt=""></p><p>如果想回退到上一个版本的命令如下操作：</p><p><img src="http://img.mukewang.com/59c1d429000199fc04610105.png" alt=""></p><p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p><p><img src="http://img.mukewang.com/59c1d4470001fcdc04360085.png" alt=""></p><p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：</p><p><img src="http://img.mukewang.com/59c1d45300012d9604800219.png" alt=""></p><p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：<br>git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：</p><p><img src="http://img.mukewang.com/59c1d51a0001d5fc05100122.png" alt=""></p><p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令<br>git reset –hard 6fcfc89来恢复了。演示如下：</p><p><img src="http://img.mukewang.com/59c1d53a0001b8b305050153.png" alt=""></p><p>可以看到 目前已经是最新的版本了。</p><h3 id="三：理解工作区与暂存区的区别？"><a href="#三：理解工作区与暂存区的区别？" class="headerlink" title="三：理解工作区与暂存区的区别？"></a>三：理解工作区与暂存区的区别？</h3><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p><p>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p><p>我们前面说过使用Git提交文件到版本库有两步：</p><p>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p><p>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p><p>我们继续使用demo来演示下：</p><p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：</p><p><img src="http://img.mukewang.com/59c1d55a0001a3c306430241.png" alt=""></p><p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：</p><p><img src="http://img.mukewang.com/59c1d56a0001a28704700241.png" alt=""></p><p>接着我们可以使用git commit一次性提交到分支上，如下：</p><p><img src="http://img.mukewang.com/59c1d57b0001b4fe06190166.png" alt=""></p><h3 id="四：Git撤销修改和删除文件操作。"><a href="#四：Git撤销修改和删除文件操作。" class="headerlink" title="四：Git撤销修改和删除文件操作。"></a>四：Git撤销修改和删除文件操作。</h3><h4 id="一：撤销修改："><a href="#一：撤销修改：" class="headerlink" title="一：撤销修改："></a>一：撤销修改：</h4><p>比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：</p><p><img src="http://img.mukewang.com/59c1d5e40001806803930139.png" alt=""></p><p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p><p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p><p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^</p><p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：</p><p><img src="http://img.mukewang.com/59c1d5fa0001b07806400168.png" alt=""></p><p>可以发现，Git会告诉你，git checkout – file 可以丢弃工作区的修改，如下命令：<br>git checkout – readme.txt,如下所示：</p><p><img src="http://img.mukewang.com/59c1d6390001419705210140.png" alt=""></p><p>命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p><p>1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</p><p>2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p><p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p><p><img src="http://img.mukewang.com/59c1d6ca0001782f06160482.png" alt=""></p><p>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</p><h4 id="二：删除文件。"><a href="#二：删除文件。" class="headerlink" title="二：删除文件。"></a>二：删除文件。</h4><p>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：</p><p><img src="http://img.mukewang.com/59c1d6de0001a31606390392.png" alt=""></p><p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p><p><img src="http://img.mukewang.com/59c1d78200017e8f07030192.png" alt=""></p><p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？<br>可以使用如下命令 git checkout – b.txt，如下所示：</p><p><img src="http://img.mukewang.com/59c1d7980001368e05570244.png" alt=""></p><p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p><p><img src="http://img.mukewang.com/59c1d7b70001308907550258.png" alt=""></p><h3 id="五：远程仓库。"><a href="#五：远程仓库。" class="headerlink" title="五：远程仓库。"></a>五：远程仓库。</h3><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p><p>ssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：</p><p><img src="http://img.mukewang.com/59c1d7d7000120d107530169.png" alt=""></p><p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p><p><img src="http://img.mukewang.com/59c1d7ef0001c75411330860.png" alt=""></p><p>点击 Add Key，你就应该可以看到已经添加的key。</p><p><img src="http://img.mukewang.com/59c1d8540001eb3707620373.png" alt=""></p><p>如何添加远程库？</p><p>现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p><p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p><p><img src="http://img.mukewang.com/59c1d86a0001044b10840605.png" alt=""></p><p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="http://img.mukewang.com/59c1d8850001b5ea10260661.png" alt=""></p><p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/tugenhua0707/testgit.git</span><br></pre></td></tr></table></figure></p><p>所有的如下：</p><p><img src="http://img.mukewang.com/59c1d8a70001c86206320252.png" alt=""></p><p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p><p><img src="http://img.mukewang.com/59c1d8bb00019ff310480655.png" alt=""></p><p>从现在起，只要本地作了提交，就可以通过如下命令：</p><pre><code>git push origin master</code></pre><p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p><h4 id="如何从远程库克隆？"><a href="#如何从远程库克隆？" class="headerlink" title="如何从远程库克隆？"></a>如何从远程库克隆？</h4><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。<br>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？<br>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p><p><img src="http://img.mukewang.com/59c1d95e0001f0fc10450604.png" alt=""></p><p>如下，我们看到：</p><p><img src="http://img.mukewang.com/59c1d97400014d4e10360484.png" alt=""></p><p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p><p><img src="http://img.mukewang.com/59c1d9860001e0d806370127.png" alt=""></p><p>接着在我本地目录下 生成testgit2目录了，如下所示：</p><p><img src="http://img.mukewang.com/59c1d99500016a2e07130197.png" alt=""></p><h3 id="六：创建与合并分支。"><a href="#六：创建与合并分支。" class="headerlink" title="六：创建与合并分支。"></a>六：创建与合并分支。</h3><p>在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p><p><img src="http://img.mukewang.com/59c1d9aa0001c15604080167.png" alt=""></p><p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令<br>git branch dev<br>git checkout dev<br>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777<br>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p><p><img src="http://img.mukewang.com/59c1da3f0001b5b703890392.png" alt=""></p><p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p><p><img src="http://img.mukewang.com/59c1da520001d44c06340206.png" alt=""></p><p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：</p><p><img src="http://img.mukewang.com/59c1da69000145ca05320255.png" alt=""></p><p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。<br>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>合并完成后，我们可以接着删除dev分支了，操作如下：</p><p><img src="http://img.mukewang.com/59c1da91000120cd06430139.png" alt=""></p><p>总结创建与合并分支命令如下：<br>查看分支：git branch<br>创建分支：git branch name<br>切换分支：git checkout name<br>创建+切换分支：git checkout –b name<br>合并某分支到当前分支：git merge name<br>删除分支：git branch –d name<br>如何解决冲突？<br>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p><p><img src="http://img.mukewang.com/59c1db410001036105690462.png" alt=""></p><p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p><p><img src="http://img.mukewang.com/59c1daaf0001133205840500.png" alt=""></p><p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p><p><img src="http://img.mukewang.com/59c1daff000106eb06340589.png" alt=""></p><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;<head是指主分支修改的内容，>&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：</head是指主分支修改的内容，></p><p><img src="http://img.mukewang.com/59c1dbaf00015f2205770266.png" alt=""></p><p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p><p><img src="http://img.mukewang.com/59c1dbc50001076c04970869.png" alt=""></p><h2 id="3-分支管理策略。"><a href="#3-分支管理策略。" class="headerlink" title="3.分支管理策略。"></a>3.分支管理策略。</h2><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p><p>创建一个dev分支。<br>修改readme.txt内容。<br>添加到暂存区。<br>切换回主分支(master)。<br>合并dev分支，使用命令 git merge –no-ff -m “注释” dev<br>查看历史记录<br>截图如下：</p><p><img src="http://img.mukewang.com/59c1dbdc0001836d06030780.png" alt=""></p><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h4 id="七：bug分支："><a href="#七：bug分支：" class="headerlink" title="七：bug分支："></a>七：bug分支：</h4><p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p><p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p><p><img src="http://img.mukewang.com/59c1dc4e000141b306260166.png" alt=""></p><p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：</p><p><img src="http://img.mukewang.com/59c1dc63000121ff06510188.png" alt=""></p><p>所以现在我可以通过创建issue-404分支来修复bug了。<br>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p><p><img src="http://img.mukewang.com/59c1dc7000010f8506010533.png" alt=""></p><p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p><p><img src="http://img.mukewang.com/59c1dce00001c1ed06120441.png" alt=""></p><p>现在，我们回到dev分支上干活了。</p><p><img src="http://img.mukewang.com/59c1dcfa00019c8104220136.png" alt=""></p><p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：</p><p><img src="http://img.mukewang.com/59c1dd07000152b404340093.png" alt=""></p><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p><p>1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。</p><p>2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</p><p>演示如下<br><img src="http://img.mukewang.com/59c1dd1f000174d406380466.png" alt=""></p><h3 id="八：多人协作。"><a href="#八：多人协作。" class="headerlink" title="八：多人协作。"></a>八：多人协作。</h3><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。<br>要查看远程库的信息 使用 git remote<br>要查看远程库的详细信息 使用 git remote –v</p><p>如下演示：</p><p><img src="http://img.mukewang.com/59c1dd7d000136fd06190169.png" alt=""></p><h3 id="一：推送分支："><a href="#一：推送分支：" class="headerlink" title="一：推送分支："></a>一：推送分支：</h3><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：<br>使用命令 git push origin master</p><p>比如我现在的github上的readme.txt代码如下：</p><p><img src="http://img.mukewang.com/59c1dd90000164a508280459.png" alt=""></p><p>本地的readme.txt代码如下：</p><p><img src="http://img.mukewang.com/59c1dda60001771804210205.png" alt=""></p><p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p><p><img src="http://img.mukewang.com/59c1ddbf0001271e05410203.png" alt=""></p><p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p><p><img src="http://img.mukewang.com/59c1ddcf0001771f08100484.png" alt=""></p><p>可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev<br>那么一般情况下，那些分支要推送呢？<br>master分支是主分支，因此要时刻与远程同步。<br>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p><p>二：抓取分支：<br>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2<br>但是我首先要把dev分支也要推送到远程去，如下</p><p><img src="http://img.mukewang.com/59c1ded800014adf05030151.jpg" alt=""></p><p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p><p><img src="http://img.mukewang.com/59c1deb70001ec7605080170.png" alt=""></p><p>现在目录下生成有如下所示：</p><p><img src="http://img.mukewang.com/59c1defe0001942707180256.png" alt=""></p><p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev</p><p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p><p>如下：</p><p><img src="http://img.mukewang.com/59c1df160001ef1e06020730.png" alt=""></p><p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p><p><img src="http://img.mukewang.com/59c1df340001209306470759.png" alt=""></p><p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p><p><img src="http://img.mukewang.com/59c1dfa60001473e05940282.png" alt=""></p><p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p><p><img src="http://img.mukewang.com/59c1dfc8000159c106460199.png" alt=""></p><p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：<br>我们可以先来看看readme.txt内容了。</p><p><img src="http://img.mukewang.com/59c1dff70001a87605190277.png" alt=""></p><p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：</p><p><img src="http://img.mukewang.com/59c1e0130001843906050480.png" alt=""></p><p>因此：多人协作工作模式一般是这样的：<br>首先，可以试图用git push origin branch-name推送自己的修改.<br>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。<br>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;一：Git是什么?&lt;br&gt;二：SVN与Git的最主要的区别?&lt;br&gt;三：在windows上如何安装Git?&lt;br&gt;四：如何操作？&lt;br&gt;五：远程仓库&lt;br&gt;六：创建与合并分支&lt;br&gt;七：bug分支&lt;br&gt;八：多人协作&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://taoqianbao.github.io/categories/Tools/"/>
    
    
      <category term="git" scheme="http://taoqianbao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理之资深理论篇</title>
    <link href="http://taoqianbao.github.io/2017/03/08/javascript/interview-three/"/>
    <id>http://taoqianbao.github.io/2017/03/08/javascript/interview-three/</id>
    <published>2017-03-08T01:26:33.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p><ol><li><a href="/2016/01/08/javascript/interview-one/">前端面试题整理之基础问答篇</a></li><li><a href="/2017/01/08/javascript/interview-two/">前端面试题整理之高级上机篇</a></li><li><a href="/2018/01/08/javascript/interview-three/">前端面试题整理之资深理论篇</a></li><li><a href="/2018/01/08/javascript/interview-four/">前端面试题整理之理想篇</a></li></ol><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h4><ol><li><p>JSONP<br>原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。<br>JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createJs</span>(<span class="params">sUrl</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        oScript.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">        oScript.src = sUrl;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(oScript);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createJs(<span class="string">'jsonp.js'</span>);</span><br><span class="line"></span><br><span class="line">    box(&#123;</span><br><span class="line">       <span class="string">'name'</span>: <span class="string">'test'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">        alert(json.name);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CORS<br>服务器端对于CORS的支持，主要就是通过设置 <strong><em> Access-Control-Allow-Origin </em></strong>来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。<br>通过修改document.domain来跨子域<br>将子域和主域的document.domain设为同一个主域.<br>前提条件：这两个域名必须属于同一个基础域名! 而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域<br>主域相同的使用document.domain。</p></li><li><p>使用window.name来进行跨域<br>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。</p></li><li><p>使用HTML5中新引进的window.postMessage方法来跨域传送数据<br>还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p></li></ol><h4 id="谈谈你对webpack的看法"><a href="#谈谈你对webpack的看法" class="headerlink" title="谈谈你对webpack的看法"></a>谈谈你对webpack的看法</h4><p>WebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。</p><h6 id="webpack的两大特色："><a href="#webpack的两大特色：" class="headerlink" title="webpack的两大特色："></a>webpack的两大特色：</h6><ol><li>code splitting（可以自动完成）</li><li>loader 可以处理各种类型的静态文件，并且支持串联操作<br>webpack 是以commonJS的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li></ol><h6 id="webpack特效"><a href="#webpack特效" class="headerlink" title="webpack特效"></a>webpack特效</h6><p>webpack具有requireJs和browserify的功能，但仍有很多自己的新特性：</p><ul><li>对 CommonJS 、 AMD 、ES6的语法做了兼容</li><li>对js、css、图片等资源文件都支持打包</li><li>串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持</li><li>有独立的配置文件webpack.config.js</li><li>可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间</li><li>支持 SourceUrls 和 SourceMaps，易于调试</li><li>具有强大的Plugin接口，大多是内部插件，使用起来比较灵活</li><li>webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</li></ul><h6 id="说说TCP传输的三次握手四次挥手策略"><a href="#说说TCP传输的三次握手四次挥手策略" class="headerlink" title="说说TCP传输的三次握手四次挥手策略"></a>说说TCP传输的三次握手四次挥手策略</h6><p><strong><em> 三次握手 </em></strong><br>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。</p><ul><li>第一次握手：发送端首先发送一个带SYN标志的数据包给对方。</li><li>第二次握手：接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。</li><li>第三次握手：最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 </li></ul><p>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><p><strong><em> 断开一个TCP连接则需要“四次挥手”： </em></strong></p><ul><li><p>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p></li><li><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</p></li><li><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p></li><li><p>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p></li></ul><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><ul><li>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</li><li>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</li></ul><h4 id="Web-Worker-和-WebSocket"><a href="#Web-Worker-和-WebSocket" class="headerlink" title="Web Worker 和 WebSocket"></a>Web Worker 和 WebSocket</h4><h5 id="worker主线程：-查看详细讲解"><a href="#worker主线程：-查看详细讲解" class="headerlink" title="worker主线程：   查看详细讲解"></a>worker主线程：   <a href="/2014/05/01/web/how-to-use-webworker/">查看详细讲解</a></h5><p>Web Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。</p><ol><li>通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。</li><li>通过worker.postMessage( data ) 方法来向worker发送数据。</li><li>绑定worker.onmessage方法来接收worker发送过来的数据。</li><li>可以使用 worker.terminate() 来终止一个worker的执行。</li></ol><h5 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h5><p>WebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。</p><h4 id="Javascript垃圾回收方法"><a href="#Javascript垃圾回收方法" class="headerlink" title="Javascript垃圾回收方法"></a>Javascript垃圾回收方法</h4><p><strong><em> 标记清除（mark and sweep） </em></strong><br>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p><p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。</p><p><strong><em> 引用计数(reference counting) </em></strong><br>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。<br>引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p><p>在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，也就是说只要涉及BOM及DOM就会出现循环引用问题。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2016/01/08/javascript/interview-one/&quot;&gt;前端面试题整理之基础问答篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/javascript/interview-two/&quot;&gt;前端面试题整理之高级上机篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-three/&quot;&gt;前端面试题整理之资深理论篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-four/&quot;&gt;前端面试题整理之理想篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/tags/Javascript/"/>
    
      <category term="面试" scheme="http://taoqianbao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="题目" scheme="http://taoqianbao.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>前端基础教程目录</title>
    <link href="http://taoqianbao.github.io/2017/02/05/lesson/fe-start/"/>
    <id>http://taoqianbao.github.io/2017/02/05/lesson/fe-start/</id>
    <published>2017-02-05T00:29:59.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理收集前端基础知识教程系列，供自我学习。</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>前端基础进阶（一）：内存空间详细图解 <a href="https://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="noopener">https://www.jianshu.com/p/996671d4dcc4</a><br>前端基础进阶（二）：执行上下文详细图解 <a href="https://www.jianshu.com/p/a6d37c77e8db" target="_blank" rel="noopener">https://www.jianshu.com/p/a6d37c77e8db</a><br>前端基础进阶（三）：变量对象详解 <a href="https://www.jianshu.com/p/330b1505e41d" target="_blank" rel="noopener">https://www.jianshu.com/p/330b1505e41d</a><br>前端基础进阶（四）：详细图解作用域链与闭包 <a href="https://www.jianshu.com/p/21a16d44f150" target="_blank" rel="noopener">https://www.jianshu.com/p/21a16d44f150</a><br>前端基础进阶（五）：全方位解读this <a href="https://www.jianshu.com/p/d647aa6d1ae6" target="_blank" rel="noopener">https://www.jianshu.com/p/d647aa6d1ae6</a><br>前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包 <a href="https://www.jianshu.com/p/73122bb3d262" target="_blank" rel="noopener">https://www.jianshu.com/p/73122bb3d262</a><br>前端基础进阶（七）：函数与函数式编程  <a href="https://www.jianshu.com/p/69dede6f7e5f" target="_blank" rel="noopener">https://www.jianshu.com/p/69dede6f7e5f</a><br>前端基础进阶（八）：深入详解函数的柯里化 <a href="https://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="noopener">https://www.jianshu.com/p/5e1899fe7d6b</a><br>前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 <a href="https://www.jianshu.com/p/15ac7393bc1f" target="_blank" rel="noopener">https://www.jianshu.com/p/15ac7393bc1f</a><br>前端基础进阶（十）：面向对象实战之封装拖拽对象 <a href="https://www.jianshu.com/p/b3dee0e84454" target="_blank" rel="noopener">https://www.jianshu.com/p/b3dee0e84454</a><br>前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件 <a href="https://www.jianshu.com/p/3f97570d22b4" target="_blank" rel="noopener">https://www.jianshu.com/p/3f97570d22b4</a><br>前端基础进阶（十二）：深入核心，详解事件循环机制 <a href="https://www.jianshu.com/p/12b9f73c5a4f" target="_blank" rel="noopener">https://www.jianshu.com/p/12b9f73c5a4f</a><br>前端基础进阶（十三）：Promise使用详解 <a href="https://www.jianshu.com/p/fe5f173276bd" target="_blank" rel="noopener">https://www.jianshu.com/p/fe5f173276bd</a><br>前端基础进阶（十四）：ES6基础知识合集 <a href="https://www.jianshu.com/p/cfb0893c34f1" target="_blank" rel="noopener">https://www.jianshu.com/p/cfb0893c34f1</a><br>前端基础进阶（十五）：详解 ES6 Modules <a href="https://www.jianshu.com/p/b7db6224a4aa" target="_blank" rel="noopener">https://www.jianshu.com/p/b7db6224a4aa</a><br>我想这将是最有价值的react入门与进阶教程 <a href="https://www.jianshu.com/p/83bda9cd8c67" target="_blank" rel="noopener">https://www.jianshu.com/p/83bda9cd8c67</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://yangbo5207.github.io/wutongluo/" target="_blank" rel="noopener">梧桐罗</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文整理收集前端基础知识教程系列，供自我学习。&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="lesson" scheme="http://taoqianbao.github.io/categories/lesson/"/>
    
    
      <category term="css" scheme="http://taoqianbao.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="lesson" scheme="http://taoqianbao.github.io/tags/lesson/"/>
    
      <category term="frontend" scheme="http://taoqianbao.github.io/tags/frontend/"/>
    
      <category term="html" scheme="http://taoqianbao.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理之高级上机篇</title>
    <link href="http://taoqianbao.github.io/2017/01/08/javascript/interview-two/"/>
    <id>http://taoqianbao.github.io/2017/01/08/javascript/interview-two/</id>
    <published>2017-01-08T01:26:33.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2016/01/08/javascript/interview-one/">前端面试题整理之基础问答篇</a></li><li><a href="/2017/01/08/javascript/interview-two/">前端面试题整理之高级上机篇</a></li><li><a href="/2018/01/08/javascript/interview-three/">前端面试题整理之资深理论篇</a></li><li><a href="/2018/01/08/javascript/interview-four/">前端面试题整理之理想篇</a></li></ol><a id="more"></a> <h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2016/01/08/javascript/interview-one/&quot;&gt;前端面试题整理之基础问答篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/javascript/interview-two/&quot;&gt;前端面试题整理之高级上机篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-three/&quot;&gt;前端面试题整理之资深理论篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-four/&quot;&gt;前端面试题整理之理想篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/tags/Javascript/"/>
    
      <category term="面试" scheme="http://taoqianbao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="题目" scheme="http://taoqianbao.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>H5页面终端适配解决方案</title>
    <link href="http://taoqianbao.github.io/2016/11/23/h5/terminal-adapter/"/>
    <id>http://taoqianbao.github.io/2016/11/23/h5/terminal-adapter/</id>
    <published>2016-11-23T01:43:44.000Z</published>
    <updated>2018-05-28T12:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？<br><!-- TOC --></p><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#基本概念解读">基本概念解读</a><ul><li><a href="#css尺寸单位">CSS尺寸单位</a></li><li><a href="#屏幕screen">屏幕（screen）</a></li><li><a href="#视口viewport">视口（viewport）</a></li><li><a href="#缩放scale">缩放（scale）</a></li></ul></li><li><a href="#解决方案-viewport">解决方案-viewport</a></li><li><a href="#解决方案-rem">解决方案-rem</a><ul><li><a href="#动态设置-html-标签-font-size-大小">动态设置 html 标签 font-size 大小</a></li><li><a href="#元素大小取值方法">元素大小取值方法</a></li><li><a href="#rem-布局方案的开发方式">rem 布局方案的开发方式</a></li><li><a href="#字体使用-px-为单位">字体使用 px 为单位</a></li></ul></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="基本概念解读"><a href="#基本概念解读" class="headerlink" title="基本概念解读"></a>基本概念解读</h3><p>像素（pixels）、屏幕（screen）、视口（viewport）、缩放（scale）<br>设备像素、CSS像素、设备像素比（window.devicePixelRatio）、</p><h4 id="CSS尺寸单位"><a href="#CSS尺寸单位" class="headerlink" title="CSS尺寸单位"></a>CSS尺寸单位</h4><p>1.px：绝对单位，页面按精确像素展示，英文（pixels）<br>2.em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。<br>3.rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。<br>4.vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。<br>5.vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。<br>6.vmin：vw和vh中较小的那个。<br>7.vmax：vw和vh中较大的那个。<br>8.%:百分比<br>9.in:寸<br>10.cm:厘米<br>11.mm:毫米<br>12.pt:point，大约1/72寸<br>13.pc:pica，大约6pt，1/6寸<br>14.ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)<br>15.ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)</p><h4 id="屏幕（screen）"><a href="#屏幕（screen）" class="headerlink" title="屏幕（screen）"></a>屏幕（screen）</h4><h4 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h4><h4 id="缩放（scale）"><a href="#缩放（scale）" class="headerlink" title="缩放（scale）"></a>缩放（scale）</h4><h3 id="解决方案-viewport"><a href="#解决方案-viewport" class="headerlink" title="解决方案-viewport"></a>解决方案-viewport</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p><p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> isMobile = <span class="built_in">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setScale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pageScale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.top !== <span class="built_in">window</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pageScale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> width = docEl.clientWidth || <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">var</span> height = docEl.clientHeight || <span class="number">640</span>;</span><br><span class="line">        <span class="keyword">if</span> (width / height &gt;= <span class="number">360</span> / <span class="number">640</span>) &#123;</span><br><span class="line">            <span class="comment">// 高度优先</span></span><br><span class="line">            pageScale = height / <span class="number">640</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pageScale = width / <span class="number">360</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> content = <span class="string">'width='</span> + <span class="number">360</span> + <span class="string">', initial-scale='</span> + pageScale </span><br><span class="line">          + <span class="string">', maximum-scale='</span> + pageScale + <span class="string">', user-scalable=no'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'viewport'</span>).setAttribute(<span class="string">'content'</span>, content);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.pageScale = pageScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">        setScale();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        docEl.className += <span class="string">' pc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p><h3 id="解决方案-rem"><a href="#解决方案-rem" class="headerlink" title="解决方案-rem"></a>解决方案-rem</h3><p>rem 布局适配方案被提到的比较多，在各大互联网企业产品中都有较为广泛的应用。</p><p>简单来说其方法为：</p><p>按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；<br>css 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；<br>设计稿中的字体使用 px 为单位，通过媒体查询稍作调整。<br>下面我们举个例子来说明。</p><h4 id="动态设置-html-标签-font-size-大小"><a href="#动态设置-html-标签-font-size-大小" class="headerlink" title="动态设置 html 标签 font-size 大小"></a>动态设置 html 标签 font-size 大小</h4><p>第一个问题是 html 标签的 font-size 动态计算。这取决于如何约定换算比例，以页面宽度十等份为例，核心代码参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">WIN</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  setFontSize = WIN.setFontSize = <span class="function"><span class="keyword">function</span> (<span class="params">_width</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  docEl = <span class="built_in">document</span>.documentElement; </span><br><span class="line">        <span class="comment">// 获取当前窗口的宽度</span></span><br><span class="line">        <span class="keyword">var</span>  width = _width || docEl.clientWidth; <span class="comment">// docEl.getBoundingClientRect().width;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大于 1080px 按 1080</span></span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">1080</span>) &#123; </span><br><span class="line">            width = <span class="number">1080</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span>  rem = width / <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(rem);</span><br><span class="line"></span><br><span class="line">        docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 部分机型上的误差、兼容性处理</span></span><br><span class="line">        <span class="keyword">var</span>  actualSize = win.getComputedStyle &amp;&amp; <span class="built_in">parseFloat</span>(win.getComputedStyle(docEl)[<span class="string">"font-size"</span>]);</span><br><span class="line">        <span class="keyword">if</span> (actualSize !== rem &amp;&amp; actualSize &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Math</span>.abs(actualSize - rem) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> remScaled = rem * rem / actualSize;</span><br><span class="line">            docEl.style.fontSize = remScaled + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="comment">//函数节流</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dbcRefresh</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(setFontSize, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口更新动态改变 font-size</span></span><br><span class="line">    WIN.addEventListener(<span class="string">'resize'</span>, dbcRefresh, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//页面显示时计算一次</span></span><br><span class="line">    WIN.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123; </span><br><span class="line">            dbcRefresh() </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    setFontSize();</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></p><p>另外，对于全屏显示的 H5 活动页，对宽高比例有所要求，此时应当做的调整。可以这么来做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustWarp</span>(<span class="params">warpId = <span class="string">'#warp'</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if (window.isMobile) return;</span></span><br><span class="line">    <span class="keyword">const</span> $win = $(<span class="built_in">window</span>);</span><br><span class="line">    <span class="keyword">const</span> height = $win.height();</span><br><span class="line">    <span class="keyword">let</span> width = $win.width();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 考虑导航栏情况</span></span><br><span class="line">    <span class="keyword">if</span> (width / height &lt; <span class="number">360</span> / <span class="number">600</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    width = <span class="built_in">Math</span>.ceil(height * <span class="number">360</span> / <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line">    $(warpId).css(&#123;</span><br><span class="line">        height,</span><br><span class="line">        width,</span><br><span class="line">        postion: <span class="string">'relative'</span>,</span><br><span class="line">        top: <span class="number">0</span>,</span><br><span class="line">        left: <span class="string">'auto'</span>,</span><br><span class="line">        margin: <span class="string">'0 auto'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新计算 rem</span></span><br><span class="line">    <span class="built_in">window</span>.setFontSize(width);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照这种缩放方法，几乎在任何设备上都可以实现等比缩放的精确布局。</p><h4 id="元素大小取值方法"><a href="#元素大小取值方法" class="headerlink" title="元素大小取值方法"></a>元素大小取值方法</h4><p>第二个问题是元素大小的取值。</p><p>以设计稿宽度 1080px 为例，我们将宽度分为 10 等份以便于换算，那么 1rem = 1080 / 10 = 108px。</p><p>设计稿中，有一个图片大小为 460x210，相对页面位置 top: 321px; left: 70;。其换算方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">px, rem = <span class="number">108</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> remVal = <span class="built_in">parseFloat</span>(px) / rem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> px === <span class="string">"string"</span> &amp;&amp; px.match(<span class="regexp">/px$/</span>)) &#123; </span><br><span class="line">        remVal += <span class="string">'rem'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> remVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此得到该元素最终的 css 样式应为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.img_demo &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-image: url(<span class="string">'demo.png'</span>);</span><br><span class="line">    top: <span class="number">2.97222</span>rem;</span><br><span class="line">    left: <span class="number">0.64814</span>rem;</span><br><span class="line">    width: <span class="number">4.25926</span>rem;</span><br><span class="line">    height: <span class="number">1.94444</span>rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="rem-布局方案的开发方式"><a href="#rem-布局方案的开发方式" class="headerlink" title="rem 布局方案的开发方式"></a>rem 布局方案的开发方式</h4><p>通过以上方法，rem 布局方案就得到了实现。但是手动计算 rem 的取值显然不现实。<br>通过 less/sass 预处理工具，我们只需要设置 mixins 方法，然后按照设计稿的实际大小来取值即可。以 less 为例，mixins 参考如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// px 转 rem</span></span><br><span class="line">.px2rem(@px, @attr: <span class="string">'width'</span>, @rem: <span class="number">108</span>rem) &#123;</span><br><span class="line">    @&#123;attr&#125;: (@px / @rem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.px2remTLWH(@top, @left, @width, @height, @rem: <span class="number">108</span>rem) &#123;</span><br><span class="line">    .px2rem(@top, top, @rem);</span><br><span class="line">    .px2rem(@left, left, @rem);</span><br><span class="line">    .px2rem(@width, width, @rem);</span><br><span class="line">    .px2rem(@height, height, @rem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对前文的示例元素，css 样式可以这样来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.img_demo &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-image: url(<span class="string">'demo.png'</span>);</span><br><span class="line"></span><br><span class="line">    .px2remTLWH(<span class="number">321</span>, <span class="number">70</span>, <span class="number">460</span>, <span class="number">210</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，宽和高可以直接通过设计稿输出的图片元素大小读取到；top/left 的取值，可以通过在 Photoshop 中移动参考线定位元素快速得到。</p><h4 id="字体使用-px-为单位"><a href="#字体使用-px-为单位" class="headerlink" title="字体使用 px 为单位"></a>字体使用 px 为单位</h4><p>字体使用 rem 等比缩放会出现显示上的问题，只需要针对性使用媒体查询设置几种大小即可。</p><p>示例参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 字体响应式</span></span><br><span class="line">@media screen and (max-width: <span class="number">321</span>px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: <span class="number">13</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: <span class="number">321</span>px) and (max-width: <span class="number">400</span>px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: <span class="number">14</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: <span class="number">400</span>px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: <span class="number">16</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://zhuanlan.zhihu.com/p/25422063" target="_blank" rel="noopener">H5移动多终端适配全解 - 从原理到方案</a><br><a href="https://www.w3.org/Style/Examples/007/units.en.html" target="_blank" rel="noopener">CSS单位详解</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？&lt;br&gt;&lt;!-- TOC --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#基本概念解读&quot;&gt;基本概念解读&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#css尺寸单位&quot;&gt;CSS尺寸单位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#屏幕screen&quot;&gt;屏幕（screen）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#视口viewport&quot;&gt;视口（viewport）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#缩放scale&quot;&gt;缩放（scale）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#解决方案-viewport&quot;&gt;解决方案-viewport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#解决方案-rem&quot;&gt;解决方案-rem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#动态设置-html-标签-font-size-大小&quot;&gt;动态设置 html 标签 font-size 大小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#元素大小取值方法&quot;&gt;元素大小取值方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rem-布局方案的开发方式&quot;&gt;rem 布局方案的开发方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字体使用-px-为单位&quot;&gt;字体使用 px 为单位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="H5" scheme="http://taoqianbao.github.io/categories/H5/"/>
    
    
      <category term="h5" scheme="http://taoqianbao.github.io/tags/h5/"/>
    
      <category term="flex" scheme="http://taoqianbao.github.io/tags/flex/"/>
    
      <category term="media" scheme="http://taoqianbao.github.io/tags/media/"/>
    
  </entry>
  
</feed>
