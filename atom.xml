<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>致力于拯救世界的IT农民工</title>
  
  <subtitle>朱胜峰的网络事件</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://taoqianbao.github.io/"/>
  <updated>2018-02-02T09:06:59.000Z</updated>
  <id>http://taoqianbao.github.io/</id>
  
  <author>
    <name>Peter Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>必须知道的javascript概念题</title>
    <link href="http://taoqianbao.github.io/2018/02/02/javascript/javascript-concepts/"/>
    <id>http://taoqianbao.github.io/2018/02/02/javascript/javascript-concepts/</id>
    <published>2018-02-02T09:00:50.000Z</published>
    <updated>2018-02-02T09:06:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下面是一些 Web 开发中常见的概念</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol><li>原始值和引用值(Value vs. Reference)</li></ol><p>理解对象、数组和函数是如何复制和传递到函数中的。了解引用值是被复制了什么，理解原始值是通过复制值来进行复制和传递的。</p><ol><li>域(Scope)</li></ol><p>理解全局域、函数域以及块级作用域之间的区别。了解变量在哪里是可用的，了解 JavaScript 引擎如何执行变量查找。</p><ol><li>提升(Hoisting)</li></ol><p>认识到变量和函数的声明会被提升到声明所在的上下文，即在变量的作用域内，不管变量在何处声明，都会被提升到作用域的顶部，但是变量初始化的顺序不变。认识到函数表达式不会被提升。</p><ol><li>闭包(Closures)</li></ol><p>认识到一个函数会保留对在其内部创建的域的访问，认识到这些可以让我们做什么，例如数据隐藏、内存化以及动态函数生成。</p><ol><li>this</li></ol><p>理解 this 绑定的规则。知道它的工作机制，知道在函数中如何判断它等同于什么，并且认识到为什么它是有用的。</p><ol><li>new</li></ol><p>认识到它如何与面向对象编程产生联系。了解通过 new 调用的函数会发生什么。理解通过使用 new 来自函数 prototype 属性的继承的对象是如何生成的。</p><ol><li>apply, call, bind</li></ol><p>了解这些函数是如何工作的，了解如何使用它们。了解它们对 this 做了什么。</p><ol><li>原型和继承(Prototypes &amp; Inheritance)</li></ol><p>理解 JavaScript 中的继承通过 [[Prototype]] 链进行工作。理解如何通过函数和对象设置继承，以及 new 是如何帮助我们实现的。了解 <strong>proto</strong> 和 prototype 属性是什么，以及它们的作用。</p><ol><li>异步 JS(Asynchronous JS)</li></ol><p>理解事件循环，理解浏览器是如何处理用户输入、Web 请求和一般事件的。知道如何识别并正确实现异步代码。理解 JavaScript 中异步和单线程分别是怎样的。.</p><ol><li>高阶函数(Higher Order Functions)</li></ol><p>理解这些函数是 JavaScript 中的第一类对象以及这意味着什么，了解从另一个函数返回函数是完全合法的。了解闭包和高阶函数允许我们使用的技术。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在学习 JavaScript 和 Web 开发的人很多，他们都希望能凭此获得一份工作。然而，自学常常会使学习者对 JavaScript 语言本身的理解存在知识盲点。</p><p>实际上，令人感到惊讶的是，他们只需要掌握很少的语言知识就能制作复杂的网页，然而这样通常不能很好掌握 JavaScript 的基础知识。</p><p>使用基本的技能来实现功能和避免复杂的需求是相当容易的，通过依赖 Stack Overflow，而不理解复制来的代码以创建一个网站也是十分容易。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;下面是一些 Web 开发中常见的概念&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="interview" scheme="http://taoqianbao.github.io/tags/interview/"/>
    
      <category term="concepts" scheme="http://taoqianbao.github.io/tags/concepts/"/>
    
  </entry>
  
  <entry>
    <title>前端技术文章导航整理</title>
    <link href="http://taoqianbao.github.io/2018/01/18/h5/links-fe/"/>
    <id>http://taoqianbao.github.io/2018/01/18/h5/links-fe/</id>
    <published>2018-01-18T04:09:54.000Z</published>
    <updated>2018-01-18T04:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><ul><li><a href="http://www.oschina.net/news/92218/npm-state-of-javascript-frameworks-2017-part-1" target="_blank" rel="noopener">npm 发布 2017 JavaScript 框架报告：React 占主导地位</a></li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="h5" scheme="http://taoqianbao.github.io/categories/h5/"/>
    
    
      <category term="h5" scheme="http://taoqianbao.github.io/tags/h5/"/>
    
      <category term="web" scheme="http://taoqianbao.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 ARIA role</title>
    <link href="http://taoqianbao.github.io/2018/01/17/h5/aria-role/"/>
    <id>http://taoqianbao.github.io/2018/01/17/h5/aria-role/</id>
    <published>2018-01-17T07:55:17.000Z</published>
    <updated>2018-01-17T08:07:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>HTML5 aria-* and role</p><p>　　在video-js的demo中看到了很多aria-<em>，不知道干嘛的。google一下，发现aria的意思是**</em> Accessible Rich Internet Application <em>*</em>。 Accessible一般是为不方便的人士提供的功能，比如windows的放大镜，语音朗读，高对比度主题等。</p><p>　　主要内容是说明并演示了HTML5针对html tag增加的属性：role 和 aria-*。</p><p>　　role的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role=“button”，辅助工具就可以认出这实际上是个button。</p><p>　　ARIA Roles</p><p>　　Use the ARIA role attribute to indicate that a generic tag is playing the role of a standard widget like a button.</p><p>　　而aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;div role=<span class="string">"checkbox"</span> aria-checked=<span class="string">"checked"</span>$amp;&gt;amp;$lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>　　辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。</p><p>　　Add ARIA for screen readers</p><p>　　ARIA attributes provides semantic information to screen readers that is normally conveyed visually.</p><p>　　Note that using ARIA does not automatically implement the standard widget behavior, you’ll still need to add focus management and keyboard navigation yourself.</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://www.w3.org/TR/aria-in-html/" target="_blank" rel="noopener">https://www.w3.org/TR/aria-in-html/</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！&lt;/p&gt;
    
    </summary>
    
      <category term="H5" scheme="http://taoqianbao.github.io/categories/H5/"/>
    
    
      <category term="ARIA" scheme="http://taoqianbao.github.io/tags/ARIA/"/>
    
      <category term="H5" scheme="http://taoqianbao.github.io/tags/H5/"/>
    
      <category term="HTML5" scheme="http://taoqianbao.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>postgresql安装环境</title>
    <link href="http://taoqianbao.github.io/2018/01/11/sql/postgresql-one/"/>
    <id>http://taoqianbao.github.io/2018/01/11/sql/postgresql-one/</id>
    <published>2018-01-11T04:17:01.000Z</published>
    <updated>2018-01-11T04:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PeterMacBook:bin peter$ psql help</span><br><span class="line">psql: could not connect to server: No such file or directory</span><br><span class="line">Is the server running locally and accepting</span><br><span class="line">connections on Unix domain socket "/tmp/.s.PGSQL.5432"?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PeterMacBook:bin peter$ ps -ef | grep postmaster</span><br><span class="line">  501 46892 46159   0 12:01下午 ttys001    0:00.00 grep postmaster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PeterMacBook:10.1 peter$ brew services start postgres</span><br><span class="line">==&gt; Tapping homebrew/services</span><br><span class="line">Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...</span><br><span class="line">remote: Counting objects: 14, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 14 (delta 0), reused 9 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (14/14), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Tapped 0 formulae (42 files, 55.2KB)</span><br><span class="line">==&gt; Successfully started `postgresql` (label: homebrew.mxcl.postgresql)</span><br><span class="line">PeterMacBook:10.1 peter$ </span><br><span class="line">  </span><br><span class="line">PeterMacBook:10.1 peter$ ps -ef|grep psql</span><br><span class="line">  501 47471 46159   0 12:19下午 ttys001    0:00.00 grep psql</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew services start postgresql</span><br><span class="line">brew services stop postgresql</span><br></pre></td></tr></table></figure><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://taoqianbao.github.io/categories/SQL/"/>
    
    
      <category term="sql" scheme="http://taoqianbao.github.io/tags/sql/"/>
    
      <category term="postgresql" scheme="http://taoqianbao.github.io/tags/postgresql/"/>
    
      <category term="pg" scheme="http://taoqianbao.github.io/tags/pg/"/>
    
  </entry>
  
  <entry>
    <title>MAC OSX 配置PATH变量</title>
    <link href="http://taoqianbao.github.io/2018/01/10/macos/setting-path/"/>
    <id>http://taoqianbao.github.io/2018/01/10/macos/setting-path/</id>
    <published>2018-01-10T15:13:28.000Z</published>
    <updated>2018-01-23T02:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文主要阐述macos设置环境变量的问题,<br>mac 一般使用bash作为默认shell</p><p>Mac系统的环境变量，加载顺序为：<br>    /etc/profile<br>    /etc/paths<br>    ~/.bash_profile<br>    ~/.bash_login<br>    ~/.profile<br>    ~/.bashrc</p><p>当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。</p><a id="more"></a><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><p>以下在MAC OSX Yosemite 10.10上测试可用<br>在terminal中查看PATH变量的值</p><pre><code>echo $PATH</code></pre><p>返回结果长成这个样子:(每个路径被冒号分割)</p><pre><code>/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin</code></pre><p>临时会话中修改PATH变量</p><p>如果只是想在当前terminal的会话中临时修改PATH变量则可以</p><pre><code>PATH=/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin</code></pre><p>持久修改PATH变量</p><p>转到home目录 Home目录在哪里？ 在home目录中创建一个文件 .bash_profile</p><pre><code>nano .bash_profile</code></pre><p>随后在其中加入</p><pre><code>export PATH=/Users/Alex/.composer/vendor/bin:${PATH}</code></pre><p>重启terminal窗口后，再看看PATH变量就应该变了</p><pre><code>echo $PATH/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/Alex/.composer/vendor/bin</code></pre><h2 id="常用mac-os命令"><a href="#常用mac-os命令" class="headerlink" title="常用mac os命令"></a>常用mac os命令</h2><p>MAC OS查看端口占用情况及杀死进程<br>终端命令<br>sudo lsof -i :9000</p><p>然后根据PID杀进程：<br>sudo kill -9 716</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本文主要阐述macos设置环境变量的问题,&lt;br&gt;mac 一般使用bash作为默认shell&lt;/p&gt;
&lt;p&gt;Mac系统的环境变量，加载顺序为：&lt;br&gt;    /etc/profile&lt;br&gt;    /etc/paths&lt;br&gt;    ~/.bash_profile&lt;br&gt;    ~/.bash_login&lt;br&gt;    ~/.profile&lt;br&gt;    ~/.bashrc&lt;/p&gt;
&lt;p&gt;当然/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。&lt;/p&gt;
    
    </summary>
    
      <category term="macos" scheme="http://taoqianbao.github.io/categories/macos/"/>
    
    
      <category term="macos" scheme="http://taoqianbao.github.io/tags/macos/"/>
    
      <category term="path" scheme="http://taoqianbao.github.io/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理之理想篇</title>
    <link href="http://taoqianbao.github.io/2018/01/08/javascript/interview-four/"/>
    <id>http://taoqianbao.github.io/2018/01/08/javascript/interview-four/</id>
    <published>2018-01-08T09:52:38.000Z</published>
    <updated>2018-01-08T09:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p><ol><li><a href="/2016/01/08/javascript/interview-one/">前端面试题整理之基础问答篇</a></li><li><a href="/2017/01/08/javascript/interview-two/">前端面试题整理之高级上机篇</a></li><li><a href="/2018/01/08/javascript/interview-three/">前端面试题整理之资深理论篇</a></li><li><a href="/2018/01/08/javascript/interview-four/">前端面试题整理之理想篇</a></li></ol><a id="more"></a><h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><h3 id="你觉得前端工程的价值体现在哪"><a href="#你觉得前端工程的价值体现在哪" class="headerlink" title="你觉得前端工程的价值体现在哪?"></a>你觉得前端工程的价值体现在哪?</h3><p>1.为简化用户使用提供技术支持（交互部分）<br>2.为多个浏览器兼容性提供支持<br>3.为提高用户浏览速度（浏览器性能）提供支持<br>4.为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持<br>5.为展示数据提供支持（数据接口）</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2016/01/08/javascript/interview-one/&quot;&gt;前端面试题整理之基础问答篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/javascript/interview-two/&quot;&gt;前端面试题整理之高级上机篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-three/&quot;&gt;前端面试题整理之资深理论篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-four/&quot;&gt;前端面试题整理之理想篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="面试" scheme="http://taoqianbao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理想" scheme="http://taoqianbao.github.io/tags/%E7%90%86%E6%83%B3/"/>
    
      <category term="问题" scheme="http://taoqianbao.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS的一些知识点总结</title>
    <link href="http://taoqianbao.github.io/2018/01/07/css/hello-world/"/>
    <id>http://taoqianbao.github.io/2018/01/07/css/hello-world/</id>
    <published>2018-01-07T09:14:11.000Z</published>
    <updated>2018-01-08T02:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h2 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#关于作者&quot; class=&quot;headerlink&quot; title=&quot;关于作者&quot;&gt;&lt;/a&gt;关于作者&lt;/h
      
    
    </summary>
    
      <category term="CSS" scheme="http://taoqianbao.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://taoqianbao.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>软考笔记之系统集成项目管理工程师-Lesson1</title>
    <link href="http://taoqianbao.github.io/2018/01/04/itpmp/lesson1/"/>
    <id>http://taoqianbao.github.io/2018/01/04/itpmp/lesson1/</id>
    <published>2018-01-04T09:35:09.000Z</published>
    <updated>2018-01-05T03:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本章节目的是自学考取 系统集成项目管理工程师 - System integrated project management engineer 为目的，读书笔记</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>很多朋友需要两个月时间拿下软考中“系统集成项目管理工程师”的考试，笔者通过两个月每天五小时的复习，顺利通过了考试，相信你也可以。这两个月需要对自己狠一点，丝毫不要放松。</p><a id="more"></a><p>以下内容转载自2016年</p><h2 id="一、弄清重点"><a href="#一、弄清重点" class="headerlink" title="一、弄清重点"></a>一、弄清重点</h2><h2 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h2><p>计算题是下午的必考试题，分值约在15-20分，保证计算题不丢分，下午过关不会有问题。计算题主要集中在进度和成本2个方面，详细的介绍请看本公众号文章“一起复习系统集成项目管理工程师考试——计算题1”，另发送“中项”可获取笔者准备的相关复习资料。</p><h2 id="必考题"><a href="#必考题" class="headerlink" title="必考题"></a>必考题</h2><p>必考知识点主要包括：软件集成的特点、监理的职责、资质管理、楼宇布线工程、软件开发技术、计算机及网络基础知识、机房工程知识、计算机术语的英文等。</p><h2 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h2><p>变更管理的基本过程、典型的信息系统项目的生命周期模型（瀑布、V、原型化、螺旋、迭代）、项目进度管理关键路径（前导图法PDM、箭线图法ADM、活动时间期望值=(乐观+4个正常+悲观/6)）、项目成本管理（CV,SV,CPI,SPI,EAC,ETC,成本超支时采取什么措施？进度落后时采取什么措施？）</p><h2 id="二、心法"><a href="#二、心法" class="headerlink" title="二、心法"></a>二、心法</h2><p>时间紧，所以大部头的教程无法逐页细看了。我在做题时，遇到无法理解的地方，就去教程相应章节找找答案，看看定义和公式，仅此而已。更详细的心法请看本公众号文章“通过系统集成项目管理工程师考试——我是这样做到的 ”，以下为建议的复习计划，供大家参考：</p><h2 id="建立解题思路"><a href="#建立解题思路" class="headerlink" title="建立解题思路"></a>建立解题思路</h2><p>有清晰解题思路的朋友可以跳过此小点。如果对解题思路没有把握的，建议看看“真题解析”相关教程，主要是学习正规的解题思路。我当时看了2套真题解析就建立了解题思路，并对考点有了基本的了解，做到了“分清主次”“见题不慌”。此阶段估计会耗时半个月时间。</p><h2 id="练习历年真题"><a href="#练习历年真题" class="headerlink" title="练习历年真题"></a>练习历年真题</h2><p>找出2009年以来的10套真题，扎扎实实做一遍，重点部分一定要理解，不懂就主动翻看教程。对于易错的题目，作好标记，用于第二遍复习，一看就会做的题目下次不必再看。对于自己不熟悉易忘的知识点，可以总结成文档，打印出来，没事就拿出来看。此阶段估计耗时一个月，最难熬，笔者有时会做题到凌晨2点。</p><h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><p>通过前2个阶段的扎实准备，此时相信你对这个考试的框架比较熟悉，更重要的是你对自己的弱项在哪里做到了然于胸了。剩下的半个月着重看自己做错的题目，看自己记录的重要知识点，将经典计算题再做一遍，看看那些公式。笔者当时连公交车、WC时间、吃饭时间都用来看打印的小抄。</p><h2 id="轻装上阵"><a href="#轻装上阵" class="headerlink" title="轻装上阵"></a>轻装上阵</h2><p>靠前一两天就放松一下，认认考场路线，准备考试用具，备好身份证、准考证。考前一晚早些休息，次日轻装上阵迎接考试。考试过程中把握“先易后难”，遇难莫慌，慌了就深呼吸，英语差的朋友对于最后五道英语题可以采取“4A1B”这样的答案……</p><h2 id="三、分数分布"><a href="#三、分数分布" class="headerlink" title="三、分数分布"></a>三、分数分布</h2><ol><li>专业英语5分</li><li>项目管理知识37分</li><li>法律法规及相关标准11分</li><li>信息系统工程监理5分</li><li>软件工程知识5分</li><li>计算机技术知识与网络知识7分</li><li>信息系统建设5分</li></ol><h2 id="四、关于中项考试"><a href="#四、关于中项考试" class="headerlink" title="四、关于中项考试"></a>四、关于中项考试</h2><p>考试时间软考考试分为上半年和下半年,每年5月份和11月份。科目单次时间为2小时。<br>考试题型考试分为上午和下午,上午75道选择题,下午5个问答题,各75分,同时通过45分者为合格。<br>考试时,考前一周打印准考证,注意,该准考证只能在规定的时间内打印,防止当天丢掉,最好将准考证电子档存在邮箱里,以防丢失时,及时打印。特别注意,考试通过后,去领取证书的时候,需携带准考证、身份证领取方可领取。</p>]]></content>
    
    <summary type="html">
    
      系统集成项目管理工程师
    
    </summary>
    
      <category term="ITPMP" scheme="http://taoqianbao.github.io/categories/ITPMP/"/>
    
    
      <category term="ITPMP" scheme="http://taoqianbao.github.io/tags/ITPMP/"/>
    
  </entry>
  
  <entry>
    <title>2017年关于JavaScript你需要知道的事情</title>
    <link href="http://taoqianbao.github.io/2017/12/30/javascript/news-2017/"/>
    <id>http://taoqianbao.github.io/2017/12/30/javascript/news-2017/</id>
    <published>2017-12-30T04:12:12.000Z</published>
    <updated>2018-01-24T07:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2017年关于JavaScript你需要知道的事情</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#行业要闻">行业要闻</a></li><li><a href="#发展回顾">发展回顾</a></li><li><a href="#开源项目">开源项目</a></li><li><a href="#css">CSS</a></li><li><a href="#人工智能">人工智能</a></li><li><a href="#构建之道">构建之道</a></li><li><a href="#状态管理">状态管理</a></li><li><a href="#webassembly">WebAssembly</a></li><li><a href="#graphql">GraphQL</a></li><li><a href="#webvrar">WebVR/AR</a></li><li><a href="#测试">测试</a></li><li><a href="#教程">教程</a></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="行业要闻"><a href="#行业要闻" class="headerlink" title="行业要闻"></a>行业要闻</h3><div><br>    <ol><li><a href="https://link.zhihu.com/?target=https%3A//blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html%3Fm%3D1" target="_blank">Google宣布PWA与原生应用拥有同等待遇和权限</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//twitter.com/necolas/status/829128165314306048" target="_blank">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/UEH" target="_blank">WebAssembly 已被所有主流浏览器支持</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNX" target="_blank">斯坦福宣布使用 JavaScript 作为计算机课程的首选语言</a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=http%3A//6me.us/W0k" target="_blank">2017 年中如果想成为专业的 Web 开发者，应该在 Web 前端、服务端以及 DevOps 领域所需要学习到的技术栈以及进阶路线图</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//www.polymer-project.org/blog/2017-05-15-time-for-two" target="_blank">Polymer 2.0发布，最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//microsoft.github.io/reactxp/" target="_blank">微软开源跨平台开发框架 ReactXP</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=http%3A//news.mit.edu/2017/tim-berners-lee-wins-turing-award-0404" target="_blank">万维网之父 Tim Berners-Lee 获得 2016 年度图灵奖</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//developer.github.com/v4/" target="_blank">Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构</a>；</u><br>        </li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bIZ" target="_blank">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR </a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bWv" target="_blank">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bjr" target="_blank">Firefox 55 引入 WebVR 支持</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-graphql-playground-f1e0a018f05d" target="_blank">GraphQL Playground 发布</a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UAN" target="_blank">MSDN 将 7700 余份文档重定向到 MDN</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UcV" target="_blank">Node.js 8 宣布进入 LTS，Node.js 9 发布</a>；</li><br>    </ol><br>    </div><h3 id="发展回顾"><a href="#发展回顾" class="headerlink" title="发展回顾"></a>发展回顾</h3><div><br>    <ol><br>        <li><a href="https://link.zhihu.com/?target=https%3A//stateofjs.com/2017/" target="_blank">The State of JavaScript 2017</a>；</li><br>        <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/U39" target="_blank">2017 JavaScript 发展回顾</a>；</u><br>        </li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript" target="_blank">JavaScript 完整编年史</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bXD" target="_blank">TC39，ECMAScript 与 JavaScript 的未来</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/Usl" target="_blank">ESM 的目前实现与未来规划</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bi0" target="_blank">JavaScript 模块化现状</a>；</li><br>        <li><a href="https://link.zhihu.com/?target=https%3A//www.monterail.com/state-of-vuejs-report" target="_blank">2017 Vue.js 现状报告</a>；</li><br>    </ol><br></div>    <h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=http%3A//elasticlunr.com/" target="_blank">浏览器端搜索与离线搜索的全文搜索引擎</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNh" target="_blank">一系列优秀的 React 界面框架</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/mozilla/fathom" target="_blank">Fathom-提取网页中有意义内容的 JavaScript 框架</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/gitsummore/nile.js" target="_blank">基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具</a><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//golden-layout.com/" target="_blank">golden-layout</a>，一款非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/jeromedalbert/real-world-react" target="_blank">一系列基于 React 开发的真实环境下的开源应用代码库</a>；</li><br></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bLZ" target="_blank">CSS 的现状</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNe" target="_blank">CSS-in-JavaScript：基于组件的样式组织</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//madebymike.com.au/writing/the-invisible-parts-of-CSS/" target="_blank">隐藏幕后的 CSS 知识点</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=http%3A//cssgridgarden.com/" target="_blank">使用 CSS Grid 打造私家花园</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bTa" target="_blank">深入解析高性能 CSS 引擎：Quantum CSS（Stylo）</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//mozilladevelopers.github.io/playground/" target="_blank">Mozilla CSS Grid 教程</a>；</li><br></ol><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/PAIR-code/deeplearnjs" target="_blank">Google 开源 JavaScript 机器学习库 DeepLearn.js</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2017/08/TensorFire-use-GPU-fast-study%3Futm_source%3Dinfoq%26utm_campaign%3Duser_page%26utm_medium%3Dlink" target="_blank">TensorFire</a>－基于WebGL的浏览器端深度学习框架；</li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//janhuenermann.com/projects/learning-to-drive" target="_blank">在浏览器中实现自动驾驶汽车</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/U5P" target="_blank">使用 Node.js 与 OpenCV 实现人脸识别</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bCw" target="_blank">深入浅出构建简单的 Chess AI</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bhQ" target="_blank">利用机器学习优化网站性能</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bNa" target="_blank">从零开始基于 JavaScript 构建简单神经网络</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/tonybeltramelli/pix2code" target="_blank">pix2code—依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/gpujs/gpu.js" target="_blank">gpu.js</a> 提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b2v" target="_blank">构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人</a>；</u><br>    </li><br></ol><h3 id="构建之道"><a href="#构建之道" class="headerlink" title="构建之道"></a>构建之道</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b4y" target="_blank">Webpack 与 Rollup：求同存异</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bLP" target="_blank">面向生产环境的前端性能优化清单</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b9A" target="_blank">使用 Webpack 的 Magic Comment 特性简化代码分割</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bI8" target="_blank">Webpack import 支持异步导入 CSS</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//toddmotto.com/lazy-loading-angular-code-splitting-webpack" target="_blank">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//micro-frontends.org/" target="_blank">微前端：微服务概念的前端实践</a>；</li><br></ol><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b4J" target="_blank">React 中的状态管理架构模式</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//scotch.io/tutorials/state-management-in-vue-getting-started-with-vue" target="_blank">基于 Vuex 的 Vue 应用状态管理</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bJq" target="_blank">Redux 状态管理之痛点、分析与改良</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bLd" target="_blank">Mobdux：整合 MobX 与 Redux 中优秀的部分</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/USQ" target="_blank">使用 TypeScript 编写 React 与 Redux 应用</a>；</u><br>    </li><br></ol><h3 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=http%3A//blog.openbloc.fr/webassembly-first-steps/" target="_blank">WebAssembly 初体验：重构简单游戏引擎</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/byh" target="_blank">Rust、WebAssembly 与 Webpack</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/mbasso/asm-dom" target="_blank">asm-dom</a> 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//www.hellorust.com/news/native-wasm-target.html" target="_blank">Rust 默认可以编译为 WebAssembly</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/Uua" target="_blank">WebAssembly 的应用场景</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/UZJ" target="_blank">使用 Rust 开发基于 WebAssembly 的游戏</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UOB" target="_blank">NectarJS: 将 JavaScript 编译为平台相关的二进制代码</a>；</li><br></ol><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bzs" target="_blank">为什么我们选择了 GraphQL</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/U6S" target="_blank">GraphQL 技术栈漫游</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bBU" target="_blank">Apollo Client 2.0 新特性介绍</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/b1X" target="_blank">用强类型语言 GraphQL 增强 React</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/b2H" target="_blank">利用 GraphQL 创建同构 Vue.js 应用</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bWY" target="_blank">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bgr" target="_blank">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816" target="_blank">Graphcool</a> 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UsY" target="_blank">基于 Apollo 的组件数据交互</a>；</li><br></ol><h3 id="WebVR-AR"><a href="#WebVR-AR" class="headerlink" title="WebVR/AR"></a>WebVR/AR</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bDE" target="_blank">面向 Web 开发者的 VR 指南</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=http%3A//uber.github.io/luma.gl/%23/" target="_blank">luma.gl</a> 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/UlM" target="_blank">Expo AR 简明教程</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js" target="_blank">AR.js</a>发布。<br>        <a href="https://link.zhihu.com/?target=https%3A//github.com/jeromeetienne/AR.js" target="_blank">AR.js</a>是高性能的面向 Web 的增强现实的工具库，它在移动端能达到 60fps；</li><br></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bJ5" target="_blank">JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/byQ" target="_blank">TDD 与 Vue.js</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//mo.github.io/2017/07/20/javascript-e2e-integration-testing.html" target="_blank">基于 JavaScript 的 Web 应用的端到端测试工具对比</a>；</u><br>    </li><br></ol><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ol><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/bhR" target="_blank">在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/biZ" target="_blank">理解高阶组件</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//parg.co/bic" target="_blank">Nuxt.js SSR 与权限验证指南</a>；</u><br>    </li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//deepstreamhub.com/tutorials/protocols/webrtc-intro/" target="_blank">WebRTC 实战教程</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//github.com/shovanch/fullstack-webdev-path" target="_blank">全栈 Web 学习路径</a>；</li><br>    <li><u><a href="https://link.zhihu.com/?target=https%3A//javascript.info/" target="_blank">现代 JavaScript 指南</a>；</u><br>    </li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//parg.co/Uuk" target="_blank">使用 Node.js 构建区块链</a>；</li><br>    <li><a href="https://link.zhihu.com/?target=https%3A//francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/" target="_blank">自定义基于 JavaScript 的 16 位虚拟机</a>；</li><br></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://zhuanlan.zhihu.com/p/32298468" target="_blank" rel="noopener">转载文章</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2017年关于JavaScript你需要知道的事情&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#行业要闻&quot;&gt;行业要闻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#发展回顾&quot;&gt;发展回顾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#开源项目&quot;&gt;开源项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#人工智能&quot;&gt;人工智能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#构建之道&quot;&gt;构建之道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#状态管理&quot;&gt;状态管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webassembly&quot;&gt;WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#graphql&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webvrar&quot;&gt;WebVR/AR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#测试&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#教程&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="2017" scheme="http://taoqianbao.github.io/tags/2017/"/>
    
      <category term="news" scheme="http://taoqianbao.github.io/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Git使用基础教程</title>
    <link href="http://taoqianbao.github.io/2017/12/27/git/how-to-use-git/"/>
    <id>http://taoqianbao.github.io/2017/12/27/git/how-to-use-git/</id>
    <published>2017-12-27T12:45:44.000Z</published>
    <updated>2018-01-05T03:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>一：Git是什么?<br>二：SVN与Git的最主要的区别?<br>三：在windows上如何安装Git?<br>四：如何操作？<br>五：远程仓库<br>六：创建与合并分支<br>七：bug分支<br>八：多人协作</p><a id="more"></a><h3 id="一：Git是什么？"><a href="#一：Git是什么？" class="headerlink" title="一：Git是什么？"></a>一：Git是什么？</h3><p>Git是目前世界上最先进的分布式版本控制系统。<br>工作原理 / 流程：</p><p><img src="http://img.mukewang.com/59c31e4400013bc911720340.png" alt=""></p><p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p><h3 id="二：SVN与Git的最主要的区别？"><a href="#二：SVN与Git的最主要的区别？" class="headerlink" title="二：SVN与Git的最主要的区别？"></a>二：SVN与Git的最主要的区别？</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="三、在windows上如何安装Git？"><a href="#三、在windows上如何安装Git？" class="headerlink" title="三、在windows上如何安装Git？"></a>三、在windows上如何安装Git？</h3><p>msysgit是 windows版的Git,如下：</p><p><img src="http://img.mukewang.com/59c1cfa400019aee02460029.jpg" alt=""></p><p>需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”,如下：</p><p><img src="http://img.mukewang.com/59c1cfd20001c2d602530073.jpg" alt=""></p><p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p><p><img src="http://img.mukewang.com/59c1cfe70001462e06680380.jpg" alt=""></p><p>安装完成后，还需要最后一步设置，在命令行输入如下：</p><p><img src="http://img.mukewang.com/59c1d041000110d906460213.jpg" alt=""></p><p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><p>注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p><h3 id="四：如何操作？"><a href="#四：如何操作？" class="headerlink" title="四：如何操作？"></a>四：如何操作？</h3><h4 id="一：创建版本库。"><a href="#一：创建版本库。" class="headerlink" title="一：创建版本库。"></a>一：创建版本库。</h4><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><p>所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p><p><img src="http://img.mukewang.com/59c1d1060001909005780268.png" alt=""></p><p>pwd 命令是用于显示当前的目录。</p><p>通过命令 git init 把这个目录变成git可以管理的仓库，如下：</p><p><img src="http://img.mukewang.com/59c1d12b0001b08305270077.png" alt=""></p><p>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p><p><img src="http://img.mukewang.com/59c1d143000112df06120173.png" alt=""></p><p>把文件添加到版本库中。</p><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p><h2 id="下面先看下demo如下演示："><a href="#下面先看下demo如下演示：" class="headerlink" title="下面先看下demo如下演示："></a>下面先看下demo如下演示：</h2><p>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p><p>第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：</p><p><img src="http://img.mukewang.com/59c1d2080001e4bb04490080.png" alt=""></p><p>如果和上面一样，没有任何提示，说明已经添加成功了。</p><p>第二步：用命令 git commit告诉Git，把文件提交到仓库。</p><p><img src="http://img.mukewang.com/59c1d2200001f05b04930121.png" alt=""></p><p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：</p><p><img src="http://img.mukewang.com/59c1d2340001a87904690107.png" alt=""></p><p>说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：</p><p><img src="http://img.mukewang.com/59c1d2500001634606170171.png" alt=""></p><p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。<br>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：<br>git diff readme.txt 如下：</p><p><img src="http://img.mukewang.com/59c1d2cb00010a0304960202.png" alt=""></p><p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p><p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。</p><p>如下：<br><img src="http://img.mukewang.com/59c1d2ff00015a9606180342.png" alt=""></p><h3 id="二：版本回退："><a href="#二：版本回退：" class="headerlink" title="二：版本回退："></a>二：版本回退：</h3><p>如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p><p>内容为33333333333333.继续执行命令如下：</p><p><img src="http://img.mukewang.com/59c1d32b00012ba604570139.png" alt=""></p><p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p><p><img src="http://img.mukewang.com/59c1d34e0001a1ac06050304.png" alt=""></p><p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：</p><p><img src="http://img.mukewang.com/59c1d3fc00013ad206040097.png" alt=""></p><p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p><p><img src="http://img.mukewang.com/59c1d4140001a0c404490165.png" alt=""></p><p>如果想回退到上一个版本的命令如下操作：</p><p><img src="http://img.mukewang.com/59c1d429000199fc04610105.png" alt=""></p><p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p><p><img src="http://img.mukewang.com/59c1d4470001fcdc04360085.png" alt=""></p><p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：</p><p><img src="http://img.mukewang.com/59c1d45300012d9604800219.png" alt=""></p><p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：<br>git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：</p><p><img src="http://img.mukewang.com/59c1d51a0001d5fc05100122.png" alt=""></p><p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令<br>git reset –hard 6fcfc89来恢复了。演示如下：</p><p><img src="http://img.mukewang.com/59c1d53a0001b8b305050153.png" alt=""></p><p>可以看到 目前已经是最新的版本了。</p><h3 id="三：理解工作区与暂存区的区别？"><a href="#三：理解工作区与暂存区的区别？" class="headerlink" title="三：理解工作区与暂存区的区别？"></a>三：理解工作区与暂存区的区别？</h3><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p><p>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p><p>我们前面说过使用Git提交文件到版本库有两步：</p><p>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p><p>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p><p>我们继续使用demo来演示下：</p><p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：</p><p><img src="http://img.mukewang.com/59c1d55a0001a3c306430241.png" alt=""></p><p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：</p><p><img src="http://img.mukewang.com/59c1d56a0001a28704700241.png" alt=""></p><p>接着我们可以使用git commit一次性提交到分支上，如下：</p><p><img src="http://img.mukewang.com/59c1d57b0001b4fe06190166.png" alt=""></p><h3 id="四：Git撤销修改和删除文件操作。"><a href="#四：Git撤销修改和删除文件操作。" class="headerlink" title="四：Git撤销修改和删除文件操作。"></a>四：Git撤销修改和删除文件操作。</h3><h4 id="一：撤销修改："><a href="#一：撤销修改：" class="headerlink" title="一：撤销修改："></a>一：撤销修改：</h4><p>比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：</p><p><img src="http://img.mukewang.com/59c1d5e40001806803930139.png" alt=""></p><p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p><p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p><p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^</p><p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：</p><p><img src="http://img.mukewang.com/59c1d5fa0001b07806400168.png" alt=""></p><p>可以发现，Git会告诉你，git checkout – file 可以丢弃工作区的修改，如下命令：<br>git checkout – readme.txt,如下所示：</p><p><img src="http://img.mukewang.com/59c1d6390001419705210140.png" alt=""></p><p>命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p><p>1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</p><p>2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p><p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p><p><img src="http://img.mukewang.com/59c1d6ca0001782f06160482.png" alt=""></p><p>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</p><h4 id="二：删除文件。"><a href="#二：删除文件。" class="headerlink" title="二：删除文件。"></a>二：删除文件。</h4><p>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：</p><p><img src="http://img.mukewang.com/59c1d6de0001a31606390392.png" alt=""></p><p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p><p><img src="http://img.mukewang.com/59c1d78200017e8f07030192.png" alt=""></p><p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？<br>可以使用如下命令 git checkout – b.txt，如下所示：</p><p><img src="http://img.mukewang.com/59c1d7980001368e05570244.png" alt=""></p><p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p><p><img src="http://img.mukewang.com/59c1d7b70001308907550258.png" alt=""></p><h3 id="五：远程仓库。"><a href="#五：远程仓库。" class="headerlink" title="五：远程仓库。"></a>五：远程仓库。</h3><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p><p>ssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：</p><p><img src="http://img.mukewang.com/59c1d7d7000120d107530169.png" alt=""></p><p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p><p><img src="http://img.mukewang.com/59c1d7ef0001c75411330860.png" alt=""></p><p>点击 Add Key，你就应该可以看到已经添加的key。</p><p><img src="http://img.mukewang.com/59c1d8540001eb3707620373.png" alt=""></p><p>如何添加远程库？</p><p>现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p><p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p><p><img src="http://img.mukewang.com/59c1d86a0001044b10840605.png" alt=""></p><p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="http://img.mukewang.com/59c1d8850001b5ea10260661.png" alt=""></p><p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/tugenhua0707/testgit.git</span><br></pre></td></tr></table></figure></p><p>所有的如下：</p><p><img src="http://img.mukewang.com/59c1d8a70001c86206320252.png" alt=""></p><p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p><p><img src="http://img.mukewang.com/59c1d8bb00019ff310480655.png" alt=""></p><p>从现在起，只要本地作了提交，就可以通过如下命令：</p><pre><code>git push origin master</code></pre><p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p><h4 id="如何从远程库克隆？"><a href="#如何从远程库克隆？" class="headerlink" title="如何从远程库克隆？"></a>如何从远程库克隆？</h4><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。<br>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？<br>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p><p><img src="http://img.mukewang.com/59c1d95e0001f0fc10450604.png" alt=""></p><p>如下，我们看到：</p><p><img src="http://img.mukewang.com/59c1d97400014d4e10360484.png" alt=""></p><p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p><p><img src="http://img.mukewang.com/59c1d9860001e0d806370127.png" alt=""></p><p>接着在我本地目录下 生成testgit2目录了，如下所示：</p><p><img src="http://img.mukewang.com/59c1d99500016a2e07130197.png" alt=""></p><h3 id="六：创建与合并分支。"><a href="#六：创建与合并分支。" class="headerlink" title="六：创建与合并分支。"></a>六：创建与合并分支。</h3><p>在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p><p><img src="http://img.mukewang.com/59c1d9aa0001c15604080167.png" alt=""></p><p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令<br>git branch dev<br>git checkout dev<br>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777<br>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p><p><img src="http://img.mukewang.com/59c1da3f0001b5b703890392.png" alt=""></p><p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p><p><img src="http://img.mukewang.com/59c1da520001d44c06340206.png" alt=""></p><p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：</p><p><img src="http://img.mukewang.com/59c1da69000145ca05320255.png" alt=""></p><p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。<br>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>合并完成后，我们可以接着删除dev分支了，操作如下：</p><p><img src="http://img.mukewang.com/59c1da91000120cd06430139.png" alt=""></p><p>总结创建与合并分支命令如下：<br>查看分支：git branch<br>创建分支：git branch name<br>切换分支：git checkout name<br>创建+切换分支：git checkout –b name<br>合并某分支到当前分支：git merge name<br>删除分支：git branch –d name<br>如何解决冲突？<br>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p><p><img src="http://img.mukewang.com/59c1db410001036105690462.png" alt=""></p><p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p><p><img src="http://img.mukewang.com/59c1daaf0001133205840500.png" alt=""></p><p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p><p><img src="http://img.mukewang.com/59c1daff000106eb06340589.png" alt=""></p><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;<head是指主分支修改的内容，>&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：</head是指主分支修改的内容，></p><p><img src="http://img.mukewang.com/59c1dbaf00015f2205770266.png" alt=""></p><p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p><p><img src="http://img.mukewang.com/59c1dbc50001076c04970869.png" alt=""></p><h2 id="3-分支管理策略。"><a href="#3-分支管理策略。" class="headerlink" title="3.分支管理策略。"></a>3.分支管理策略。</h2><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p><p>创建一个dev分支。<br>修改readme.txt内容。<br>添加到暂存区。<br>切换回主分支(master)。<br>合并dev分支，使用命令 git merge –no-ff -m “注释” dev<br>查看历史记录<br>截图如下：</p><p><img src="http://img.mukewang.com/59c1dbdc0001836d06030780.png" alt=""></p><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h4 id="七：bug分支："><a href="#七：bug分支：" class="headerlink" title="七：bug分支："></a>七：bug分支：</h4><p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p><p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p><p><img src="http://img.mukewang.com/59c1dc4e000141b306260166.png" alt=""></p><p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：</p><p><img src="http://img.mukewang.com/59c1dc63000121ff06510188.png" alt=""></p><p>所以现在我可以通过创建issue-404分支来修复bug了。<br>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p><p><img src="http://img.mukewang.com/59c1dc7000010f8506010533.png" alt=""></p><p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p><p><img src="http://img.mukewang.com/59c1dce00001c1ed06120441.png" alt=""></p><p>现在，我们回到dev分支上干活了。</p><p><img src="http://img.mukewang.com/59c1dcfa00019c8104220136.png" alt=""></p><p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：</p><p><img src="http://img.mukewang.com/59c1dd07000152b404340093.png" alt=""></p><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p><p>1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。</p><p>2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</p><p>演示如下<br><img src="http://img.mukewang.com/59c1dd1f000174d406380466.png" alt=""></p><h3 id="八：多人协作。"><a href="#八：多人协作。" class="headerlink" title="八：多人协作。"></a>八：多人协作。</h3><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。<br>要查看远程库的信息 使用 git remote<br>要查看远程库的详细信息 使用 git remote –v</p><p>如下演示：</p><p><img src="http://img.mukewang.com/59c1dd7d000136fd06190169.png" alt=""></p><h3 id="一：推送分支："><a href="#一：推送分支：" class="headerlink" title="一：推送分支："></a>一：推送分支：</h3><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：<br>使用命令 git push origin master</p><p>比如我现在的github上的readme.txt代码如下：</p><p><img src="http://img.mukewang.com/59c1dd90000164a508280459.png" alt=""></p><p>本地的readme.txt代码如下：</p><p><img src="http://img.mukewang.com/59c1dda60001771804210205.png" alt=""></p><p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p><p><img src="http://img.mukewang.com/59c1ddbf0001271e05410203.png" alt=""></p><p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p><p><img src="http://img.mukewang.com/59c1ddcf0001771f08100484.png" alt=""></p><p>可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev<br>那么一般情况下，那些分支要推送呢？<br>master分支是主分支，因此要时刻与远程同步。<br>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p><p>二：抓取分支：<br>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2<br>但是我首先要把dev分支也要推送到远程去，如下</p><p><img src="http://img.mukewang.com/59c1ded800014adf05030151.jpg" alt=""></p><p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p><p><img src="http://img.mukewang.com/59c1deb70001ec7605080170.png" alt=""></p><p>现在目录下生成有如下所示：</p><p><img src="http://img.mukewang.com/59c1defe0001942707180256.png" alt=""></p><p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev</p><p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p><p>如下：</p><p><img src="http://img.mukewang.com/59c1df160001ef1e06020730.png" alt=""></p><p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p><p><img src="http://img.mukewang.com/59c1df340001209306470759.png" alt=""></p><p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p><p><img src="http://img.mukewang.com/59c1dfa60001473e05940282.png" alt=""></p><p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p><p><img src="http://img.mukewang.com/59c1dfc8000159c106460199.png" alt=""></p><p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：<br>我们可以先来看看readme.txt内容了。</p><p><img src="http://img.mukewang.com/59c1dff70001a87605190277.png" alt=""></p><p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：</p><p><img src="http://img.mukewang.com/59c1e0130001843906050480.png" alt=""></p><p>因此：多人协作工作模式一般是这样的：<br>首先，可以试图用git push origin branch-name推送自己的修改.<br>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。<br>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;一：Git是什么?&lt;br&gt;二：SVN与Git的最主要的区别?&lt;br&gt;三：在windows上如何安装Git?&lt;br&gt;四：如何操作？&lt;br&gt;五：远程仓库&lt;br&gt;六：创建与合并分支&lt;br&gt;七：bug分支&lt;br&gt;八：多人协作&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://taoqianbao.github.io/categories/Tools/"/>
    
    
      <category term="git" scheme="http://taoqianbao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理之资深理论篇</title>
    <link href="http://taoqianbao.github.io/2017/03/08/javascript/interview-three/"/>
    <id>http://taoqianbao.github.io/2017/03/08/javascript/interview-three/</id>
    <published>2017-03-08T01:26:33.000Z</published>
    <updated>2018-01-08T09:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！</p><ol><li><a href="/2016/01/08/javascript/interview-one/">前端面试题整理之基础问答篇</a></li><li><a href="/2017/01/08/javascript/interview-two/">前端面试题整理之高级上机篇</a></li><li><a href="/2018/01/08/javascript/interview-three/">前端面试题整理之资深理论篇</a></li><li><a href="/2018/01/08/javascript/interview-four/">前端面试题整理之理想篇</a></li></ol><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h4><ol><li><p>JSONP<br>原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。<br>JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createJs</span>(<span class="params">sUrl</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        oScript.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">        oScript.src = sUrl;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(oScript);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createJs(<span class="string">'jsonp.js'</span>);</span><br><span class="line"></span><br><span class="line">    box(&#123;</span><br><span class="line">       <span class="string">'name'</span>: <span class="string">'test'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">        alert(json.name);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CORS<br>服务器端对于CORS的支持，主要就是通过设置 <strong><em> Access-Control-Allow-Origin </em></strong>来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。<br>通过修改document.domain来跨子域<br>将子域和主域的document.domain设为同一个主域.<br>前提条件：这两个域名必须属于同一个基础域名! 而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域<br>主域相同的使用document.domain。</p></li><li><p>使用window.name来进行跨域<br>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。</p></li><li><p>使用HTML5中新引进的window.postMessage方法来跨域传送数据<br>还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p></li></ol><h4 id="谈谈你对webpack的看法"><a href="#谈谈你对webpack的看法" class="headerlink" title="谈谈你对webpack的看法"></a>谈谈你对webpack的看法</h4><p>WebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。</p><h6 id="webpack的两大特色："><a href="#webpack的两大特色：" class="headerlink" title="webpack的两大特色："></a>webpack的两大特色：</h6><ol><li>code splitting（可以自动完成）</li><li>loader 可以处理各种类型的静态文件，并且支持串联操作<br>webpack 是以commonJS的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li></ol><h6 id="webpack特效"><a href="#webpack特效" class="headerlink" title="webpack特效"></a>webpack特效</h6><p>webpack具有requireJs和browserify的功能，但仍有很多自己的新特性：</p><ul><li>对 CommonJS 、 AMD 、ES6的语法做了兼容</li><li>对js、css、图片等资源文件都支持打包</li><li>串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持</li><li>有独立的配置文件webpack.config.js</li><li>可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间</li><li>支持 SourceUrls 和 SourceMaps，易于调试</li><li>具有强大的Plugin接口，大多是内部插件，使用起来比较灵活</li><li>webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</li></ul><h6 id="说说TCP传输的三次握手四次挥手策略"><a href="#说说TCP传输的三次握手四次挥手策略" class="headerlink" title="说说TCP传输的三次握手四次挥手策略"></a>说说TCP传输的三次握手四次挥手策略</h6><p><strong><em> 三次握手 </em></strong><br>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：SYN和ACK。</p><ul><li>第一次握手：发送端首先发送一个带SYN标志的数据包给对方。</li><li>第二次握手：接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。</li><li>第三次握手：最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 </li></ul><p>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><p><strong><em> 断开一个TCP连接则需要“四次挥手”： </em></strong></p><ul><li><p>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p></li><li><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</p></li><li><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p></li><li><p>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p></li></ul><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><ul><li>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</li><li>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</li></ul><h4 id="Web-Worker-和-WebSocket"><a href="#Web-Worker-和-WebSocket" class="headerlink" title="Web Worker 和 WebSocket"></a>Web Worker 和 WebSocket</h4><h5 id="worker主线程：-查看详细讲解"><a href="#worker主线程：-查看详细讲解" class="headerlink" title="worker主线程：   查看详细讲解"></a>worker主线程：   <a href="/2014/05/01/web/how-to-use-webworker/">查看详细讲解</a></h5><p>Web Worker可以在后台执行脚本，而不会阻塞页面交互。Worker对象分为两种：专用式Web Worker和共享式Web Worker：专用式的Web Worker只能被当个页面使用，而共享式的Web Worker可以在被多个页面使用。</p><ol><li>通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。</li><li>通过worker.postMessage( data ) 方法来向worker发送数据。</li><li>绑定worker.onmessage方法来接收worker发送过来的数据。</li><li>可以使用 worker.terminate() 来终止一个worker的执行。</li></ol><h5 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h5><p>WebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。</p><h4 id="Javascript垃圾回收方法"><a href="#Javascript垃圾回收方法" class="headerlink" title="Javascript垃圾回收方法"></a>Javascript垃圾回收方法</h4><p><strong><em> 标记清除（mark and sweep） </em></strong><br>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p><p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。</p><p><strong><em> 引用计数(reference counting) </em></strong><br>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。<br>引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p><p>在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，也就是说只要涉及BOM及DOM就会出现循环引用问题。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;本文重点讲解前端面试过程中遇到的偏向资深层面的问题，由于资深定义广泛，本人知识面也比较匮乏，所以有写的不当之处，还请各位过客体谅！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2016/01/08/javascript/interview-one/&quot;&gt;前端面试题整理之基础问答篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/javascript/interview-two/&quot;&gt;前端面试题整理之高级上机篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-three/&quot;&gt;前端面试题整理之资深理论篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-four/&quot;&gt;前端面试题整理之理想篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/tags/Javascript/"/>
    
      <category term="面试" scheme="http://taoqianbao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="题目" scheme="http://taoqianbao.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>前端基础教程目录</title>
    <link href="http://taoqianbao.github.io/2017/02/05/lesson/fe-start/"/>
    <id>http://taoqianbao.github.io/2017/02/05/lesson/fe-start/</id>
    <published>2017-02-05T00:29:59.000Z</published>
    <updated>2018-02-05T03:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理收集前端基础知识教程系列，供自我学习。</p><!-- TOC --><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>前端基础进阶（一）：内存空间详细图解 <a href="https://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="noopener">https://www.jianshu.com/p/996671d4dcc4</a><br>前端基础进阶（二）：执行上下文详细图解 <a href="https://www.jianshu.com/p/a6d37c77e8db" target="_blank" rel="noopener">https://www.jianshu.com/p/a6d37c77e8db</a><br>前端基础进阶（三）：变量对象详解 <a href="https://www.jianshu.com/p/330b1505e41d" target="_blank" rel="noopener">https://www.jianshu.com/p/330b1505e41d</a><br>前端基础进阶（四）：详细图解作用域链与闭包 <a href="https://www.jianshu.com/p/21a16d44f150" target="_blank" rel="noopener">https://www.jianshu.com/p/21a16d44f150</a><br>前端基础进阶（五）：全方位解读this <a href="https://www.jianshu.com/p/d647aa6d1ae6" target="_blank" rel="noopener">https://www.jianshu.com/p/d647aa6d1ae6</a><br>前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包 <a href="https://www.jianshu.com/p/73122bb3d262" target="_blank" rel="noopener">https://www.jianshu.com/p/73122bb3d262</a><br>前端基础进阶（七）：函数与函数式编程  <a href="https://www.jianshu.com/p/69dede6f7e5f" target="_blank" rel="noopener">https://www.jianshu.com/p/69dede6f7e5f</a><br>前端基础进阶（八）：深入详解函数的柯里化 <a href="https://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="noopener">https://www.jianshu.com/p/5e1899fe7d6b</a><br>前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 <a href="https://www.jianshu.com/p/15ac7393bc1f" target="_blank" rel="noopener">https://www.jianshu.com/p/15ac7393bc1f</a><br>前端基础进阶（十）：面向对象实战之封装拖拽对象 <a href="https://www.jianshu.com/p/b3dee0e84454" target="_blank" rel="noopener">https://www.jianshu.com/p/b3dee0e84454</a><br>前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件 <a href="https://www.jianshu.com/p/3f97570d22b4" target="_blank" rel="noopener">https://www.jianshu.com/p/3f97570d22b4</a><br>前端基础进阶（十二）：深入核心，详解事件循环机制 <a href="https://www.jianshu.com/p/12b9f73c5a4f" target="_blank" rel="noopener">https://www.jianshu.com/p/12b9f73c5a4f</a><br>前端基础进阶（十三）：Promise使用详解 <a href="https://www.jianshu.com/p/fe5f173276bd" target="_blank" rel="noopener">https://www.jianshu.com/p/fe5f173276bd</a><br>前端基础进阶（十四）：ES6基础知识合集 <a href="https://www.jianshu.com/p/cfb0893c34f1" target="_blank" rel="noopener">https://www.jianshu.com/p/cfb0893c34f1</a><br>前端基础进阶（十五）：详解 ES6 Modules <a href="https://www.jianshu.com/p/b7db6224a4aa" target="_blank" rel="noopener">https://www.jianshu.com/p/b7db6224a4aa</a><br>我想这将是最有价值的react入门与进阶教程 <a href="https://www.jianshu.com/p/83bda9cd8c67" target="_blank" rel="noopener">https://www.jianshu.com/p/83bda9cd8c67</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://yangbo5207.github.io/wutongluo/" target="_blank" rel="noopener">梧桐罗</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文整理收集前端基础知识教程系列，供自我学习。&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="lesson" scheme="http://taoqianbao.github.io/categories/lesson/"/>
    
    
      <category term="css" scheme="http://taoqianbao.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="lesson" scheme="http://taoqianbao.github.io/tags/lesson/"/>
    
      <category term="frontend" scheme="http://taoqianbao.github.io/tags/frontend/"/>
    
      <category term="html" scheme="http://taoqianbao.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理之高级上机篇</title>
    <link href="http://taoqianbao.github.io/2017/01/08/javascript/interview-two/"/>
    <id>http://taoqianbao.github.io/2017/01/08/javascript/interview-two/</id>
    <published>2017-01-08T01:26:33.000Z</published>
    <updated>2018-01-08T09:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2016/01/08/javascript/interview-one/">前端面试题整理之基础问答篇</a></li><li><a href="/2017/01/08/javascript/interview-two/">前端面试题整理之高级上机篇</a></li><li><a href="/2018/01/08/javascript/interview-three/">前端面试题整理之资深理论篇</a></li><li><a href="/2018/01/08/javascript/interview-four/">前端面试题整理之理想篇</a></li></ol><a id="more"></a> <h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2016/01/08/javascript/interview-one/&quot;&gt;前端面试题整理之基础问答篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/javascript/interview-two/&quot;&gt;前端面试题整理之高级上机篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-three/&quot;&gt;前端面试题整理之资深理论篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/08/javascript/interview-four/&quot;&gt;前端面试题整理之理想篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/tags/Javascript/"/>
    
      <category term="面试" scheme="http://taoqianbao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="题目" scheme="http://taoqianbao.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>H5页面终端适配解决方案</title>
    <link href="http://taoqianbao.github.io/2016/11/23/h5/terminal-adapter/"/>
    <id>http://taoqianbao.github.io/2016/11/23/h5/terminal-adapter/</id>
    <published>2016-11-23T01:43:44.000Z</published>
    <updated>2018-01-23T03:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？<br><!-- TOC --></p><ul><li><a href="#前言">前言</a></li><li><a href="#正文">正文</a><ul><li><a href="#基本概念解读">基本概念解读</a><ul><li><a href="#css尺寸单位">CSS尺寸单位</a></li><li><a href="#屏幕screen">屏幕（screen）</a></li><li><a href="#视口viewport">视口（viewport）</a></li><li><a href="#缩放scale">缩放（scale）</a></li></ul></li><li><a href="#解决方案-viewport">解决方案-viewport</a></li><li><a href="#解决方案-rem">解决方案-rem</a><ul><li><a href="#动态设置-html-标签-font-size-大小">动态设置 html 标签 font-size 大小</a></li><li><a href="#元素大小取值方法">元素大小取值方法</a></li><li><a href="#rem-布局方案的开发方式">rem 布局方案的开发方式</a></li><li><a href="#字体使用-px-为单位">字体使用 px 为单位</a></li></ul></li></ul></li><li><a href="#小结">小结</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="基本概念解读"><a href="#基本概念解读" class="headerlink" title="基本概念解读"></a>基本概念解读</h3><p>像素（pixels）、屏幕（screen）、视口（viewport）、缩放（scale）<br>设备像素、CSS像素、设备像素比（window.devicePixelRatio）、</p><h4 id="CSS尺寸单位"><a href="#CSS尺寸单位" class="headerlink" title="CSS尺寸单位"></a>CSS尺寸单位</h4><p>1.px：绝对单位，页面按精确像素展示，英文（pixels）<br>2.em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。<br>3.rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。<br>4.vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。<br>5.vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。<br>6.vmin：vw和vh中较小的那个。<br>7.vmax：vw和vh中较大的那个。<br>8.%:百分比<br>9.in:寸<br>10.cm:厘米<br>11.mm:毫米<br>12.pt:point，大约1/72寸<br>13.pc:pica，大约6pt，1/6寸<br>14.ex：取当前作用效果的字体的x的高度，在无法确定x高度的情况下以0.5em计算(IE11及以下均不支持，firefox/chrome/safari/opera/ios safari/android browser4.4+等均需属性加么有前缀)<br>15.ch:以节点所使用字体中的“0”字符为基准，找不到时为0.5em(ie10+,chrome31+,safair7.1+,opera26+,ios safari 7.1+,android browser4.4+支持)</p><h4 id="屏幕（screen）"><a href="#屏幕（screen）" class="headerlink" title="屏幕（screen）"></a>屏幕（screen）</h4><h4 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h4><h4 id="缩放（scale）"><a href="#缩放（scale）" class="headerlink" title="缩放（scale）"></a>缩放（scale）</h4><h3 id="解决方案-viewport"><a href="#解决方案-viewport" class="headerlink" title="解决方案-viewport"></a>解决方案-viewport</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p><p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> isMobile = <span class="built_in">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setScale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pageScale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.top !== <span class="built_in">window</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pageScale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> width = docEl.clientWidth || <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">var</span> height = docEl.clientHeight || <span class="number">640</span>;</span><br><span class="line">        <span class="keyword">if</span> (width / height &gt;= <span class="number">360</span> / <span class="number">640</span>) &#123;</span><br><span class="line">            <span class="comment">// 高度优先</span></span><br><span class="line">            pageScale = height / <span class="number">640</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pageScale = width / <span class="number">360</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> content = <span class="string">'width='</span> + <span class="number">360</span> + <span class="string">', initial-scale='</span> + pageScale </span><br><span class="line">          + <span class="string">', maximum-scale='</span> + pageScale + <span class="string">', user-scalable=no'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'viewport'</span>).setAttribute(<span class="string">'content'</span>, content);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.pageScale = pageScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">        setScale();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        docEl.className += <span class="string">' pc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p><h3 id="解决方案-rem"><a href="#解决方案-rem" class="headerlink" title="解决方案-rem"></a>解决方案-rem</h3><p>rem 布局适配方案被提到的比较多，在各大互联网企业产品中都有较为广泛的应用。</p><p>简单来说其方法为：</p><p>按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；<br>css 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；<br>设计稿中的字体使用 px 为单位，通过媒体查询稍作调整。<br>下面我们举个例子来说明。</p><h4 id="动态设置-html-标签-font-size-大小"><a href="#动态设置-html-标签-font-size-大小" class="headerlink" title="动态设置 html 标签 font-size 大小"></a>动态设置 html 标签 font-size 大小</h4><p>第一个问题是 html 标签的 font-size 动态计算。这取决于如何约定换算比例，以页面宽度十等份为例，核心代码参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">WIN</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  setFontSize = WIN.setFontSize = <span class="function"><span class="keyword">function</span> (<span class="params">_width</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  docEl = <span class="built_in">document</span>.documentElement; </span><br><span class="line">        <span class="comment">// 获取当前窗口的宽度</span></span><br><span class="line">        <span class="keyword">var</span>  width = _width || docEl.clientWidth; <span class="comment">// docEl.getBoundingClientRect().width;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大于 1080px 按 1080</span></span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">1080</span>) &#123; </span><br><span class="line">            width = <span class="number">1080</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span>  rem = width / <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(rem);</span><br><span class="line"></span><br><span class="line">        docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 部分机型上的误差、兼容性处理</span></span><br><span class="line">        <span class="keyword">var</span>  actualSize = win.getComputedStyle &amp;&amp; <span class="built_in">parseFloat</span>(win.getComputedStyle(docEl)[<span class="string">"font-size"</span>]);</span><br><span class="line">        <span class="keyword">if</span> (actualSize !== rem &amp;&amp; actualSize &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Math</span>.abs(actualSize - rem) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> remScaled = rem * rem / actualSize;</span><br><span class="line">            docEl.style.fontSize = remScaled + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="comment">//函数节流</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dbcRefresh</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(setFontSize, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口更新动态改变 font-size</span></span><br><span class="line">    WIN.addEventListener(<span class="string">'resize'</span>, dbcRefresh, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//页面显示时计算一次</span></span><br><span class="line">    WIN.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123; </span><br><span class="line">            dbcRefresh() </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    setFontSize();</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></p><p>另外，对于全屏显示的 H5 活动页，对宽高比例有所要求，此时应当做的调整。可以这么来做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustWarp</span>(<span class="params">warpId = <span class="string">'#warp'</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if (window.isMobile) return;</span></span><br><span class="line">    <span class="keyword">const</span> $win = $(<span class="built_in">window</span>);</span><br><span class="line">    <span class="keyword">const</span> height = $win.height();</span><br><span class="line">    <span class="keyword">let</span> width = $win.width();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 考虑导航栏情况</span></span><br><span class="line">    <span class="keyword">if</span> (width / height &lt; <span class="number">360</span> / <span class="number">600</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    width = <span class="built_in">Math</span>.ceil(height * <span class="number">360</span> / <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line">    $(warpId).css(&#123;</span><br><span class="line">        height,</span><br><span class="line">        width,</span><br><span class="line">        postion: <span class="string">'relative'</span>,</span><br><span class="line">        top: <span class="number">0</span>,</span><br><span class="line">        left: <span class="string">'auto'</span>,</span><br><span class="line">        margin: <span class="string">'0 auto'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新计算 rem</span></span><br><span class="line">    <span class="built_in">window</span>.setFontSize(width);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照这种缩放方法，几乎在任何设备上都可以实现等比缩放的精确布局。</p><h4 id="元素大小取值方法"><a href="#元素大小取值方法" class="headerlink" title="元素大小取值方法"></a>元素大小取值方法</h4><p>第二个问题是元素大小的取值。</p><p>以设计稿宽度 1080px 为例，我们将宽度分为 10 等份以便于换算，那么 1rem = 1080 / 10 = 108px。</p><p>设计稿中，有一个图片大小为 460x210，相对页面位置 top: 321px; left: 70;。其换算方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">px, rem = <span class="number">108</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> remVal = <span class="built_in">parseFloat</span>(px) / rem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> px === <span class="string">"string"</span> &amp;&amp; px.match(<span class="regexp">/px$/</span>)) &#123; </span><br><span class="line">        remVal += <span class="string">'rem'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> remVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此得到该元素最终的 css 样式应为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.img_demo &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-image: url(<span class="string">'demo.png'</span>);</span><br><span class="line">    top: <span class="number">2.97222</span>rem;</span><br><span class="line">    left: <span class="number">0.64814</span>rem;</span><br><span class="line">    width: <span class="number">4.25926</span>rem;</span><br><span class="line">    height: <span class="number">1.94444</span>rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="rem-布局方案的开发方式"><a href="#rem-布局方案的开发方式" class="headerlink" title="rem 布局方案的开发方式"></a>rem 布局方案的开发方式</h4><p>通过以上方法，rem 布局方案就得到了实现。但是手动计算 rem 的取值显然不现实。<br>通过 less/sass 预处理工具，我们只需要设置 mixins 方法，然后按照设计稿的实际大小来取值即可。以 less 为例，mixins 参考如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// px 转 rem</span></span><br><span class="line">.px2rem(@px, @attr: <span class="string">'width'</span>, @rem: <span class="number">108</span>rem) &#123;</span><br><span class="line">    @&#123;attr&#125;: (@px / @rem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.px2remTLWH(@top, @left, @width, @height, @rem: <span class="number">108</span>rem) &#123;</span><br><span class="line">    .px2rem(@top, top, @rem);</span><br><span class="line">    .px2rem(@left, left, @rem);</span><br><span class="line">    .px2rem(@width, width, @rem);</span><br><span class="line">    .px2rem(@height, height, @rem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对前文的示例元素，css 样式可以这样来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.img_demo &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-image: url(<span class="string">'demo.png'</span>);</span><br><span class="line"></span><br><span class="line">    .px2remTLWH(<span class="number">321</span>, <span class="number">70</span>, <span class="number">460</span>, <span class="number">210</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，宽和高可以直接通过设计稿输出的图片元素大小读取到；top/left 的取值，可以通过在 Photoshop 中移动参考线定位元素快速得到。</p><h4 id="字体使用-px-为单位"><a href="#字体使用-px-为单位" class="headerlink" title="字体使用 px 为单位"></a>字体使用 px 为单位</h4><p>字体使用 rem 等比缩放会出现显示上的问题，只需要针对性使用媒体查询设置几种大小即可。</p><p>示例参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 字体响应式</span></span><br><span class="line">@media screen and (max-width: <span class="number">321</span>px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: <span class="number">13</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: <span class="number">321</span>px) and (max-width: <span class="number">400</span>px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: <span class="number">14</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: <span class="number">400</span>px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: <span class="number">16</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><a href="https://zhuanlan.zhihu.com/p/25422063" target="_blank" rel="noopener">H5移动多终端适配全解 - 从原理到方案</a><br><a href="https://www.w3.org/Style/Examples/007/units.en.html" target="_blank" rel="noopener">CSS单位详解</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;无线端应用日益增长，终端机型也发展多样化，前端开发者面临的适配方案也越来越多，如何选择最佳适配方案？&lt;br&gt;&lt;!-- TOC --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#正文&quot;&gt;正文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#基本概念解读&quot;&gt;基本概念解读&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#css尺寸单位&quot;&gt;CSS尺寸单位&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#屏幕screen&quot;&gt;屏幕（screen）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#视口viewport&quot;&gt;视口（viewport）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#缩放scale&quot;&gt;缩放（scale）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#解决方案-viewport&quot;&gt;解决方案-viewport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#解决方案-rem&quot;&gt;解决方案-rem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#动态设置-html-标签-font-size-大小&quot;&gt;动态设置 html 标签 font-size 大小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#元素大小取值方法&quot;&gt;元素大小取值方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rem-布局方案的开发方式&quot;&gt;rem 布局方案的开发方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字体使用-px-为单位&quot;&gt;字体使用 px 为单位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="H5" scheme="http://taoqianbao.github.io/categories/H5/"/>
    
    
      <category term="h5" scheme="http://taoqianbao.github.io/tags/h5/"/>
    
      <category term="flex" scheme="http://taoqianbao.github.io/tags/flex/"/>
    
      <category term="media" scheme="http://taoqianbao.github.io/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>Vue框架之生命周期</title>
    <link href="http://taoqianbao.github.io/2016/11/17/javascript/vue-lifecycle/"/>
    <id>http://taoqianbao.github.io/2016/11/17/javascript/vue-lifecycle/</id>
    <published>2016-11-17T06:08:16.000Z</published>
    <updated>2018-01-17T06:19:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 生命周期<br>学习Vue，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="/imgs/javascript/vue-lifecycle.png" alt="图 vue lifecycle"></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Vue 生命周期&lt;br&gt;学习Vue，生命周期很重要，我们了解完生命周期的各个组件，对写高性能组件会有很大的帮助.&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="lifecycle" scheme="http://taoqianbao.github.io/tags/lifecycle/"/>
    
      <category term="vue" scheme="http://taoqianbao.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>实战H5项目笔记之双11活动页</title>
    <link href="http://taoqianbao.github.io/2016/11/15/h5/pro-note-one/"/>
    <id>http://taoqianbao.github.io/2016/11/15/h5/pro-note-one/</id>
    <published>2016-11-15T02:28:21.000Z</published>
    <updated>2018-01-17T02:26:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>加入实体电商，开始第一个项目，双11活动。 每年参加双11活动，今年第一次自己参与，有点兴奋。</p><p>这种活动页面虽然用不上太复杂的逻辑，但也有很多后台项目涉及不到的细节，让我们踩了不少的坑。这里针对项目开发过程中涉及的一些主要技术点作一下总结回顾。</p><!-- TOC --><ul><li><a href="#1-背景">1. 背景</a><ul><li><a href="#11-项目特点">1.1. 项目特点</a></li><li><a href="#12-slider-实现">1.2. Slider 实现</a></li><li><a href="#13-移动屏幕适配">1.3. 移动屏幕适配</a><ul><li><a href="#131-高度优先viewport-等比缩放适配方案">1.3.1. 高度优先、viewport 等比缩放适配方案</a></li><li><a href="#132-绝对定位元素的微调方法">1.3.2. 绝对定位元素的微调方法</a></li><li><a href="#133-设计稿图片等比缩放方法">1.3.3. 设计稿图片等比缩放方法</a></li><li><a href="#134-快速布局方法">1.3.4. 快速布局方法</a></li></ul></li><li><a href="#14-html5-动画实现">1.4. HTML5 动画实现</a><ul><li><a href="#141-css3-动画">1.4.1. CSS3 动画</a></li><li><a href="#142-引入游戏引擎方案">1.4.2. 引入游戏引擎方案</a></li><li><a href="#143-使用-svgcanvas-操作库">1.4.3. 使用 svg/canvas 操作库</a></li></ul></li><li><a href="#15-微信分享">1.5. 微信分享</a><ul><li><a href="#151-微信-jssdk-分享-api">1.5.1. 微信 jssdk 分享 API</a></li><li><a href="#152-不走微信-jssdk-的取巧方法">1.5.2. 不走微信 jssdk 的取巧方法</a></li></ul></li><li><a href="#16-性能优化相关">1.6. 性能优化相关</a><ul><li><a href="#161-页面资源异步加载">1.6.1. 页面资源异步加载</a></li><li><a href="#162-webp-支持">1.6.2. webp 支持</a></li></ul></li><li><a href="#17-应用内登陆分享">1.7. 应用内登陆/分享</a></li><li><a href="#18-工程化问题">1.8. 工程化问题</a></li><li><a href="#19-运维发布问题">1.9. 运维发布问题</a></li><li><a href="#110-其他">1.10. 其他</a></li><li><a href="#111-小结">1.11. 小结</a></li></ul></li><li><a href="#2-关于作者">2. 关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h3 id="1-1-项目特点"><a href="#1-1-项目特点" class="headerlink" title="1.1. 项目特点"></a>1.1. 项目特点</h3><ul><li>多页滑动效果，页面多，动画元素细节多，动画效果简单</li><li>个人页(主页面)需 Flyme 账号登录，自有应用内要尽量实现免登录</li><li>将会在魅族主流应用和社区里推广</li><li>可分享到微信、微博等主流社交媒体</li></ul><h3 id="1-2-Slider-实现"><a href="#1-2-Slider-实现" class="headerlink" title="1.2. Slider 实现"></a>1.2. Slider 实现</h3><p>多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：</p><ul><li>swiper <a href="http://www.swiper.com.cn" target="_blank" rel="noopener">http://www.swiper.com.cn</a></li><li>iscroll <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">https://github.com/cubiq/iscroll</a></li><li>fullpage.js <a href="https://github.com/alvarotrigo/fullPage.js/" target="_blank" rel="noopener">https://github.com/alvarotrigo/fullPage.js/</a></li><li>Scrollify <a href="https://github.com/lukehaas/Scrollify" target="_blank" rel="noopener">https://github.com/lukehaas/Scrollify</a></li><li>onepage-scroll <a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="noopener">https://github.com/peachananr/onepage-scroll</a></li></ul><h3 id="1-3-移动屏幕适配"><a href="#1-3-移动屏幕适配" class="headerlink" title="1.3. 移动屏幕适配"></a>1.3. 移动屏幕适配</h3><p>移动端屏幕适配常用的方案有如下三种：</p><ul><li>固定高度，宽度自适应</li><li>固定宽度/高度，viewport 缩放</li><li>rem 做宽度，viewport 缩放</li></ul><h4 id="1-3-1-高度优先、viewport-等比缩放适配方案"><a href="#1-3-1-高度优先、viewport-等比缩放适配方案" class="headerlink" title="1.3.1. 高度优先、viewport 等比缩放适配方案"></a>1.3.1. 高度优先、viewport 等比缩放适配方案</h4><p>因为涉及多页大量的动画元素，只能是绝对定位来快速布局，我们采取了第二种方案：页面以 320x640 作为基础大小布局，在移动端根据实际的页面大小等比缩放。主要适配代码参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i</span>.test(navigator.userAgent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setScale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pageScale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.top !== <span class="built_in">window</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pageScale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth || <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="built_in">document</span>.documentElement.clientHeight || <span class="number">640</span>;</span><br><span class="line">        <span class="keyword">if</span> (width / height &gt;= <span class="number">360</span> / <span class="number">640</span>) &#123;</span><br><span class="line">            <span class="comment">// 高度优先</span></span><br><span class="line">            pageScale = height / <span class="number">640</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pageScale = width / <span class="number">360</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> content = <span class="string">'width='</span> + <span class="number">360</span> + <span class="string">', initial-scale='</span> + pageScale </span><br><span class="line">          + <span class="string">', maximum-scale='</span> + pageScale + <span class="string">', user-scalable=no'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'viewport'</span>).setAttribute(<span class="string">'content'</span>, content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMobile()) &#123;</span><br><span class="line">        setScale();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].classList.add(<span class="string">'pc'</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方案以高度优先，以使得全部内容都能够出现在可视区域。但有一个问题是，在 webview 内宽高比大于 9/16，于是实际采用了高度的比例缩放，基础宽度缩放后会小于屏幕宽度，由于涉及动画的元素采用了绝对定位，这导致这些元素显示上偏左，右边出现较多的空白。</p><h4 id="1-3-2-绝对定位元素的微调方法"><a href="#1-3-2-绝对定位元素的微调方法" class="headerlink" title="1.3.2. 绝对定位元素的微调方法"></a>1.3.2. 绝对定位元素的微调方法</h4><p>对于这种问题，一种简单快速的解决方案：取得基础宽度与真实宽度的缩放比，将所有绝对定位的元素按照该缩放比重新计算 left 位移。主要代码参考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'./libs/zepto'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> width = <span class="built_in">document</span>.documentElement.clientWidth || <span class="number">360</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="built_in">document</span>.documentElement.clientHeight || <span class="number">640</span>;</span><br><span class="line"><span class="keyword">let</span> pageScale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (width / height &gt;= <span class="number">360</span> / <span class="number">640</span>) &#123;</span><br><span class="line">    pageScale = height / <span class="number">640</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> offset = (width - pageScale * <span class="number">360</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 每当页面切换后调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">positionFix</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pageScale === <span class="number">1</span> || !offset) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为一个页面</span></span><br><span class="line">    <span class="keyword">const</span> $dom = $(dom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($dom.hasClass(<span class="string">'position-fixed'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $dom.find(<span class="string">'.text-box i, img'</span>).forEach(<span class="function">(<span class="params">dom, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> $<span class="keyword">this</span> = $(dom),</span><br><span class="line">            left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只修改绝对定位的元素</span></span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.css(<span class="string">'position'</span>) !== <span class="string">'absolute'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left = +($<span class="keyword">this</span>.css(<span class="string">'left'</span>).replace(<span class="string">'px'</span>, <span class="string">''</span>));</span><br><span class="line"></span><br><span class="line">        $<span class="keyword">this</span>.css(<span class="string">'left'</span>, (left + offset) + <span class="string">'px'</span>);</span><br><span class="line">        <span class="comment">// console.log($(dom).css('left'));</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $dom.addClass(<span class="string">'position-fixed'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1-3-3-设计稿图片等比缩放方法"><a href="#1-3-3-设计稿图片等比缩放方法" class="headerlink" title="1.3.3. 设计稿图片等比缩放方法"></a>1.3.3. 设计稿图片等比缩放方法</h4><p>页面缩放解决了不同屏幕大小的布局一致性。另外涉及的一个问题是，设计稿图片大小如何进行等比缩放？<br>这个问题也很简单，图片引用直接设置 width 以缩放到合适大小；雪碧图上的图片则按照 360×640 的页面大小进行缩放：</p><ul><li>对于绝对定位的元素，使用 <font color="red">transform: scale(0.333)</font> 进行变换缩放</li><li>对于流式布局的元素，使用 <font color="red">zomm(0.333)</font> 进行缩放</li></ul><h4 id="1-3-4-快速布局方法"><a href="#1-3-4-快速布局方法" class="headerlink" title="1.3.4. 快速布局方法"></a>1.3.4. 快速布局方法</h4><p>还有一个值得一提的问题是，如何做到布局元素与设计稿完全一致？</p><p>这个问题的解决方法是：使用静态的设计稿图片作为全屏背景，通过调整各元素到对应位置，从而实现快速定位。我们的一位同学给出了这个方法，并且给出了一个让页面元素可拖动并设置最终位置(left/right值)的 jQuery 插件，这使得我们的页面布局变得简单而高效。</p><h3 id="1-4-HTML5-动画实现"><a href="#1-4-HTML5-动画实现" class="headerlink" title="1.4. HTML5 动画实现"></a>1.4. HTML5 动画实现</h3><p>动画实现方案一般来说可以选择CSS3 动画、引入游戏引擎或使用 svg/canvas。</p><h4 id="1-4-1-CSS3-动画"><a href="#1-4-1-CSS3-动画" class="headerlink" title="1.4.1. CSS3 动画"></a>1.4.1. CSS3 动画</h4><p>该方案技术成本简单，任何前端开发者都能快速上手，但细节实现上工作量大。</p><p>从简单快速开始的角度来说，CSS3 动画是我们的唯一选择。使用 CSS3 动画需要特别注意一点：修改 DOM 会导致页面重绘，在移动端容易出现卡顿现象。所以应尽可能避免使用会修改 DOM 的 css 属性，只使用 <font color="red">transform</font> 实现动画变换效果。</p><p>我们的页面动画都是循环运动的，全部需要对照动效设计逐一还原实现，花费了大量的人力和时间成本。实现上主要使用了 <font color="red">animation</font>、<font color="red">keyframe</font>、<font color="red">transform</font> 属性。</p><p>此外，对于常见的入场显示/滑入等动画效果，只需要使用 <font color="red">transformc</font> 和 <font color="red">transition</font> 即可实现需求。对于 css 动画也有很多优秀而成熟的动画库可用，一些参考：</p><ul><li>animate.css <a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">https://github.com/daneden/animate.css</a></li><li>magic.css <a href="https://github.com/miniMAC/magic" target="_blank" rel="noopener">https://github.com/miniMAC/magic</a></li><li>Hover.css <a href="http://ianlunn.github.io/Hover/" target="_blank" rel="noopener">http://ianlunn.github.io/Hover/</a></li><li>velocity.js <a href="https://github.com/julianshapiro/velocity" target="_blank" rel="noopener">https://github.com/julianshapiro/velocity</a></li><li>anime.js <a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener">https://github.com/juliangarnier/anime</a></li></ul><p>下面简单介绍一下另外的两种动画实现方案。</p><h4 id="1-4-2-引入游戏引擎方案"><a href="#1-4-2-引入游戏引擎方案" class="headerlink" title="1.4.2. 引入游戏引擎方案"></a>1.4.2. 引入游戏引擎方案</h4><p>使用 h5 游戏引擎可大幅度降低工作量，能够相对容易地实现复杂动画效果，但需要经验避免入深坑，有较高学习成本，并且需要设计师深度配合。一些参考：</p><ul><li>Hilo <a href="https://github.com/hiloteam/Hilo" target="_blank" rel="noopener">https://github.com/hiloteam/Hilo</a></li><li>Phaser <a href="https://github.com/photonstorm/phaser" target="_blank" rel="noopener">https://github.com/photonstorm/phaser</a></li><li>pixi.js <a href="https://github.com/pixijs/pixi.js" target="_blank" rel="noopener">https://github.com/pixijs/pixi.js</a></li><li>melonjs <a href="https://github.com/melonjs/melonjs" target="_blank" rel="noopener">https://github.com/melonjs/melonjs</a></li><li>playcanvas <a href="https://github.com/playcanvas/engine" target="_blank" rel="noopener">https://github.com/playcanvas/engine</a></li><li>LayaAir <a href="http://www.layabox.com" target="_blank" rel="noopener">http://www.layabox.com</a></li><li>白鹭引擎 <a href="https://www.egret.com" target="_blank" rel="noopener">https://www.egret.com</a></li></ul><h4 id="1-4-3-使用-svg-canvas-操作库"><a href="#1-4-3-使用-svg-canvas-操作库" class="headerlink" title="1.4.3. 使用 svg/canvas 操作库"></a>1.4.3. 使用 svg/canvas 操作库</h4><p>使用 svg/canvas/webGL 实现的动画效果会比较好，但实现工作量较大，对实践经验也有较高的要求。成熟的相关库参考：</p><ul><li>createJs <a href="https://github.com/CreateJS" target="_blank" rel="noopener">https://github.com/CreateJS</a></li><li>snap.svg <a href="https://github.com/adobe-webplatform/Snap.svg" target="_blank" rel="noopener">https://github.com/adobe-webplatform/Snap.svg</a></li><li>svg.js <a href="https://github.com/svgdotjs/svg.js" target="_blank" rel="noopener">https://github.com/svgdotjs/svg.js</a></li><li>d3.js <a href="https://d3js.org" target="_blank" rel="noopener">https://d3js.org</a></li><li>threes.js <a href="https://threejs.org" target="_blank" rel="noopener">https://threejs.org</a></li></ul><h3 id="1-5-微信分享"><a href="#1-5-微信分享" class="headerlink" title="1.5. 微信分享"></a>1.5. 微信分享</h3><p>由于第一次做这种活动页，没有特别注意到微信内分享的问题，直到上线时才发现，分享出去的效果实在太难看，这导致几位留守到最后的同事紧急探讨协调方案，几乎整晚没睡觉。</p><h4 id="1-5-1-微信-jssdk-分享-API"><a href="#1-5-1-微信-jssdk-分享-API" class="headerlink" title="1.5.1. 微信 jssdk 分享 API"></a>1.5.1. 微信 jssdk 分享 API</h4><p>微信内开发应注意这几点：</p><ul><li>下载微信开发者工具（或 TBS Studio），以调试微信内页面</li><li>需要通过认证的公众号或订阅号，取得微信 jssdk 分享接口所需的 appId 和 signature</li><li>需要后端 API 管理 signature 签名的生成与缓存</li><li>window.history.pushState/replaceState 修改了 URL 时需要重新生成 signature 签名。由于没有仔细阅读文档并意识到这一点，在这个问题上坑了比较多的时间。</li></ul><p>我们最终协调到一个部门的订阅号，并使用他们已实现了的后端 token 签名生成 API 来实现 jssdk 的分享 API，在 nginx 层对该 API 代理转发解决跨域安全性相关问题。微信分享主要代码参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isWeixinBrowser = <span class="regexp">/micromessenger/</span>.test(navigator.userAgent.toLowerCase());</span><br><span class="line"><span class="keyword">const</span> wxJsdk = <span class="string">'//res.wx.qq.com/open/js/jweixin-1.1.0.js'</span>;</span><br><span class="line"><span class="keyword">const</span> jsApiList = [<span class="string">'checkJsApi'</span>, <span class="string">'onMenuShareTimeline'</span>, <span class="string">'onMenuShareAppMessage'</span>, <span class="string">'onMenuShareQQ'</span>, <span class="string">'onMenuShareWeibo'</span>];</span><br><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    title: <span class="string">'My Flyme 独家记忆'</span>,</span><br><span class="line">    desc: <span class="string">'当时光凝固，当回忆定格。回首2016 ，我与 Flyme 的点点滴滴都在这里。这是属于我和 Flyme 的独家记忆。'</span>,</span><br><span class="line">    link: <span class="string">''</span>,</span><br><span class="line">    imgUrl: <span class="string">''</span></span><br><span class="line">&#125;, loadedwx = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initShareEvent</span>(<span class="params">wx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        ...opts,</span><br><span class="line">        trigger: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'trigger'</span>, res)&#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'已分享'</span>, res) &#125;,</span><br><span class="line">        cancel: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'已取消'</span>, res) &#125;,</span><br><span class="line">        fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(res)) &#125; </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    wx.onMenuShareAppMessage(option); <span class="comment">// 分享给朋友</span></span><br><span class="line">    wx.onMenuShareTimeline(option);   <span class="comment">// 分享到朋友圈</span></span><br><span class="line">    wx.onMenuShareQQ(option);         <span class="comment">// 分享到QQ</span></span><br><span class="line">    wx.onMenuShareWeibo(option);      <span class="comment">// 分享到微博</span></span><br><span class="line">    wx.onMenuShareQZone(option);      <span class="comment">// 分享到QZone</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkJsApi</span>(<span class="params">wx</span>) </span>&#123;</span><br><span class="line">    wx.checkJsApi(&#123;</span><br><span class="line">        jsApiList,</span><br><span class="line">        success: <span class="function"><span class="params">()</span> =&gt;</span> initShareEvent(wx),</span><br><span class="line">        error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'checkJsApi error: '</span>, err)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initConfig</span>(<span class="params">wx</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 特别注意，这里 link 必须使用当前页面的 URL 地址，否则会失败！</span></span><br><span class="line">    opts.link = <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/wechat_api/get_js_ticket?&amp;url='</span> + opts.link,</span><br><span class="line">        dataType:<span class="string">'jsonp'</span>, <span class="comment">//指定为jsonp类型</span></span><br><span class="line">        jsonp:<span class="string">'callback'</span></span><br><span class="line">    &#125;).done(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.config(&#123;</span><br><span class="line">            debug: process.env.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">            appId: <span class="string">'wx0000000000000000'</span>,</span><br><span class="line">            nonceStr: res.data.nonceStr,</span><br><span class="line">            timestamp: res.data.timestamp,</span><br><span class="line">            signature: res.data.signature,</span><br><span class="line">            jsApiList</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> options =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (loadedwx || !isWeixinBrowser) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>([wxJsdk], (wx) =&gt; &#123;</span><br><span class="line">        loadedwx = <span class="literal">true</span>;</span><br><span class="line">        $.extend(<span class="literal">true</span>, opts, options);</span><br><span class="line">        initConfig(wx);</span><br><span class="line">        wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> checkJsApi(wx));</span><br><span class="line">        wx.error(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'出错了：'</span>, res.errMsg));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-不走微信-jssdk-的取巧方法"><a href="#1-5-2-不走微信-jssdk-的取巧方法" class="headerlink" title="1.5.2. 不走微信 jssdk 的取巧方法"></a>1.5.2. 不走微信 jssdk 的取巧方法</h4><p>微信分享 API 需要公众号或订阅号，临时的活动开发可能来不及折腾，那么一个折中的办法是这样的：在页面头部 img 标签设置分享显示的图片，设置高度和宽度为 0。示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"assets/webp/share.webp"</span> style=<span class="string">"width:0;height:0;overflow:hidden"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>微信会提取页面标题和第一张图片，作为朋友圈分享的标题和缩略图。使用 jssdk 方式分享到朋友圈的效果也是只有标题和缩略图，所以效果上没有区别。比较大的区别是，“发送给好友”时没有描述，描述位置变成了页面 URL 地址。</p><h3 id="1-6-性能优化相关"><a href="#1-6-性能优化相关" class="headerlink" title="1.6. 性能优化相关"></a>1.6. 性能优化相关</h3><p>由于时间紧而且设计稿是逐步给到的，很多细节的优化都没法去做。最终上线的版本首屏大小约 1.3M，在弱网下的加载时间会比较久一些，可优化空间还比较大。这里探讨一下我们主要考虑到的几个点。</p><h4 id="1-6-1-页面资源异步加载"><a href="#1-6-1-页面资源异步加载" class="headerlink" title="1.6.1. 页面资源异步加载"></a>1.6.1. 页面资源异步加载</h4><p>一共二十多个页面，我们按每页一个 html 模板和一个 less 文件的方式，按页面分工开发，在 index.html 页面以 script 模板方式引入，由 fis3 实现模板嵌入。通过 ajax 拿到数据后，根据数据替换模板中的数据占位符，并进行页面切割，然后生成 iSlider 需要的数据配置项。这样做的好处是 html 内容未写入到 DOM 时，涉及的静态资源图片不会被加载。</p><p>iSlider 默认至少加载 3 个页面，每一时刻也最多保存三个页面实例。于是首屏加载了三个页面，这正好符合我们的目的。</p><p>另外要提到的一点是，弱网下不同图片下载的时差较大，会使得不同位置的图片动画断断续续地出现。为了避免这种不好的效果，我们使用了一个简单的图片预加载机制，在预加载完首屏涉及的图片资源后才隐藏 loading 显示页面。</p><h4 id="1-6-2-webp-支持"><a href="#1-6-2-webp-支持" class="headerlink" title="1.6.2. webp 支持"></a>1.6.2. webp 支持</h4><p>该项目涉及图片资源 500 多张，只有手绘文字图片做了雪碧图处理。现在的移动端基本都支持 webp，使用 webp 是必须的。实际上使用 webp 后，图片目录的大小减小了 60%。</p><p>以前大家都是用智图这种在线工具处理少量的图片，搜索了一下，居然没有找到现成的批量生成 webp 的工具库，于是写了一个批量生成方法。这两天整理完善了一下，算是造了一个小轮子，需要的同学可以关注下，地址在这里：</p><p>webp 批量转换：<a href="https://github.com/lzwme/webp-batch-convert" target="_blank" rel="noopener">https://github.com/lzwme/webp-batch-convert</a></p><p>更新：有同学提到了，imagemin 提供的插件 imagemin-webp 也可以实现类似的需求。看了项目源码，实现的原理是一样的，其仓库地址为： <a href="https://github.com/imagemin/imagemin-webp" target="_blank" rel="noopener">https://github.com/imagemin/imagemin-webp</a></p><h3 id="1-7-应用内登陆-分享"><a href="#1-7-应用内登陆-分享" class="headerlink" title="1.7. 应用内登陆/分享"></a>1.7. 应用内登陆/分享</h3><p>由于要在 Flyme 自带的近十个主要应用内作推广入口，涉及到两个问题：应用内分享和应用内免登录。</p><p>在协调这一块时发现，各应用都是独自制定的各不相同的 webview 内相关 js 接口和规范，同一应用不同版本的实现也可能有差异，或者根本没有相关实现；有规范的文档也不够齐全，并且都没有示例参考；没有各应用的开发测试版本来做调试。于是花了不少时间各种咨询，踩了不少的坑，效果也还是不尽人意，最终只在魅族浏览器上做到了期望的效果。</p><p>没有统一规范，各自造轮子，于是这种跨部门跨应用的功能需求变得如此艰难。导致这种现象的存在因素很多，可知的一点是也和公司内前端人员处于边缘化地位的现实有关。过去的一年里，基础技术支撑部门技术平台做了一套 hybridApp 解决方案，@chemdemo 同学还将 JSBridge 部分抽离开源了出来：<a href="https://github.com/chemdemo/hybrid-js" target="_blank" rel="noopener">https://github.com/chemdemo/hybrid-js</a> 。可能是缺少高层足够的相关意识和支持力度，并没有在各业务软件内得到广泛应用，反而主要靠内部前端圈间沟通传播。不过这套方案为了简洁只实现了很少的通用 API 和可扩展方法，并没有继续实现各种业务适用的通用性扩展功能，自然也没有我们想要的应用内分享和 Flyme 免登录这两个功能。</p><p>对于这个问题有两点总结： </p><ul><li>统一的公共 SDK 的重要性：避免重复造轮子，健壮且具有一致性的 API、完善的文档。</li><li>再好的文档不如一个 demo</li></ul><h3 id="1-8-工程化问题"><a href="#1-8-工程化问题" class="headerlink" title="1.8. 工程化问题"></a>1.8. 工程化问题</h3><p>项目初期使用 webpack 进行构建，但由于我们平时的经验以 fis3 为主，webpack 过于灵活的配置特性使得一些工程化需求需要花时间探索。在我们接手项目后一起讨论了一下，果断转为熟悉的 fis3 构建体系。使用 fis3 主要解决的问题有：</p><ul><li>less 编译</li><li>es6 编译</li><li>js/css 压缩合并</li><li>页面模板嵌入</li><li>发布时 CDN 单独域名的适配</li><li>发布时符合内部运维体系线上发布规范的目录路径修正</li></ul><p>相比较为灵活的 webpack，fis3 更注重流程化整体解决方案，简单的数十行配置即可实现各种工程化需求。不过 fis3 的发展现在似乎进入了一个瓶颈期/稳定期，社区中对于在 rollup 和 webpack 中大热的 tree-shaking 等技术几乎都没有什么反应。希望它不要没落了，能有更多的创新吧。有两点期望：走国际化路线，出英文文档与社区支持，向国际顶级项目看进；跟进参考业界最新的工程化理念，如有必要出个 fis4 也未尝不可。</p><h3 id="1-9-运维发布问题"><a href="#1-9-运维发布问题" class="headerlink" title="1.9. 运维发布问题"></a>1.9. 运维发布问题</h3><p>由于涉及到跨部门合作，也没有太多的时间，项目起初放在了内部的 <strong><em> gitlab </em></strong> 平台，没有走 git+gerrit+jenkins+运维发布平台 这一内部完整的体系。这样做在前期省去了项目创建、各种权限申请等一堆需要协调沟通的事情，开发协作效率也比较高，但到了发布的阶段就突显出了问题：每次发布都需要由运维人员手动操作，协调发布很花费时间。</p><p>另外静态页面也没有独立出来，想当然地简单的扔到后端目录中，结果导致前端的修改需要后端也必须作修改发布，增加了前后端协调的时间成本。</p><p>于是，在首次发布后又进行的几次小迭代中，每次迭代发布都涉及到多人手动协调，十分的浪费时间。</p><p>总结一句话：项目构建尽量与已有的成熟的规范一致，以少走弯路。</p><h3 id="1-10-其他"><a href="#1-10-其他" class="headerlink" title="1.10. 其他"></a>1.10. 其他</h3><p>最后列举一些移动端 H5 开发可参考的内容：</p><ul><li>真机调试 <a href="https://github.com/jieyou/remote_inspect_web_on_real_device" target="_blank" rel="noopener">https://github.com/jieyou/remote_inspect_web_on_real_device</a></li><li>vConsole: 客户端内 H5 调试 <a href="https://github.com/WechatFE/vConsole" target="_blank" rel="noopener">https://github.com/WechatFE/vConsole</a></li><li>移动端布局终极解决方案 <a href="https://github.com/imochen/hotcss" target="_blank" rel="noopener">https://github.com/imochen/hotcss</a></li><li>mobileHack <a href="https://github.com/RubyLouvre/mobileHack" target="_blank" rel="noopener">https://github.com/RubyLouvre/mobileHack</a></li><li>H5项目常见问题汇总及解决方案 <a href="https://github.com/FrontEndRoad/HTML5-FAQ" target="_blank" rel="noopener">https://github.com/FrontEndRoad/HTML5-FAQ</a></li></ul><h3 id="1-11-小结"><a href="#1-11-小结" class="headerlink" title="1.11. 小结"></a>1.11. 小结</h3><p>这是我们第一次尝试这种活动页，在如此紧凑的时间节点下，没有什么高大上的东西，更多的是各种采坑尝试的实践过程。以上列举的内容算是对本次开发实践做一个总结记录，采用的相关实现方案也可作后续参考。欢迎探讨分享你们的经验。</p><h2 id="2-关于作者"><a href="#2-关于作者" class="headerlink" title="2. 关于作者"></a>2. 关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      实战H5项目笔记
    
    </summary>
    
      <category term="h5" scheme="http://taoqianbao.github.io/categories/h5/"/>
    
    
      <category term="h5" scheme="http://taoqianbao.github.io/tags/h5/"/>
    
      <category term="project" scheme="http://taoqianbao.github.io/tags/project/"/>
    
      <category term="note" scheme="http://taoqianbao.github.io/tags/note/"/>
    
      <category term="css" scheme="http://taoqianbao.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>WEB开发常见效果插件收藏整理</title>
    <link href="http://taoqianbao.github.io/2016/11/15/javascript/plugins-one/"/>
    <id>http://taoqianbao.github.io/2016/11/15/javascript/plugins-one/</id>
    <published>2016-11-15T02:18:34.000Z</published>
    <updated>2018-01-17T06:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>web开发中常常有轮播图等效果，常见的开源项目很多，做一个整理</p><a id="more"></a><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="Slider-实现"><a href="#Slider-实现" class="headerlink" title="Slider 实现"></a>Slider 实现</h3><p>多页翻屏滑动的效果有很多开源的实现，当然希望尽量的简单自己实现也不是很复杂。我们选择的是百度开源的 iSlider，iSlider 是一款非常优秀的翻页滑动组件。除此之外，还有很多成熟的开源实现可选用：</p><ul><li><a href="http://www.swiper.com.cn" target="_blank" rel="noopener">swiper</a></li><li><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a></li><li><a href="https://github.com/alvarotrigo/fullPage.js/" target="_blank" rel="noopener">fullpage.js</a> </li><li><a href="https://github.com/lukehaas/Scrollify" target="_blank" rel="noopener">Scrollify</a></li><li><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="noopener">onepage-scroll</a> </li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;web开发中常常有轮播图等效果，常见的开源项目很多，做一个整理&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="web" scheme="http://taoqianbao.github.io/tags/web/"/>
    
      <category term="js" scheme="http://taoqianbao.github.io/tags/js/"/>
    
      <category term="plugins" scheme="http://taoqianbao.github.io/tags/plugins/"/>
    
  </entry>
  
  <entry>
    <title>技术管理之备份策略</title>
    <link href="http://taoqianbao.github.io/2016/11/10/itm/backup/"/>
    <id>http://taoqianbao.github.io/2016/11/10/itm/backup/</id>
    <published>2016-11-10T14:11:20.000Z</published>
    <updated>2018-01-10T14:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>备份策略指确定需备份的内容、备份时间及备份方式。</p><a id="more"></a><h3 id="一、缺乏统一的备份策略"><a href="#一、缺乏统一的备份策略" class="headerlink" title="一、缺乏统一的备份策略"></a>一、缺乏统一的备份策略</h3><h4 id="一是备份日程表。"><a href="#一是备份日程表。" class="headerlink" title="一是备份日程表。"></a>一是备份日程表。</h4><p>IT管理人员应该分析各个信息化方案(如数据库、文件服务器等等)的数据量、数据增量、备份窗口等因素，制定可行的备份日程表。在制定备份日程表的时候，需要注意两点。首先备份日程表必须以书面的形式确认下来，特别是企业信息化应用比较多的情况下。这方便后续的追踪。其次备份日程表可能需要根据实际的情况进行调整。如可能在某天对数据库中的数据进行来大规模的更新，此时就需要做一个临时的完全备份。相关的信息需要在日程表中反映出来，以利于后续的维护。最后是日程表中要反映一些特定的日期。如对于一般企业来说，会有十一、年假等长假。这些假期中由于长期没有人员，容易出现断电等问题。在这种情况下，最好能够在放假之前对数据进行一次完全备份，以备不时之需。这些因素都应该在备份日程表中反映出来，以免到时候漏掉。</p><h4 id="二是规划系统备份的时间。"><a href="#二是规划系统备份的时间。" class="headerlink" title="二是规划系统备份的时间。"></a>二是规划系统备份的时间。</h4><p>由于备份时会耗用比较多的资源，如服务器的内存、CPU资源。进行远程备份时，还会占用带宽等等。为此对于数据备份的时候也要进行合理的规划。特别是有多个系统的数据都要进行远程备份时，最好在时间上能够错开，以提高备份的效率。如可以先估计一下某个应用备份的时间，然后可以在空闲时段内进行分段备份。建议最好能够将备份的时间设置在企业下班后。此时访问系统的人员会少的多，甚至一个用户也没有。此时进行数据备份，即使耗时比较长，也不会对用户造成很大的影响。</p><h3 id="二、缺乏有效的培训"><a href="#二、缺乏有效的培训" class="headerlink" title="二、缺乏有效的培训"></a>二、缺乏有效的培训</h3><p>在灾难恢复方案的实施过程中，有些企业缺乏对项目管理人员的培训。笔者在跟企业一些的IT人员沟通的过程中，发现不少项目管理员人对于数据备份与恢复的措施一知半解。有的甚至不清楚在数据还原之前测试的重要性。由于缺乏有效的培训，会给后续的数据恢复带来很大的安全隐患。</p><h3 id="三、没有对备份的数据不定时的进行恢复测试"><a href="#三、没有对备份的数据不定时的进行恢复测试" class="headerlink" title="三、没有对备份的数据不定时的进行恢复测试"></a>三、没有对备份的数据不定时的进行恢复测试</h3><p>备份的数据是否可用呢?很多系统管理员太过于相信自己的能力，认为备份文件不会出现问题。结果呢，等到真的需要用到备份文件时，才发现备份文件损坏了，无法使用。此时以前的一些工作就都会竹篮子打水一场空了。</p><h3 id="四、忽略了硬件设备的检查"><a href="#四、忽略了硬件设备的检查" class="headerlink" title="四、忽略了硬件设备的检查"></a>四、忽略了硬件设备的检查</h3><p>有些项目管理员会犯顾此失彼的毛病。如可能非常重视数据备份文件的安全性，但是却忽略了硬件设备的问题。虽然说通常情况下，只要系统正常运行，硬件一般不会出现问题。但是当某些意外情况发生时，就可能对硬件出现损害。此时就需要着重检查一下硬件是否出现故障。<br>为了保障硬件设备工作正常，最好能够在数据备份设备上设置一些报警系统。如当备份设备如硬盘上出现坏扇区时能够自动报告给管理员，或者当存储空间快耗竭时自动报告。这些报警措施可以简化硬件设备的监督工作。<br>总之对于数据灾难恢复策略来说，备份文件、软件、硬件一样重要，缺一不可。其中任何一项出现故障时，就可能导致在遇到意外情况时无法正常恢复数据。为此这四个环节在实际工作中，项目管理员必须一一的落实下去，切不可马虎了事。</p><h3 id="常见的备份策略类型"><a href="#常见的备份策略类型" class="headerlink" title="常见的备份策略类型"></a>常见的备份策略类型</h3><p>常见的备份策略有完全备份、增量备份、差异备份三种类型。作以简单介绍：</p><h4 id="1、完全备份-Full-Backup-："><a href="#1、完全备份-Full-Backup-：" class="headerlink" title="1、完全备份(Full Backup)："></a>1、完全备份(Full Backup)：</h4><p>　　每次对数据进行完整的备份。当发生数据丢失的灾难情况时，完全备份无需依赖其他信息，即可实现100%数据恢复，其恢复时间最短且操作最方便；</p><h4 id="2、增量备份-Incremental-Backup-："><a href="#2、增量备份-Incremental-Backup-：" class="headerlink" title="2、增量备份(Incremental Backup)："></a>2、增量备份(Incremental Backup)：</h4><p>　　只有那些在上次完全备份或者增量备份后被修改了的文件才会被备份。优点是备份数据量小，需要的时间短，缺点是恢复的时候需要依赖之前的备份记录，出问题的风险较大；</p><h4 id="3、差异备份-Differential-Backup-："><a href="#3、差异备份-Differential-Backup-：" class="headerlink" title="3、差异备份(Differential Backup)："></a>3、差异备份(Differential Backup)：</h4><p>　　备份那些自从上次完全备份之后被修改过的文件。因此从差异备份中恢复数据的时间较短，因为只需要两份数据——最后一次完全备份和最后一次差异备份，缺点是每次备份需要的时间较长。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;备份策略指确定需备份的内容、备份时间及备份方式。&lt;/p&gt;
    
    </summary>
    
      <category term="TechManage" scheme="http://taoqianbao.github.io/categories/TechManage/"/>
    
    
      <category term="备份" scheme="http://taoqianbao.github.io/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="策略" scheme="http://taoqianbao.github.io/tags/%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>WEB页面自适应解决方案</title>
    <link href="http://taoqianbao.github.io/2016/07/15/javascript/viewport-rem-one/"/>
    <id>http://taoqianbao.github.io/2016/07/15/javascript/viewport-rem-one/</id>
    <published>2016-07-15T02:14:46.000Z</published>
    <updated>2018-01-17T06:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目录<br>1 viewport 缩放方案<br>2 rem 布局适配方案<br>2.1 动态设置 html 标签 font-size 大小<br>2.2 元素大小取值方法<br>2.3 rem 布局方案的开发方式<br>2.4 字体使用 px 为单位<br>3 相关参考</p><p>拿到设计稿后，如何进行布局还原？</p><p>如果只需要做非精确的响应式设计，那么使用媒体查询来实现就 OK 了。如果需要精确还原设计稿，则一般通过缩放来实现。常见方案有基于 viewport 和基于 rem 的缩放方案。</p><a id="more"></a><h3 id="1-viewport-缩放方案"><a href="#1-viewport-缩放方案" class="headerlink" title="1 viewport 缩放方案"></a>1 viewport 缩放方案</h3><p>在移动端，可以通过 viewport 缩放页面大小比率达到目的。</p><p>简单来说，即所有宽高像素与视觉稿输出相同，然后通过页面宽度与视觉稿的宽度比率，动态设置 viewport。缩放方案核心代码参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> isMobile = <span class="built_in">window</span>.isMobile /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setScale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pageScale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.top !== <span class="built_in">window</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pageScale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> width = docEl.clientWidth || <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">var</span> height = docEl.clientHeight || <span class="number">640</span>;</span><br><span class="line">        <span class="keyword">if</span> (width / height &gt;= <span class="number">360</span> / <span class="number">640</span>) &#123;</span><br><span class="line">            <span class="comment">// 高度优先</span></span><br><span class="line">            pageScale = height / <span class="number">640</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pageScale = width / <span class="number">360</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> content = <span class="string">'width='</span> + <span class="number">360</span> + <span class="string">', initial-scale='</span> + pageScale </span><br><span class="line">          + <span class="string">', maximum-scale='</span> + pageScale + <span class="string">', user-scalable=no'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'viewport'</span>).setAttribute(<span class="string">'content'</span>, content);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.pageScale = pageScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">        setScale();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        docEl.className += <span class="string">' pc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>但是如果希望 PC 上也能显示，由于没有 viewport 的缩放概念，只能以固定值来设定，这个效果就不太好。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;目录&lt;br&gt;1 viewport 缩放方案&lt;br&gt;2 rem 布局适配方案&lt;br&gt;2.1 动态设置 html 标签 font-size 大小&lt;br&gt;2.2 元素大小取值方法&lt;br&gt;2.3 rem 布局方案的开发方式&lt;br&gt;2.4 字体使用 px 为单位&lt;br&gt;3 相关参考&lt;/p&gt;
&lt;p&gt;拿到设计稿后，如何进行布局还原？&lt;/p&gt;
&lt;p&gt;如果只需要做非精确的响应式设计，那么使用媒体查询来实现就 OK 了。如果需要精确还原设计稿，则一般通过缩放来实现。常见方案有基于 viewport 和基于 rem 的缩放方案。&lt;/p&gt;
    
    </summary>
    
      <category term="h5" scheme="http://taoqianbao.github.io/categories/h5/"/>
    
    
      <category term="css" scheme="http://taoqianbao.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="web" scheme="http://taoqianbao.github.io/tags/web/"/>
    
      <category term="media" scheme="http://taoqianbao.github.io/tags/media/"/>
    
      <category term="viewport" scheme="http://taoqianbao.github.io/tags/viewport/"/>
    
      <category term="rem" scheme="http://taoqianbao.github.io/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>JS中call与apply区别</title>
    <link href="http://taoqianbao.github.io/2016/04/27/javascript/diff-call-apply/"/>
    <id>http://taoqianbao.github.io/2016/04/27/javascript/diff-call-apply/</id>
    <published>2016-04-27T02:48:03.000Z</published>
    <updated>2018-01-17T06:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><!-- TOC --><ul><li><a href="#背景">背景</a></li><li><a href="#定义">定义</a><ul><li><a href="#call">call</a></li><li><a href="#apply">apply</a></li><li><a href="#区别">区别</a></li></ul></li><li><a href="#用法">用法</a></li><li><a href="#高级用法">高级用法</a></li><li><a href="#结束语">结束语</a></li><li><a href="#关于作者">关于作者</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>ECMAScript规范为所有函数都包含两个方法(这两个方法非继承而来), call 和 apply 。这两个函数都是在特定的作用域中调用函数,能改变函数的作用域，实际上是改变函数体内 this 的值 。</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>语法<br>    call(thisObj，Object)<br>定义<br>    调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明<br>    call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>语法<br>    apply(thisObj，[argArray])<br>定义<br>    应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明<br>    如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>参数不同, apply 传入的是一个参数数组，也就是将多个参数组合成一个参数数组， call 从第二个参数开始依次传入.</li><li>apply 可以直接将当前函数的arguments对象作为apply的第二个参数传入</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>调用函数，传递参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个add 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用call 来调用 add 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAddCall</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用 add 方法 的 call 方法</span></span><br><span class="line">    <span class="keyword">return</span> add.call(<span class="keyword">this</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//apply 来调用 add 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAddApply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用 add 方法 的 applly 方法</span></span><br><span class="line">    <span class="keyword">return</span> add.apply(<span class="keyword">this</span>, [x, y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myAddCall(<span class="number">10</span>, <span class="number">20</span>));    <span class="comment">//输出结果30</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(myAddApply(<span class="number">20</span>, <span class="number">20</span>));  <span class="comment">//输出结果40</span></span><br></pre></td></tr></table></figure></p><p>我们看到通过方法本身的call 和 apply 执行了该函数。</p><p>改变函数作用域<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> name = <span class="string">'小白'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'小红'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(sayName.call(<span class="keyword">this</span>));    <span class="comment">//输出小白</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(sayName.call(obj));    <span class="comment">//输入小红</span></span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">我们改变了函数运行的作用域， 通过绑定不同的对象，函数内部 this 也不同。最终输入结果才会这样。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 高级用法</span></span><br><span class="line"><span class="string">高级用法，实现 js 继承</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JS</span><br><span class="line">    <span class="comment">//父类 Person</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类 Chinese</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Chinese</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//借助 call 实现继承</span></span><br><span class="line">        Person.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'我是中国人'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类 America</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">America</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//借助 call 实现继承</span></span><br><span class="line">        Person.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.am = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'我是美国人'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="keyword">var</span> chinese = <span class="keyword">new</span> Chinese(<span class="string">'成龙'</span>);</span><br><span class="line">    <span class="comment">//调用 父类方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(chinese.sayName());   <span class="comment">//输出 成龙</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> america = <span class="keyword">new</span> America(<span class="string">'America'</span>);</span><br><span class="line">    <span class="comment">//调用 父类方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(america.sayName());   <span class="comment">//输出 America</span></span><br></pre></td></tr></table></figure></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>call 和 apply 最大的好处: 方便我们解耦，对象不需要和方法有任何的耦合性，能使我们写出更好的面相对象程序。<br>大家如果看一些 js 框架底层的话会看到好多地方都有大量用到。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>** 珠峰<br>WEB开发与管理相结合，注重技术与应用结合。现居上海。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#背景&quot;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#定义&quot;&gt;定义&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#apply&quot;&gt;apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#区别&quot;&gt;区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#用法&quot;&gt;用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#高级用法&quot;&gt;高级用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#结束语&quot;&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于作者&quot;&gt;关于作者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://taoqianbao.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://taoqianbao.github.io/tags/javascript/"/>
    
      <category term="call" scheme="http://taoqianbao.github.io/tags/call/"/>
    
      <category term="apply" scheme="http://taoqianbao.github.io/tags/apply/"/>
    
  </entry>
  
</feed>
